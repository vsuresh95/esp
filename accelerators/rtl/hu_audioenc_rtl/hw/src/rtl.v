// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2022.1/981271 Production Release
//  HLS Date:       Thu Feb 10 22:05:20 PST 2022
// 
//  Generated by:   vv15@mojave.cs.illinois.edu
//  Generated date: Fri Aug 25 13:28:30 2023
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Control_run_staller
// ------------------------------------------------------------------


module Control_run_staller (
  clk, rst, run_wen, run_wten, sync1_Push_mioi_wen_comp, sync2_Push_mioi_wen_comp,
      sync3_Pop_mioi_wen_comp, run_flen_unreg, sync1_Push_mioi_wen_comp_pff, run_wten_pff,
      sync2_Push_mioi_wen_comp_pff, sync3_Pop_mioi_wen_comp_pff, run_flen_unreg_pff
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  input sync1_Push_mioi_wen_comp;
  input sync2_Push_mioi_wen_comp;
  input sync3_Pop_mioi_wen_comp;
  input run_flen_unreg;
  input sync1_Push_mioi_wen_comp_pff;
  output run_wten_pff;
  input sync2_Push_mioi_wen_comp_pff;
  input sync3_Pop_mioi_wen_comp_pff;
  input run_flen_unreg_pff;


  // Interconnect Declarations
  reg run_wten_reg;
  wire not_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign not_2_rmff = ~(sync1_Push_mioi_wen_comp & sync2_Push_mioi_wen_comp & sync3_Pop_mioi_wen_comp
      & (~ run_flen_unreg));
  assign run_wen = sync1_Push_mioi_wen_comp_pff & sync2_Push_mioi_wen_comp_pff &
      sync3_Pop_mioi_wen_comp_pff & (~ run_flen_unreg_pff);
  assign run_wten = run_wten_reg;
  assign run_wten_pff = not_2_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten_reg <= 1'b0;
    end
    else begin
      run_wten_reg <= not_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp (
  clk, rst, sync3_Pop_mioi_oswt_unreg, sync3_Pop_mioi_bawt, sync3_Pop_mioi_wen_comp,
      sync3_Pop_mioi_biwt, sync3_Pop_mioi_bdwt, sync3_Pop_mioi_bawt_pff, sync3_Pop_mioi_biwt_pff,
      sync3_Pop_mioi_wen_comp_pff, sync3_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync3_Pop_mioi_oswt_unreg;
  output sync3_Pop_mioi_bawt;
  output sync3_Pop_mioi_wen_comp;
  input sync3_Pop_mioi_biwt;
  input sync3_Pop_mioi_bdwt;
  output sync3_Pop_mioi_bawt_pff;
  input sync3_Pop_mioi_biwt_pff;
  output sync3_Pop_mioi_wen_comp_pff;
  input sync3_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg sync3_Pop_mioi_bcwt;
  wire while_nor_4_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_4_rmff = ~((~(sync3_Pop_mioi_bcwt | sync3_Pop_mioi_biwt)) | sync3_Pop_mioi_bdwt);
  assign sync3_Pop_mioi_bawt = sync3_Pop_mioi_biwt | sync3_Pop_mioi_bcwt;
  assign sync3_Pop_mioi_bawt_pff = sync3_Pop_mioi_biwt_pff | while_nor_4_rmff;
  assign sync3_Pop_mioi_wen_comp = (~ sync3_Pop_mioi_oswt_unreg) | sync3_Pop_mioi_bawt;
  assign sync3_Pop_mioi_wen_comp_pff = (~ sync3_Pop_mioi_oswt_unreg_pff) | sync3_Pop_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      sync3_Pop_mioi_bcwt <= while_nor_4_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync3_Pop_mioi_oswt_unreg, sync3_Pop_mioi_iswt0, sync3_Pop_mioi_ivld_oreg,
      sync3_Pop_mioi_biwt, sync3_Pop_mioi_bdwt, sync3_Pop_mioi_irdy_run_sct, sync3_Pop_mioi_biwt_pff,
      run_wten_pff, sync3_Pop_mioi_iswt0_pff, sync3_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync3_Pop_mioi_oswt_unreg;
  input sync3_Pop_mioi_iswt0;
  input sync3_Pop_mioi_ivld_oreg;
  output sync3_Pop_mioi_biwt;
  output sync3_Pop_mioi_bdwt;
  output sync3_Pop_mioi_irdy_run_sct;
  output sync3_Pop_mioi_biwt_pff;
  input run_wten_pff;
  input sync3_Pop_mioi_iswt0_pff;
  input sync3_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire sync3_Pop_mioi_ogwt;
  reg sync3_Pop_mioi_icwt;
  wire while_and_11_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign sync3_Pop_mioi_bdwt = sync3_Pop_mioi_oswt_unreg & run_wen;
  assign sync3_Pop_mioi_ogwt = ((~ run_wten) & sync3_Pop_mioi_iswt0) | sync3_Pop_mioi_icwt;
  assign while_and_11_rmff = sync3_Pop_mioi_ogwt & (~ sync3_Pop_mioi_biwt);
  assign sync3_Pop_mioi_irdy_run_sct = sync3_Pop_mioi_ogwt;
  assign sync3_Pop_mioi_biwt = sync3_Pop_mioi_ogwt & sync3_Pop_mioi_ivld_oreg;
  assign sync3_Pop_mioi_biwt_pff = (((~ run_wten_pff) & sync3_Pop_mioi_iswt0_pff)
      | while_and_11_rmff) & sync3_Pop_mioi_ivld_oreg_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      sync3_Pop_mioi_icwt <= while_and_11_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp (
  clk, rst, sync2_Push_mioi_oswt_unreg, sync2_Push_mioi_bawt, sync2_Push_mioi_wen_comp,
      sync2_Push_mioi_biwt, sync2_Push_mioi_bdwt, sync2_Push_mioi_bcwt, sync2_Push_mioi_bawt_pff,
      sync2_Push_mioi_biwt_pff, sync2_Push_mioi_bcwt_pff, sync2_Push_mioi_wen_comp_pff,
      sync2_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync2_Push_mioi_oswt_unreg;
  output sync2_Push_mioi_bawt;
  output sync2_Push_mioi_wen_comp;
  input sync2_Push_mioi_biwt;
  input sync2_Push_mioi_bdwt;
  output sync2_Push_mioi_bcwt;
  output sync2_Push_mioi_bawt_pff;
  input sync2_Push_mioi_biwt_pff;
  output sync2_Push_mioi_bcwt_pff;
  output sync2_Push_mioi_wen_comp_pff;
  input sync2_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg sync2_Push_mioi_bcwt_reg;
  wire while_nor_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_2_rmff = ~((~(sync2_Push_mioi_bcwt | sync2_Push_mioi_biwt)) |
      sync2_Push_mioi_bdwt);
  assign sync2_Push_mioi_bawt = sync2_Push_mioi_biwt | sync2_Push_mioi_bcwt;
  assign sync2_Push_mioi_bawt_pff = sync2_Push_mioi_biwt_pff | sync2_Push_mioi_bcwt_pff;
  assign sync2_Push_mioi_bcwt = sync2_Push_mioi_bcwt_reg;
  assign sync2_Push_mioi_bcwt_pff = while_nor_2_rmff;
  assign sync2_Push_mioi_wen_comp = (~ sync2_Push_mioi_oswt_unreg) | sync2_Push_mioi_bawt;
  assign sync2_Push_mioi_wen_comp_pff = (~ sync2_Push_mioi_oswt_unreg_pff) | sync2_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      sync2_Push_mioi_bcwt_reg <= while_nor_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl (
  run_wen, sync2_Push_mioi_oswt_unreg, sync2_Push_mioi_iswt0, sync2_Push_mioi_irdy_oreg,
      sync2_Push_mioi_biwt, sync2_Push_mioi_bdwt, sync2_Push_mioi_bcwt, sync2_Push_mioi_ivld_run_sct,
      sync2_Push_mioi_biwt_pff, sync2_Push_mioi_iswt0_pff, sync2_Push_mioi_bcwt_pff,
      sync2_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input sync2_Push_mioi_oswt_unreg;
  input sync2_Push_mioi_iswt0;
  input sync2_Push_mioi_irdy_oreg;
  output sync2_Push_mioi_biwt;
  output sync2_Push_mioi_bdwt;
  input sync2_Push_mioi_bcwt;
  output sync2_Push_mioi_ivld_run_sct;
  output sync2_Push_mioi_biwt_pff;
  input sync2_Push_mioi_iswt0_pff;
  input sync2_Push_mioi_bcwt_pff;
  input sync2_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync2_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync2_Push_mioi_bdwt = sync2_Push_mioi_oswt_unreg & run_wen;
  assign sync2_Push_mioi_ogwt = sync2_Push_mioi_iswt0 & (~ sync2_Push_mioi_bcwt);
  assign sync2_Push_mioi_ivld_run_sct = sync2_Push_mioi_ogwt;
  assign sync2_Push_mioi_biwt = sync2_Push_mioi_ogwt & sync2_Push_mioi_irdy_oreg;
  assign sync2_Push_mioi_biwt_pff = sync2_Push_mioi_iswt0_pff & (~ sync2_Push_mioi_bcwt_pff)
      & sync2_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_wait_dp
// ------------------------------------------------------------------


module Control_run_wait_dp (
  clk, rst, sync1_Push_mioi_irdy, sync1_Push_mioi_irdy_oreg, sync2_Push_mioi_irdy,
      sync2_Push_mioi_irdy_oreg, sync3_Pop_mioi_ivld, sync3_Pop_mioi_ivld_oreg
);
  input clk;
  input rst;
  input sync1_Push_mioi_irdy;
  output sync1_Push_mioi_irdy_oreg;
  input sync2_Push_mioi_irdy;
  output sync2_Push_mioi_irdy_oreg;
  input sync3_Pop_mioi_ivld;
  output sync3_Pop_mioi_ivld_oreg;


  // Interconnect Declarations
  reg sync1_Push_mioi_irdy_oreg_rneg;
  reg sync2_Push_mioi_irdy_oreg_rneg;
  reg sync3_Pop_mioi_ivld_oreg_rneg;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Push_mioi_irdy_oreg = ~ sync1_Push_mioi_irdy_oreg_rneg;
  assign sync2_Push_mioi_irdy_oreg = ~ sync2_Push_mioi_irdy_oreg_rneg;
  assign sync3_Pop_mioi_ivld_oreg = ~ sync3_Pop_mioi_ivld_oreg_rneg;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Push_mioi_irdy_oreg_rneg <= 1'b0;
      sync2_Push_mioi_irdy_oreg_rneg <= 1'b0;
      sync3_Pop_mioi_ivld_oreg_rneg <= 1'b0;
    end
    else begin
      sync1_Push_mioi_irdy_oreg_rneg <= ~ sync1_Push_mioi_irdy;
      sync2_Push_mioi_irdy_oreg_rneg <= ~ sync2_Push_mioi_irdy;
      sync3_Pop_mioi_ivld_oreg_rneg <= ~ sync3_Pop_mioi_ivld;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp (
  clk, rst, sync1_Push_mioi_oswt_unreg, sync1_Push_mioi_bawt, sync1_Push_mioi_wen_comp,
      sync1_Push_mioi_biwt, sync1_Push_mioi_bdwt, sync1_Push_mioi_bcwt, sync1_Push_mioi_wen_comp_pff,
      sync1_Push_mioi_oswt_unreg_pff, sync1_Push_mioi_bawt_pff, sync1_Push_mioi_biwt_pff,
      sync1_Push_mioi_bcwt_pff
);
  input clk;
  input rst;
  input sync1_Push_mioi_oswt_unreg;
  output sync1_Push_mioi_bawt;
  output sync1_Push_mioi_wen_comp;
  input sync1_Push_mioi_biwt;
  input sync1_Push_mioi_bdwt;
  output sync1_Push_mioi_bcwt;
  output sync1_Push_mioi_wen_comp_pff;
  input sync1_Push_mioi_oswt_unreg_pff;
  output sync1_Push_mioi_bawt_pff;
  input sync1_Push_mioi_biwt_pff;
  output sync1_Push_mioi_bcwt_pff;


  // Interconnect Declarations
  reg sync1_Push_mioi_bcwt_reg;
  wire while_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_rmff = ~((~(sync1_Push_mioi_bcwt | sync1_Push_mioi_biwt)) | sync1_Push_mioi_bdwt);
  assign sync1_Push_mioi_wen_comp = (~ sync1_Push_mioi_oswt_unreg) | sync1_Push_mioi_bawt;
  assign sync1_Push_mioi_wen_comp_pff = (~ sync1_Push_mioi_oswt_unreg_pff) | sync1_Push_mioi_bawt_pff;
  assign sync1_Push_mioi_bawt = sync1_Push_mioi_biwt | sync1_Push_mioi_bcwt;
  assign sync1_Push_mioi_bawt_pff = sync1_Push_mioi_biwt_pff | sync1_Push_mioi_bcwt_pff;
  assign sync1_Push_mioi_bcwt = sync1_Push_mioi_bcwt_reg;
  assign sync1_Push_mioi_bcwt_pff = while_nor_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      sync1_Push_mioi_bcwt_reg <= while_nor_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl (
  run_wen, sync1_Push_mioi_oswt_unreg, sync1_Push_mioi_iswt0, sync1_Push_mioi_irdy_oreg,
      sync1_Push_mioi_biwt, sync1_Push_mioi_bdwt, sync1_Push_mioi_bcwt, sync1_Push_mioi_ivld_run_sct,
      sync1_Push_mioi_biwt_pff, sync1_Push_mioi_iswt0_pff, sync1_Push_mioi_bcwt_pff,
      sync1_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input sync1_Push_mioi_oswt_unreg;
  input sync1_Push_mioi_iswt0;
  input sync1_Push_mioi_irdy_oreg;
  output sync1_Push_mioi_biwt;
  output sync1_Push_mioi_bdwt;
  input sync1_Push_mioi_bcwt;
  output sync1_Push_mioi_ivld_run_sct;
  output sync1_Push_mioi_biwt_pff;
  input sync1_Push_mioi_iswt0_pff;
  input sync1_Push_mioi_bcwt_pff;
  input sync1_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync1_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Push_mioi_bdwt = sync1_Push_mioi_oswt_unreg & run_wen;
  assign sync1_Push_mioi_ogwt = sync1_Push_mioi_iswt0 & (~ sync1_Push_mioi_bcwt);
  assign sync1_Push_mioi_ivld_run_sct = sync1_Push_mioi_ogwt;
  assign sync1_Push_mioi_biwt = sync1_Push_mioi_ogwt & sync1_Push_mioi_irdy_oreg;
  assign sync1_Push_mioi_biwt_pff = sync1_Push_mioi_iswt0_pff & (~ sync1_Push_mioi_bcwt_pff)
      & sync1_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_15_13_64_8192_8192_64_1_gen
// ------------------------------------------------------------------


module InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_15_13_64_8192_8192_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [12:0] radr;
  output we;
  output [63:0] d;
  output [12:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [12:0] radr_d;
  input [12:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module InputBuffer_run_run_fsm (
  clk, rst, run_wen, fsm_output, while_C_2_tr0, while_for_C_1_tr0, while_C_3_tr0,
      while_for_1_C_0_tr0, while_for_1_for_C_1_tr0, while_for_1_for_1_C_0_tr0, while_for_1_for_1_for_C_1_tr0,
      while_for_1_for_1_C_1_tr0, while_for_1_C_1_tr0
);
  input clk;
  input rst;
  input run_wen;
  output [13:0] fsm_output;
  reg [13:0] fsm_output;
  input while_C_2_tr0;
  input while_for_C_1_tr0;
  input while_C_3_tr0;
  input while_for_1_C_0_tr0;
  input while_for_1_for_C_1_tr0;
  input while_for_1_for_1_C_0_tr0;
  input while_for_1_for_1_for_C_1_tr0;
  input while_for_1_for_1_C_1_tr0;
  input while_for_1_C_1_tr0;


  // FSM State Type Declaration for InputBuffer_run_run_fsm_1
  parameter
    while_C_0 = 4'd0,
    while_C_1 = 4'd1,
    while_C_2 = 4'd2,
    while_for_C_0 = 4'd3,
    while_for_C_1 = 4'd4,
    while_C_3 = 4'd5,
    while_for_1_C_0 = 4'd6,
    while_for_1_for_C_0 = 4'd7,
    while_for_1_for_C_1 = 4'd8,
    while_for_1_for_1_C_0 = 4'd9,
    while_for_1_for_1_for_C_0 = 4'd10,
    while_for_1_for_1_for_C_1 = 4'd11,
    while_for_1_for_1_C_1 = 4'd12,
    while_for_1_C_1 = 4'd13;

  reg [3:0] state_var;
  reg [3:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : InputBuffer_run_run_fsm_1
    case (state_var)
      while_C_1 : begin
        fsm_output = 14'b00000000000010;
        state_var_NS = while_C_2;
      end
      while_C_2 : begin
        fsm_output = 14'b00000000000100;
        if ( while_C_2_tr0 ) begin
          state_var_NS = while_C_3;
        end
        else begin
          state_var_NS = while_for_C_0;
        end
      end
      while_for_C_0 : begin
        fsm_output = 14'b00000000001000;
        state_var_NS = while_for_C_1;
      end
      while_for_C_1 : begin
        fsm_output = 14'b00000000010000;
        if ( while_for_C_1_tr0 ) begin
          state_var_NS = while_C_3;
        end
        else begin
          state_var_NS = while_for_C_0;
        end
      end
      while_C_3 : begin
        fsm_output = 14'b00000000100000;
        if ( while_C_3_tr0 ) begin
          state_var_NS = while_C_0;
        end
        else begin
          state_var_NS = while_for_1_C_0;
        end
      end
      while_for_1_C_0 : begin
        fsm_output = 14'b00000001000000;
        if ( while_for_1_C_0_tr0 ) begin
          state_var_NS = while_for_1_for_1_C_0;
        end
        else begin
          state_var_NS = while_for_1_for_C_0;
        end
      end
      while_for_1_for_C_0 : begin
        fsm_output = 14'b00000010000000;
        state_var_NS = while_for_1_for_C_1;
      end
      while_for_1_for_C_1 : begin
        fsm_output = 14'b00000100000000;
        if ( while_for_1_for_C_1_tr0 ) begin
          state_var_NS = while_for_1_for_1_C_0;
        end
        else begin
          state_var_NS = while_for_1_for_C_0;
        end
      end
      while_for_1_for_1_C_0 : begin
        fsm_output = 14'b00001000000000;
        if ( while_for_1_for_1_C_0_tr0 ) begin
          state_var_NS = while_for_1_for_1_C_1;
        end
        else begin
          state_var_NS = while_for_1_for_1_for_C_0;
        end
      end
      while_for_1_for_1_for_C_0 : begin
        fsm_output = 14'b00010000000000;
        state_var_NS = while_for_1_for_1_for_C_1;
      end
      while_for_1_for_1_for_C_1 : begin
        fsm_output = 14'b00100000000000;
        if ( while_for_1_for_1_for_C_1_tr0 ) begin
          state_var_NS = while_for_1_for_1_C_1;
        end
        else begin
          state_var_NS = while_for_1_for_1_for_C_0;
        end
      end
      while_for_1_for_1_C_1 : begin
        fsm_output = 14'b01000000000000;
        if ( while_for_1_for_1_C_1_tr0 ) begin
          state_var_NS = while_for_1_C_1;
        end
        else begin
          state_var_NS = while_for_1_for_1_C_0;
        end
      end
      while_for_1_C_1 : begin
        fsm_output = 14'b10000000000000;
        if ( while_for_1_C_1_tr0 ) begin
          state_var_NS = while_C_0;
        end
        else begin
          state_var_NS = while_for_1_C_0;
        end
      end
      // while_C_0
      default : begin
        fsm_output = 14'b00000000000001;
        state_var_NS = while_C_1;
      end
    endcase
  end

  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      state_var <= while_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_staller
// ------------------------------------------------------------------


module InputBuffer_run_staller (
  run_wen, sync1_Pop_mioi_wen_comp, dma_read_ctrl_Push_mioi_wen_comp, dma_read_chnl_Pop_mioi_wen_comp,
      audio_in_Push_mioi_wen_comp
);
  output run_wen;
  input sync1_Pop_mioi_wen_comp;
  input dma_read_ctrl_Push_mioi_wen_comp;
  input dma_read_chnl_Pop_mioi_wen_comp;
  input audio_in_Push_mioi_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = sync1_Pop_mioi_wen_comp & dma_read_ctrl_Push_mioi_wen_comp & dma_read_chnl_Pop_mioi_wen_comp
      & audio_in_Push_mioi_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_ctrl (
  audio_in_Push_mioi_iswt0, audio_in_Push_mioi_irdy_oreg, audio_in_Push_mioi_biwt
);
  input audio_in_Push_mioi_iswt0;
  input audio_in_Push_mioi_irdy_oreg;
  output audio_in_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign audio_in_Push_mioi_biwt = audio_in_Push_mioi_iswt0 & audio_in_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl (
  dma_read_chnl_Pop_mioi_iswt0, dma_read_chnl_Pop_mioi_ivld_oreg, dma_read_chnl_Pop_mioi_biwt
);
  input dma_read_chnl_Pop_mioi_iswt0;
  input dma_read_chnl_Pop_mioi_ivld_oreg;
  output dma_read_chnl_Pop_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign dma_read_chnl_Pop_mioi_biwt = dma_read_chnl_Pop_mioi_iswt0 & dma_read_chnl_Pop_mioi_ivld_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl (
  dma_read_ctrl_Push_mioi_iswt0, dma_read_ctrl_Push_mioi_irdy_oreg, dma_read_ctrl_Push_mioi_biwt
);
  input dma_read_ctrl_Push_mioi_iswt0;
  input dma_read_ctrl_Push_mioi_irdy_oreg;
  output dma_read_ctrl_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign dma_read_ctrl_Push_mioi_biwt = dma_read_ctrl_Push_mioi_iswt0 & dma_read_ctrl_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl (
  sync1_Pop_mioi_iswt0, sync1_Pop_mioi_ivld_oreg, sync1_Pop_mioi_biwt
);
  input sync1_Pop_mioi_iswt0;
  input sync1_Pop_mioi_ivld_oreg;
  output sync1_Pop_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign sync1_Pop_mioi_biwt = sync1_Pop_mioi_iswt0 & sync1_Pop_mioi_ivld_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_staller
// ------------------------------------------------------------------


module Encoder_run_staller (
  clk, rst, run_wen, run_wten, audio_in_Pop_mioi_wen_comp, audio_out_Push_mioi_wen_comp,
      run_flen_unreg, audio_in_Pop_mioi_wen_comp_pff, run_wten_pff, audio_out_Push_mioi_wen_comp_pff,
      run_flen_unreg_pff
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  input audio_in_Pop_mioi_wen_comp;
  input audio_out_Push_mioi_wen_comp;
  input run_flen_unreg;
  input audio_in_Pop_mioi_wen_comp_pff;
  output run_wten_pff;
  input audio_out_Push_mioi_wen_comp_pff;
  input run_flen_unreg_pff;


  // Interconnect Declarations
  reg run_wten_reg;
  wire not_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign not_2_rmff = ~(audio_in_Pop_mioi_wen_comp & audio_out_Push_mioi_wen_comp
      & (~ run_flen_unreg));
  assign run_wen = audio_in_Pop_mioi_wen_comp_pff & audio_out_Push_mioi_wen_comp_pff
      & (~ run_flen_unreg_pff);
  assign run_wten = run_wten_reg;
  assign run_wten_pff = not_2_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten_reg <= 1'b0;
    end
    else begin
      run_wten_reg <= not_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_dp
// ------------------------------------------------------------------


module Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_dp (
  clk, rst, audio_out_Push_mioi_oswt_unreg, audio_out_Push_mioi_bawt, audio_out_Push_mioi_wen_comp,
      audio_out_Push_mioi_biwt, audio_out_Push_mioi_bdwt, audio_out_Push_mioi_bcwt,
      audio_out_Push_mioi_bawt_pff, audio_out_Push_mioi_biwt_pff, audio_out_Push_mioi_bcwt_pff,
      audio_out_Push_mioi_wen_comp_pff, audio_out_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input audio_out_Push_mioi_oswt_unreg;
  output audio_out_Push_mioi_bawt;
  output audio_out_Push_mioi_wen_comp;
  input audio_out_Push_mioi_biwt;
  input audio_out_Push_mioi_bdwt;
  output audio_out_Push_mioi_bcwt;
  output audio_out_Push_mioi_bawt_pff;
  input audio_out_Push_mioi_biwt_pff;
  output audio_out_Push_mioi_bcwt_pff;
  output audio_out_Push_mioi_wen_comp_pff;
  input audio_out_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg audio_out_Push_mioi_bcwt_reg;
  wire while_if_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_if_nor_rmff = ~((~(audio_out_Push_mioi_bcwt | audio_out_Push_mioi_biwt))
      | audio_out_Push_mioi_bdwt);
  assign audio_out_Push_mioi_bawt = audio_out_Push_mioi_biwt | audio_out_Push_mioi_bcwt;
  assign audio_out_Push_mioi_bawt_pff = audio_out_Push_mioi_biwt_pff | audio_out_Push_mioi_bcwt_pff;
  assign audio_out_Push_mioi_bcwt = audio_out_Push_mioi_bcwt_reg;
  assign audio_out_Push_mioi_bcwt_pff = while_if_nor_rmff;
  assign audio_out_Push_mioi_wen_comp = (~ audio_out_Push_mioi_oswt_unreg) | audio_out_Push_mioi_bawt;
  assign audio_out_Push_mioi_wen_comp_pff = (~ audio_out_Push_mioi_oswt_unreg_pff)
      | audio_out_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_out_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      audio_out_Push_mioi_bcwt_reg <= while_if_nor_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_ctrl (
  run_wen, audio_out_Push_mioi_oswt_unreg, audio_out_Push_mioi_iswt0, audio_out_Push_mioi_irdy_oreg,
      audio_out_Push_mioi_biwt, audio_out_Push_mioi_bdwt, audio_out_Push_mioi_bcwt,
      audio_out_Push_mioi_ivld_run_sct, audio_out_Push_mioi_biwt_pff, audio_out_Push_mioi_iswt0_pff,
      audio_out_Push_mioi_bcwt_pff, audio_out_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input audio_out_Push_mioi_oswt_unreg;
  input audio_out_Push_mioi_iswt0;
  input audio_out_Push_mioi_irdy_oreg;
  output audio_out_Push_mioi_biwt;
  output audio_out_Push_mioi_bdwt;
  input audio_out_Push_mioi_bcwt;
  output audio_out_Push_mioi_ivld_run_sct;
  output audio_out_Push_mioi_biwt_pff;
  input audio_out_Push_mioi_iswt0_pff;
  input audio_out_Push_mioi_bcwt_pff;
  input audio_out_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire audio_out_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign audio_out_Push_mioi_bdwt = audio_out_Push_mioi_oswt_unreg & run_wen;
  assign audio_out_Push_mioi_ogwt = audio_out_Push_mioi_iswt0 & (~ audio_out_Push_mioi_bcwt);
  assign audio_out_Push_mioi_ivld_run_sct = audio_out_Push_mioi_ogwt;
  assign audio_out_Push_mioi_biwt = audio_out_Push_mioi_ogwt & audio_out_Push_mioi_irdy_oreg;
  assign audio_out_Push_mioi_biwt_pff = audio_out_Push_mioi_iswt0_pff & (~ audio_out_Push_mioi_bcwt_pff)
      & audio_out_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_wait_dp
// ------------------------------------------------------------------


module Encoder_run_wait_dp (
  clk, rst, audio_in_Pop_mioi_ivld, audio_in_Pop_mioi_ivld_oreg, audio_out_Push_mioi_irdy,
      audio_out_Push_mioi_irdy_oreg
);
  input clk;
  input rst;
  input audio_in_Pop_mioi_ivld;
  output audio_in_Pop_mioi_ivld_oreg;
  input audio_out_Push_mioi_irdy;
  output audio_out_Push_mioi_irdy_oreg;


  // Interconnect Declarations
  reg audio_in_Pop_mioi_ivld_oreg_rneg;
  reg audio_out_Push_mioi_irdy_oreg_rneg;


  // Interconnect Declarations for Component Instantiations 
  assign audio_out_Push_mioi_irdy_oreg = ~ audio_out_Push_mioi_irdy_oreg_rneg;
  assign audio_in_Pop_mioi_ivld_oreg = ~ audio_in_Pop_mioi_ivld_oreg_rneg;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Pop_mioi_ivld_oreg_rneg <= 1'b0;
      audio_out_Push_mioi_irdy_oreg_rneg <= 1'b0;
    end
    else begin
      audio_in_Pop_mioi_ivld_oreg_rneg <= ~ audio_in_Pop_mioi_ivld;
      audio_out_Push_mioi_irdy_oreg_rneg <= ~ audio_out_Push_mioi_irdy;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_dp
// ------------------------------------------------------------------


module Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_dp (
  clk, rst, audio_in_Pop_mioi_oswt_unreg, audio_in_Pop_mioi_bawt, audio_in_Pop_mioi_wen_comp,
      audio_in_Pop_mioi_idat_mxwt, audio_in_Pop_mioi_biwt, audio_in_Pop_mioi_bdwt,
      audio_in_Pop_mioi_idat, audio_in_Pop_mioi_wen_comp_pff, audio_in_Pop_mioi_oswt_unreg_pff,
      audio_in_Pop_mioi_bawt_pff, audio_in_Pop_mioi_biwt_pff
);
  input clk;
  input rst;
  input audio_in_Pop_mioi_oswt_unreg;
  output audio_in_Pop_mioi_bawt;
  output audio_in_Pop_mioi_wen_comp;
  output [15:0] audio_in_Pop_mioi_idat_mxwt;
  input audio_in_Pop_mioi_biwt;
  input audio_in_Pop_mioi_bdwt;
  input [15:0] audio_in_Pop_mioi_idat;
  output audio_in_Pop_mioi_wen_comp_pff;
  input audio_in_Pop_mioi_oswt_unreg_pff;
  output audio_in_Pop_mioi_bawt_pff;
  input audio_in_Pop_mioi_biwt_pff;


  // Interconnect Declarations
  reg audio_in_Pop_mioi_bcwt;
  reg [15:0] audio_in_Pop_mioi_idat_bfwt;
  wire while_audio_in_reg_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_audio_in_reg_nor_rmff = ~((~(audio_in_Pop_mioi_bcwt | audio_in_Pop_mioi_biwt))
      | audio_in_Pop_mioi_bdwt);
  assign audio_in_Pop_mioi_idat_mxwt = MUX_v_16_2_2(audio_in_Pop_mioi_idat, audio_in_Pop_mioi_idat_bfwt,
      audio_in_Pop_mioi_bcwt);
  assign audio_in_Pop_mioi_wen_comp = (~ audio_in_Pop_mioi_oswt_unreg) | audio_in_Pop_mioi_bawt;
  assign audio_in_Pop_mioi_wen_comp_pff = (~ audio_in_Pop_mioi_oswt_unreg_pff) |
      audio_in_Pop_mioi_bawt_pff;
  assign audio_in_Pop_mioi_bawt = audio_in_Pop_mioi_biwt | audio_in_Pop_mioi_bcwt;
  assign audio_in_Pop_mioi_bawt_pff = audio_in_Pop_mioi_biwt_pff | while_audio_in_reg_nor_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      audio_in_Pop_mioi_bcwt <= while_audio_in_reg_nor_rmff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Pop_mioi_idat_bfwt <= 16'b0000000000000000;
    end
    else if ( audio_in_Pop_mioi_biwt ) begin
      audio_in_Pop_mioi_idat_bfwt <= audio_in_Pop_mioi_idat;
    end
  end

  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, audio_in_Pop_mioi_oswt_unreg, audio_in_Pop_mioi_iswt0,
      audio_in_Pop_mioi_ivld_oreg, audio_in_Pop_mioi_biwt, audio_in_Pop_mioi_bdwt,
      audio_in_Pop_mioi_irdy_run_sct, audio_in_Pop_mioi_biwt_pff, run_wten_pff, audio_in_Pop_mioi_iswt0_pff,
      audio_in_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input audio_in_Pop_mioi_oswt_unreg;
  input audio_in_Pop_mioi_iswt0;
  input audio_in_Pop_mioi_ivld_oreg;
  output audio_in_Pop_mioi_biwt;
  output audio_in_Pop_mioi_bdwt;
  output audio_in_Pop_mioi_irdy_run_sct;
  output audio_in_Pop_mioi_biwt_pff;
  input run_wten_pff;
  input audio_in_Pop_mioi_iswt0_pff;
  input audio_in_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire audio_in_Pop_mioi_ogwt;
  reg audio_in_Pop_mioi_icwt;
  wire while_audio_in_reg_and_3_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign audio_in_Pop_mioi_bdwt = audio_in_Pop_mioi_oswt_unreg & run_wen;
  assign audio_in_Pop_mioi_ogwt = ((~ run_wten) & audio_in_Pop_mioi_iswt0) | audio_in_Pop_mioi_icwt;
  assign while_audio_in_reg_and_3_rmff = audio_in_Pop_mioi_ogwt & (~ audio_in_Pop_mioi_biwt);
  assign audio_in_Pop_mioi_irdy_run_sct = audio_in_Pop_mioi_ogwt;
  assign audio_in_Pop_mioi_biwt = audio_in_Pop_mioi_ogwt & audio_in_Pop_mioi_ivld_oreg;
  assign audio_in_Pop_mioi_biwt_pff = (((~ run_wten_pff) & audio_in_Pop_mioi_iswt0_pff)
      | while_audio_in_reg_and_3_rmff) & audio_in_Pop_mioi_ivld_oreg_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      audio_in_Pop_mioi_icwt <= while_audio_in_reg_and_3_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
// ------------------------------------------------------------------


module OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [13:0] radr;
  output we;
  output [63:0] d;
  output [13:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [13:0] radr_d;
  input [13:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module OutputBuffer_run_run_fsm (
  clk, rst, run_wen, fsm_output, while_C_1_tr0, while_for_for_C_1_tr0, while_for_C_1_tr0,
      while_C_2_tr0, while_for_1_C_2_tr0
);
  input clk;
  input rst;
  input run_wen;
  output [10:0] fsm_output;
  reg [10:0] fsm_output;
  input while_C_1_tr0;
  input while_for_for_C_1_tr0;
  input while_for_C_1_tr0;
  input while_C_2_tr0;
  input while_for_1_C_2_tr0;


  // FSM State Type Declaration for OutputBuffer_run_run_fsm_1
  parameter
    while_C_0 = 4'd0,
    while_C_1 = 4'd1,
    while_for_C_0 = 4'd2,
    while_for_for_C_0 = 4'd3,
    while_for_for_C_1 = 4'd4,
    while_for_C_1 = 4'd5,
    while_C_2 = 4'd6,
    while_for_1_C_0 = 4'd7,
    while_for_1_C_1 = 4'd8,
    while_for_1_C_2 = 4'd9,
    while_C_3 = 4'd10;

  reg [3:0] state_var;
  reg [3:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : OutputBuffer_run_run_fsm_1
    case (state_var)
      while_C_1 : begin
        fsm_output = 11'b00000000010;
        if ( while_C_1_tr0 ) begin
          state_var_NS = while_C_2;
        end
        else begin
          state_var_NS = while_for_C_0;
        end
      end
      while_for_C_0 : begin
        fsm_output = 11'b00000000100;
        state_var_NS = while_for_for_C_0;
      end
      while_for_for_C_0 : begin
        fsm_output = 11'b00000001000;
        state_var_NS = while_for_for_C_1;
      end
      while_for_for_C_1 : begin
        fsm_output = 11'b00000010000;
        if ( while_for_for_C_1_tr0 ) begin
          state_var_NS = while_for_C_1;
        end
        else begin
          state_var_NS = while_for_for_C_0;
        end
      end
      while_for_C_1 : begin
        fsm_output = 11'b00000100000;
        if ( while_for_C_1_tr0 ) begin
          state_var_NS = while_C_2;
        end
        else begin
          state_var_NS = while_for_C_0;
        end
      end
      while_C_2 : begin
        fsm_output = 11'b00001000000;
        if ( while_C_2_tr0 ) begin
          state_var_NS = while_C_3;
        end
        else begin
          state_var_NS = while_for_1_C_0;
        end
      end
      while_for_1_C_0 : begin
        fsm_output = 11'b00010000000;
        state_var_NS = while_for_1_C_1;
      end
      while_for_1_C_1 : begin
        fsm_output = 11'b00100000000;
        state_var_NS = while_for_1_C_2;
      end
      while_for_1_C_2 : begin
        fsm_output = 11'b01000000000;
        if ( while_for_1_C_2_tr0 ) begin
          state_var_NS = while_C_3;
        end
        else begin
          state_var_NS = while_for_1_C_0;
        end
      end
      while_C_3 : begin
        fsm_output = 11'b10000000000;
        state_var_NS = while_C_0;
      end
      // while_C_0
      default : begin
        fsm_output = 11'b00000000001;
        state_var_NS = while_C_1;
      end
    endcase
  end

  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      state_var <= while_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_staller
// ------------------------------------------------------------------


module OutputBuffer_run_staller (
  run_wen, sync2_Pop_mioi_wen_comp, audio_out_Pop_mioi_wen_comp, dma_write_ctrl_Push_mioi_wen_comp,
      dma_write_chnl_Push_mioi_wen_comp, sync3_Push_mioi_wen_comp
);
  output run_wen;
  input sync2_Pop_mioi_wen_comp;
  input audio_out_Pop_mioi_wen_comp;
  input dma_write_ctrl_Push_mioi_wen_comp;
  input dma_write_chnl_Push_mioi_wen_comp;
  input sync3_Push_mioi_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = sync2_Pop_mioi_wen_comp & audio_out_Pop_mioi_wen_comp & dma_write_ctrl_Push_mioi_wen_comp
      & dma_write_chnl_Push_mioi_wen_comp & sync3_Push_mioi_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl (
  sync3_Push_mioi_iswt0, sync3_Push_mioi_irdy_oreg, sync3_Push_mioi_biwt
);
  input sync3_Push_mioi_iswt0;
  input sync3_Push_mioi_irdy_oreg;
  output sync3_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign sync3_Push_mioi_biwt = sync3_Push_mioi_iswt0 & sync3_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl
    (
  dma_write_chnl_Push_mioi_iswt0, dma_write_chnl_Push_mioi_irdy_oreg, dma_write_chnl_Push_mioi_biwt
);
  input dma_write_chnl_Push_mioi_iswt0;
  input dma_write_chnl_Push_mioi_irdy_oreg;
  output dma_write_chnl_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign dma_write_chnl_Push_mioi_biwt = dma_write_chnl_Push_mioi_iswt0 & dma_write_chnl_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl
    (
  dma_write_ctrl_Push_mioi_iswt0, dma_write_ctrl_Push_mioi_irdy_oreg, dma_write_ctrl_Push_mioi_biwt
);
  input dma_write_ctrl_Push_mioi_iswt0;
  input dma_write_ctrl_Push_mioi_irdy_oreg;
  output dma_write_ctrl_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign dma_write_ctrl_Push_mioi_biwt = dma_write_ctrl_Push_mioi_iswt0 & dma_write_ctrl_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_ctrl (
  audio_out_Pop_mioi_iswt0, audio_out_Pop_mioi_ivld_oreg, audio_out_Pop_mioi_biwt
);
  input audio_out_Pop_mioi_iswt0;
  input audio_out_Pop_mioi_ivld_oreg;
  output audio_out_Pop_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign audio_out_Pop_mioi_biwt = audio_out_Pop_mioi_iswt0 & audio_out_Pop_mioi_ivld_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl (
  sync2_Pop_mioi_iswt0, sync2_Pop_mioi_ivld_oreg, sync2_Pop_mioi_biwt
);
  input sync2_Pop_mioi_iswt0;
  input sync2_Pop_mioi_ivld_oreg;
  output sync2_Pop_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign sync2_Pop_mioi_biwt = sync2_Pop_mioi_iswt0 & sync2_Pop_mioi_ivld_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi (
  clk, rst, sync3_val, sync3_rdy, sync3_msg, run_wen, run_wten, sync3_Pop_mioi_oswt_unreg,
      sync3_Pop_mioi_bawt, sync3_Pop_mioi_iswt0, sync3_Pop_mioi_wen_comp, sync3_Pop_mioi_ivld,
      sync3_Pop_mioi_ivld_oreg, sync3_Pop_mioi_bawt_pff, run_wten_pff, sync3_Pop_mioi_iswt0_pff,
      sync3_Pop_mioi_ivld_oreg_pff, sync3_Pop_mioi_wen_comp_pff, sync3_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;
  input run_wen;
  input run_wten;
  input sync3_Pop_mioi_oswt_unreg;
  output sync3_Pop_mioi_bawt;
  input sync3_Pop_mioi_iswt0;
  output sync3_Pop_mioi_wen_comp;
  output sync3_Pop_mioi_ivld;
  input sync3_Pop_mioi_ivld_oreg;
  output sync3_Pop_mioi_bawt_pff;
  input run_wten_pff;
  input sync3_Pop_mioi_iswt0_pff;
  input sync3_Pop_mioi_ivld_oreg_pff;
  output sync3_Pop_mioi_wen_comp_pff;
  input sync3_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire sync3_Pop_mioi_biwt;
  wire sync3_Pop_mioi_bdwt;
  wire sync3_Pop_mioi_idat;
  wire sync3_Pop_mioi_irdy_run_sct;
  wire sync3_Pop_mioi_bawt_reg;
  wire sync3_Pop_mioi_bawt_iff;
  wire sync3_Pop_mioi_biwt_iff;
  wire sync3_Pop_mioi_wen_comp_reg;
  wire sync3_Pop_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd5),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync3_Pop_mioi (
      .vld(sync3_val),
      .rdy(sync3_rdy),
      .dat(sync3_msg),
      .idat(sync3_Pop_mioi_idat),
      .irdy(sync3_Pop_mioi_irdy_run_sct),
      .ivld(sync3_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Pop_mioi_oswt_unreg(sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_iswt0(sync3_Pop_mioi_iswt0),
      .sync3_Pop_mioi_ivld_oreg(sync3_Pop_mioi_ivld_oreg),
      .sync3_Pop_mioi_biwt(sync3_Pop_mioi_biwt),
      .sync3_Pop_mioi_bdwt(sync3_Pop_mioi_bdwt),
      .sync3_Pop_mioi_irdy_run_sct(sync3_Pop_mioi_irdy_run_sct),
      .sync3_Pop_mioi_biwt_pff(sync3_Pop_mioi_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .sync3_Pop_mioi_iswt0_pff(sync3_Pop_mioi_iswt0_pff),
      .sync3_Pop_mioi_ivld_oreg_pff(sync3_Pop_mioi_ivld_oreg_pff)
    );
  Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync3_Pop_mioi_oswt_unreg(sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_bawt(sync3_Pop_mioi_bawt_reg),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp_reg),
      .sync3_Pop_mioi_biwt(sync3_Pop_mioi_biwt),
      .sync3_Pop_mioi_bdwt(sync3_Pop_mioi_bdwt),
      .sync3_Pop_mioi_bawt_pff(sync3_Pop_mioi_bawt_iff),
      .sync3_Pop_mioi_biwt_pff(sync3_Pop_mioi_biwt_iff),
      .sync3_Pop_mioi_wen_comp_pff(sync3_Pop_mioi_wen_comp_iff),
      .sync3_Pop_mioi_oswt_unreg_pff(sync3_Pop_mioi_oswt_unreg_pff)
    );
  assign sync3_Pop_mioi_bawt = sync3_Pop_mioi_bawt_reg;
  assign sync3_Pop_mioi_bawt_pff = sync3_Pop_mioi_bawt_iff;
  assign sync3_Pop_mioi_wen_comp = sync3_Pop_mioi_wen_comp_reg;
  assign sync3_Pop_mioi_wen_comp_pff = sync3_Pop_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi (
  clk, rst, sync2_val, sync2_rdy, sync2_msg, run_wen, sync2_Push_mioi_oswt_unreg,
      sync2_Push_mioi_bawt, sync2_Push_mioi_iswt0, sync2_Push_mioi_wen_comp, sync2_Push_mioi_irdy,
      sync2_Push_mioi_irdy_oreg, sync2_Push_mioi_bawt_pff, sync2_Push_mioi_iswt0_pff,
      sync2_Push_mioi_irdy_oreg_pff, sync2_Push_mioi_wen_comp_pff, sync2_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input run_wen;
  input sync2_Push_mioi_oswt_unreg;
  output sync2_Push_mioi_bawt;
  input sync2_Push_mioi_iswt0;
  output sync2_Push_mioi_wen_comp;
  output sync2_Push_mioi_irdy;
  input sync2_Push_mioi_irdy_oreg;
  output sync2_Push_mioi_bawt_pff;
  input sync2_Push_mioi_iswt0_pff;
  input sync2_Push_mioi_irdy_oreg_pff;
  output sync2_Push_mioi_wen_comp_pff;
  input sync2_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire sync2_Push_mioi_biwt;
  wire sync2_Push_mioi_bdwt;
  wire sync2_Push_mioi_bcwt;
  wire sync2_Push_mioi_ivld_run_sct;
  wire sync2_Push_mioi_bawt_reg;
  wire sync2_Push_mioi_bawt_iff;
  wire sync2_Push_mioi_biwt_iff;
  wire sync2_Push_mioi_bcwt_iff;
  wire sync2_Push_mioi_wen_comp_reg;
  wire sync2_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd4),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync2_Push_mioi (
      .vld(sync2_val),
      .rdy(sync2_rdy),
      .dat(sync2_msg),
      .idat(1'b1),
      .irdy(sync2_Push_mioi_irdy),
      .ivld(sync2_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .sync2_Push_mioi_oswt_unreg(sync2_Push_mioi_oswt_unreg),
      .sync2_Push_mioi_iswt0(sync2_Push_mioi_iswt0),
      .sync2_Push_mioi_irdy_oreg(sync2_Push_mioi_irdy_oreg),
      .sync2_Push_mioi_biwt(sync2_Push_mioi_biwt),
      .sync2_Push_mioi_bdwt(sync2_Push_mioi_bdwt),
      .sync2_Push_mioi_bcwt(sync2_Push_mioi_bcwt),
      .sync2_Push_mioi_ivld_run_sct(sync2_Push_mioi_ivld_run_sct),
      .sync2_Push_mioi_biwt_pff(sync2_Push_mioi_biwt_iff),
      .sync2_Push_mioi_iswt0_pff(sync2_Push_mioi_iswt0_pff),
      .sync2_Push_mioi_bcwt_pff(sync2_Push_mioi_bcwt_iff),
      .sync2_Push_mioi_irdy_oreg_pff(sync2_Push_mioi_irdy_oreg_pff)
    );
  Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync2_Push_mioi_oswt_unreg(sync2_Push_mioi_oswt_unreg),
      .sync2_Push_mioi_bawt(sync2_Push_mioi_bawt_reg),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp_reg),
      .sync2_Push_mioi_biwt(sync2_Push_mioi_biwt),
      .sync2_Push_mioi_bdwt(sync2_Push_mioi_bdwt),
      .sync2_Push_mioi_bcwt(sync2_Push_mioi_bcwt),
      .sync2_Push_mioi_bawt_pff(sync2_Push_mioi_bawt_iff),
      .sync2_Push_mioi_biwt_pff(sync2_Push_mioi_biwt_iff),
      .sync2_Push_mioi_bcwt_pff(sync2_Push_mioi_bcwt_iff),
      .sync2_Push_mioi_wen_comp_pff(sync2_Push_mioi_wen_comp_iff),
      .sync2_Push_mioi_oswt_unreg_pff(sync2_Push_mioi_oswt_unreg_pff)
    );
  assign sync2_Push_mioi_bawt = sync2_Push_mioi_bawt_reg;
  assign sync2_Push_mioi_bawt_pff = sync2_Push_mioi_bawt_iff;
  assign sync2_Push_mioi_wen_comp = sync2_Push_mioi_wen_comp_reg;
  assign sync2_Push_mioi_wen_comp_pff = sync2_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi (
  clk, rst, sync1_val, sync1_rdy, sync1_msg, run_wen, sync1_Push_mioi_oswt_unreg,
      sync1_Push_mioi_bawt, sync1_Push_mioi_iswt0, sync1_Push_mioi_wen_comp, sync1_Push_mioi_irdy,
      sync1_Push_mioi_irdy_oreg, sync1_Push_mioi_wen_comp_pff, sync1_Push_mioi_oswt_unreg_pff,
      sync1_Push_mioi_bawt_pff, sync1_Push_mioi_iswt0_pff, sync1_Push_mioi_irdy_oreg_pff
);
  input clk;
  input rst;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  input run_wen;
  input sync1_Push_mioi_oswt_unreg;
  output sync1_Push_mioi_bawt;
  input sync1_Push_mioi_iswt0;
  output sync1_Push_mioi_wen_comp;
  output sync1_Push_mioi_irdy;
  input sync1_Push_mioi_irdy_oreg;
  output sync1_Push_mioi_wen_comp_pff;
  input sync1_Push_mioi_oswt_unreg_pff;
  output sync1_Push_mioi_bawt_pff;
  input sync1_Push_mioi_iswt0_pff;
  input sync1_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync1_Push_mioi_biwt;
  wire sync1_Push_mioi_bdwt;
  wire sync1_Push_mioi_bcwt;
  wire sync1_Push_mioi_ivld_run_sct;
  wire sync1_Push_mioi_wen_comp_reg;
  wire sync1_Push_mioi_wen_comp_iff;
  wire sync1_Push_mioi_bawt_reg;
  wire sync1_Push_mioi_bawt_iff;
  wire sync1_Push_mioi_biwt_iff;
  wire sync1_Push_mioi_bcwt_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd3),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync1_Push_mioi (
      .vld(sync1_val),
      .rdy(sync1_rdy),
      .dat(sync1_msg),
      .idat(1'b1),
      .irdy(sync1_Push_mioi_irdy),
      .ivld(sync1_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .sync1_Push_mioi_oswt_unreg(sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_iswt0(sync1_Push_mioi_iswt0),
      .sync1_Push_mioi_irdy_oreg(sync1_Push_mioi_irdy_oreg),
      .sync1_Push_mioi_biwt(sync1_Push_mioi_biwt),
      .sync1_Push_mioi_bdwt(sync1_Push_mioi_bdwt),
      .sync1_Push_mioi_bcwt(sync1_Push_mioi_bcwt),
      .sync1_Push_mioi_ivld_run_sct(sync1_Push_mioi_ivld_run_sct),
      .sync1_Push_mioi_biwt_pff(sync1_Push_mioi_biwt_iff),
      .sync1_Push_mioi_iswt0_pff(sync1_Push_mioi_iswt0_pff),
      .sync1_Push_mioi_bcwt_pff(sync1_Push_mioi_bcwt_iff),
      .sync1_Push_mioi_irdy_oreg_pff(sync1_Push_mioi_irdy_oreg_pff)
    );
  Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync1_Push_mioi_oswt_unreg(sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_bawt(sync1_Push_mioi_bawt_reg),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp_reg),
      .sync1_Push_mioi_biwt(sync1_Push_mioi_biwt),
      .sync1_Push_mioi_bdwt(sync1_Push_mioi_bdwt),
      .sync1_Push_mioi_bcwt(sync1_Push_mioi_bcwt),
      .sync1_Push_mioi_wen_comp_pff(sync1_Push_mioi_wen_comp_iff),
      .sync1_Push_mioi_oswt_unreg_pff(sync1_Push_mioi_oswt_unreg_pff),
      .sync1_Push_mioi_bawt_pff(sync1_Push_mioi_bawt_iff),
      .sync1_Push_mioi_biwt_pff(sync1_Push_mioi_biwt_iff),
      .sync1_Push_mioi_bcwt_pff(sync1_Push_mioi_bcwt_iff)
    );
  assign sync1_Push_mioi_wen_comp = sync1_Push_mioi_wen_comp_reg;
  assign sync1_Push_mioi_wen_comp_pff = sync1_Push_mioi_wen_comp_iff;
  assign sync1_Push_mioi_bawt = sync1_Push_mioi_bawt_reg;
  assign sync1_Push_mioi_bawt_pff = sync1_Push_mioi_bawt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_audio_in_Push_mioi
// ------------------------------------------------------------------


module InputBuffer_run_audio_in_Push_mioi (
  clk, rst, audio_in_val, audio_in_rdy, audio_in_msg, audio_in_Push_mioi_oswt, audio_in_Push_mioi_wen_comp,
      audio_in_Push_mioi_idat, audio_in_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output audio_in_val;
  input audio_in_rdy;
  output [15:0] audio_in_msg;
  input audio_in_Push_mioi_oswt;
  output audio_in_Push_mioi_wen_comp;
  input [15:0] audio_in_Push_mioi_idat;
  input audio_in_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire audio_in_Push_mioi_biwt;
  wire audio_in_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd14),
  .width(32'sd16),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) audio_in_Push_mioi (
      .vld(audio_in_val),
      .rdy(audio_in_rdy),
      .dat(audio_in_msg),
      .idat(audio_in_Push_mioi_idat),
      .irdy(audio_in_Push_mioi_irdy),
      .ivld(audio_in_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_ctrl InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_ctrl_inst
      (
      .audio_in_Push_mioi_iswt0(audio_in_Push_mioi_oswt_pff),
      .audio_in_Push_mioi_irdy_oreg(audio_in_Push_mioi_irdy),
      .audio_in_Push_mioi_biwt(audio_in_Push_mioi_biwt)
    );
  assign audio_in_Push_mioi_wen_comp = (~ audio_in_Push_mioi_oswt_pff) | audio_in_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi (
  clk, rst, dma_read_chnl_val, dma_read_chnl_rdy, dma_read_chnl_msg, dma_read_chnl_Pop_mioi_oswt,
      dma_read_chnl_Pop_mioi_wen_comp, dma_read_chnl_Pop_mioi_idat_mxwt, dma_read_chnl_Pop_mioi_oswt_pff
);
  input clk;
  input rst;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  input dma_read_chnl_Pop_mioi_oswt;
  output dma_read_chnl_Pop_mioi_wen_comp;
  output [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;
  input dma_read_chnl_Pop_mioi_oswt_pff;


  // Interconnect Declarations
  wire dma_read_chnl_Pop_mioi_biwt;
  wire [63:0] dma_read_chnl_Pop_mioi_idat;
  wire dma_read_chnl_Pop_mioi_ivld;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd13),
  .width(32'sd64),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_read_chnl_Pop_mioi (
      .vld(dma_read_chnl_val),
      .rdy(dma_read_chnl_rdy),
      .dat(dma_read_chnl_msg),
      .idat(dma_read_chnl_Pop_mioi_idat),
      .irdy(dma_read_chnl_Pop_mioi_oswt),
      .ivld(dma_read_chnl_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl_inst
      (
      .dma_read_chnl_Pop_mioi_iswt0(dma_read_chnl_Pop_mioi_oswt_pff),
      .dma_read_chnl_Pop_mioi_ivld_oreg(dma_read_chnl_Pop_mioi_ivld),
      .dma_read_chnl_Pop_mioi_biwt(dma_read_chnl_Pop_mioi_biwt)
    );
  assign dma_read_chnl_Pop_mioi_idat_mxwt = dma_read_chnl_Pop_mioi_idat;
  assign dma_read_chnl_Pop_mioi_wen_comp = (~ dma_read_chnl_Pop_mioi_oswt_pff) |
      dma_read_chnl_Pop_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi (
  clk, rst, dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_ctrl_Push_mioi_oswt,
      dma_read_ctrl_Push_mioi_wen_comp, dma_read_ctrl_Push_mioi_idat, dma_read_ctrl_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_ctrl_Push_mioi_oswt;
  output dma_read_ctrl_Push_mioi_wen_comp;
  input [66:0] dma_read_ctrl_Push_mioi_idat;
  input dma_read_ctrl_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire dma_read_ctrl_Push_mioi_biwt;
  wire dma_read_ctrl_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_dma_read_ctrl_Push_mioi_idat;
  assign nl_dma_read_ctrl_Push_mioi_idat = {3'b011 , (dma_read_ctrl_Push_mioi_idat[63:0])};
  ccs_out_buf_wait_v5 #(.rscid(32'sd12),
  .width(32'sd67),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_read_ctrl_Push_mioi (
      .vld(dma_read_ctrl_val),
      .rdy(dma_read_ctrl_rdy),
      .dat(dma_read_ctrl_msg),
      .idat(nl_dma_read_ctrl_Push_mioi_idat[66:0]),
      .irdy(dma_read_ctrl_Push_mioi_irdy),
      .ivld(dma_read_ctrl_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl_inst
      (
      .dma_read_ctrl_Push_mioi_iswt0(dma_read_ctrl_Push_mioi_oswt_pff),
      .dma_read_ctrl_Push_mioi_irdy_oreg(dma_read_ctrl_Push_mioi_irdy),
      .dma_read_ctrl_Push_mioi_biwt(dma_read_ctrl_Push_mioi_biwt)
    );
  assign dma_read_ctrl_Push_mioi_wen_comp = (~ dma_read_ctrl_Push_mioi_oswt_pff)
      | dma_read_ctrl_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi (
  clk, rst, sync1_val, sync1_rdy, sync1_msg, sync1_Pop_mioi_oswt, sync1_Pop_mioi_wen_comp,
      sync1_Pop_mioi_oswt_pff
);
  input clk;
  input rst;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  input sync1_Pop_mioi_oswt;
  output sync1_Pop_mioi_wen_comp;
  input sync1_Pop_mioi_oswt_pff;


  // Interconnect Declarations
  wire sync1_Pop_mioi_biwt;
  wire sync1_Pop_mioi_idat;
  wire sync1_Pop_mioi_ivld;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd11),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync1_Pop_mioi (
      .vld(sync1_val),
      .rdy(sync1_rdy),
      .dat(sync1_msg),
      .idat(sync1_Pop_mioi_idat),
      .irdy(sync1_Pop_mioi_oswt),
      .ivld(sync1_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl_inst
      (
      .sync1_Pop_mioi_iswt0(sync1_Pop_mioi_oswt_pff),
      .sync1_Pop_mioi_ivld_oreg(sync1_Pop_mioi_ivld),
      .sync1_Pop_mioi_biwt(sync1_Pop_mioi_biwt)
    );
  assign sync1_Pop_mioi_wen_comp = (~ sync1_Pop_mioi_oswt_pff) | sync1_Pop_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_out_Push_mioi
// ------------------------------------------------------------------


module Encoder_run_audio_out_Push_mioi (
  clk, rst, audio_out_val, audio_out_rdy, audio_out_msg, run_wen, audio_out_Push_mioi_oswt_unreg,
      audio_out_Push_mioi_bawt, audio_out_Push_mioi_iswt0, audio_out_Push_mioi_wen_comp,
      audio_out_Push_mioi_idat, audio_out_Push_mioi_irdy, audio_out_Push_mioi_irdy_oreg,
      audio_out_Push_mioi_bawt_pff, audio_out_Push_mioi_iswt0_pff, audio_out_Push_mioi_irdy_oreg_pff,
      audio_out_Push_mioi_wen_comp_pff, audio_out_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output audio_out_val;
  input audio_out_rdy;
  output [511:0] audio_out_msg;
  input run_wen;
  input audio_out_Push_mioi_oswt_unreg;
  output audio_out_Push_mioi_bawt;
  input audio_out_Push_mioi_iswt0;
  output audio_out_Push_mioi_wen_comp;
  input [511:0] audio_out_Push_mioi_idat;
  output audio_out_Push_mioi_irdy;
  input audio_out_Push_mioi_irdy_oreg;
  output audio_out_Push_mioi_bawt_pff;
  input audio_out_Push_mioi_iswt0_pff;
  input audio_out_Push_mioi_irdy_oreg_pff;
  output audio_out_Push_mioi_wen_comp_pff;
  input audio_out_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire audio_out_Push_mioi_biwt;
  wire audio_out_Push_mioi_bdwt;
  wire audio_out_Push_mioi_bcwt;
  wire audio_out_Push_mioi_ivld_run_sct;
  wire audio_out_Push_mioi_bawt_reg;
  wire audio_out_Push_mioi_bawt_iff;
  wire audio_out_Push_mioi_biwt_iff;
  wire audio_out_Push_mioi_bcwt_iff;
  wire audio_out_Push_mioi_wen_comp_reg;
  wire audio_out_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd21),
  .width(32'sd512),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) audio_out_Push_mioi (
      .vld(audio_out_val),
      .rdy(audio_out_rdy),
      .dat(audio_out_msg),
      .idat(audio_out_Push_mioi_idat),
      .irdy(audio_out_Push_mioi_irdy),
      .ivld(audio_out_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_ctrl Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .audio_out_Push_mioi_oswt_unreg(audio_out_Push_mioi_oswt_unreg),
      .audio_out_Push_mioi_iswt0(audio_out_Push_mioi_iswt0),
      .audio_out_Push_mioi_irdy_oreg(audio_out_Push_mioi_irdy_oreg),
      .audio_out_Push_mioi_biwt(audio_out_Push_mioi_biwt),
      .audio_out_Push_mioi_bdwt(audio_out_Push_mioi_bdwt),
      .audio_out_Push_mioi_bcwt(audio_out_Push_mioi_bcwt),
      .audio_out_Push_mioi_ivld_run_sct(audio_out_Push_mioi_ivld_run_sct),
      .audio_out_Push_mioi_biwt_pff(audio_out_Push_mioi_biwt_iff),
      .audio_out_Push_mioi_iswt0_pff(audio_out_Push_mioi_iswt0_pff),
      .audio_out_Push_mioi_bcwt_pff(audio_out_Push_mioi_bcwt_iff),
      .audio_out_Push_mioi_irdy_oreg_pff(audio_out_Push_mioi_irdy_oreg_pff)
    );
  Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_dp Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .audio_out_Push_mioi_oswt_unreg(audio_out_Push_mioi_oswt_unreg),
      .audio_out_Push_mioi_bawt(audio_out_Push_mioi_bawt_reg),
      .audio_out_Push_mioi_wen_comp(audio_out_Push_mioi_wen_comp_reg),
      .audio_out_Push_mioi_biwt(audio_out_Push_mioi_biwt),
      .audio_out_Push_mioi_bdwt(audio_out_Push_mioi_bdwt),
      .audio_out_Push_mioi_bcwt(audio_out_Push_mioi_bcwt),
      .audio_out_Push_mioi_bawt_pff(audio_out_Push_mioi_bawt_iff),
      .audio_out_Push_mioi_biwt_pff(audio_out_Push_mioi_biwt_iff),
      .audio_out_Push_mioi_bcwt_pff(audio_out_Push_mioi_bcwt_iff),
      .audio_out_Push_mioi_wen_comp_pff(audio_out_Push_mioi_wen_comp_iff),
      .audio_out_Push_mioi_oswt_unreg_pff(audio_out_Push_mioi_oswt_unreg_pff)
    );
  assign audio_out_Push_mioi_bawt = audio_out_Push_mioi_bawt_reg;
  assign audio_out_Push_mioi_bawt_pff = audio_out_Push_mioi_bawt_iff;
  assign audio_out_Push_mioi_wen_comp = audio_out_Push_mioi_wen_comp_reg;
  assign audio_out_Push_mioi_wen_comp_pff = audio_out_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_in_Pop_mioi
// ------------------------------------------------------------------


module Encoder_run_audio_in_Pop_mioi (
  clk, rst, audio_in_val, audio_in_rdy, audio_in_msg, run_wen, run_wten, audio_in_Pop_mioi_oswt_unreg,
      audio_in_Pop_mioi_bawt, audio_in_Pop_mioi_iswt0, audio_in_Pop_mioi_wen_comp,
      audio_in_Pop_mioi_idat_mxwt, audio_in_Pop_mioi_ivld, audio_in_Pop_mioi_ivld_oreg,
      audio_in_Pop_mioi_wen_comp_pff, audio_in_Pop_mioi_oswt_unreg_pff, audio_in_Pop_mioi_bawt_pff,
      run_wten_pff, audio_in_Pop_mioi_iswt0_pff, audio_in_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input audio_in_val;
  output audio_in_rdy;
  input [15:0] audio_in_msg;
  input run_wen;
  input run_wten;
  input audio_in_Pop_mioi_oswt_unreg;
  output audio_in_Pop_mioi_bawt;
  input audio_in_Pop_mioi_iswt0;
  output audio_in_Pop_mioi_wen_comp;
  output [15:0] audio_in_Pop_mioi_idat_mxwt;
  output audio_in_Pop_mioi_ivld;
  input audio_in_Pop_mioi_ivld_oreg;
  output audio_in_Pop_mioi_wen_comp_pff;
  input audio_in_Pop_mioi_oswt_unreg_pff;
  output audio_in_Pop_mioi_bawt_pff;
  input run_wten_pff;
  input audio_in_Pop_mioi_iswt0_pff;
  input audio_in_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire audio_in_Pop_mioi_biwt;
  wire audio_in_Pop_mioi_bdwt;
  wire [15:0] audio_in_Pop_mioi_idat;
  wire audio_in_Pop_mioi_irdy_run_sct;
  wire audio_in_Pop_mioi_wen_comp_reg;
  wire audio_in_Pop_mioi_wen_comp_iff;
  wire audio_in_Pop_mioi_bawt_reg;
  wire audio_in_Pop_mioi_bawt_iff;
  wire audio_in_Pop_mioi_biwt_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd20),
  .width(32'sd16),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) audio_in_Pop_mioi (
      .vld(audio_in_val),
      .rdy(audio_in_rdy),
      .dat(audio_in_msg),
      .idat(audio_in_Pop_mioi_idat),
      .irdy(audio_in_Pop_mioi_irdy_run_sct),
      .ivld(audio_in_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_ctrl Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .audio_in_Pop_mioi_oswt_unreg(audio_in_Pop_mioi_oswt_unreg),
      .audio_in_Pop_mioi_iswt0(audio_in_Pop_mioi_iswt0),
      .audio_in_Pop_mioi_ivld_oreg(audio_in_Pop_mioi_ivld_oreg),
      .audio_in_Pop_mioi_biwt(audio_in_Pop_mioi_biwt),
      .audio_in_Pop_mioi_bdwt(audio_in_Pop_mioi_bdwt),
      .audio_in_Pop_mioi_irdy_run_sct(audio_in_Pop_mioi_irdy_run_sct),
      .audio_in_Pop_mioi_biwt_pff(audio_in_Pop_mioi_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .audio_in_Pop_mioi_iswt0_pff(audio_in_Pop_mioi_iswt0_pff),
      .audio_in_Pop_mioi_ivld_oreg_pff(audio_in_Pop_mioi_ivld_oreg_pff)
    );
  Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_dp Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .audio_in_Pop_mioi_oswt_unreg(audio_in_Pop_mioi_oswt_unreg),
      .audio_in_Pop_mioi_bawt(audio_in_Pop_mioi_bawt_reg),
      .audio_in_Pop_mioi_wen_comp(audio_in_Pop_mioi_wen_comp_reg),
      .audio_in_Pop_mioi_idat_mxwt(audio_in_Pop_mioi_idat_mxwt),
      .audio_in_Pop_mioi_biwt(audio_in_Pop_mioi_biwt),
      .audio_in_Pop_mioi_bdwt(audio_in_Pop_mioi_bdwt),
      .audio_in_Pop_mioi_idat(audio_in_Pop_mioi_idat),
      .audio_in_Pop_mioi_wen_comp_pff(audio_in_Pop_mioi_wen_comp_iff),
      .audio_in_Pop_mioi_oswt_unreg_pff(audio_in_Pop_mioi_oswt_unreg_pff),
      .audio_in_Pop_mioi_bawt_pff(audio_in_Pop_mioi_bawt_iff),
      .audio_in_Pop_mioi_biwt_pff(audio_in_Pop_mioi_biwt_iff)
    );
  assign audio_in_Pop_mioi_wen_comp = audio_in_Pop_mioi_wen_comp_reg;
  assign audio_in_Pop_mioi_wen_comp_pff = audio_in_Pop_mioi_wen_comp_iff;
  assign audio_in_Pop_mioi_bawt = audio_in_Pop_mioi_bawt_reg;
  assign audio_in_Pop_mioi_bawt_pff = audio_in_Pop_mioi_bawt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi (
  clk, rst, sync3_val, sync3_rdy, sync3_msg, sync3_Push_mioi_oswt, sync3_Push_mioi_wen_comp,
      sync3_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  input sync3_Push_mioi_oswt;
  output sync3_Push_mioi_wen_comp;
  input sync3_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire sync3_Push_mioi_biwt;
  wire sync3_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd31),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync3_Push_mioi (
      .vld(sync3_val),
      .rdy(sync3_rdy),
      .dat(sync3_msg),
      .idat(1'b1),
      .irdy(sync3_Push_mioi_irdy),
      .ivld(sync3_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl_inst
      (
      .sync3_Push_mioi_iswt0(sync3_Push_mioi_oswt_pff),
      .sync3_Push_mioi_irdy_oreg(sync3_Push_mioi_irdy),
      .sync3_Push_mioi_biwt(sync3_Push_mioi_biwt)
    );
  assign sync3_Push_mioi_wen_comp = (~ sync3_Push_mioi_oswt_pff) | sync3_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi (
  clk, rst, dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, dma_write_chnl_Push_mioi_oswt,
      dma_write_chnl_Push_mioi_wen_comp, dma_write_chnl_Push_mioi_idat, dma_write_chnl_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input dma_write_chnl_Push_mioi_oswt;
  output dma_write_chnl_Push_mioi_wen_comp;
  input [63:0] dma_write_chnl_Push_mioi_idat;
  input dma_write_chnl_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire dma_write_chnl_Push_mioi_biwt;
  wire dma_write_chnl_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd30),
  .width(32'sd64),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_write_chnl_Push_mioi (
      .vld(dma_write_chnl_val),
      .rdy(dma_write_chnl_rdy),
      .dat(dma_write_chnl_msg),
      .idat(dma_write_chnl_Push_mioi_idat),
      .irdy(dma_write_chnl_Push_mioi_irdy),
      .ivld(dma_write_chnl_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl_inst
      (
      .dma_write_chnl_Push_mioi_iswt0(dma_write_chnl_Push_mioi_oswt_pff),
      .dma_write_chnl_Push_mioi_irdy_oreg(dma_write_chnl_Push_mioi_irdy),
      .dma_write_chnl_Push_mioi_biwt(dma_write_chnl_Push_mioi_biwt)
    );
  assign dma_write_chnl_Push_mioi_wen_comp = (~ dma_write_chnl_Push_mioi_oswt_pff)
      | dma_write_chnl_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi (
  clk, rst, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg, dma_write_ctrl_Push_mioi_oswt,
      dma_write_ctrl_Push_mioi_wen_comp, dma_write_ctrl_Push_mioi_idat, dma_write_ctrl_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  input dma_write_ctrl_Push_mioi_oswt;
  output dma_write_ctrl_Push_mioi_wen_comp;
  input [66:0] dma_write_ctrl_Push_mioi_idat;
  input dma_write_ctrl_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire dma_write_ctrl_Push_mioi_biwt;
  wire dma_write_ctrl_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_dma_write_ctrl_Push_mioi_idat;
  assign nl_dma_write_ctrl_Push_mioi_idat = {3'b011 , (dma_write_ctrl_Push_mioi_idat[63:36])
      , 4'b0000 , (dma_write_ctrl_Push_mioi_idat[31:0])};
  ccs_out_buf_wait_v5 #(.rscid(32'sd29),
  .width(32'sd67),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_write_ctrl_Push_mioi (
      .vld(dma_write_ctrl_val),
      .rdy(dma_write_ctrl_rdy),
      .dat(dma_write_ctrl_msg),
      .idat(nl_dma_write_ctrl_Push_mioi_idat[66:0]),
      .irdy(dma_write_ctrl_Push_mioi_irdy),
      .ivld(dma_write_ctrl_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl_inst
      (
      .dma_write_ctrl_Push_mioi_iswt0(dma_write_ctrl_Push_mioi_oswt_pff),
      .dma_write_ctrl_Push_mioi_irdy_oreg(dma_write_ctrl_Push_mioi_irdy),
      .dma_write_ctrl_Push_mioi_biwt(dma_write_ctrl_Push_mioi_biwt)
    );
  assign dma_write_ctrl_Push_mioi_wen_comp = (~ dma_write_ctrl_Push_mioi_oswt_pff)
      | dma_write_ctrl_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_audio_out_Pop_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_audio_out_Pop_mioi (
  clk, rst, audio_out_val, audio_out_rdy, audio_out_msg, audio_out_Pop_mioi_oswt,
      audio_out_Pop_mioi_wen_comp, audio_out_Pop_mioi_idat_mxwt, audio_out_Pop_mioi_oswt_pff
);
  input clk;
  input rst;
  input audio_out_val;
  output audio_out_rdy;
  input [511:0] audio_out_msg;
  input audio_out_Pop_mioi_oswt;
  output audio_out_Pop_mioi_wen_comp;
  output [511:0] audio_out_Pop_mioi_idat_mxwt;
  input audio_out_Pop_mioi_oswt_pff;


  // Interconnect Declarations
  wire audio_out_Pop_mioi_biwt;
  wire [511:0] audio_out_Pop_mioi_idat;
  wire audio_out_Pop_mioi_ivld;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd28),
  .width(32'sd512),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) audio_out_Pop_mioi (
      .vld(audio_out_val),
      .rdy(audio_out_rdy),
      .dat(audio_out_msg),
      .idat(audio_out_Pop_mioi_idat),
      .irdy(audio_out_Pop_mioi_oswt),
      .ivld(audio_out_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_ctrl OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_ctrl_inst
      (
      .audio_out_Pop_mioi_iswt0(audio_out_Pop_mioi_oswt_pff),
      .audio_out_Pop_mioi_ivld_oreg(audio_out_Pop_mioi_ivld),
      .audio_out_Pop_mioi_biwt(audio_out_Pop_mioi_biwt)
    );
  assign audio_out_Pop_mioi_idat_mxwt = audio_out_Pop_mioi_idat;
  assign audio_out_Pop_mioi_wen_comp = (~ audio_out_Pop_mioi_oswt_pff) | audio_out_Pop_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi (
  clk, rst, sync2_val, sync2_rdy, sync2_msg, sync2_Pop_mioi_oswt, sync2_Pop_mioi_wen_comp,
      sync2_Pop_mioi_oswt_pff
);
  input clk;
  input rst;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  input sync2_Pop_mioi_oswt;
  output sync2_Pop_mioi_wen_comp;
  input sync2_Pop_mioi_oswt_pff;


  // Interconnect Declarations
  wire sync2_Pop_mioi_biwt;
  wire sync2_Pop_mioi_idat;
  wire sync2_Pop_mioi_ivld;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd27),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync2_Pop_mioi (
      .vld(sync2_val),
      .rdy(sync2_rdy),
      .dat(sync2_msg),
      .idat(sync2_Pop_mioi_idat),
      .irdy(sync2_Pop_mioi_oswt),
      .ivld(sync2_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl_inst
      (
      .sync2_Pop_mioi_iswt0(sync2_Pop_mioi_oswt_pff),
      .sync2_Pop_mioi_ivld_oreg(sync2_Pop_mioi_ivld),
      .sync2_Pop_mioi_biwt(sync2_Pop_mioi_biwt)
    );
  assign sync2_Pop_mioi_wen_comp = (~ sync2_Pop_mioi_oswt_pff) | sync2_Pop_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run
// ------------------------------------------------------------------


module Control_run (
  clk, rst, acc_start, acc_done, sync1_val, sync1_rdy, sync1_msg, sync2_val, sync2_rdy,
      sync2_msg, sync3_val, sync3_rdy, sync3_msg
);
  input clk;
  input rst;
  input acc_start;
  output acc_done;
  reg acc_done;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;


  // Interconnect Declarations
  reg run_wen;
  wire run_wten;
  wire sync1_Push_mioi_bawt;
  wire sync1_Push_mioi_wen_comp;
  wire sync1_Push_mioi_irdy;
  wire sync1_Push_mioi_irdy_oreg;
  wire sync2_Push_mioi_bawt;
  wire sync2_Push_mioi_wen_comp;
  wire sync2_Push_mioi_irdy;
  wire sync2_Push_mioi_irdy_oreg;
  wire sync3_Pop_mioi_bawt;
  wire sync3_Pop_mioi_wen_comp;
  wire sync3_Pop_mioi_ivld;
  wire sync3_Pop_mioi_ivld_oreg;
  wire [1:0] while_for_2_mux_3_tmp;
  wire or_tmp_1;
  wire and_tmp;
  wire and_tmp_4;
  wire and_dcpl_2;
  wire and_dcpl_9;
  wire and_dcpl_11;
  wire and_dcpl_12;
  wire and_dcpl_17;
  wire nor_tmp;
  wire nor_tmp_1;
  wire and_tmp_12;
  wire mux_tmp_16;
  wire or_tmp_47;
  wire or_dcpl_12;
  wire and_dcpl_29;
  wire and_tmp_14;
  wire and_dcpl_30;
  wire or_tmp_60;
  wire or_tmp_66;
  wire mux_tmp_31;
  wire or_dcpl_13;
  wire and_tmp_22;
  wire or_dcpl_14;
  wire and_dcpl_37;
  wire while_while_or_3_cse_1;
  wire while_while_or_1_cse_1;
  wire while_while_or_cse_1;
  wire lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0;
  wire [1:0] lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0;
  reg exitL_exit_while_for_2_sva;
  reg while_for_2_equal_tmp_2_1;
  reg while_for_2_or_tmp_1;
  wire while_for_2_and_ssc_1;
  wire while_for_2_and_2_ssc_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_1;
  reg lfst_exit_while_for_2_lpi_1_dfm_5_2;
  reg while_for_slc_while_for_acc_3_svs_1;
  reg while_for_2_equal_tmp_1;
  wire lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2;
  reg [1:0] lfst_exit_while_for_2_lpi_1_dfm_5_1_0;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_3;
  wire [3:0] while_for_1_i_3_0_sva_2;
  wire [4:0] nl_while_for_1_i_3_0_sva_2;
  wire [3:0] while_for_2_i_3_0_sva_2;
  wire [4:0] nl_while_for_2_i_3_0_sva_2;
  wire exitL_exit_while_for_2_sva_mx0;
  wire [1:0] lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1;
  wire while_for_2_and_6_cse;
  wire while_and_16_cse;
  wire while_for_2_and_9_cse;
  wire while_for_i_and_cse;
  wire while_for_and_3_cse;
  wire or_7_cse;
  wire or_62_cse;
  wire while_for_2_or_tmp_mx0w0;
  wire while_for_2_equal_tmp_2_mx0w0;
  wire while_for_2_equal_tmp_mx0w0;
  wire while_for_2_or_5_tmp;
  wire or_72_cse;
  wire sync1_write_reset_check_reset_while_nor_1_rmff;
  wire run_wen_rtff;
  reg reg_while_stage_v_2_tmp;
  reg reg_while_for_slc_while_for_acc_3_svs_st_1_tmp;
  reg [1:0] reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp;
  reg reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp;
  reg reg_sync1_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_3_tmp;
  reg [1:0] reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp;
  reg reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp;
  reg reg_while_for_slc_while_for_acc_3_svs_st_2_tmp;
  reg reg_sync2_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_4_tmp;
  reg reg_sync3_Pop_mioi_iswt0_tmp;
  reg [1:0] reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp;
  reg reg_while_for_slc_while_for_acc_3_svs_st_3_tmp;
  reg reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp;
  reg reg_while_stage_v_1_tmp;
  wire sync1_Push_mioi_wen_comp_iff;
  wire while_mux_rmff;
  wire while_for_mux_rmff;
  wire [1:0] while_for_2_mux_16_rmff;
  wire while_for_2_mux_17_rmff;
  wire sync1_Push_mioi_bawt_iff;
  wire while_mux_1_rmff;
  wire and_tmp_pff;
  wire while_mux_2_rmff;
  wire [1:0] while_for_2_mux_18_rmff;
  wire while_for_2_mux_19_rmff;
  wire while_for_mux_4_rmff;
  wire sync2_Push_mioi_bawt_iff;
  wire while_mux_3_rmff;
  wire or_tmp_1_pff;
  wire while_mux_4_rmff;
  wire sync3_Pop_mioi_bawt_iff;
  wire run_wten_iff;
  wire while_mux_5_rmff;
  wire [1:0] while_for_2_mux_20_rmff;
  wire while_for_mux_5_rmff;
  wire while_for_2_mux_21_rmff;
  wire sync2_Push_mioi_wen_comp_iff;
  wire and_dcpl_11_pff;
  wire and_dcpl_9_pff;
  wire sync3_Pop_mioi_wen_comp_iff;
  wire while_mux_6_rmff;
  wire while_while_or_3_cse_1_pff;
  wire while_while_or_1_cse_1_pff;
  wire while_while_or_cse_1_pff;
  wire while_for_2_equal_tmp_1_mx1w1;
  reg [3:0] while_for_2_i_3_0_lpi_1;
  wire or_110_tmp;
  reg [3:0] while_for_i_3_0_lpi_1;
  reg [3:0] while_for_1_i_3_0_lpi_1;
  reg while_for_slc_while_for_acc_3_svs_st;
  reg [3:0] while_for_i_3_0_sva_1_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_2;
  wire acc_done_mx0c1;
  wire sync2_Push_mioi_iswt0_mx0c1;
  wire sync1_Push_mioi_iswt0_mx0c1;
  wire [3:0] while_for_i_3_0_lpi_1_mx0w0;
  wire [3:0] while_for_i_3_0_sva_2;
  wire [4:0] nl_while_for_i_3_0_sva_2;
  wire exitL_exit_while_for_2_sva_mx0w0;
  wire exitL_exit_while_for_2_sva_mx1c1;
  wire exitL_exit_while_for_2_sva_mx1c2;
  wire while_for_slc_while_for_acc_3_svs_st_1_mx0c1;
  wire while_stage_v_3_mx1c1;
  wire while_stage_v_4_mx1c1;
  wire while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1;
  wire while_for_acc_itm_3_1;
  wire while_for_2_acc_itm_3_1;
  wire while_for_1_acc_itm_3_1;

  wire while_and_nl;
  wire while_and_15_nl;
  wire while_for_while_for_mux_nl;
  wire while_for_and_nl;
  wire while_and_18_nl;
  wire while_and_19_nl;
  wire[3:0] while_for_while_for_and_nl;
  wire while_for_2_i_and_2_nl;
  wire mux_45_nl;
  wire nor_29_nl;
  wire nor_30_nl;
  wire mux_44_nl;
  wire or_94_nl;
  wire nor_35_nl;
  wire and_83_nl;
  wire[3:0] while_for_acc_nl;
  wire[4:0] nl_while_for_acc_nl;
  wire[3:0] while_for_i_mux_nl;
  wire while_for_2_while_for_2_nor_3_nl;
  wire while_for_2_and_16_nl;
  wire[1:0] while_for_2_and_4_nl;
  wire[1:0] while_for_2_mux_nl;
  wire while_for_2_not_9_nl;
  wire[3:0] while_for_2_acc_nl;
  wire[4:0] nl_while_for_2_acc_nl;
  wire while_for_2_mux_6_nl;
  wire[3:0] while_for_1_acc_nl;
  wire[4:0] nl_while_for_1_acc_nl;
  wire or_56_nl;
  wire or_54_nl;
  wire mux_30_nl;
  wire mux_29_nl;
  wire mux_14_nl;
  wire nor_26_nl;
  wire or_44_nl;
  wire mux_19_nl;
  wire mux_18_nl;
  wire mux_17_nl;
  wire nor_6_nl;
  wire mux_28_nl;
  wire or_75_nl;
  wire mux_27_nl;
  wire mux_26_nl;
  wire mux_34_nl;
  wire and_52_nl;
  wire mux_33_nl;
  wire mux_32_nl;
  wire mux_37_nl;
  wire and_55_nl;
  wire mux_36_nl;
  wire mux_35_nl;
  wire mux_38_nl;
  wire nor_28_nl;
  wire mux_41_nl;
  wire or_91_nl;
  wire and_66_nl;
  wire and_65_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg;
  assign nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg = ~((~ reg_while_stage_v_2_tmp)
      | reg_while_for_slc_while_for_acc_3_svs_st_1_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0])
      | (~(sync1_Push_mioi_bawt & and_tmp)));
  wire  nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg_pff;
  assign nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg_pff = ~((~
      while_mux_rmff) | while_for_mux_rmff | (~ (while_for_2_mux_16_rmff[1])) | while_for_2_mux_17_rmff
      | (while_for_2_mux_16_rmff[0]) | (~(sync1_Push_mioi_bawt_iff & and_tmp_pff)));
  wire  nl_Control_run_sync2_Push_mioi_inst_sync2_Push_mioi_oswt_unreg_pff;
  assign nl_Control_run_sync2_Push_mioi_inst_sync2_Push_mioi_oswt_unreg_pff = ~((and_dcpl_11_pff
      & and_dcpl_9_pff & while_mux_4_rmff) | while_for_2_mux_19_rmff | while_for_mux_4_rmff
      | (~ sync2_Push_mioi_bawt_iff) | (while_for_2_mux_18_rmff!=2'b10) | (~ while_mux_2_rmff));
  wire  nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg;
  assign nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg = ~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp!=2'b10) | reg_while_for_slc_while_for_acc_3_svs_st_3_tmp
      | (~ sync3_Pop_mioi_bawt) | (~ reg_while_stage_v_4_tmp));
  wire  nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg_pff;
  assign nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg_pff = ~(while_for_2_mux_21_rmff
      | (while_for_2_mux_20_rmff!=2'b10) | while_for_mux_5_rmff | (~ sync3_Pop_mioi_bawt_iff)
      | (~ while_mux_4_rmff));
  wire  nl_Control_run_staller_inst_run_flen_unreg;
  assign nl_Control_run_staller_inst_run_flen_unreg = ~(((~(reg_while_stage_v_1_tmp
      & or_dcpl_13)) & while_while_or_3_cse_1 & while_while_or_1_cse_1 & while_while_or_cse_1)
      | (reg_while_stage_v_1_tmp & (~(reg_while_stage_v_2_tmp & or_dcpl_12)) & while_while_or_3_cse_1
      & while_while_or_1_cse_1 & while_while_or_cse_1) | (reg_while_stage_v_2_tmp
      & (~(reg_while_stage_v_3_tmp & or_dcpl_14)) & while_while_or_3_cse_1 & while_while_or_1_cse_1
      & while_while_or_cse_1) | (reg_while_stage_v_3_tmp & (~(reg_while_stage_v_4_tmp
      & and_dcpl_37)) & while_while_or_1_cse_1 & while_while_or_cse_1) | (reg_while_stage_v_4_tmp
      & while_while_or_cse_1));
  wire  nl_Control_run_staller_inst_run_flen_unreg_pff;
  assign nl_Control_run_staller_inst_run_flen_unreg_pff = ~(((~(while_mux_6_rmff
      & (~(((~ while_mux_rmff) | while_for_mux_rmff | (~ (while_for_2_mux_16_rmff[1]))
      | while_for_2_mux_17_rmff | (while_for_2_mux_16_rmff[0]) | sync1_Push_mioi_bawt_iff)
      & and_tmp_pff)))) & while_while_or_3_cse_1_pff & while_while_or_1_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_6_rmff & (~(while_mux_rmff & (~((while_for_mux_rmff
      | (~ (while_for_2_mux_16_rmff[1])) | while_for_2_mux_17_rmff | (while_for_2_mux_16_rmff[0])
      | sync1_Push_mioi_bawt_iff) & and_tmp_pff)))) & while_while_or_3_cse_1_pff
      & while_while_or_1_cse_1_pff & while_while_or_cse_1_pff) | (while_mux_rmff
      & (~(while_mux_2_rmff & (~(((while_for_2_mux_18_rmff!=2'b10) | sync2_Push_mioi_bawt_iff
      | while_for_mux_4_rmff | while_for_2_mux_19_rmff) & or_tmp_1_pff)))) & while_while_or_3_cse_1_pff
      & while_while_or_1_cse_1_pff & while_while_or_cse_1_pff) | (while_mux_2_rmff
      & (~(while_mux_4_rmff & and_dcpl_11_pff & and_dcpl_9_pff)) & while_while_or_1_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_4_rmff & while_while_or_cse_1_pff));
  Control_run_sync1_Push_mioi Control_run_sync1_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .run_wen(run_wen),
      .sync1_Push_mioi_oswt_unreg(nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_bawt(sync1_Push_mioi_bawt),
      .sync1_Push_mioi_iswt0(reg_sync1_Push_mioi_iswt0_tmp),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp),
      .sync1_Push_mioi_irdy(sync1_Push_mioi_irdy),
      .sync1_Push_mioi_irdy_oreg(sync1_Push_mioi_irdy_oreg),
      .sync1_Push_mioi_wen_comp_pff(sync1_Push_mioi_wen_comp_iff),
      .sync1_Push_mioi_oswt_unreg_pff(nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg_pff),
      .sync1_Push_mioi_bawt_pff(sync1_Push_mioi_bawt_iff),
      .sync1_Push_mioi_iswt0_pff(while_mux_1_rmff),
      .sync1_Push_mioi_irdy_oreg_pff(sync1_Push_mioi_irdy)
    );
  Control_run_wait_dp Control_run_wait_dp_inst (
      .clk(clk),
      .rst(rst),
      .sync1_Push_mioi_irdy(sync1_Push_mioi_irdy),
      .sync1_Push_mioi_irdy_oreg(sync1_Push_mioi_irdy_oreg),
      .sync2_Push_mioi_irdy(sync2_Push_mioi_irdy),
      .sync2_Push_mioi_irdy_oreg(sync2_Push_mioi_irdy_oreg),
      .sync3_Pop_mioi_ivld(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_ivld_oreg(sync3_Pop_mioi_ivld_oreg)
    );
  Control_run_sync2_Push_mioi Control_run_sync2_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .run_wen(run_wen),
      .sync2_Push_mioi_oswt_unreg(sync1_write_reset_check_reset_while_nor_1_rmff),
      .sync2_Push_mioi_bawt(sync2_Push_mioi_bawt),
      .sync2_Push_mioi_iswt0(reg_sync2_Push_mioi_iswt0_tmp),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp),
      .sync2_Push_mioi_irdy(sync2_Push_mioi_irdy),
      .sync2_Push_mioi_irdy_oreg(sync2_Push_mioi_irdy_oreg),
      .sync2_Push_mioi_bawt_pff(sync2_Push_mioi_bawt_iff),
      .sync2_Push_mioi_iswt0_pff(while_mux_3_rmff),
      .sync2_Push_mioi_irdy_oreg_pff(sync2_Push_mioi_irdy),
      .sync2_Push_mioi_wen_comp_pff(sync2_Push_mioi_wen_comp_iff),
      .sync2_Push_mioi_oswt_unreg_pff(nl_Control_run_sync2_Push_mioi_inst_sync2_Push_mioi_oswt_unreg_pff)
    );
  Control_run_sync3_Pop_mioi Control_run_sync3_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Pop_mioi_oswt_unreg(nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_bawt(sync3_Pop_mioi_bawt),
      .sync3_Pop_mioi_iswt0(reg_sync3_Pop_mioi_iswt0_tmp),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp),
      .sync3_Pop_mioi_ivld(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_ivld_oreg(sync3_Pop_mioi_ivld_oreg),
      .sync3_Pop_mioi_bawt_pff(sync3_Pop_mioi_bawt_iff),
      .run_wten_pff(run_wten_iff),
      .sync3_Pop_mioi_iswt0_pff(while_mux_5_rmff),
      .sync3_Pop_mioi_ivld_oreg_pff(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_wen_comp_pff(sync3_Pop_mioi_wen_comp_iff),
      .sync3_Pop_mioi_oswt_unreg_pff(nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg_pff)
    );
  Control_run_staller Control_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen_rtff),
      .run_wten(run_wten),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp),
      .run_flen_unreg(nl_Control_run_staller_inst_run_flen_unreg),
      .sync1_Push_mioi_wen_comp_pff(sync1_Push_mioi_wen_comp_iff),
      .run_wten_pff(run_wten_iff),
      .sync2_Push_mioi_wen_comp_pff(sync2_Push_mioi_wen_comp_iff),
      .sync3_Pop_mioi_wen_comp_pff(sync3_Pop_mioi_wen_comp_iff),
      .run_flen_unreg_pff(nl_Control_run_staller_inst_run_flen_unreg_pff)
    );
  assign sync1_write_reset_check_reset_while_nor_1_rmff = ~(and_dcpl_12 | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp | (~ sync2_Push_mioi_bawt)
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10) | (~ reg_while_stage_v_3_tmp));
  assign while_mux_5_rmff = MUX_s_1_2_2(reg_sync3_Pop_mioi_iswt0_tmp, sync1_write_reset_check_reset_while_nor_1_rmff,
      run_wen);
  assign while_and_nl = run_wen & ((and_tmp & and_dcpl_17) | sync2_Push_mioi_iswt0_mx0c1);
  assign while_mux_3_rmff = MUX_s_1_2_2(reg_sync2_Push_mioi_iswt0_tmp, (~ sync2_Push_mioi_iswt0_mx0c1),
      while_and_nl);
  assign or_62_cse = nor_tmp_1 | (while_for_2_mux_3_tmp!=2'b10) | while_for_2_equal_tmp_2_1;
  assign while_and_15_nl = run_wen & (((~ mux_tmp_16) & reg_while_stage_v_1_tmp &
      (~ while_for_acc_itm_3_1)) | sync1_Push_mioi_iswt0_mx0c1);
  assign while_mux_1_rmff = MUX_s_1_2_2(reg_sync1_Push_mioi_iswt0_tmp, (~ sync1_Push_mioi_iswt0_mx0c1),
      while_and_15_nl);
  assign while_for_i_and_cse = run_wen & (~ or_dcpl_12);
  assign while_for_2_and_6_cse = run_wen & (and_dcpl_29 | and_dcpl_30);
  assign while_and_16_cse = run_wen & and_tmp_14;
  assign while_mux_6_rmff = reg_while_stage_v_1_tmp | while_and_16_cse;
  assign while_mux_rmff = MUX_s_1_2_2(reg_while_stage_v_2_tmp, (~ and_dcpl_29), while_for_2_and_6_cse);
  assign while_for_while_for_mux_nl = MUX_s_1_2_2(while_for_acc_itm_3_1, while_for_slc_while_for_acc_3_svs_st,
      while_for_slc_while_for_acc_3_svs_st_1_mx0c1);
  assign while_for_and_nl = run_wen & (((~ mux_tmp_16) & reg_while_stage_v_1_tmp)
      | while_for_slc_while_for_acc_3_svs_st_1_mx0c1);
  assign while_for_mux_rmff = MUX_s_1_2_2(reg_while_for_slc_while_for_acc_3_svs_st_1_tmp,
      while_for_while_for_mux_nl, while_for_and_nl);
  assign while_for_2_and_9_cse = run_wen & (~ or_dcpl_13);
  assign while_for_2_mux_17_rmff = MUX_s_1_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp,
      lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2, while_for_2_and_9_cse);
  assign while_for_2_mux_16_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp,
      lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1, while_for_2_and_9_cse);
  assign while_and_18_nl = run_wen & ((and_tmp_4 & reg_while_stage_v_2_tmp) | while_stage_v_3_mx1c1);
  assign while_mux_2_rmff = MUX_s_1_2_2(reg_while_stage_v_3_tmp, (~ while_stage_v_3_mx1c1),
      while_and_18_nl);
  assign while_for_mux_4_rmff = MUX_s_1_2_2(reg_while_for_slc_while_for_acc_3_svs_st_2_tmp,
      reg_while_for_slc_while_for_acc_3_svs_st_1_tmp, while_for_i_and_cse);
  assign while_for_2_mux_19_rmff = MUX_s_1_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp, while_for_i_and_cse);
  assign while_for_2_mux_18_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp, while_for_i_and_cse);
  assign while_and_19_nl = run_wen & ((reg_while_stage_v_3_tmp & and_tmp_22) | while_stage_v_4_mx1c1);
  assign while_mux_4_rmff = MUX_s_1_2_2(reg_while_stage_v_4_tmp, (~ while_stage_v_4_mx1c1),
      while_and_19_nl);
  assign while_for_and_3_cse = run_wen & (~ or_dcpl_14);
  assign while_for_mux_5_rmff = MUX_s_1_2_2(reg_while_for_slc_while_for_acc_3_svs_st_3_tmp,
      reg_while_for_slc_while_for_acc_3_svs_st_2_tmp, while_for_and_3_cse);
  assign while_for_2_mux_21_rmff = MUX_s_1_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp, while_for_and_3_cse);
  assign while_for_2_mux_20_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp, while_for_and_3_cse);
  assign or_7_cse = (~ while_for_2_equal_tmp_1) | while_for_slc_while_for_acc_3_svs_1;
  assign or_110_tmp = (while_for_2_or_tmp_1 & (~ acc_start)) | lfst_exit_while_for_2_lpi_1_dfm_5_2
      | while_for_2_equal_tmp_2_1;
  assign nor_35_nl = ~(while_for_2_equal_tmp_1 | or_110_tmp);
  assign and_83_nl = while_for_2_equal_tmp_1 & (~ or_110_tmp);
  assign while_for_i_3_0_lpi_1_mx0w0 = MUX1HOT_v_4_3_2((signext_4_1(~ acc_start)),
      while_for_i_3_0_sva_1_1, while_for_i_3_0_lpi_1, {nor_35_nl , and_83_nl , or_110_tmp});
  assign nl_while_for_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_i_3_0_sva_2[3:1]);
  assign while_for_acc_nl = nl_while_for_acc_nl[3:0];
  assign while_for_acc_itm_3_1 = readslicef_4_1_3(while_for_acc_nl);
  assign while_for_i_mux_nl = MUX_v_4_2_2(while_for_i_3_0_lpi_1, while_for_i_3_0_lpi_1_mx0w0,
      reg_while_stage_v_2_tmp);
  assign nl_while_for_i_3_0_sva_2 = while_for_i_mux_nl + 4'b0001;
  assign while_for_i_3_0_sva_2 = nl_while_for_i_3_0_sva_2[3:0];
  assign while_for_2_or_5_tmp = (while_for_slc_while_for_acc_3_svs_1 & while_for_2_equal_tmp_1)
      | (while_for_1_slc_while_for_1_acc_3_svs_1 & lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign while_for_2_while_for_2_nor_3_nl = ~(acc_start | while_for_2_or_5_tmp);
  assign while_for_2_and_16_nl = acc_start & (~ while_for_2_or_5_tmp);
  assign while_for_2_mux_3_tmp = MUX1HOT_v_2_3_2(2'b01, 2'b10, lfst_exit_while_for_2_lpi_1_dfm_5_1_0,
      {while_for_2_while_for_2_nor_3_nl , while_for_2_and_16_nl , while_for_2_or_5_tmp});
  assign while_for_2_and_4_nl = while_for_2_mux_3_tmp & (signext_2_1(~ while_for_2_equal_tmp_2_1))
      & (signext_2_1(~ while_for_2_and_2_ssc_1));
  assign lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0 = MUX_v_2_2_2(while_for_2_and_4_nl,
      2'b11, while_for_2_and_ssc_1);
  assign while_for_2_mux_nl = MUX_v_2_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_1_0,
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0, reg_while_stage_v_2_tmp);
  assign while_for_2_not_9_nl = ~ exitL_exit_while_for_2_sva_mx0;
  assign lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1 = MUX_v_2_2_2(2'b00, while_for_2_mux_nl,
      while_for_2_not_9_nl);
  assign exitL_exit_while_for_2_sva_mx0w0 = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0
      | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0!=2'b00));
  assign exitL_exit_while_for_2_sva_mx0 = MUX_s_1_2_2(exitL_exit_while_for_2_sva,
      exitL_exit_while_for_2_sva_mx0w0, reg_while_stage_v_2_tmp);
  assign nl_while_for_2_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_2_i_3_0_sva_2[3:1]);
  assign while_for_2_acc_nl = nl_while_for_2_acc_nl[3:0];
  assign while_for_2_acc_itm_3_1 = readslicef_4_1_3(while_for_2_acc_nl);
  assign while_for_2_mux_6_nl = MUX_s_1_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_2,
      lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0, reg_while_stage_v_2_tmp);
  assign lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 = while_for_2_mux_6_nl & (~ exitL_exit_while_for_2_sva_mx0);
  assign lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0 = (exitL_exit_while_for_2_sva
      & (~(while_for_2_or_tmp_1 | while_for_2_and_ssc_1))) | while_for_2_and_2_ssc_1;
  assign while_for_2_equal_tmp_1_mx1w1 = (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1==2'b11)
      & (~ lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2);
  assign while_for_2_or_tmp_mx0w0 = ((lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[0])
      & (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[1]))))
      | (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1!=2'b00)));
  assign while_for_2_equal_tmp_mx0w0 = (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[1])
      & (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[0])));
  assign while_for_2_equal_tmp_2_mx0w0 = lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2
      & (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1==2'b00);
  assign while_for_2_and_ssc_1 = (~ while_for_slc_while_for_acc_3_svs_1) & while_for_2_equal_tmp_1;
  assign while_for_2_and_2_ssc_1 = (~ while_for_1_slc_while_for_1_acc_3_svs_1) &
      lfst_exit_while_for_2_lpi_1_dfm_5_2;
  assign nl_while_for_1_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_1_i_3_0_sva_2[3:1]);
  assign while_for_1_acc_nl = nl_while_for_1_acc_nl[3:0];
  assign while_for_1_acc_itm_3_1 = readslicef_4_1_3(while_for_1_acc_nl);
  assign while_while_or_3_cse_1 = sync1_Push_mioi_bawt | (~((~ reg_while_for_slc_while_for_acc_3_svs_st_1_tmp)
      & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]) & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]))) & reg_while_stage_v_2_tmp));
  assign while_while_or_1_cse_1 = sync2_Push_mioi_bawt | (~((~ reg_while_for_slc_while_for_acc_3_svs_st_2_tmp)
      & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp[1]) & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp[0]))) & reg_while_stage_v_3_tmp));
  assign while_while_or_cse_1 = sync3_Pop_mioi_bawt | (~((~ reg_while_for_slc_while_for_acc_3_svs_st_3_tmp)
      & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]) & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]))) & reg_while_stage_v_4_tmp));
  assign nl_while_for_1_i_3_0_sva_2 = while_for_1_i_3_0_lpi_1 + 4'b0001;
  assign while_for_1_i_3_0_sva_2 = nl_while_for_1_i_3_0_sva_2[3:0];
  assign nl_while_for_2_i_3_0_sva_2 = while_for_2_i_3_0_lpi_1 + 4'b0001;
  assign while_for_2_i_3_0_sva_2 = nl_while_for_2_i_3_0_sva_2[3:0];
  assign or_tmp_1 = (~ reg_while_stage_v_4_tmp) | sync3_Pop_mioi_bawt | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0])
      | reg_while_for_slc_while_for_acc_3_svs_st_3_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp;
  assign and_tmp = ((~ reg_while_stage_v_3_tmp) | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10)
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp
      | sync2_Push_mioi_bawt) & or_tmp_1;
  assign and_tmp_4 = (reg_while_for_slc_while_for_acc_3_svs_st_1_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0])
      | sync1_Push_mioi_bawt) & and_tmp;
  assign and_dcpl_2 = (~ reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp) & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]);
  assign and_dcpl_9 = ~(reg_while_for_slc_while_for_acc_3_svs_st_3_tmp | sync3_Pop_mioi_bawt);
  assign and_dcpl_11 = and_dcpl_2 & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]));
  assign and_dcpl_12 = and_dcpl_11 & and_dcpl_9 & reg_while_stage_v_4_tmp;
  assign and_dcpl_17 = sync1_Push_mioi_bawt & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]))
      & (~ reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp) & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1])
      & (~ reg_while_for_slc_while_for_acc_3_svs_st_1_tmp) & reg_while_stage_v_2_tmp;
  assign nor_tmp = ~(while_for_1_slc_while_for_1_acc_3_svs_1 | (~ lfst_exit_while_for_2_lpi_1_dfm_5_2));
  assign nor_tmp_1 = ~(while_for_2_or_tmp_1 | (~ exitL_exit_while_for_2_sva));
  assign and_tmp_12 = or_7_cse & and_tmp_4;
  assign or_56_nl = lfst_exit_while_for_2_lpi_1_dfm_5_2 | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b10)
      | exitL_exit_while_for_2_sva | (~ and_tmp);
  assign or_54_nl = nor_tmp | nor_tmp_1 | (while_for_2_mux_3_tmp!=2'b10) | while_for_2_equal_tmp_2_1
      | (~ and_tmp_12);
  assign mux_tmp_16 = MUX_s_1_2_2(or_56_nl, or_54_nl, reg_while_stage_v_2_tmp);
  assign or_tmp_47 = or_7_cse | (~ and_tmp);
  assign or_dcpl_12 = ~(and_tmp_4 & reg_while_stage_v_2_tmp);
  assign and_dcpl_29 = and_tmp_4 & reg_while_stage_v_2_tmp & (~ reg_while_stage_v_1_tmp);
  assign and_tmp_14 = ((~ reg_while_stage_v_2_tmp) | reg_while_for_slc_while_for_acc_3_svs_st_1_tmp
      | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1])) | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]) | sync1_Push_mioi_bawt)
      & and_tmp;
  assign and_dcpl_30 = and_tmp_14 & reg_while_stage_v_1_tmp;
  assign or_72_cse = (~((while_for_2_mux_3_tmp!=2'b00))) | while_for_2_equal_tmp_2_1;
  assign or_tmp_60 = while_for_2_or_tmp_1 | (~(exitL_exit_while_for_2_sva & or_72_cse
      & and_tmp_12));
  assign or_tmp_66 = or_7_cse | (~ and_tmp_4);
  assign mux_29_nl = MUX_s_1_2_2(and_tmp_4, (~ or_tmp_66), or_72_cse);
  assign mux_30_nl = MUX_s_1_2_2(and_tmp_4, mux_29_nl, exitL_exit_while_for_2_sva);
  assign mux_tmp_31 = MUX_s_1_2_2(mux_30_nl, and_tmp_4, while_for_2_or_tmp_1);
  assign or_dcpl_13 = ~(and_tmp_14 & reg_while_stage_v_1_tmp);
  assign and_tmp_22 = ((reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10)
      | sync2_Push_mioi_bawt | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp)
      & or_tmp_1;
  assign or_dcpl_14 = ~(and_tmp_22 & reg_while_stage_v_3_tmp);
  assign and_dcpl_37 = and_dcpl_11 & and_dcpl_9;
  assign acc_done_mx0c1 = reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]))
      & (~ while_for_1_slc_while_for_1_acc_3_svs_st_3) & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]))
      & reg_while_stage_v_4_tmp;
  assign nor_26_nl = ~(sync1_Push_mioi_bawt | and_dcpl_12);
  assign or_44_nl = (~ reg_while_stage_v_2_tmp) | reg_while_for_slc_while_for_acc_3_svs_st_1_tmp
      | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1])) | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]);
  assign mux_14_nl = MUX_s_1_2_2(nor_26_nl, or_tmp_1, or_44_nl);
  assign sync2_Push_mioi_iswt0_mx0c1 = mux_14_nl & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp)) & sync2_Push_mioi_bawt &
      (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp==2'b10) & reg_while_stage_v_3_tmp;
  assign mux_17_nl = MUX_s_1_2_2((~ or_tmp_47), and_tmp, or_62_cse);
  assign mux_18_nl = MUX_s_1_2_2(mux_17_nl, and_tmp, nor_tmp);
  assign nor_6_nl = ~(while_for_acc_itm_3_1 | (~ reg_while_stage_v_1_tmp));
  assign mux_19_nl = MUX_s_1_2_2(and_tmp, mux_18_nl, nor_6_nl);
  assign sync1_Push_mioi_iswt0_mx0c1 = mux_19_nl & and_dcpl_17;
  assign or_75_nl = (~ lfst_exit_while_for_2_lpi_1_dfm_5_2) | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b00)
      | exitL_exit_while_for_2_sva | (~ and_tmp);
  assign mux_26_nl = MUX_s_1_2_2(or_tmp_60, (~ and_tmp_12), lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign mux_27_nl = MUX_s_1_2_2(mux_26_nl, or_tmp_60, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign mux_28_nl = MUX_s_1_2_2(or_75_nl, mux_27_nl, reg_while_stage_v_2_tmp);
  assign exitL_exit_while_for_2_sva_mx1c1 = (~ mux_28_nl) & reg_while_stage_v_1_tmp;
  assign and_52_nl = ((~ lfst_exit_while_for_2_lpi_1_dfm_5_2) | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b00)
      | exitL_exit_while_for_2_sva) & and_tmp;
  assign mux_32_nl = MUX_s_1_2_2(mux_tmp_31, (~ or_tmp_66), lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign mux_33_nl = MUX_s_1_2_2(mux_32_nl, mux_tmp_31, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign mux_34_nl = MUX_s_1_2_2(and_52_nl, mux_33_nl, reg_while_stage_v_2_tmp);
  assign exitL_exit_while_for_2_sva_mx1c2 = mux_34_nl & reg_while_stage_v_1_tmp;
  assign and_55_nl = (lfst_exit_while_for_2_lpi_1_dfm_5_2 | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b10)
      | exitL_exit_while_for_2_sva) & and_tmp;
  assign mux_35_nl = MUX_s_1_2_2((~ or_tmp_66), and_tmp_4, or_62_cse);
  assign mux_36_nl = MUX_s_1_2_2(mux_35_nl, and_tmp_4, nor_tmp);
  assign mux_37_nl = MUX_s_1_2_2(and_55_nl, mux_36_nl, reg_while_stage_v_2_tmp);
  assign while_for_slc_while_for_acc_3_svs_st_1_mx0c1 = mux_37_nl & reg_while_stage_v_1_tmp;
  assign nor_28_nl = ~(reg_while_for_slc_while_for_acc_3_svs_st_1_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0])
      | sync1_Push_mioi_bawt | (~ and_tmp_22));
  assign mux_38_nl = MUX_s_1_2_2(and_tmp_22, nor_28_nl, reg_while_stage_v_2_tmp);
  assign while_stage_v_3_mx1c1 = mux_38_nl & reg_while_stage_v_3_tmp;
  assign or_91_nl = (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10) | sync2_Push_mioi_bawt
      | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | and_dcpl_37;
  assign mux_41_nl = MUX_s_1_2_2(and_dcpl_37, or_91_nl, reg_while_stage_v_3_tmp);
  assign while_stage_v_4_mx1c1 = (~ mux_41_nl) & reg_while_stage_v_4_tmp;
  assign and_66_nl = lfst_exit_while_for_2_lpi_1_dfm_5_2 & and_tmp;
  assign and_65_nl = (nor_tmp | (~ (while_for_2_mux_3_tmp[0])) | while_for_2_equal_tmp_2_1)
      & or_7_cse & and_tmp;
  assign while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1 = MUX_s_1_2_2(and_66_nl,
      and_65_nl, reg_while_stage_v_2_tmp);
  assign or_tmp_1_pff = (~ while_mux_4_rmff) | sync3_Pop_mioi_bawt_iff | (while_for_2_mux_20_rmff[0])
      | while_for_mux_5_rmff | (~ (while_for_2_mux_20_rmff[1])) | while_for_2_mux_21_rmff;
  assign and_tmp_pff = ((~ while_mux_2_rmff) | (while_for_2_mux_18_rmff!=2'b10) |
      while_for_2_mux_19_rmff | while_for_mux_4_rmff | sync2_Push_mioi_bawt_iff)
      & or_tmp_1_pff;
  assign and_dcpl_11_pff = (~ while_for_2_mux_21_rmff) & (while_for_2_mux_20_rmff==2'b10);
  assign and_dcpl_9_pff = ~(while_for_mux_5_rmff | sync3_Pop_mioi_bawt_iff);
  assign while_while_or_3_cse_1_pff = sync1_Push_mioi_bawt_iff | (~((~ while_for_mux_rmff)
      & (while_for_2_mux_16_rmff[1]) & (~(while_for_2_mux_17_rmff | (while_for_2_mux_16_rmff[0])))
      & while_mux_rmff));
  assign while_while_or_1_cse_1_pff = sync2_Push_mioi_bawt_iff | (~((~ while_for_mux_4_rmff)
      & (while_for_2_mux_18_rmff[1]) & (~(while_for_2_mux_19_rmff | (while_for_2_mux_18_rmff[0])))
      & while_mux_2_rmff));
  assign while_while_or_cse_1_pff = sync3_Pop_mioi_bawt_iff | (~((~ while_for_mux_5_rmff)
      & (while_for_2_mux_20_rmff[1]) & (~(while_for_2_mux_21_rmff | (while_for_2_mux_20_rmff[0])))
      & while_mux_4_rmff));
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      acc_done <= 1'b0;
    end
    else if ( run_wen & ((and_dcpl_2 & (~ while_for_1_slc_while_for_1_acc_3_svs_st_3)
        & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]) & reg_while_stage_v_4_tmp)
        | acc_done_mx0c1) ) begin
      acc_done <= ~ acc_done_mx0c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_sync3_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_sync2_Push_mioi_iswt0_tmp <= 1'b0;
      reg_sync1_Push_mioi_iswt0_tmp <= 1'b0;
      reg_while_stage_v_1_tmp <= 1'b0;
      reg_while_stage_v_2_tmp <= 1'b0;
      reg_while_for_slc_while_for_acc_3_svs_st_1_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp <= 2'b00;
      reg_while_stage_v_3_tmp <= 1'b0;
      reg_while_for_slc_while_for_acc_3_svs_st_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp <= 2'b00;
      reg_while_stage_v_4_tmp <= 1'b0;
      reg_while_for_slc_while_for_acc_3_svs_st_3_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp <= 2'b00;
      run_wen <= 1'b1;
    end
    else begin
      reg_sync3_Pop_mioi_iswt0_tmp <= while_mux_5_rmff;
      reg_sync2_Push_mioi_iswt0_tmp <= while_mux_3_rmff;
      reg_sync1_Push_mioi_iswt0_tmp <= while_mux_1_rmff;
      reg_while_stage_v_1_tmp <= while_mux_6_rmff;
      reg_while_stage_v_2_tmp <= while_mux_rmff;
      reg_while_for_slc_while_for_acc_3_svs_st_1_tmp <= while_for_mux_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp <= while_for_2_mux_17_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp <= while_for_2_mux_16_rmff;
      reg_while_stage_v_3_tmp <= while_mux_2_rmff;
      reg_while_for_slc_while_for_acc_3_svs_st_2_tmp <= while_for_mux_4_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp <= while_for_2_mux_19_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp <= while_for_2_mux_18_rmff;
      reg_while_stage_v_4_tmp <= while_mux_4_rmff;
      reg_while_for_slc_while_for_acc_3_svs_st_3_tmp <= while_for_mux_5_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp <= while_for_2_mux_21_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp <= while_for_2_mux_20_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( while_for_i_and_cse ) begin
      while_for_i_3_0_lpi_1 <= while_for_i_3_0_lpi_1_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0 <= 2'b00;
      lfst_exit_while_for_2_lpi_1_dfm_5_2 <= 1'b0;
    end
    else if ( while_for_2_and_6_cse ) begin
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0 <= MUX_v_2_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0,
          lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1, and_dcpl_30);
      lfst_exit_while_for_2_lpi_1_dfm_5_2 <= MUX_s_1_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0,
          while_for_2_equal_tmp_1_mx1w1, and_dcpl_30);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exit_while_for_2_sva <= 1'b1;
    end
    else if ( run_wen & (and_dcpl_29 | exitL_exit_while_for_2_sva_mx1c1 | exitL_exit_while_for_2_sva_mx1c2)
        ) begin
      exitL_exit_while_for_2_sva <= MUX1HOT_s_1_3_2(exitL_exit_while_for_2_sva_mx0w0,
          while_for_2_acc_itm_3_1, lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2, {and_dcpl_29
          , exitL_exit_while_for_2_sva_mx1c1 , exitL_exit_while_for_2_sva_mx1c2});
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_2_or_tmp_1 <= 1'b0;
      while_for_i_3_0_sva_1_1 <= 4'b0000;
      while_for_2_equal_tmp_1 <= 1'b0;
      while_for_2_equal_tmp_2_1 <= 1'b0;
      while_for_slc_while_for_acc_3_svs_1 <= 1'b0;
      while_for_1_slc_while_for_1_acc_3_svs_1 <= 1'b0;
    end
    else if ( while_and_16_cse ) begin
      while_for_2_or_tmp_1 <= while_for_2_or_tmp_mx0w0;
      while_for_i_3_0_sva_1_1 <= while_for_i_3_0_sva_2;
      while_for_2_equal_tmp_1 <= while_for_2_equal_tmp_mx0w0;
      while_for_2_equal_tmp_2_1 <= while_for_2_equal_tmp_2_mx0w0;
      while_for_slc_while_for_acc_3_svs_1 <= while_for_acc_itm_3_1;
      while_for_1_slc_while_for_1_acc_3_svs_1 <= while_for_1_acc_itm_3_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_3 <= 1'b0;
    end
    else if ( run_wen ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_3 <= while_for_1_slc_while_for_1_acc_3_svs_st_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_slc_while_for_acc_3_svs_st <= 1'b0;
    end
    else if ( run_wen & (~ mux_tmp_16) ) begin
      while_for_slc_while_for_acc_3_svs_st <= while_for_acc_itm_3_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( run_wen & (~(while_for_2_or_tmp_mx0w0 | while_for_2_equal_tmp_2_mx0w0
        | or_dcpl_13)) ) begin
      while_for_1_i_3_0_lpi_1 <= MUX_v_4_2_2(while_for_while_for_and_nl, while_for_1_i_3_0_sva_2,
          while_for_2_equal_tmp_1_mx1w1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_2_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( run_wen & (~((while_for_1_acc_itm_3_1 & while_for_2_equal_tmp_1_mx1w1)
        | or_dcpl_13 | while_for_2_equal_tmp_mx0w0 | while_for_2_or_tmp_mx0w0)) )
        begin
      while_for_2_i_3_0_lpi_1 <= MUX_v_4_2_2(({{3{while_for_1_acc_itm_3_1}}, while_for_1_acc_itm_3_1}),
          while_for_2_i_3_0_sva_2, while_for_2_i_and_2_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_2 <= 1'b0;
    end
    else if ( run_wen & (~ and_dcpl_12) ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_2 <= while_for_1_slc_while_for_1_acc_3_svs_st_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_1 <= 1'b0;
    end
    else if ( run_wen & (mux_45_nl | while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1)
        ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_1 <= MUX_s_1_2_2(while_for_1_acc_itm_3_1,
          while_for_2_acc_itm_3_1, while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1);
    end
  end
  assign while_for_while_for_and_nl = MUX_v_4_2_2(4'b0000, while_for_1_i_3_0_lpi_1,
      while_for_acc_itm_3_1);
  assign while_for_2_i_and_2_nl = while_for_2_equal_tmp_2_mx0w0 & (~ or_dcpl_13);
  assign nor_29_nl = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2 | (~ and_tmp));
  assign or_94_nl = (~ (while_for_2_mux_3_tmp[0])) | while_for_2_equal_tmp_2_1;
  assign mux_44_nl = MUX_s_1_2_2((~ and_tmp), or_tmp_47, or_94_nl);
  assign nor_30_nl = ~(nor_tmp | mux_44_nl);
  assign mux_45_nl = MUX_s_1_2_2(nor_29_nl, nor_30_nl, reg_while_stage_v_2_tmp);

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input  vector;
  begin
    signext_2_1= {{1{vector}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_1;
    input  vector;
  begin
    signext_4_1= {{3{vector}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run
// ------------------------------------------------------------------


module InputBuffer_run (
  clk, rst, cfg_src_num, cfg_block_size, cfg_input_base, sync1_val, sync1_rdy, sync1_msg,
      dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val,
      dma_read_chnl_rdy, dma_read_chnl_msg, audio_in_val, audio_in_rdy, audio_in_msg,
      mem_rsci_clken_d, mem_rsci_d_d, mem_rsci_q_d, mem_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      operator_32_true_acc_2_cmp_b, operator_32_true_acc_2_cmp_c, mem_rsci_wadr_d_pff,
      mem_rsci_we_d_pff
);
  input clk;
  input rst;
  input [31:0] cfg_src_num;
  input [31:0] cfg_block_size;
  input [31:0] cfg_input_base;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output audio_in_val;
  input audio_in_rdy;
  output [15:0] audio_in_msg;
  output mem_rsci_clken_d;
  output [63:0] mem_rsci_d_d;
  input [63:0] mem_rsci_q_d;
  output mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output [12:0] operator_32_true_acc_2_cmp_b;
  output [12:0] operator_32_true_acc_2_cmp_c;
  output [12:0] mem_rsci_wadr_d_pff;
  output mem_rsci_we_d_pff;


  // Interconnect Declarations
  reg run_wen;
  wire sync1_Pop_mioi_wen_comp;
  wire dma_read_ctrl_Push_mioi_wen_comp;
  wire dma_read_chnl_Pop_mioi_wen_comp;
  wire [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;
  wire audio_in_Push_mioi_wen_comp;
  reg [15:0] audio_in_Push_mioi_idat;
  reg [31:0] dma_read_ctrl_Push_mioi_idat_63_32;
  reg [31:0] dma_read_ctrl_Push_mioi_idat_31_0;
  wire [13:0] fsm_output;
  wire or_dcpl_6;
  wire or_dcpl_7;
  wire or_dcpl_12;
  wire or_dcpl_14;
  wire or_dcpl_15;
  wire or_dcpl_17;
  wire or_dcpl_19;
  wire or_dcpl_22;
  reg exit_while_for_sva;
  wire exit_while_for_1_sva_mx0;
  wire exit_while_for_1_for_1_for_sva_mx0;
  wire exit_while_for_1_for_sva_mx0;
  reg [31:0] while_for_1_for_1_for_j_sva;
  wire xor_cse_1;
  reg [31:0] while_for_1_for_j_sva_1;
  wire while_and_cse;
  reg [31:0] while_for_1_i_sva;
  wire run_wen_rtff;
  reg reg_sync1_Pop_mioi_iswt0_tmp;
  reg reg_dma_read_ctrl_Push_mioi_iswt0_tmp;
  reg reg_dma_read_chnl_Pop_mioi_iswt0_tmp;
  reg reg_audio_in_Push_mioi_iswt0_tmp;
  wire while_mux_rmff;
  wire while_mux_1_rmff;
  wire while_for_data_mux_rmff;
  wire while_for_1_for_1_for_mux_rmff;
  wire [31:0] z_out;
  wire [32:0] nl_z_out;
  reg [63:0] mem_tmp_7_lpi_2;
  reg [63:0] mem_tmp_8_lpi_2;
  reg [63:0] mem_tmp_6_lpi_2;
  reg [63:0] mem_tmp_9_lpi_2;
  reg [63:0] mem_tmp_5_lpi_2;
  reg [63:0] mem_tmp_10_lpi_2;
  reg [63:0] mem_tmp_4_lpi_2;
  reg [63:0] mem_tmp_11_lpi_2;
  reg [63:0] mem_tmp_3_lpi_2;
  reg [63:0] mem_tmp_12_lpi_2;
  reg [63:0] mem_tmp_2_lpi_2;
  reg [63:0] mem_tmp_13_lpi_2;
  reg [63:0] mem_tmp_1_lpi_2;
  reg [63:0] mem_tmp_14_lpi_2;
  reg [63:0] mem_tmp_0_lpi_2;
  reg [63:0] mem_tmp_15_lpi_2;
  reg [31:0] while_length_sva;
  reg [1:0] while_for_1_for_1_k_2_0_sva_1_0;
  wire [31:0] while_length_sva_mx0w0;
  wire signed [61:0] nl_while_length_sva_mx0w0;
  wire operator_32_true_1_less_3;

  wire[15:0] while_for_1_for_1_for_out_reg_mux_1_nl;
  wire[15:0] while_for_1_for_1_for_out_reg_mux_2_nl;
  wire[15:0] while_for_1_for_1_for_out_reg_mux_3_nl;
  wire[15:0] while_for_1_for_1_for_out_reg_mux_4_nl;
  wire or_130_nl;
  wire[31:0] while_for_1_for_1_for_j_mux_nl;
  wire nor_4_nl;
  wire[31:0] while_for_1_for_mux1h_1_nl;
  wire or_159_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat;
  assign nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat
      = {3'b011 , dma_read_ctrl_Push_mioi_idat_63_32 , dma_read_ctrl_Push_mioi_idat_31_0};
  wire  nl_InputBuffer_run_run_fsm_inst_while_C_2_tr0;
  assign nl_InputBuffer_run_run_fsm_inst_while_C_2_tr0 = ~ xor_cse_1;
  wire  nl_InputBuffer_run_run_fsm_inst_while_for_1_for_1_C_1_tr0;
  assign nl_InputBuffer_run_run_fsm_inst_while_for_1_for_1_C_1_tr0 = z_out[2];
  InputBuffer_run_sync1_Pop_mioi InputBuffer_run_sync1_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync1_Pop_mioi_oswt(reg_sync1_Pop_mioi_iswt0_tmp),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp),
      .sync1_Pop_mioi_oswt_pff(while_mux_rmff)
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi InputBuffer_run_dma_read_ctrl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_ctrl_Push_mioi_oswt(reg_dma_read_ctrl_Push_mioi_iswt0_tmp),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp),
      .dma_read_ctrl_Push_mioi_idat(nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat[66:0]),
      .dma_read_ctrl_Push_mioi_oswt_pff(while_mux_1_rmff)
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi InputBuffer_run_dma_read_chnl_Pop_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .dma_read_chnl_Pop_mioi_oswt(reg_dma_read_chnl_Pop_mioi_iswt0_tmp),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp),
      .dma_read_chnl_Pop_mioi_idat_mxwt(dma_read_chnl_Pop_mioi_idat_mxwt),
      .dma_read_chnl_Pop_mioi_oswt_pff(while_for_data_mux_rmff)
    );
  InputBuffer_run_audio_in_Push_mioi InputBuffer_run_audio_in_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .audio_in_Push_mioi_oswt(reg_audio_in_Push_mioi_iswt0_tmp),
      .audio_in_Push_mioi_wen_comp(audio_in_Push_mioi_wen_comp),
      .audio_in_Push_mioi_idat(audio_in_Push_mioi_idat),
      .audio_in_Push_mioi_oswt_pff(while_for_1_for_1_for_mux_rmff)
    );
  InputBuffer_run_staller InputBuffer_run_staller_inst (
      .run_wen(run_wen_rtff),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp),
      .audio_in_Push_mioi_wen_comp(audio_in_Push_mioi_wen_comp)
    );
  InputBuffer_run_run_fsm InputBuffer_run_run_fsm_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .while_C_2_tr0(nl_InputBuffer_run_run_fsm_inst_while_C_2_tr0),
      .while_for_C_1_tr0(exit_while_for_sva),
      .while_C_3_tr0(exit_while_for_1_sva_mx0),
      .while_for_1_C_0_tr0(exit_while_for_1_for_sva_mx0),
      .while_for_1_for_C_1_tr0(exit_while_for_1_for_sva_mx0),
      .while_for_1_for_1_C_0_tr0(exit_while_for_1_for_1_for_sva_mx0),
      .while_for_1_for_1_for_C_1_tr0(exit_while_for_1_for_1_for_sva_mx0),
      .while_for_1_for_1_C_1_tr0(nl_InputBuffer_run_run_fsm_inst_while_for_1_for_1_C_1_tr0),
      .while_for_1_C_1_tr0(exit_while_for_1_sva_mx0)
    );
  assign mem_rsci_clken_d = run_wen;
  assign while_and_cse = run_wen & (fsm_output[1]);
  assign while_for_1_for_1_for_mux_rmff = MUX_s_1_2_2(reg_audio_in_Push_mioi_iswt0_tmp,
      (fsm_output[10]), run_wen);
  assign or_130_nl = (xor_cse_1 & (fsm_output[2])) | ((~ exit_while_for_sva) & (fsm_output[4]));
  assign while_for_data_mux_rmff = MUX_s_1_2_2(reg_dma_read_chnl_Pop_mioi_iswt0_tmp,
      or_130_nl, run_wen);
  assign while_mux_1_rmff = MUX_s_1_2_2(reg_dma_read_ctrl_Push_mioi_iswt0_tmp, (fsm_output[1]),
      run_wen);
  assign while_mux_rmff = MUX_s_1_2_2(reg_sync1_Pop_mioi_iswt0_tmp, (fsm_output[0]),
      run_wen);
  assign nl_while_length_sva_mx0w0 = $signed((cfg_block_size[31:2])) * $signed(cfg_src_num);
  assign while_length_sva_mx0w0 = nl_while_length_sva_mx0w0[31:0];
  assign exit_while_for_1_sva_mx0 = MUX_s_1_2_2((~ ($signed({1'b0, 1'b0}) < $signed((cfg_block_size[31:2])))),
      (~ ($signed(z_out) < $signed((cfg_block_size[31:2])))), fsm_output[13]);
  assign exit_while_for_1_for_sva_mx0 = MUX_s_1_2_2((~ operator_32_true_1_less_3),
      (~ ($signed(while_for_1_for_j_sva_1) < $signed(cfg_src_num))), fsm_output[8]);
  assign exit_while_for_1_for_1_for_sva_mx0 = MUX_s_1_2_2((~ operator_32_true_1_less_3),
      (~ ($signed(while_for_1_for_1_for_j_sva) < $signed(cfg_src_num))), fsm_output[11]);
  assign operator_32_true_1_less_3 = $signed({1'b0, 1'b0}) < $signed(cfg_src_num);
  assign or_dcpl_6 = (while_for_1_for_1_for_j_sva[2:1]!=2'b00);
  assign or_dcpl_7 = (while_for_1_for_1_for_j_sva[3]) | (while_for_1_for_1_for_j_sva[0]);
  assign or_dcpl_12 = (while_for_1_for_1_for_j_sva[3]) | (~ (while_for_1_for_1_for_j_sva[0]));
  assign or_dcpl_14 = (while_for_1_for_1_for_j_sva[2:1]!=2'b01);
  assign or_dcpl_15 = (~ (while_for_1_for_1_for_j_sva[3])) | (while_for_1_for_1_for_j_sva[0]);
  assign or_dcpl_17 = ~((while_for_1_for_1_for_j_sva[3]) & (while_for_1_for_1_for_j_sva[0]));
  assign or_dcpl_19 = (while_for_1_for_1_for_j_sva[2:1]!=2'b10);
  assign or_dcpl_22 = ~((while_for_1_for_1_for_j_sva[2:1]==2'b11));
  assign xor_cse_1 = 1'b0 < while_length_sva;
  assign mem_rsci_wadr_d_pff = while_for_1_for_1_for_j_sva[12:0];
  assign operator_32_true_acc_2_cmp_b = cfg_block_size[14:2];
  assign operator_32_true_acc_2_cmp_c = while_for_1_i_sva[12:0];
  assign mem_rsci_d_d = dma_read_chnl_Pop_mioi_idat_mxwt;
  assign mem_rsci_we_d_pff = fsm_output[3];
  assign mem_rsci_readA_r_ram_ir_internal_RMASK_B_d = fsm_output[7];
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Push_mioi_idat <= 16'b0000000000000000;
    end
    else if ( run_wen & (fsm_output[10]) ) begin
      audio_in_Push_mioi_idat <= MUX_v_16_4_2(while_for_1_for_1_for_out_reg_mux_1_nl,
          while_for_1_for_1_for_out_reg_mux_2_nl, while_for_1_for_1_for_out_reg_mux_3_nl,
          while_for_1_for_1_for_out_reg_mux_4_nl, while_for_1_for_1_k_2_0_sva_1_0);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_7_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_12 | or_dcpl_22)) & (fsm_output[8]) ) begin
      mem_tmp_7_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_8_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_15 | or_dcpl_6)) & (fsm_output[8]) ) begin
      mem_tmp_8_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_6_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_7 | or_dcpl_22)) & (fsm_output[8]) ) begin
      mem_tmp_6_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_9_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_17 | or_dcpl_6)) & (fsm_output[8]) ) begin
      mem_tmp_9_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_5_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_12 | or_dcpl_19)) & (fsm_output[8]) ) begin
      mem_tmp_5_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_10_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_15 | or_dcpl_14)) & (fsm_output[8]) ) begin
      mem_tmp_10_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_4_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_7 | or_dcpl_19)) & (fsm_output[8]) ) begin
      mem_tmp_4_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_11_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_17 | or_dcpl_14)) & (fsm_output[8]) ) begin
      mem_tmp_11_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_3_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_12 | or_dcpl_14)) & (fsm_output[8]) ) begin
      mem_tmp_3_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_12_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_15 | or_dcpl_19)) & (fsm_output[8]) ) begin
      mem_tmp_12_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_2_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_7 | or_dcpl_14)) & (fsm_output[8]) ) begin
      mem_tmp_2_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_13_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_17 | or_dcpl_19)) & (fsm_output[8]) ) begin
      mem_tmp_13_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_1_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_12 | or_dcpl_6)) & (fsm_output[8]) ) begin
      mem_tmp_1_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_14_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_15 | or_dcpl_22)) & (fsm_output[8]) ) begin
      mem_tmp_14_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_0_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_7 | or_dcpl_6)) & (fsm_output[8]) ) begin
      mem_tmp_0_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_15_lpi_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_17 | or_dcpl_22)) & (fsm_output[8]) ) begin
      mem_tmp_15_lpi_2 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_ctrl_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      dma_read_ctrl_Push_mioi_idat_63_32 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_cse ) begin
      dma_read_ctrl_Push_mioi_idat_31_0 <= cfg_input_base;
      dma_read_ctrl_Push_mioi_idat_63_32 <= while_length_sva_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_audio_in_Push_mioi_iswt0_tmp <= 1'b0;
      reg_dma_read_chnl_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_dma_read_ctrl_Push_mioi_iswt0_tmp <= 1'b0;
      reg_sync1_Pop_mioi_iswt0_tmp <= 1'b0;
      run_wen <= 1'b1;
    end
    else begin
      reg_audio_in_Push_mioi_iswt0_tmp <= while_for_1_for_1_for_mux_rmff;
      reg_dma_read_chnl_Pop_mioi_iswt0_tmp <= while_for_data_mux_rmff;
      reg_dma_read_ctrl_Push_mioi_iswt0_tmp <= while_mux_1_rmff;
      reg_sync1_Pop_mioi_iswt0_tmp <= while_mux_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_length_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (fsm_output[4:2]==3'b000) ) begin
      while_length_sva <= while_length_sva_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exit_while_for_sva <= 1'b0;
      while_for_1_for_j_sva_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen ) begin
      exit_while_for_sva <= ~ ($signed(z_out) < $signed({1'b0, while_length_sva}));
      while_for_1_for_j_sva_1 <= z_out;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_1_for_j_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((fsm_output[4]) | (fsm_output[7]) | (fsm_output[11])))
        ) begin
      while_for_1_for_1_for_j_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          while_for_1_for_1_for_j_mux_nl, nor_4_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & ((fsm_output[5]) | (fsm_output[13])) ) begin
      while_for_1_i_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000, z_out,
          (fsm_output[13]));
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_1_k_2_0_sva_1_0 <= 2'b00;
    end
    else if ( run_wen & ((fsm_output[12]) | (fsm_output[6]) | (fsm_output[8])) )
        begin
      while_for_1_for_1_k_2_0_sva_1_0 <= MUX_v_2_2_2(2'b00, (z_out[1:0]), (fsm_output[12]));
    end
  end
  assign while_for_1_for_1_for_out_reg_mux_1_nl = MUX_v_16_16_2((mem_tmp_0_lpi_2[15:0]),
      (mem_tmp_1_lpi_2[15:0]), (mem_tmp_2_lpi_2[15:0]), (mem_tmp_3_lpi_2[15:0]),
      (mem_tmp_4_lpi_2[15:0]), (mem_tmp_5_lpi_2[15:0]), (mem_tmp_6_lpi_2[15:0]),
      (mem_tmp_7_lpi_2[15:0]), (mem_tmp_8_lpi_2[15:0]), (mem_tmp_9_lpi_2[15:0]),
      (mem_tmp_10_lpi_2[15:0]), (mem_tmp_11_lpi_2[15:0]), (mem_tmp_12_lpi_2[15:0]),
      (mem_tmp_13_lpi_2[15:0]), (mem_tmp_14_lpi_2[15:0]), (mem_tmp_15_lpi_2[15:0]),
      while_for_1_for_1_for_j_sva[3:0]);
  assign while_for_1_for_1_for_out_reg_mux_2_nl = MUX_v_16_16_2((mem_tmp_0_lpi_2[31:16]),
      (mem_tmp_1_lpi_2[31:16]), (mem_tmp_2_lpi_2[31:16]), (mem_tmp_3_lpi_2[31:16]),
      (mem_tmp_4_lpi_2[31:16]), (mem_tmp_5_lpi_2[31:16]), (mem_tmp_6_lpi_2[31:16]),
      (mem_tmp_7_lpi_2[31:16]), (mem_tmp_8_lpi_2[31:16]), (mem_tmp_9_lpi_2[31:16]),
      (mem_tmp_10_lpi_2[31:16]), (mem_tmp_11_lpi_2[31:16]), (mem_tmp_12_lpi_2[31:16]),
      (mem_tmp_13_lpi_2[31:16]), (mem_tmp_14_lpi_2[31:16]), (mem_tmp_15_lpi_2[31:16]),
      while_for_1_for_1_for_j_sva[3:0]);
  assign while_for_1_for_1_for_out_reg_mux_3_nl = MUX_v_16_16_2((mem_tmp_0_lpi_2[47:32]),
      (mem_tmp_1_lpi_2[47:32]), (mem_tmp_2_lpi_2[47:32]), (mem_tmp_3_lpi_2[47:32]),
      (mem_tmp_4_lpi_2[47:32]), (mem_tmp_5_lpi_2[47:32]), (mem_tmp_6_lpi_2[47:32]),
      (mem_tmp_7_lpi_2[47:32]), (mem_tmp_8_lpi_2[47:32]), (mem_tmp_9_lpi_2[47:32]),
      (mem_tmp_10_lpi_2[47:32]), (mem_tmp_11_lpi_2[47:32]), (mem_tmp_12_lpi_2[47:32]),
      (mem_tmp_13_lpi_2[47:32]), (mem_tmp_14_lpi_2[47:32]), (mem_tmp_15_lpi_2[47:32]),
      while_for_1_for_1_for_j_sva[3:0]);
  assign while_for_1_for_1_for_out_reg_mux_4_nl = MUX_v_16_16_2((mem_tmp_0_lpi_2[63:48]),
      (mem_tmp_1_lpi_2[63:48]), (mem_tmp_2_lpi_2[63:48]), (mem_tmp_3_lpi_2[63:48]),
      (mem_tmp_4_lpi_2[63:48]), (mem_tmp_5_lpi_2[63:48]), (mem_tmp_6_lpi_2[63:48]),
      (mem_tmp_7_lpi_2[63:48]), (mem_tmp_8_lpi_2[63:48]), (mem_tmp_9_lpi_2[63:48]),
      (mem_tmp_10_lpi_2[63:48]), (mem_tmp_11_lpi_2[63:48]), (mem_tmp_12_lpi_2[63:48]),
      (mem_tmp_13_lpi_2[63:48]), (mem_tmp_14_lpi_2[63:48]), (mem_tmp_15_lpi_2[63:48]),
      while_for_1_for_1_for_j_sva[3:0]);
  assign while_for_1_for_1_for_j_mux_nl = MUX_v_32_2_2(z_out, while_for_1_for_j_sva_1,
      fsm_output[8]);
  assign nor_4_nl = ~((fsm_output[2]) | (fsm_output[9]) | (fsm_output[6]));
  assign or_159_nl = (fsm_output[10]) | (fsm_output[7]) | (fsm_output[3]);
  assign while_for_1_for_mux1h_1_nl = MUX1HOT_v_32_3_2(while_for_1_for_1_for_j_sva,
      while_for_1_i_sva, ({30'b000000000000000000000000000000 , while_for_1_for_1_k_2_0_sva_1_0}),
      {or_159_nl , (fsm_output[13]) , (fsm_output[12])});
  assign nl_z_out = while_for_1_for_mux1h_1_nl + 32'b00000000000000000000000000000001;
  assign z_out = nl_z_out[31:0];

  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_16_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input [15:0] input_2;
    input [15:0] input_3;
    input [15:0] input_4;
    input [15:0] input_5;
    input [15:0] input_6;
    input [15:0] input_7;
    input [15:0] input_8;
    input [15:0] input_9;
    input [15:0] input_10;
    input [15:0] input_11;
    input [15:0] input_12;
    input [15:0] input_13;
    input [15:0] input_14;
    input [15:0] input_15;
    input [3:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = input_0;
      end
      4'b0001 : begin
        result = input_1;
      end
      4'b0010 : begin
        result = input_2;
      end
      4'b0011 : begin
        result = input_3;
      end
      4'b0100 : begin
        result = input_4;
      end
      4'b0101 : begin
        result = input_5;
      end
      4'b0110 : begin
        result = input_6;
      end
      4'b0111 : begin
        result = input_7;
      end
      4'b1000 : begin
        result = input_8;
      end
      4'b1001 : begin
        result = input_9;
      end
      4'b1010 : begin
        result = input_10;
      end
      4'b1011 : begin
        result = input_11;
      end
      4'b1100 : begin
        result = input_12;
      end
      4'b1101 : begin
        result = input_13;
      end
      4'b1110 : begin
        result = input_14;
      end
      default : begin
        result = input_15;
      end
    endcase
    MUX_v_16_16_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_4_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input [15:0] input_2;
    input [15:0] input_3;
    input [1:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_16_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run
// ------------------------------------------------------------------


module Encoder_run (
  clk, rst, cfg_src_num, cfg_src_coeff_0, cfg_src_coeff_1, cfg_src_coeff_2, cfg_src_coeff_3,
      cfg_src_coeff_4, cfg_src_coeff_5, cfg_src_coeff_6, cfg_src_coeff_7, cfg_src_coeff_8,
      cfg_src_coeff_9, cfg_src_coeff_10, cfg_src_coeff_11, cfg_src_coeff_12, cfg_src_coeff_13,
      cfg_src_coeff_14, cfg_src_coeff_15, cfg_chan_coeff_0, cfg_chan_coeff_1, cfg_chan_coeff_2,
      cfg_chan_coeff_3, cfg_chan_coeff_4, cfg_chan_coeff_5, cfg_chan_coeff_6, cfg_chan_coeff_7,
      cfg_chan_coeff_8, cfg_chan_coeff_9, cfg_chan_coeff_10, cfg_chan_coeff_11, cfg_chan_coeff_12,
      cfg_chan_coeff_13, cfg_chan_coeff_14, cfg_chan_coeff_15, audio_in_val, audio_in_rdy,
      audio_in_msg, audio_out_val, audio_out_rdy, audio_out_msg, while_for_1_mul_cmp_b,
      while_for_1_mul_cmp_en, while_for_1_mul_cmp_z, while_for_1_mul_cmp_1_b, while_for_1_mul_cmp_1_z,
      while_for_1_mul_cmp_2_b, while_for_1_mul_cmp_2_z, while_for_1_mul_cmp_3_b,
      while_for_1_mul_cmp_3_z, while_for_1_mul_cmp_4_b, while_for_1_mul_cmp_4_z,
      while_for_1_mul_cmp_5_b, while_for_1_mul_cmp_5_z, while_for_1_mul_cmp_6_b,
      while_for_1_mul_cmp_6_z, while_for_1_mul_cmp_7_b, while_for_1_mul_cmp_7_z,
      while_for_1_mul_cmp_8_b, while_for_1_mul_cmp_8_z, while_for_1_mul_cmp_9_b,
      while_for_1_mul_cmp_9_z, while_for_1_mul_cmp_10_b, while_for_1_mul_cmp_10_z,
      while_for_1_mul_cmp_11_b, while_for_1_mul_cmp_11_z, while_for_1_mul_cmp_12_b,
      while_for_1_mul_cmp_12_z, while_for_1_mul_cmp_13_b, while_for_1_mul_cmp_13_z,
      while_for_1_mul_cmp_14_b, while_for_1_mul_cmp_14_z, while_for_1_mul_cmp_15_b,
      while_for_1_mul_cmp_15_z, while_for_1_mul_cmp_a_pff
);
  input clk;
  input rst;
  input [31:0] cfg_src_num;
  input [31:0] cfg_src_coeff_0;
  input [31:0] cfg_src_coeff_1;
  input [31:0] cfg_src_coeff_2;
  input [31:0] cfg_src_coeff_3;
  input [31:0] cfg_src_coeff_4;
  input [31:0] cfg_src_coeff_5;
  input [31:0] cfg_src_coeff_6;
  input [31:0] cfg_src_coeff_7;
  input [31:0] cfg_src_coeff_8;
  input [31:0] cfg_src_coeff_9;
  input [31:0] cfg_src_coeff_10;
  input [31:0] cfg_src_coeff_11;
  input [31:0] cfg_src_coeff_12;
  input [31:0] cfg_src_coeff_13;
  input [31:0] cfg_src_coeff_14;
  input [31:0] cfg_src_coeff_15;
  input [31:0] cfg_chan_coeff_0;
  input [31:0] cfg_chan_coeff_1;
  input [31:0] cfg_chan_coeff_2;
  input [31:0] cfg_chan_coeff_3;
  input [31:0] cfg_chan_coeff_4;
  input [31:0] cfg_chan_coeff_5;
  input [31:0] cfg_chan_coeff_6;
  input [31:0] cfg_chan_coeff_7;
  input [31:0] cfg_chan_coeff_8;
  input [31:0] cfg_chan_coeff_9;
  input [31:0] cfg_chan_coeff_10;
  input [31:0] cfg_chan_coeff_11;
  input [31:0] cfg_chan_coeff_12;
  input [31:0] cfg_chan_coeff_13;
  input [31:0] cfg_chan_coeff_14;
  input [31:0] cfg_chan_coeff_15;
  input audio_in_val;
  output audio_in_rdy;
  input [15:0] audio_in_msg;
  output audio_out_val;
  input audio_out_rdy;
  output [511:0] audio_out_msg;
  output [47:0] while_for_1_mul_cmp_b;
  output while_for_1_mul_cmp_en;
  input [62:0] while_for_1_mul_cmp_z;
  output [47:0] while_for_1_mul_cmp_1_b;
  input [62:0] while_for_1_mul_cmp_1_z;
  output [47:0] while_for_1_mul_cmp_2_b;
  input [62:0] while_for_1_mul_cmp_2_z;
  output [47:0] while_for_1_mul_cmp_3_b;
  input [62:0] while_for_1_mul_cmp_3_z;
  output [47:0] while_for_1_mul_cmp_4_b;
  input [62:0] while_for_1_mul_cmp_4_z;
  output [47:0] while_for_1_mul_cmp_5_b;
  input [62:0] while_for_1_mul_cmp_5_z;
  output [47:0] while_for_1_mul_cmp_6_b;
  input [62:0] while_for_1_mul_cmp_6_z;
  output [47:0] while_for_1_mul_cmp_7_b;
  input [62:0] while_for_1_mul_cmp_7_z;
  output [47:0] while_for_1_mul_cmp_8_b;
  input [62:0] while_for_1_mul_cmp_8_z;
  output [47:0] while_for_1_mul_cmp_9_b;
  input [62:0] while_for_1_mul_cmp_9_z;
  output [47:0] while_for_1_mul_cmp_10_b;
  input [62:0] while_for_1_mul_cmp_10_z;
  output [47:0] while_for_1_mul_cmp_11_b;
  input [62:0] while_for_1_mul_cmp_11_z;
  output [47:0] while_for_1_mul_cmp_12_b;
  input [62:0] while_for_1_mul_cmp_12_z;
  output [47:0] while_for_1_mul_cmp_13_b;
  input [62:0] while_for_1_mul_cmp_13_z;
  output [47:0] while_for_1_mul_cmp_14_b;
  input [62:0] while_for_1_mul_cmp_14_z;
  output [47:0] while_for_1_mul_cmp_15_b;
  input [62:0] while_for_1_mul_cmp_15_z;
  output [31:0] while_for_1_mul_cmp_a_pff;


  // Interconnect Declarations
  reg run_wen;
  wire run_wten;
  wire audio_in_Pop_mioi_bawt;
  wire audio_in_Pop_mioi_wen_comp;
  wire [15:0] audio_in_Pop_mioi_idat_mxwt;
  wire audio_in_Pop_mioi_ivld;
  wire audio_in_Pop_mioi_ivld_oreg;
  wire audio_out_Push_mioi_bawt;
  wire audio_out_Push_mioi_wen_comp;
  wire audio_out_Push_mioi_irdy;
  wire audio_out_Push_mioi_irdy_oreg;
  reg [31:0] audio_out_Push_mioi_idat_511_480;
  reg [31:0] audio_out_Push_mioi_idat_479_448;
  reg [31:0] audio_out_Push_mioi_idat_447_416;
  reg [31:0] audio_out_Push_mioi_idat_415_384;
  reg [31:0] audio_out_Push_mioi_idat_383_352;
  reg [31:0] audio_out_Push_mioi_idat_351_320;
  reg [31:0] audio_out_Push_mioi_idat_319_288;
  reg [31:0] audio_out_Push_mioi_idat_287_256;
  reg [31:0] audio_out_Push_mioi_idat_255_224;
  reg [31:0] audio_out_Push_mioi_idat_223_192;
  reg [31:0] audio_out_Push_mioi_idat_191_160;
  reg [31:0] audio_out_Push_mioi_idat_159_128;
  reg [31:0] audio_out_Push_mioi_idat_127_96;
  reg [31:0] audio_out_Push_mioi_idat_95_64;
  reg [31:0] audio_out_Push_mioi_idat_63_32;
  reg [31:0] audio_out_Push_mioi_idat_31_0;
  wire [7:0] operator_8_true_acc_tmp;
  wire [8:0] nl_operator_8_true_acc_tmp;
  wire while_equal_tmp;
  wire or_dcpl_10;
  wire or_dcpl_11;
  wire or_dcpl_12;
  wire and_dcpl_8;
  wire and_dcpl_9;
  wire or_dcpl_14;
  wire or_dcpl_15;
  wire not_tmp_19;
  wire or_dcpl_17;
  wire or_dcpl_18;
  wire or_dcpl_19;
  wire while_while_or_3_cse_1;
  wire while_while_or_cse_1;
  reg while_equal_svs_st_1;
  reg [7:0] src_idx_sva;
  wire run_wen_rtff;
  reg reg_while_equal_svs_st_2_tmp;
  reg reg_audio_out_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_4_tmp;
  reg reg_audio_in_Pop_mioi_iswt0_tmp;
  reg reg_while_stage_v_1_tmp;
  reg reg_while_stage_v_2_tmp;
  reg reg_while_stage_v_3_tmp;
  wire audio_in_Pop_mioi_wen_comp_iff;
  wire or_dcpl_17_pff;
  wire and_dcpl_9_pff;
  wire and_dcpl_8_pff;
  wire while_if_mux_3_rmff;
  wire audio_out_Push_mioi_bawt_iff;
  wire while_if_mux_4_rmff;
  wire while_mux_rmff;
  wire audio_in_Pop_mioi_bawt_iff;
  wire run_wten_iff;
  wire while_audio_in_reg_mux_rmff;
  wire while_mux_1_rmff;
  wire audio_out_Push_mioi_wen_comp_iff;
  wire while_while_or_3_cse_1_pff;
  wire while_while_or_cse_1_pff;
  wire while_mux_2_rmff;
  wire while_mux_3_rmff;
  reg [31:0] audio_out_reg_data_7_sva;
  reg [31:0] audio_out_reg_data_8_sva;
  reg [31:0] audio_out_reg_data_6_sva;
  reg [31:0] audio_out_reg_data_9_sva;
  reg [31:0] audio_out_reg_data_5_sva;
  reg [31:0] audio_out_reg_data_10_sva;
  reg [31:0] audio_out_reg_data_4_sva;
  reg [31:0] audio_out_reg_data_11_sva;
  reg [31:0] audio_out_reg_data_3_sva;
  reg [31:0] audio_out_reg_data_12_sva;
  reg [31:0] audio_out_reg_data_2_sva;
  reg [31:0] audio_out_reg_data_13_sva;
  reg [31:0] audio_out_reg_data_1_sva;
  reg [31:0] audio_out_reg_data_14_sva;
  reg [31:0] audio_out_reg_data_0_sva;
  reg [31:0] audio_out_reg_data_15_sva;
  wire audio_out_Push_mioi_iswt0_mx0c1;
  wire [31:0] audio_out_reg_data_15_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_15_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_0_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_0_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_14_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_14_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_1_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_1_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_13_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_13_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_2_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_2_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_12_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_12_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_3_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_3_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_11_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_11_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_4_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_4_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_10_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_10_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_5_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_5_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_9_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_9_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_6_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_6_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_8_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_8_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_7_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_7_sva_1_mx0w0;
  wire while_stage_v_2_mx1c1;
  wire while_stage_v_3_mx1c1;
  wire while_stage_v_4_mx1c1;
  wire while_if_and_2_cse;
  wire audio_out_reg_data_and_cse;

  wire while_if_and_nl;
  wire while_if_not_17_nl;
  wire while_and_6_nl;
  wire while_and_7_nl;
  wire while_if_not_36_nl;
  wire while_if_not_37_nl;
  wire while_if_not_38_nl;
  wire while_if_not_39_nl;
  wire while_if_not_40_nl;
  wire while_if_not_41_nl;
  wire while_if_not_42_nl;
  wire while_if_not_43_nl;
  wire while_if_not_44_nl;
  wire while_if_not_45_nl;
  wire while_if_not_46_nl;
  wire while_if_not_47_nl;
  wire while_if_not_48_nl;
  wire while_if_not_49_nl;
  wire while_if_not_50_nl;
  wire while_if_not_33_nl;
  wire while_and_8_nl;
  wire[32:0] operator_32_true_acc_nl;
  wire[33:0] nl_operator_32_true_acc_nl;
  wire mux_2_nl;
  wire nor_5_nl;
  wire or_19_nl;
  wire mux_3_nl;
  wire nor_7_nl;
  wire nor_8_nl;
  wire mux_4_nl;
  wire nor_9_nl;
  wire nor_10_nl;
  wire mux_5_nl;
  wire nor_11_nl;
  wire nor_12_nl;
  wire mux_6_nl;
  wire nor_13_nl;
  wire nor_14_nl;
  wire mux_7_nl;
  wire nor_15_nl;
  wire nor_16_nl;
  wire mux_8_nl;
  wire nor_17_nl;
  wire nor_18_nl;
  wire mux_9_nl;
  wire nor_19_nl;
  wire nor_20_nl;
  wire mux_10_nl;
  wire nor_21_nl;
  wire nor_22_nl;
  wire mux_11_nl;
  wire nor_23_nl;
  wire nor_24_nl;
  wire mux_12_nl;
  wire nor_25_nl;
  wire nor_26_nl;
  wire mux_13_nl;
  wire nor_27_nl;
  wire nor_28_nl;
  wire mux_14_nl;
  wire nor_29_nl;
  wire nor_30_nl;
  wire mux_15_nl;
  wire and_28_nl;
  wire nor_31_nl;
  wire mux_16_nl;
  wire and_29_nl;
  wire nor_32_nl;
  wire mux_17_nl;
  wire and_31_nl;
  wire and_32_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg;
  assign nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg = ~ or_dcpl_17;
  wire  nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg_pff;
  assign nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg_pff =
      ~ or_dcpl_17_pff;
  wire  nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg;
  assign nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg =
      reg_while_equal_svs_st_2_tmp & audio_out_Push_mioi_bawt & reg_while_stage_v_4_tmp;
  wire [511:0] nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_idat;
  assign nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_idat = {audio_out_Push_mioi_idat_511_480
      , audio_out_Push_mioi_idat_479_448 , audio_out_Push_mioi_idat_447_416 , audio_out_Push_mioi_idat_415_384
      , audio_out_Push_mioi_idat_383_352 , audio_out_Push_mioi_idat_351_320 , audio_out_Push_mioi_idat_319_288
      , audio_out_Push_mioi_idat_287_256 , audio_out_Push_mioi_idat_255_224 , audio_out_Push_mioi_idat_223_192
      , audio_out_Push_mioi_idat_191_160 , audio_out_Push_mioi_idat_159_128 , audio_out_Push_mioi_idat_127_96
      , audio_out_Push_mioi_idat_95_64 , audio_out_Push_mioi_idat_63_32 , audio_out_Push_mioi_idat_31_0};
  wire  nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg_pff;
  assign nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg_pff
      = while_if_mux_3_rmff & audio_out_Push_mioi_bawt_iff & while_mux_rmff;
  wire  nl_Encoder_run_staller_inst_run_flen_unreg;
  assign nl_Encoder_run_staller_inst_run_flen_unreg = ~(((~(reg_while_stage_v_1_tmp
      & or_dcpl_17)) & while_while_or_3_cse_1 & while_while_or_cse_1) | (reg_while_stage_v_1_tmp
      & (~(reg_while_stage_v_2_tmp & or_dcpl_14)) & while_while_or_3_cse_1 & while_while_or_cse_1)
      | (reg_while_stage_v_2_tmp & (~(reg_while_stage_v_3_tmp & or_dcpl_19)) & while_while_or_cse_1)
      | (reg_while_stage_v_3_tmp & (~(reg_while_stage_v_4_tmp & and_dcpl_8)) & while_while_or_cse_1)
      | (reg_while_stage_v_4_tmp & while_while_or_cse_1));
  wire  nl_Encoder_run_staller_inst_run_flen_unreg_pff;
  assign nl_Encoder_run_staller_inst_run_flen_unreg_pff = ~(((~(while_mux_1_rmff
      & or_dcpl_17_pff)) & while_while_or_3_cse_1_pff & while_while_or_cse_1_pff)
      | (while_mux_1_rmff & (~(while_mux_2_rmff & and_dcpl_9_pff)) & while_while_or_3_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_2_rmff & (~(while_mux_3_rmff & and_dcpl_9_pff))
      & while_while_or_cse_1_pff) | (while_mux_3_rmff & (~(while_mux_rmff & and_dcpl_8_pff))
      & while_while_or_cse_1_pff) | (while_mux_rmff & while_while_or_cse_1_pff));
  Encoder_run_audio_in_Pop_mioi Encoder_run_audio_in_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .audio_in_Pop_mioi_oswt_unreg(nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg),
      .audio_in_Pop_mioi_bawt(audio_in_Pop_mioi_bawt),
      .audio_in_Pop_mioi_iswt0(reg_audio_in_Pop_mioi_iswt0_tmp),
      .audio_in_Pop_mioi_wen_comp(audio_in_Pop_mioi_wen_comp),
      .audio_in_Pop_mioi_idat_mxwt(audio_in_Pop_mioi_idat_mxwt),
      .audio_in_Pop_mioi_ivld(audio_in_Pop_mioi_ivld),
      .audio_in_Pop_mioi_ivld_oreg(audio_in_Pop_mioi_ivld_oreg),
      .audio_in_Pop_mioi_wen_comp_pff(audio_in_Pop_mioi_wen_comp_iff),
      .audio_in_Pop_mioi_oswt_unreg_pff(nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg_pff),
      .audio_in_Pop_mioi_bawt_pff(audio_in_Pop_mioi_bawt_iff),
      .run_wten_pff(run_wten_iff),
      .audio_in_Pop_mioi_iswt0_pff(while_audio_in_reg_mux_rmff),
      .audio_in_Pop_mioi_ivld_oreg_pff(audio_in_Pop_mioi_ivld)
    );
  Encoder_run_wait_dp Encoder_run_wait_dp_inst (
      .clk(clk),
      .rst(rst),
      .audio_in_Pop_mioi_ivld(audio_in_Pop_mioi_ivld),
      .audio_in_Pop_mioi_ivld_oreg(audio_in_Pop_mioi_ivld_oreg),
      .audio_out_Push_mioi_irdy(audio_out_Push_mioi_irdy),
      .audio_out_Push_mioi_irdy_oreg(audio_out_Push_mioi_irdy_oreg)
    );
  Encoder_run_audio_out_Push_mioi Encoder_run_audio_out_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg),
      .run_wen(run_wen),
      .audio_out_Push_mioi_oswt_unreg(nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg),
      .audio_out_Push_mioi_bawt(audio_out_Push_mioi_bawt),
      .audio_out_Push_mioi_iswt0(reg_audio_out_Push_mioi_iswt0_tmp),
      .audio_out_Push_mioi_wen_comp(audio_out_Push_mioi_wen_comp),
      .audio_out_Push_mioi_idat(nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_idat[511:0]),
      .audio_out_Push_mioi_irdy(audio_out_Push_mioi_irdy),
      .audio_out_Push_mioi_irdy_oreg(audio_out_Push_mioi_irdy_oreg),
      .audio_out_Push_mioi_bawt_pff(audio_out_Push_mioi_bawt_iff),
      .audio_out_Push_mioi_iswt0_pff(while_if_mux_4_rmff),
      .audio_out_Push_mioi_irdy_oreg_pff(audio_out_Push_mioi_irdy),
      .audio_out_Push_mioi_wen_comp_pff(audio_out_Push_mioi_wen_comp_iff),
      .audio_out_Push_mioi_oswt_unreg_pff(nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg_pff)
    );
  Encoder_run_staller Encoder_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen_rtff),
      .run_wten(run_wten),
      .audio_in_Pop_mioi_wen_comp(audio_in_Pop_mioi_wen_comp),
      .audio_out_Push_mioi_wen_comp(audio_out_Push_mioi_wen_comp),
      .run_flen_unreg(nl_Encoder_run_staller_inst_run_flen_unreg),
      .audio_in_Pop_mioi_wen_comp_pff(audio_in_Pop_mioi_wen_comp_iff),
      .run_wten_pff(run_wten_iff),
      .audio_out_Push_mioi_wen_comp_pff(audio_out_Push_mioi_wen_comp_iff),
      .run_flen_unreg_pff(nl_Encoder_run_staller_inst_run_flen_unreg_pff)
    );
  assign while_for_1_mul_cmp_en = ~(and_dcpl_9 | (or_dcpl_15 & (~ reg_while_stage_v_2_tmp)));
  assign while_if_and_nl = run_wen & ((or_dcpl_11 & while_equal_svs_st_1 & reg_while_stage_v_3_tmp)
      | audio_out_Push_mioi_iswt0_mx0c1);
  assign while_if_mux_4_rmff = MUX_s_1_2_2(reg_audio_out_Push_mioi_iswt0_tmp, (~
      audio_out_Push_mioi_iswt0_mx0c1), while_if_and_nl);
  assign while_if_and_2_cse = run_wen & (~(and_dcpl_9 | or_dcpl_12));
  assign while_audio_in_reg_mux_rmff = MUX_s_1_2_2(reg_audio_in_Pop_mioi_iswt0_tmp,
      (~ or_dcpl_18), run_wen);
  assign while_mux_1_rmff = reg_while_stage_v_1_tmp | (run_wen & (~ or_dcpl_18));
  assign while_and_6_nl = run_wen & ((or_dcpl_11 & audio_in_Pop_mioi_bawt & reg_while_stage_v_1_tmp)
      | while_stage_v_2_mx1c1);
  assign while_mux_2_rmff = MUX_s_1_2_2(reg_while_stage_v_2_tmp, (~ while_stage_v_2_mx1c1),
      while_and_6_nl);
  assign while_and_7_nl = run_wen & ((or_dcpl_11 & reg_while_stage_v_2_tmp) | while_stage_v_3_mx1c1);
  assign while_mux_3_rmff = MUX_s_1_2_2(reg_while_stage_v_3_tmp, (~ while_stage_v_3_mx1c1),
      while_and_7_nl);
  assign audio_out_reg_data_and_cse = run_wen & (~ or_dcpl_19);
  assign while_and_8_nl = run_wen & ((or_dcpl_11 & reg_while_stage_v_3_tmp) | while_stage_v_4_mx1c1);
  assign while_mux_rmff = MUX_s_1_2_2(reg_while_stage_v_4_tmp, (~ while_stage_v_4_mx1c1),
      while_and_8_nl);
  assign while_if_mux_3_rmff = MUX_s_1_2_2(reg_while_equal_svs_st_2_tmp, while_equal_svs_st_1,
      audio_out_reg_data_and_cse);
  assign nl_audio_out_reg_data_15_sva_1_mx0w0 = audio_out_reg_data_15_sva + (while_for_1_mul_cmp_1_z[62:31]);
  assign audio_out_reg_data_15_sva_1_mx0w0 = nl_audio_out_reg_data_15_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_0_sva_1_mx0w0 = audio_out_reg_data_0_sva + (while_for_1_mul_cmp_z[62:31]);
  assign audio_out_reg_data_0_sva_1_mx0w0 = nl_audio_out_reg_data_0_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_14_sva_1_mx0w0 = audio_out_reg_data_14_sva + (while_for_1_mul_cmp_2_z[62:31]);
  assign audio_out_reg_data_14_sva_1_mx0w0 = nl_audio_out_reg_data_14_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_1_sva_1_mx0w0 = audio_out_reg_data_1_sva + (while_for_1_mul_cmp_15_z[62:31]);
  assign audio_out_reg_data_1_sva_1_mx0w0 = nl_audio_out_reg_data_1_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_13_sva_1_mx0w0 = audio_out_reg_data_13_sva + (while_for_1_mul_cmp_3_z[62:31]);
  assign audio_out_reg_data_13_sva_1_mx0w0 = nl_audio_out_reg_data_13_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_2_sva_1_mx0w0 = audio_out_reg_data_2_sva + (while_for_1_mul_cmp_14_z[62:31]);
  assign audio_out_reg_data_2_sva_1_mx0w0 = nl_audio_out_reg_data_2_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_12_sva_1_mx0w0 = audio_out_reg_data_12_sva + (while_for_1_mul_cmp_4_z[62:31]);
  assign audio_out_reg_data_12_sva_1_mx0w0 = nl_audio_out_reg_data_12_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_3_sva_1_mx0w0 = audio_out_reg_data_3_sva + (while_for_1_mul_cmp_13_z[62:31]);
  assign audio_out_reg_data_3_sva_1_mx0w0 = nl_audio_out_reg_data_3_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_11_sva_1_mx0w0 = audio_out_reg_data_11_sva + (while_for_1_mul_cmp_5_z[62:31]);
  assign audio_out_reg_data_11_sva_1_mx0w0 = nl_audio_out_reg_data_11_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_4_sva_1_mx0w0 = audio_out_reg_data_4_sva + (while_for_1_mul_cmp_12_z[62:31]);
  assign audio_out_reg_data_4_sva_1_mx0w0 = nl_audio_out_reg_data_4_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_10_sva_1_mx0w0 = audio_out_reg_data_10_sva + (while_for_1_mul_cmp_6_z[62:31]);
  assign audio_out_reg_data_10_sva_1_mx0w0 = nl_audio_out_reg_data_10_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_5_sva_1_mx0w0 = audio_out_reg_data_5_sva + (while_for_1_mul_cmp_11_z[62:31]);
  assign audio_out_reg_data_5_sva_1_mx0w0 = nl_audio_out_reg_data_5_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_9_sva_1_mx0w0 = audio_out_reg_data_9_sva + (while_for_1_mul_cmp_7_z[62:31]);
  assign audio_out_reg_data_9_sva_1_mx0w0 = nl_audio_out_reg_data_9_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_6_sva_1_mx0w0 = audio_out_reg_data_6_sva + (while_for_1_mul_cmp_10_z[62:31]);
  assign audio_out_reg_data_6_sva_1_mx0w0 = nl_audio_out_reg_data_6_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_8_sva_1_mx0w0 = audio_out_reg_data_8_sva + (while_for_1_mul_cmp_8_z[62:31]);
  assign audio_out_reg_data_8_sva_1_mx0w0 = nl_audio_out_reg_data_8_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_7_sva_1_mx0w0 = audio_out_reg_data_7_sva + (while_for_1_mul_cmp_9_z[62:31]);
  assign audio_out_reg_data_7_sva_1_mx0w0 = nl_audio_out_reg_data_7_sva_1_mx0w0[31:0];
  assign nl_operator_8_true_acc_tmp = src_idx_sva + 8'b00000001;
  assign operator_8_true_acc_tmp = nl_operator_8_true_acc_tmp[7:0];
  assign nl_operator_32_true_acc_nl = conv_s2s_32_33(cfg_src_num) + 33'b111111111111111111111111111111111;
  assign operator_32_true_acc_nl = nl_operator_32_true_acc_nl[32:0];
  assign while_equal_tmp = conv_s2s_8_33(src_idx_sva) == operator_32_true_acc_nl;
  assign while_while_or_3_cse_1 = audio_in_Pop_mioi_bawt | (~ reg_while_stage_v_1_tmp);
  assign while_while_or_cse_1 = audio_out_Push_mioi_bawt | (~(reg_while_equal_svs_st_2_tmp
      & reg_while_stage_v_4_tmp));
  assign or_dcpl_10 = (~ reg_while_equal_svs_st_2_tmp) | audio_out_Push_mioi_bawt;
  assign or_dcpl_11 = or_dcpl_10 | (~ reg_while_stage_v_4_tmp);
  assign or_dcpl_12 = ~(reg_while_stage_v_3_tmp & while_equal_svs_st_1);
  assign and_dcpl_8 = reg_while_equal_svs_st_2_tmp & (~ audio_out_Push_mioi_bawt);
  assign and_dcpl_9 = and_dcpl_8 & reg_while_stage_v_4_tmp;
  assign or_dcpl_14 = and_dcpl_9 | (~ reg_while_stage_v_2_tmp);
  assign or_dcpl_15 = ~(audio_in_Pop_mioi_bawt & reg_while_stage_v_1_tmp);
  assign not_tmp_19 = ~((src_idx_sva[1:0]==2'b11));
  assign or_dcpl_17 = and_dcpl_9 | or_dcpl_15;
  assign or_dcpl_18 = and_dcpl_9 | ((~ audio_in_Pop_mioi_bawt) & reg_while_stage_v_1_tmp);
  assign or_dcpl_19 = and_dcpl_9 | (~ reg_while_stage_v_3_tmp);
  assign audio_out_Push_mioi_iswt0_mx0c1 = reg_while_equal_svs_st_2_tmp & audio_out_Push_mioi_bawt
      & reg_while_stage_v_4_tmp & or_dcpl_12;
  assign while_stage_v_2_mx1c1 = or_dcpl_11 & or_dcpl_15 & reg_while_stage_v_2_tmp;
  assign while_stage_v_3_mx1c1 = or_dcpl_11 & reg_while_stage_v_3_tmp & (~ reg_while_stage_v_2_tmp);
  assign while_stage_v_4_mx1c1 = or_dcpl_10 & reg_while_stage_v_4_tmp & (~ reg_while_stage_v_3_tmp);
  assign nor_5_nl = ~((src_idx_sva[3:0]!=4'b0000));
  assign or_19_nl = (~((operator_8_true_acc_tmp[3:0]!=4'b0000))) | while_equal_tmp;
  assign mux_2_nl = MUX_s_1_2_2(nor_5_nl, or_19_nl, reg_while_stage_v_2_tmp);
  assign nor_7_nl = ~((src_idx_sva[3:0]!=4'b0001));
  assign nor_8_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0001) | while_equal_tmp);
  assign mux_3_nl = MUX_s_1_2_2(nor_7_nl, nor_8_nl, reg_while_stage_v_2_tmp);
  assign nor_9_nl = ~((src_idx_sva[3:0]!=4'b0010));
  assign nor_10_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0010) | while_equal_tmp);
  assign mux_4_nl = MUX_s_1_2_2(nor_9_nl, nor_10_nl, reg_while_stage_v_2_tmp);
  assign nor_11_nl = ~((src_idx_sva[3:2]!=2'b00) | not_tmp_19);
  assign nor_12_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0011) | while_equal_tmp);
  assign mux_5_nl = MUX_s_1_2_2(nor_11_nl, nor_12_nl, reg_while_stage_v_2_tmp);
  assign nor_13_nl = ~((src_idx_sva[3:0]!=4'b0100));
  assign nor_14_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0100) | while_equal_tmp);
  assign mux_6_nl = MUX_s_1_2_2(nor_13_nl, nor_14_nl, reg_while_stage_v_2_tmp);
  assign nor_15_nl = ~((src_idx_sva[3:0]!=4'b0101));
  assign nor_16_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0101) | while_equal_tmp);
  assign mux_7_nl = MUX_s_1_2_2(nor_15_nl, nor_16_nl, reg_while_stage_v_2_tmp);
  assign nor_17_nl = ~((src_idx_sva[3:0]!=4'b0110));
  assign nor_18_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0110) | while_equal_tmp);
  assign mux_8_nl = MUX_s_1_2_2(nor_17_nl, nor_18_nl, reg_while_stage_v_2_tmp);
  assign nor_19_nl = ~((src_idx_sva[3:0]!=4'b0111));
  assign nor_20_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0111) | while_equal_tmp);
  assign mux_9_nl = MUX_s_1_2_2(nor_19_nl, nor_20_nl, reg_while_stage_v_2_tmp);
  assign nor_21_nl = ~((src_idx_sva[3:0]!=4'b1000));
  assign nor_22_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1000) | while_equal_tmp);
  assign mux_10_nl = MUX_s_1_2_2(nor_21_nl, nor_22_nl, reg_while_stage_v_2_tmp);
  assign nor_23_nl = ~((src_idx_sva[3:0]!=4'b1001));
  assign nor_24_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1001) | while_equal_tmp);
  assign mux_11_nl = MUX_s_1_2_2(nor_23_nl, nor_24_nl, reg_while_stage_v_2_tmp);
  assign nor_25_nl = ~((src_idx_sva[3:0]!=4'b1010));
  assign nor_26_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1010) | while_equal_tmp);
  assign mux_12_nl = MUX_s_1_2_2(nor_25_nl, nor_26_nl, reg_while_stage_v_2_tmp);
  assign nor_27_nl = ~((src_idx_sva[3:2]!=2'b10) | not_tmp_19);
  assign nor_28_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1011) | while_equal_tmp);
  assign mux_13_nl = MUX_s_1_2_2(nor_27_nl, nor_28_nl, reg_while_stage_v_2_tmp);
  assign nor_29_nl = ~((src_idx_sva[3:0]!=4'b1100));
  assign nor_30_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1100) | while_equal_tmp);
  assign mux_14_nl = MUX_s_1_2_2(nor_29_nl, nor_30_nl, reg_while_stage_v_2_tmp);
  assign and_28_nl = (src_idx_sva[3:0]==4'b1101);
  assign nor_31_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1101) | while_equal_tmp);
  assign mux_15_nl = MUX_s_1_2_2(and_28_nl, nor_31_nl, reg_while_stage_v_2_tmp);
  assign and_29_nl = (src_idx_sva[3:0]==4'b1110);
  assign nor_32_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1110) | while_equal_tmp);
  assign mux_16_nl = MUX_s_1_2_2(and_29_nl, nor_32_nl, reg_while_stage_v_2_tmp);
  assign and_31_nl = (src_idx_sva[3:0]==4'b1111);
  assign and_32_nl = (operator_8_true_acc_tmp[3:0]==4'b1111) & (~ while_equal_tmp);
  assign mux_17_nl = MUX_s_1_2_2(and_31_nl, and_32_nl, reg_while_stage_v_2_tmp);
  assign while_for_1_mul_cmp_a_pff = MUX1HOT_v_32_16_2(cfg_src_coeff_0, cfg_src_coeff_1,
      cfg_src_coeff_2, cfg_src_coeff_3, cfg_src_coeff_4, cfg_src_coeff_5, cfg_src_coeff_6,
      cfg_src_coeff_7, cfg_src_coeff_8, cfg_src_coeff_9, cfg_src_coeff_10, cfg_src_coeff_11,
      cfg_src_coeff_12, cfg_src_coeff_13, cfg_src_coeff_14, cfg_src_coeff_15, {mux_2_nl
      , mux_3_nl , mux_4_nl , mux_5_nl , mux_6_nl , mux_7_nl , mux_8_nl , mux_9_nl
      , mux_10_nl , mux_11_nl , mux_12_nl , mux_13_nl , mux_14_nl , mux_15_nl , mux_16_nl
      , mux_17_nl});
  assign while_for_1_mul_cmp_b = conv_s2u_48_48($signed(cfg_chan_coeff_0) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_1_b = conv_s2u_48_48($signed(cfg_chan_coeff_15) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_2_b = conv_s2u_48_48($signed(cfg_chan_coeff_14) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_3_b = conv_s2u_48_48($signed(cfg_chan_coeff_13) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_4_b = conv_s2u_48_48($signed(cfg_chan_coeff_12) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_5_b = conv_s2u_48_48($signed(cfg_chan_coeff_11) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_6_b = conv_s2u_48_48($signed(cfg_chan_coeff_10) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_7_b = conv_s2u_48_48($signed(cfg_chan_coeff_9) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_8_b = conv_s2u_48_48($signed(cfg_chan_coeff_8) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_9_b = conv_s2u_48_48($signed(cfg_chan_coeff_7) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_10_b = conv_s2u_48_48($signed(cfg_chan_coeff_6) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_11_b = conv_s2u_48_48($signed(cfg_chan_coeff_5) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_12_b = conv_s2u_48_48($signed(cfg_chan_coeff_4) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_13_b = conv_s2u_48_48($signed(cfg_chan_coeff_3) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_14_b = conv_s2u_48_48($signed(cfg_chan_coeff_2) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_15_b = conv_s2u_48_48($signed(cfg_chan_coeff_1) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign and_dcpl_8_pff = while_if_mux_3_rmff & (~ audio_out_Push_mioi_bawt_iff);
  assign and_dcpl_9_pff = and_dcpl_8_pff & while_mux_rmff;
  assign or_dcpl_17_pff = and_dcpl_9_pff | (~(audio_in_Pop_mioi_bawt_iff & while_mux_1_rmff));
  assign while_while_or_3_cse_1_pff = audio_in_Pop_mioi_bawt_iff | (~ while_mux_1_rmff);
  assign while_while_or_cse_1_pff = audio_out_Push_mioi_bawt_iff | (~(while_if_mux_3_rmff
      & while_mux_rmff));
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_audio_out_Push_mioi_iswt0_tmp <= 1'b0;
      reg_audio_in_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_while_stage_v_1_tmp <= 1'b0;
      reg_while_stage_v_2_tmp <= 1'b0;
      reg_while_stage_v_3_tmp <= 1'b0;
      reg_while_stage_v_4_tmp <= 1'b0;
      reg_while_equal_svs_st_2_tmp <= 1'b0;
      run_wen <= 1'b1;
    end
    else begin
      reg_audio_out_Push_mioi_iswt0_tmp <= while_if_mux_4_rmff;
      reg_audio_in_Pop_mioi_iswt0_tmp <= while_audio_in_reg_mux_rmff;
      reg_while_stage_v_1_tmp <= while_mux_1_rmff;
      reg_while_stage_v_2_tmp <= while_mux_2_rmff;
      reg_while_stage_v_3_tmp <= while_mux_3_rmff;
      reg_while_stage_v_4_tmp <= while_mux_rmff;
      reg_while_equal_svs_st_2_tmp <= while_if_mux_3_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_out_Push_mioi_idat_511_480 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_479_448 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_63_32 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_447_416 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_95_64 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_415_384 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_127_96 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_383_352 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_159_128 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_351_320 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_191_160 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_319_288 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_223_192 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_287_256 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_255_224 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_if_and_2_cse ) begin
      audio_out_Push_mioi_idat_511_480 <= audio_out_reg_data_15_sva_1_mx0w0;
      audio_out_Push_mioi_idat_31_0 <= audio_out_reg_data_0_sva_1_mx0w0;
      audio_out_Push_mioi_idat_479_448 <= audio_out_reg_data_14_sva_1_mx0w0;
      audio_out_Push_mioi_idat_63_32 <= audio_out_reg_data_1_sva_1_mx0w0;
      audio_out_Push_mioi_idat_447_416 <= audio_out_reg_data_13_sva_1_mx0w0;
      audio_out_Push_mioi_idat_95_64 <= audio_out_reg_data_2_sva_1_mx0w0;
      audio_out_Push_mioi_idat_415_384 <= audio_out_reg_data_12_sva_1_mx0w0;
      audio_out_Push_mioi_idat_127_96 <= audio_out_reg_data_3_sva_1_mx0w0;
      audio_out_Push_mioi_idat_383_352 <= audio_out_reg_data_11_sva_1_mx0w0;
      audio_out_Push_mioi_idat_159_128 <= audio_out_reg_data_4_sva_1_mx0w0;
      audio_out_Push_mioi_idat_351_320 <= audio_out_reg_data_10_sva_1_mx0w0;
      audio_out_Push_mioi_idat_191_160 <= audio_out_reg_data_5_sva_1_mx0w0;
      audio_out_Push_mioi_idat_319_288 <= audio_out_reg_data_9_sva_1_mx0w0;
      audio_out_Push_mioi_idat_223_192 <= audio_out_reg_data_6_sva_1_mx0w0;
      audio_out_Push_mioi_idat_287_256 <= audio_out_reg_data_8_sva_1_mx0w0;
      audio_out_Push_mioi_idat_255_224 <= audio_out_reg_data_7_sva_1_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      src_idx_sva <= 8'b00000000;
    end
    else if ( run_wen & (~ or_dcpl_14) ) begin
      src_idx_sva <= MUX_v_8_2_2(8'b00000000, operator_8_true_acc_tmp, while_if_not_17_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_out_reg_data_15_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_14_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_13_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_12_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_11_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_10_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_9_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_8_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_7_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_6_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_5_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_4_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_3_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_2_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_1_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_0_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( audio_out_reg_data_and_cse ) begin
      audio_out_reg_data_15_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_15_sva_1_mx0w0, while_if_not_36_nl);
      audio_out_reg_data_14_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_14_sva_1_mx0w0, while_if_not_37_nl);
      audio_out_reg_data_13_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_13_sva_1_mx0w0, while_if_not_38_nl);
      audio_out_reg_data_12_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_12_sva_1_mx0w0, while_if_not_39_nl);
      audio_out_reg_data_11_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_11_sva_1_mx0w0, while_if_not_40_nl);
      audio_out_reg_data_10_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_10_sva_1_mx0w0, while_if_not_41_nl);
      audio_out_reg_data_9_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_9_sva_1_mx0w0, while_if_not_42_nl);
      audio_out_reg_data_8_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_8_sva_1_mx0w0, while_if_not_43_nl);
      audio_out_reg_data_7_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_7_sva_1_mx0w0, while_if_not_44_nl);
      audio_out_reg_data_6_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_6_sva_1_mx0w0, while_if_not_45_nl);
      audio_out_reg_data_5_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_5_sva_1_mx0w0, while_if_not_46_nl);
      audio_out_reg_data_4_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_4_sva_1_mx0w0, while_if_not_47_nl);
      audio_out_reg_data_3_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_3_sva_1_mx0w0, while_if_not_48_nl);
      audio_out_reg_data_2_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_2_sva_1_mx0w0, while_if_not_49_nl);
      audio_out_reg_data_1_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_1_sva_1_mx0w0, while_if_not_50_nl);
      audio_out_reg_data_0_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_0_sva_1_mx0w0, while_if_not_33_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_equal_svs_st_1 <= 1'b0;
    end
    else if ( run_wen & (~ and_dcpl_9) ) begin
      while_equal_svs_st_1 <= while_equal_tmp;
    end
  end
  assign while_if_not_17_nl = ~ while_equal_tmp;
  assign while_if_not_36_nl = ~ while_equal_svs_st_1;
  assign while_if_not_37_nl = ~ while_equal_svs_st_1;
  assign while_if_not_38_nl = ~ while_equal_svs_st_1;
  assign while_if_not_39_nl = ~ while_equal_svs_st_1;
  assign while_if_not_40_nl = ~ while_equal_svs_st_1;
  assign while_if_not_41_nl = ~ while_equal_svs_st_1;
  assign while_if_not_42_nl = ~ while_equal_svs_st_1;
  assign while_if_not_43_nl = ~ while_equal_svs_st_1;
  assign while_if_not_44_nl = ~ while_equal_svs_st_1;
  assign while_if_not_45_nl = ~ while_equal_svs_st_1;
  assign while_if_not_46_nl = ~ while_equal_svs_st_1;
  assign while_if_not_47_nl = ~ while_equal_svs_st_1;
  assign while_if_not_48_nl = ~ while_equal_svs_st_1;
  assign while_if_not_49_nl = ~ while_equal_svs_st_1;
  assign while_if_not_50_nl = ~ while_equal_svs_st_1;
  assign while_if_not_33_nl = ~ while_equal_svs_st_1;

  function automatic [31:0] MUX1HOT_v_32_16_2;
    input [31:0] input_15;
    input [31:0] input_14;
    input [31:0] input_13;
    input [31:0] input_12;
    input [31:0] input_11;
    input [31:0] input_10;
    input [31:0] input_9;
    input [31:0] input_8;
    input [31:0] input_7;
    input [31:0] input_6;
    input [31:0] input_5;
    input [31:0] input_4;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [15:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    result = result | (input_3 & {32{sel[3]}});
    result = result | (input_4 & {32{sel[4]}});
    result = result | (input_5 & {32{sel[5]}});
    result = result | (input_6 & {32{sel[6]}});
    result = result | (input_7 & {32{sel[7]}});
    result = result | (input_8 & {32{sel[8]}});
    result = result | (input_9 & {32{sel[9]}});
    result = result | (input_10 & {32{sel[10]}});
    result = result | (input_11 & {32{sel[11]}});
    result = result | (input_12 & {32{sel[12]}});
    result = result | (input_13 & {32{sel[13]}});
    result = result | (input_14 & {32{sel[14]}});
    result = result | (input_15 & {32{sel[15]}});
    MUX1HOT_v_32_16_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [32:0] conv_s2s_8_33 ;
    input [7:0]  vector ;
  begin
    conv_s2s_8_33 = {{25{vector[7]}}, vector};
  end
  endfunction


  function automatic [32:0] conv_s2s_32_33 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_33 = {vector[31], vector};
  end
  endfunction


  function automatic [47:0] conv_s2u_48_48 ;
    input [47:0]  vector ;
  begin
    conv_s2u_48_48 = vector;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run
// ------------------------------------------------------------------


module OutputBuffer_run (
  clk, rst, cfg_block_size, cfg_output_base, sync2_val, sync2_rdy, sync2_msg, sync3_val,
      sync3_rdy, sync3_msg, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg,
      dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, audio_out_val,
      audio_out_rdy, audio_out_msg, mem_rsci_clken_d, mem_rsci_d_d, mem_rsci_q_d,
      mem_rsci_radr_d, mem_rsci_wadr_d, mem_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      mem_rsci_we_d_pff
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_output_base;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input audio_out_val;
  output audio_out_rdy;
  input [511:0] audio_out_msg;
  output mem_rsci_clken_d;
  output [63:0] mem_rsci_d_d;
  input [63:0] mem_rsci_q_d;
  output [13:0] mem_rsci_radr_d;
  output [13:0] mem_rsci_wadr_d;
  output mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output mem_rsci_we_d_pff;


  // Interconnect Declarations
  reg run_wen;
  wire sync2_Pop_mioi_wen_comp;
  wire audio_out_Pop_mioi_wen_comp;
  wire [511:0] audio_out_Pop_mioi_idat_mxwt;
  wire dma_write_ctrl_Push_mioi_wen_comp;
  wire dma_write_chnl_Push_mioi_wen_comp;
  reg [63:0] dma_write_chnl_Push_mioi_idat;
  wire sync3_Push_mioi_wen_comp;
  reg [27:0] dma_write_ctrl_Push_mioi_idat_63_36;
  reg [31:0] dma_write_ctrl_Push_mioi_idat_31_0;
  wire [10:0] fsm_output;
  wire or_dcpl_6;
  wire exit_while_for_1_sva_mx0;
  wire exit_while_for_sva_mx0;
  reg [3:0] while_for_for_j_3_0_sva_1;
  wire while_and_cse;
  reg [31:0] while_for_1_i_sva;
  reg [2:0] while_for_for_j_3_0_sva_2_0_1;
  reg [511:0] while_audio_out_reg_data_sva;
  wire run_wen_rtff;
  reg reg_sync2_Pop_mioi_iswt0_tmp;
  reg reg_audio_out_Pop_mioi_iswt0_tmp;
  reg reg_dma_write_ctrl_Push_mioi_iswt0_tmp;
  reg reg_dma_write_chnl_Push_mioi_iswt0_tmp;
  reg reg_sync3_Push_mioi_iswt0_tmp;
  wire while_mux_rmff;
  wire while_for_mux_3_rmff;
  wire while_mux_1_rmff;
  wire while_for_1_mux_rmff;
  wire while_mux_2_rmff;
  wire [31:0] z_out;
  wire [32:0] nl_z_out;
  reg [27:0] while_for_1_i_sva_1_31_4;

  wire and_13_nl;
  wire and_17_nl;
  wire and_19_nl;
  wire nor_1_nl;
  wire[31:0] while_for_mux1h_1_nl;
  wire or_38_nl;
  wire or_39_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat;
  assign nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat
      = {3'b011 , dma_write_ctrl_Push_mioi_idat_63_36 , 4'b0000 , dma_write_ctrl_Push_mioi_idat_31_0};
  wire  nl_OutputBuffer_run_run_fsm_inst_while_for_for_C_1_tr0;
  assign nl_OutputBuffer_run_run_fsm_inst_while_for_for_C_1_tr0 = while_for_for_j_3_0_sva_1[3];
  OutputBuffer_run_sync2_Pop_mioi OutputBuffer_run_sync2_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync2_Pop_mioi_oswt(reg_sync2_Pop_mioi_iswt0_tmp),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp),
      .sync2_Pop_mioi_oswt_pff(while_mux_rmff)
    );
  OutputBuffer_run_audio_out_Pop_mioi OutputBuffer_run_audio_out_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg),
      .audio_out_Pop_mioi_oswt(reg_audio_out_Pop_mioi_iswt0_tmp),
      .audio_out_Pop_mioi_wen_comp(audio_out_Pop_mioi_wen_comp),
      .audio_out_Pop_mioi_idat_mxwt(audio_out_Pop_mioi_idat_mxwt),
      .audio_out_Pop_mioi_oswt_pff(while_for_mux_3_rmff)
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi OutputBuffer_run_dma_write_ctrl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_ctrl_Push_mioi_oswt(reg_dma_write_ctrl_Push_mioi_iswt0_tmp),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp),
      .dma_write_ctrl_Push_mioi_idat(nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat[66:0]),
      .dma_write_ctrl_Push_mioi_oswt_pff(while_mux_1_rmff)
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi OutputBuffer_run_dma_write_chnl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .dma_write_chnl_Push_mioi_oswt(reg_dma_write_chnl_Push_mioi_iswt0_tmp),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp),
      .dma_write_chnl_Push_mioi_idat(dma_write_chnl_Push_mioi_idat),
      .dma_write_chnl_Push_mioi_oswt_pff(while_for_1_mux_rmff)
    );
  OutputBuffer_run_sync3_Push_mioi OutputBuffer_run_sync3_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .sync3_Push_mioi_oswt(reg_sync3_Push_mioi_iswt0_tmp),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp),
      .sync3_Push_mioi_oswt_pff(while_mux_2_rmff)
    );
  OutputBuffer_run_staller OutputBuffer_run_staller_inst (
      .run_wen(run_wen_rtff),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp),
      .audio_out_Pop_mioi_wen_comp(audio_out_Pop_mioi_wen_comp),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp)
    );
  OutputBuffer_run_run_fsm OutputBuffer_run_run_fsm_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .while_C_1_tr0(exit_while_for_sva_mx0),
      .while_for_for_C_1_tr0(nl_OutputBuffer_run_run_fsm_inst_while_for_for_C_1_tr0),
      .while_for_C_1_tr0(exit_while_for_sva_mx0),
      .while_C_2_tr0(exit_while_for_1_sva_mx0),
      .while_for_1_C_2_tr0(exit_while_for_1_sva_mx0)
    );
  assign mem_rsci_clken_d = run_wen;
  assign while_and_cse = run_wen & or_dcpl_6 & exit_while_for_sva_mx0;
  assign and_13_nl = exit_while_for_1_sva_mx0 & ((fsm_output[6]) | (fsm_output[9]));
  assign while_mux_2_rmff = MUX_s_1_2_2(reg_sync3_Push_mioi_iswt0_tmp, and_13_nl,
      run_wen);
  assign while_for_1_mux_rmff = MUX_s_1_2_2(reg_dma_write_chnl_Push_mioi_iswt0_tmp,
      (fsm_output[8]), run_wen);
  assign and_17_nl = exit_while_for_sva_mx0 & or_dcpl_6;
  assign while_mux_1_rmff = MUX_s_1_2_2(reg_dma_write_ctrl_Push_mioi_iswt0_tmp, and_17_nl,
      run_wen);
  assign and_19_nl = (~ exit_while_for_sva_mx0) & or_dcpl_6;
  assign while_for_mux_3_rmff = MUX_s_1_2_2(reg_audio_out_Pop_mioi_iswt0_tmp, and_19_nl,
      run_wen);
  assign while_mux_rmff = MUX_s_1_2_2(reg_sync2_Pop_mioi_iswt0_tmp, (fsm_output[0]),
      run_wen);
  assign exit_while_for_sva_mx0 = MUX_s_1_2_2((~ (z_out[28])), (~ ($signed(z_out)
      < $signed({1'b0, ({(cfg_block_size[28:1]) , 1'b0})}))), fsm_output[5]);
  assign exit_while_for_1_sva_mx0 = MUX_s_1_2_2((~ (z_out[28])), (~ ($signed(while_for_1_i_sva_1_31_4)
      < $signed({1'b0, (cfg_block_size[28:1])}))), fsm_output[9]);
  assign or_dcpl_6 = (fsm_output[5]) | (fsm_output[1]);
  assign mem_rsci_d_d = MUX_v_64_8_2((while_audio_out_reg_data_sva[63:0]), (while_audio_out_reg_data_sva[127:64]),
      (while_audio_out_reg_data_sva[191:128]), (while_audio_out_reg_data_sva[255:192]),
      (while_audio_out_reg_data_sva[319:256]), (while_audio_out_reg_data_sva[383:320]),
      (while_audio_out_reg_data_sva[447:384]), (while_audio_out_reg_data_sva[511:448]),
      while_for_for_j_3_0_sva_2_0_1);
  assign mem_rsci_radr_d = while_for_1_i_sva[13:0];
  assign mem_rsci_wadr_d = {(while_for_1_i_sva[10:0]) , while_for_for_j_3_0_sva_2_0_1};
  assign mem_rsci_we_d_pff = fsm_output[3];
  assign mem_rsci_readA_r_ram_ir_internal_RMASK_B_d = fsm_output[7];
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_ctrl_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      dma_write_ctrl_Push_mioi_idat_63_36 <= 28'b0000000000000000000000000000;
    end
    else if ( while_and_cse ) begin
      dma_write_ctrl_Push_mioi_idat_31_0 <= cfg_output_base;
      dma_write_ctrl_Push_mioi_idat_63_36 <= cfg_block_size[28:1];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_chnl_Push_mioi_idat <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (fsm_output[8]) ) begin
      dma_write_chnl_Push_mioi_idat <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_sync3_Push_mioi_iswt0_tmp <= 1'b0;
      reg_dma_write_chnl_Push_mioi_iswt0_tmp <= 1'b0;
      reg_dma_write_ctrl_Push_mioi_iswt0_tmp <= 1'b0;
      reg_audio_out_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_sync2_Pop_mioi_iswt0_tmp <= 1'b0;
      run_wen <= 1'b1;
    end
    else begin
      reg_sync3_Push_mioi_iswt0_tmp <= while_mux_2_rmff;
      reg_dma_write_chnl_Push_mioi_iswt0_tmp <= while_for_1_mux_rmff;
      reg_dma_write_ctrl_Push_mioi_iswt0_tmp <= while_mux_1_rmff;
      reg_audio_out_Pop_mioi_iswt0_tmp <= while_for_mux_3_rmff;
      reg_sync2_Pop_mioi_iswt0_tmp <= while_mux_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((fsm_output[8]) | (fsm_output[3]) | (fsm_output[2]) |
        (fsm_output[4]) | (fsm_output[9]))) ) begin
      while_for_1_i_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000, z_out,
          nor_1_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_for_j_3_0_sva_2_0_1 <= 3'b000;
      while_for_for_j_3_0_sva_1 <= 4'b0000;
    end
    else if ( run_wen ) begin
      while_for_for_j_3_0_sva_2_0_1 <= MUX_v_3_2_2(3'b000, (while_for_for_j_3_0_sva_1[2:0]),
          (fsm_output[4]));
      while_for_for_j_3_0_sva_1 <= z_out[3:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_audio_out_reg_data_sva <= 512'b
    end
    else if ( run_wen & (fsm_output[4:3]==2'b00) ) begin
      while_audio_out_reg_data_sva <= audio_out_Pop_mioi_idat_mxwt;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_sva_1_31_4 <= 28'b0000000000000000000000000000;
    end
    else if ( run_wen & (fsm_output[7]) ) begin
      while_for_1_i_sva_1_31_4 <= z_out[31:4];
    end
  end
  assign nor_1_nl = ~((fsm_output[6]) | (fsm_output[1]));
  assign or_38_nl = (fsm_output[7]) | (fsm_output[5]);
  assign or_39_nl = (fsm_output[6]) | (fsm_output[1]);
  assign while_for_mux1h_1_nl = MUX1HOT_v_32_3_2(while_for_1_i_sva, ({29'b00000000000000000000000000000
      , while_for_for_j_3_0_sva_2_0_1}), ({4'b1111 , (~ (cfg_block_size[28:1]))}),
      {or_38_nl , (fsm_output[3]) , or_39_nl});
  assign nl_z_out = while_for_mux1h_1_nl + 32'b00000000000000000000000000000001;
  assign z_out = nl_z_out[31:0];

  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_8_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [63:0] input_2;
    input [63:0] input_3;
    input [63:0] input_4;
    input [63:0] input_5;
    input [63:0] input_6;
    input [63:0] input_7;
    input [2:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      3'b100 : begin
        result = input_4;
      end
      3'b101 : begin
        result = input_5;
      end
      3'b110 : begin
        result = input_6;
      end
      default : begin
        result = input_7;
      end
    endcase
    MUX_v_64_8_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control
// ------------------------------------------------------------------


module Control (
  clk, rst, acc_start, acc_done, sync1_val, sync1_rdy, sync1_msg, sync2_val, sync2_rdy,
      sync2_msg, sync3_val, sync3_rdy, sync3_msg
);
  input clk;
  input rst;
  input acc_start;
  output acc_done;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;



  // Interconnect Declarations for Component Instantiations 
  Control_run Control_run_inst (
      .clk(clk),
      .rst(rst),
      .acc_start(acc_start),
      .acc_done(acc_done),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer
// ------------------------------------------------------------------


module InputBuffer (
  clk, rst, cfg_src_num, cfg_block_size, cfg_input_base, sync1_val, sync1_rdy, sync1_msg,
      dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val,
      dma_read_chnl_rdy, dma_read_chnl_msg, audio_in_val, audio_in_rdy, audio_in_msg
);
  input clk;
  input rst;
  input [31:0] cfg_src_num;
  input [31:0] cfg_block_size;
  input [31:0] cfg_input_base;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output audio_in_val;
  input audio_in_rdy;
  output [15:0] audio_in_msg;


  // Interconnect Declarations
  wire mem_rsci_clken_d;
  wire [63:0] mem_rsci_d_d;
  wire [63:0] mem_rsci_q_d;
  wire mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire [12:0] operator_32_true_acc_2_cmp_b;
  wire [12:0] operator_32_true_acc_2_cmp_c;
  wire [12:0] operator_32_true_acc_2_cmp_z;
  wire mem_rsc_clken;
  wire [63:0] mem_rsc_q;
  wire [12:0] mem_rsc_radr;
  wire mem_rsc_we;
  wire [63:0] mem_rsc_d;
  wire [12:0] mem_rsc_wadr;
  wire [12:0] mem_rsci_wadr_d_iff;
  wire mem_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_muladd1 #(.width_a(32'sd13),
  .signd_a(32'sd1),
  .width_b(32'sd13),
  .signd_b(32'sd1),
  .width_c(32'sd13),
  .signd_c(32'sd1),
  .width_cst(32'sd1),
  .signd_cst(32'sd0),
  .width_d(32'sd0),
  .signd_d(32'sd1),
  .width_z(32'sd13),
  .add_axb(32'sd1),
  .add_c(32'sd1),
  .add_d(32'sd1),
  .use_const(32'sd1)) operator_32_true_acc_2_cmp (
      .a(mem_rsci_wadr_d_iff),
      .b(operator_32_true_acc_2_cmp_b),
      .c(operator_32_true_acc_2_cmp_c),
      .cst(1'b0),
      .z(operator_32_true_acc_2_cmp_z)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd13),
  .data_width(32'sd64),
  .depth(32'sd8192),
  .latency(32'sd1)) mem_rsc_comp (
      .clk(clk),
      .clken(mem_rsc_clken),
      .d(mem_rsc_d),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .wadr(mem_rsc_wadr),
      .we(mem_rsc_we)
    );
  InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_15_13_64_8192_8192_64_1_gen mem_rsci
      (
      .clken(mem_rsc_clken),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .we(mem_rsc_we),
      .d(mem_rsc_d),
      .wadr(mem_rsc_wadr),
      .clken_d(mem_rsci_clken_d),
      .d_d(mem_rsci_d_d),
      .q_d(mem_rsci_q_d),
      .radr_d(operator_32_true_acc_2_cmp_z),
      .wadr_d(mem_rsci_wadr_d_iff),
      .we_d(mem_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(mem_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  InputBuffer_run InputBuffer_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_src_num(cfg_src_num),
      .cfg_block_size(cfg_block_size),
      .cfg_input_base(cfg_input_base),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .mem_rsci_clken_d(mem_rsci_clken_d),
      .mem_rsci_d_d(mem_rsci_d_d),
      .mem_rsci_q_d(mem_rsci_q_d),
      .mem_rsci_readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .operator_32_true_acc_2_cmp_b(operator_32_true_acc_2_cmp_b),
      .operator_32_true_acc_2_cmp_c(operator_32_true_acc_2_cmp_c),
      .mem_rsci_wadr_d_pff(mem_rsci_wadr_d_iff),
      .mem_rsci_we_d_pff(mem_rsci_we_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder
// ------------------------------------------------------------------


module Encoder (
  clk, rst, cfg_src_num, cfg_src_coeff_0, cfg_src_coeff_1, cfg_src_coeff_2, cfg_src_coeff_3,
      cfg_src_coeff_4, cfg_src_coeff_5, cfg_src_coeff_6, cfg_src_coeff_7, cfg_src_coeff_8,
      cfg_src_coeff_9, cfg_src_coeff_10, cfg_src_coeff_11, cfg_src_coeff_12, cfg_src_coeff_13,
      cfg_src_coeff_14, cfg_src_coeff_15, cfg_chan_coeff_0, cfg_chan_coeff_1, cfg_chan_coeff_2,
      cfg_chan_coeff_3, cfg_chan_coeff_4, cfg_chan_coeff_5, cfg_chan_coeff_6, cfg_chan_coeff_7,
      cfg_chan_coeff_8, cfg_chan_coeff_9, cfg_chan_coeff_10, cfg_chan_coeff_11, cfg_chan_coeff_12,
      cfg_chan_coeff_13, cfg_chan_coeff_14, cfg_chan_coeff_15, audio_in_val, audio_in_rdy,
      audio_in_msg, audio_out_val, audio_out_rdy, audio_out_msg
);
  input clk;
  input rst;
  input [31:0] cfg_src_num;
  input [31:0] cfg_src_coeff_0;
  input [31:0] cfg_src_coeff_1;
  input [31:0] cfg_src_coeff_2;
  input [31:0] cfg_src_coeff_3;
  input [31:0] cfg_src_coeff_4;
  input [31:0] cfg_src_coeff_5;
  input [31:0] cfg_src_coeff_6;
  input [31:0] cfg_src_coeff_7;
  input [31:0] cfg_src_coeff_8;
  input [31:0] cfg_src_coeff_9;
  input [31:0] cfg_src_coeff_10;
  input [31:0] cfg_src_coeff_11;
  input [31:0] cfg_src_coeff_12;
  input [31:0] cfg_src_coeff_13;
  input [31:0] cfg_src_coeff_14;
  input [31:0] cfg_src_coeff_15;
  input [31:0] cfg_chan_coeff_0;
  input [31:0] cfg_chan_coeff_1;
  input [31:0] cfg_chan_coeff_2;
  input [31:0] cfg_chan_coeff_3;
  input [31:0] cfg_chan_coeff_4;
  input [31:0] cfg_chan_coeff_5;
  input [31:0] cfg_chan_coeff_6;
  input [31:0] cfg_chan_coeff_7;
  input [31:0] cfg_chan_coeff_8;
  input [31:0] cfg_chan_coeff_9;
  input [31:0] cfg_chan_coeff_10;
  input [31:0] cfg_chan_coeff_11;
  input [31:0] cfg_chan_coeff_12;
  input [31:0] cfg_chan_coeff_13;
  input [31:0] cfg_chan_coeff_14;
  input [31:0] cfg_chan_coeff_15;
  input audio_in_val;
  output audio_in_rdy;
  input [15:0] audio_in_msg;
  output audio_out_val;
  input audio_out_rdy;
  output [511:0] audio_out_msg;


  // Interconnect Declarations
  wire [47:0] while_for_1_mul_cmp_b;
  wire while_for_1_mul_cmp_en;
  wire [62:0] while_for_1_mul_cmp_z;
  wire [47:0] while_for_1_mul_cmp_1_b;
  wire [62:0] while_for_1_mul_cmp_1_z;
  wire [47:0] while_for_1_mul_cmp_2_b;
  wire [62:0] while_for_1_mul_cmp_2_z;
  wire [47:0] while_for_1_mul_cmp_3_b;
  wire [62:0] while_for_1_mul_cmp_3_z;
  wire [47:0] while_for_1_mul_cmp_4_b;
  wire [62:0] while_for_1_mul_cmp_4_z;
  wire [47:0] while_for_1_mul_cmp_5_b;
  wire [62:0] while_for_1_mul_cmp_5_z;
  wire [47:0] while_for_1_mul_cmp_6_b;
  wire [62:0] while_for_1_mul_cmp_6_z;
  wire [47:0] while_for_1_mul_cmp_7_b;
  wire [62:0] while_for_1_mul_cmp_7_z;
  wire [47:0] while_for_1_mul_cmp_8_b;
  wire [62:0] while_for_1_mul_cmp_8_z;
  wire [47:0] while_for_1_mul_cmp_9_b;
  wire [62:0] while_for_1_mul_cmp_9_z;
  wire [47:0] while_for_1_mul_cmp_10_b;
  wire [62:0] while_for_1_mul_cmp_10_z;
  wire [47:0] while_for_1_mul_cmp_11_b;
  wire [62:0] while_for_1_mul_cmp_11_z;
  wire [47:0] while_for_1_mul_cmp_12_b;
  wire [62:0] while_for_1_mul_cmp_12_z;
  wire [47:0] while_for_1_mul_cmp_13_b;
  wire [62:0] while_for_1_mul_cmp_13_z;
  wire [47:0] while_for_1_mul_cmp_14_b;
  wire [62:0] while_for_1_mul_cmp_14_z;
  wire [47:0] while_for_1_mul_cmp_15_b;
  wire [62:0] while_for_1_mul_cmp_15_z;
  wire [31:0] while_for_1_mul_cmp_a_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_1 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_1_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_1_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_2 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_2_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_2_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_3 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_3_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_3_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_4 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_4_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_4_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_5 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_5_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_5_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_6 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_6_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_6_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_7 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_7_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_7_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_8 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_8_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_8_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_9 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_9_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_9_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_10 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_10_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_10_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_11 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_11_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_11_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_12 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_12_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_12_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_13 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_13_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_13_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_14 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_14_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_14_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_15 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_15_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_15_z)
    );
  Encoder_run Encoder_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_src_num(cfg_src_num),
      .cfg_src_coeff_0(cfg_src_coeff_0),
      .cfg_src_coeff_1(cfg_src_coeff_1),
      .cfg_src_coeff_2(cfg_src_coeff_2),
      .cfg_src_coeff_3(cfg_src_coeff_3),
      .cfg_src_coeff_4(cfg_src_coeff_4),
      .cfg_src_coeff_5(cfg_src_coeff_5),
      .cfg_src_coeff_6(cfg_src_coeff_6),
      .cfg_src_coeff_7(cfg_src_coeff_7),
      .cfg_src_coeff_8(cfg_src_coeff_8),
      .cfg_src_coeff_9(cfg_src_coeff_9),
      .cfg_src_coeff_10(cfg_src_coeff_10),
      .cfg_src_coeff_11(cfg_src_coeff_11),
      .cfg_src_coeff_12(cfg_src_coeff_12),
      .cfg_src_coeff_13(cfg_src_coeff_13),
      .cfg_src_coeff_14(cfg_src_coeff_14),
      .cfg_src_coeff_15(cfg_src_coeff_15),
      .cfg_chan_coeff_0(cfg_chan_coeff_0),
      .cfg_chan_coeff_1(cfg_chan_coeff_1),
      .cfg_chan_coeff_2(cfg_chan_coeff_2),
      .cfg_chan_coeff_3(cfg_chan_coeff_3),
      .cfg_chan_coeff_4(cfg_chan_coeff_4),
      .cfg_chan_coeff_5(cfg_chan_coeff_5),
      .cfg_chan_coeff_6(cfg_chan_coeff_6),
      .cfg_chan_coeff_7(cfg_chan_coeff_7),
      .cfg_chan_coeff_8(cfg_chan_coeff_8),
      .cfg_chan_coeff_9(cfg_chan_coeff_9),
      .cfg_chan_coeff_10(cfg_chan_coeff_10),
      .cfg_chan_coeff_11(cfg_chan_coeff_11),
      .cfg_chan_coeff_12(cfg_chan_coeff_12),
      .cfg_chan_coeff_13(cfg_chan_coeff_13),
      .cfg_chan_coeff_14(cfg_chan_coeff_14),
      .cfg_chan_coeff_15(cfg_chan_coeff_15),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg),
      .while_for_1_mul_cmp_b(while_for_1_mul_cmp_b),
      .while_for_1_mul_cmp_en(while_for_1_mul_cmp_en),
      .while_for_1_mul_cmp_z(while_for_1_mul_cmp_z),
      .while_for_1_mul_cmp_1_b(while_for_1_mul_cmp_1_b),
      .while_for_1_mul_cmp_1_z(while_for_1_mul_cmp_1_z),
      .while_for_1_mul_cmp_2_b(while_for_1_mul_cmp_2_b),
      .while_for_1_mul_cmp_2_z(while_for_1_mul_cmp_2_z),
      .while_for_1_mul_cmp_3_b(while_for_1_mul_cmp_3_b),
      .while_for_1_mul_cmp_3_z(while_for_1_mul_cmp_3_z),
      .while_for_1_mul_cmp_4_b(while_for_1_mul_cmp_4_b),
      .while_for_1_mul_cmp_4_z(while_for_1_mul_cmp_4_z),
      .while_for_1_mul_cmp_5_b(while_for_1_mul_cmp_5_b),
      .while_for_1_mul_cmp_5_z(while_for_1_mul_cmp_5_z),
      .while_for_1_mul_cmp_6_b(while_for_1_mul_cmp_6_b),
      .while_for_1_mul_cmp_6_z(while_for_1_mul_cmp_6_z),
      .while_for_1_mul_cmp_7_b(while_for_1_mul_cmp_7_b),
      .while_for_1_mul_cmp_7_z(while_for_1_mul_cmp_7_z),
      .while_for_1_mul_cmp_8_b(while_for_1_mul_cmp_8_b),
      .while_for_1_mul_cmp_8_z(while_for_1_mul_cmp_8_z),
      .while_for_1_mul_cmp_9_b(while_for_1_mul_cmp_9_b),
      .while_for_1_mul_cmp_9_z(while_for_1_mul_cmp_9_z),
      .while_for_1_mul_cmp_10_b(while_for_1_mul_cmp_10_b),
      .while_for_1_mul_cmp_10_z(while_for_1_mul_cmp_10_z),
      .while_for_1_mul_cmp_11_b(while_for_1_mul_cmp_11_b),
      .while_for_1_mul_cmp_11_z(while_for_1_mul_cmp_11_z),
      .while_for_1_mul_cmp_12_b(while_for_1_mul_cmp_12_b),
      .while_for_1_mul_cmp_12_z(while_for_1_mul_cmp_12_z),
      .while_for_1_mul_cmp_13_b(while_for_1_mul_cmp_13_b),
      .while_for_1_mul_cmp_13_z(while_for_1_mul_cmp_13_z),
      .while_for_1_mul_cmp_14_b(while_for_1_mul_cmp_14_b),
      .while_for_1_mul_cmp_14_z(while_for_1_mul_cmp_14_z),
      .while_for_1_mul_cmp_15_b(while_for_1_mul_cmp_15_b),
      .while_for_1_mul_cmp_15_z(while_for_1_mul_cmp_15_z),
      .while_for_1_mul_cmp_a_pff(while_for_1_mul_cmp_a_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer
// ------------------------------------------------------------------


module OutputBuffer (
  clk, rst, cfg_block_size, cfg_output_base, sync2_val, sync2_rdy, sync2_msg, sync3_val,
      sync3_rdy, sync3_msg, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg,
      dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, audio_out_val,
      audio_out_rdy, audio_out_msg
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_output_base;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input audio_out_val;
  output audio_out_rdy;
  input [511:0] audio_out_msg;


  // Interconnect Declarations
  wire mem_rsci_clken_d;
  wire [63:0] mem_rsci_d_d;
  wire [63:0] mem_rsci_q_d;
  wire [13:0] mem_rsci_radr_d;
  wire [13:0] mem_rsci_wadr_d;
  wire mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire mem_rsc_clken;
  wire [63:0] mem_rsc_q;
  wire [13:0] mem_rsc_radr;
  wire mem_rsc_we;
  wire [63:0] mem_rsc_d;
  wire [13:0] mem_rsc_wadr;
  wire mem_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd14),
  .data_width(32'sd64),
  .depth(32'sd16384),
  .latency(32'sd1)) mem_rsc_comp (
      .clk(clk),
      .clken(mem_rsc_clken),
      .d(mem_rsc_d),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .wadr(mem_rsc_wadr),
      .we(mem_rsc_we)
    );
  OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
      mem_rsci (
      .clken(mem_rsc_clken),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .we(mem_rsc_we),
      .d(mem_rsc_d),
      .wadr(mem_rsc_wadr),
      .clken_d(mem_rsci_clken_d),
      .d_d(mem_rsci_d_d),
      .q_d(mem_rsci_q_d),
      .radr_d(mem_rsci_radr_d),
      .wadr_d(mem_rsci_wadr_d),
      .we_d(mem_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(mem_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  OutputBuffer_run OutputBuffer_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_block_size),
      .cfg_output_base(cfg_output_base),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg),
      .mem_rsci_clken_d(mem_rsci_clken_d),
      .mem_rsci_d_d(mem_rsci_d_d),
      .mem_rsci_q_d(mem_rsci_q_d),
      .mem_rsci_radr_d(mem_rsci_radr_d),
      .mem_rsci_wadr_d(mem_rsci_wadr_d),
      .mem_rsci_readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .mem_rsci_we_d_pff(mem_rsci_we_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Top_rtl
// ------------------------------------------------------------------


module Top_rtl (
  clk, rst, cfg_regs_0, cfg_regs_1, cfg_regs_2, cfg_regs_3, cfg_regs_4, cfg_regs_5,
      cfg_regs_6, cfg_regs_7, cfg_regs_8, cfg_regs_9, cfg_regs_10, cfg_regs_11, cfg_regs_12,
      cfg_regs_13, cfg_regs_14, cfg_regs_15, cfg_regs_16, cfg_regs_17, cfg_regs_18,
      cfg_regs_19, cfg_regs_20, cfg_regs_21, cfg_regs_22, cfg_regs_23, cfg_regs_24,
      cfg_regs_25, cfg_regs_26, cfg_regs_27, cfg_regs_28, cfg_regs_29, cfg_regs_30,
      cfg_regs_31, cfg_regs_32, cfg_regs_33, cfg_regs_34, cfg_regs_35, cfg_regs_36,
      cfg_regs_37, cfg_regs_38, cfg_regs_39, cfg_regs_40, cfg_regs_41, cfg_regs_42,
      cfg_regs_43, cfg_regs_44, cfg_regs_45, cfg_regs_46, cfg_regs_47, acc_start,
      acc_done, dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val,
      dma_read_chnl_rdy, dma_read_chnl_msg, dma_write_ctrl_val, dma_write_ctrl_rdy,
      dma_write_ctrl_msg, dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg
);
  input clk;
  input rst;
  input [31:0] cfg_regs_0;
  input [31:0] cfg_regs_1;
  input [31:0] cfg_regs_2;
  input [31:0] cfg_regs_3;
  input [31:0] cfg_regs_4;
  input [31:0] cfg_regs_5;
  input [31:0] cfg_regs_6;
  input [31:0] cfg_regs_7;
  input [31:0] cfg_regs_8;
  input [31:0] cfg_regs_9;
  input [31:0] cfg_regs_10;
  input [31:0] cfg_regs_11;
  input [31:0] cfg_regs_12;
  input [31:0] cfg_regs_13;
  input [31:0] cfg_regs_14;
  input [31:0] cfg_regs_15;
  input [31:0] cfg_regs_16;
  input [31:0] cfg_regs_17;
  input [31:0] cfg_regs_18;
  input [31:0] cfg_regs_19;
  input [31:0] cfg_regs_20;
  input [31:0] cfg_regs_21;
  input [31:0] cfg_regs_22;
  input [31:0] cfg_regs_23;
  input [31:0] cfg_regs_24;
  input [31:0] cfg_regs_25;
  input [31:0] cfg_regs_26;
  input [31:0] cfg_regs_27;
  input [31:0] cfg_regs_28;
  input [31:0] cfg_regs_29;
  input [31:0] cfg_regs_30;
  input [31:0] cfg_regs_31;
  input [31:0] cfg_regs_32;
  input [31:0] cfg_regs_33;
  input [31:0] cfg_regs_34;
  input [31:0] cfg_regs_35;
  input [31:0] cfg_regs_36;
  input [31:0] cfg_regs_37;
  input [31:0] cfg_regs_38;
  input [31:0] cfg_regs_39;
  input [31:0] cfg_regs_40;
  input [31:0] cfg_regs_41;
  input [31:0] cfg_regs_42;
  input [31:0] cfg_regs_43;
  input [31:0] cfg_regs_44;
  input [31:0] cfg_regs_45;
  input [31:0] cfg_regs_46;
  input [31:0] cfg_regs_47;
  input acc_start;
  output acc_done;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;


  // Interconnect Declarations
  wire sync1_val;
  wire sync1_rdy;
  wire sync1_msg;
  wire sync2_val;
  wire sync2_rdy;
  wire sync2_msg;
  wire sync3_val;
  wire sync3_rdy;
  wire sync3_msg;
  wire audio_in_val;
  wire audio_in_rdy;
  wire [15:0] audio_in_msg;
  wire audio_out_val;
  wire audio_out_rdy;
  wire [511:0] audio_out_msg;


  // Interconnect Declarations for Component Instantiations 
  Control ctr (
      .clk(clk),
      .rst(rst),
      .acc_start(acc_start),
      .acc_done(acc_done),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg)
    );
  InputBuffer inb (
      .clk(clk),
      .rst(rst),
      .cfg_src_num(cfg_regs_1),
      .cfg_block_size(cfg_regs_2),
      .cfg_input_base(cfg_regs_3),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg)
    );
  Encoder enc (
      .clk(clk),
      .rst(rst),
      .cfg_src_num(cfg_regs_1),
      .cfg_src_coeff_0(cfg_regs_16),
      .cfg_src_coeff_1(cfg_regs_17),
      .cfg_src_coeff_2(cfg_regs_18),
      .cfg_src_coeff_3(cfg_regs_19),
      .cfg_src_coeff_4(cfg_regs_20),
      .cfg_src_coeff_5(cfg_regs_21),
      .cfg_src_coeff_6(cfg_regs_22),
      .cfg_src_coeff_7(cfg_regs_23),
      .cfg_src_coeff_8(cfg_regs_24),
      .cfg_src_coeff_9(cfg_regs_25),
      .cfg_src_coeff_10(cfg_regs_26),
      .cfg_src_coeff_11(cfg_regs_27),
      .cfg_src_coeff_12(cfg_regs_28),
      .cfg_src_coeff_13(cfg_regs_29),
      .cfg_src_coeff_14(cfg_regs_30),
      .cfg_src_coeff_15(cfg_regs_31),
      .cfg_chan_coeff_0(cfg_regs_32),
      .cfg_chan_coeff_1(cfg_regs_33),
      .cfg_chan_coeff_2(cfg_regs_34),
      .cfg_chan_coeff_3(cfg_regs_35),
      .cfg_chan_coeff_4(cfg_regs_36),
      .cfg_chan_coeff_5(cfg_regs_37),
      .cfg_chan_coeff_6(cfg_regs_38),
      .cfg_chan_coeff_7(cfg_regs_39),
      .cfg_chan_coeff_8(cfg_regs_40),
      .cfg_chan_coeff_9(cfg_regs_41),
      .cfg_chan_coeff_10(cfg_regs_42),
      .cfg_chan_coeff_11(cfg_regs_43),
      .cfg_chan_coeff_12(cfg_regs_44),
      .cfg_chan_coeff_13(cfg_regs_45),
      .cfg_chan_coeff_14(cfg_regs_46),
      .cfg_chan_coeff_15(cfg_regs_47),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg)
    );
  OutputBuffer out_0 (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_regs_2),
      .cfg_output_base(cfg_regs_4),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg)
    );
endmodule



