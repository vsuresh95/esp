// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2022.1/981271 Production Release
//  HLS Date:       Thu Feb 10 22:05:20 PST 2022
// 
//  Generated by:   vv15@mojave.cs.illinois.edu
//  Generated date: Fri Aug 18 17:00:32 2023
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Control_run_staller
// ------------------------------------------------------------------


module Control_run_staller (
  clk, rst, run_wen, run_wten, sync1_Push_mioi_wen_comp, sync2_Push_mioi_wen_comp,
      sync3_Pop_mioi_wen_comp, run_flen_unreg, sync1_Push_mioi_wen_comp_pff, run_wten_pff,
      sync2_Push_mioi_wen_comp_pff, sync3_Pop_mioi_wen_comp_pff, run_flen_unreg_pff
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  input sync1_Push_mioi_wen_comp;
  input sync2_Push_mioi_wen_comp;
  input sync3_Pop_mioi_wen_comp;
  input run_flen_unreg;
  input sync1_Push_mioi_wen_comp_pff;
  output run_wten_pff;
  input sync2_Push_mioi_wen_comp_pff;
  input sync3_Pop_mioi_wen_comp_pff;
  input run_flen_unreg_pff;


  // Interconnect Declarations
  reg run_wten_reg;
  wire not_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign not_2_rmff = ~(sync1_Push_mioi_wen_comp & sync2_Push_mioi_wen_comp & sync3_Pop_mioi_wen_comp
      & (~ run_flen_unreg));
  assign run_wen = sync1_Push_mioi_wen_comp_pff & sync2_Push_mioi_wen_comp_pff &
      sync3_Pop_mioi_wen_comp_pff & (~ run_flen_unreg_pff);
  assign run_wten = run_wten_reg;
  assign run_wten_pff = not_2_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten_reg <= 1'b0;
    end
    else begin
      run_wten_reg <= not_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp (
  clk, rst, sync3_Pop_mioi_oswt_unreg, sync3_Pop_mioi_bawt, sync3_Pop_mioi_wen_comp,
      sync3_Pop_mioi_biwt, sync3_Pop_mioi_bdwt, sync3_Pop_mioi_bawt_pff, sync3_Pop_mioi_biwt_pff,
      sync3_Pop_mioi_wen_comp_pff, sync3_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync3_Pop_mioi_oswt_unreg;
  output sync3_Pop_mioi_bawt;
  output sync3_Pop_mioi_wen_comp;
  input sync3_Pop_mioi_biwt;
  input sync3_Pop_mioi_bdwt;
  output sync3_Pop_mioi_bawt_pff;
  input sync3_Pop_mioi_biwt_pff;
  output sync3_Pop_mioi_wen_comp_pff;
  input sync3_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg sync3_Pop_mioi_bcwt;
  wire while_nor_4_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_4_rmff = ~((~(sync3_Pop_mioi_bcwt | sync3_Pop_mioi_biwt)) | sync3_Pop_mioi_bdwt);
  assign sync3_Pop_mioi_bawt = sync3_Pop_mioi_biwt | sync3_Pop_mioi_bcwt;
  assign sync3_Pop_mioi_bawt_pff = sync3_Pop_mioi_biwt_pff | while_nor_4_rmff;
  assign sync3_Pop_mioi_wen_comp = (~ sync3_Pop_mioi_oswt_unreg) | sync3_Pop_mioi_bawt;
  assign sync3_Pop_mioi_wen_comp_pff = (~ sync3_Pop_mioi_oswt_unreg_pff) | sync3_Pop_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      sync3_Pop_mioi_bcwt <= while_nor_4_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync3_Pop_mioi_oswt_unreg, sync3_Pop_mioi_iswt0, sync3_Pop_mioi_ivld_oreg,
      sync3_Pop_mioi_biwt, sync3_Pop_mioi_bdwt, sync3_Pop_mioi_irdy_run_sct, sync3_Pop_mioi_biwt_pff,
      run_wten_pff, sync3_Pop_mioi_iswt0_pff, sync3_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync3_Pop_mioi_oswt_unreg;
  input sync3_Pop_mioi_iswt0;
  input sync3_Pop_mioi_ivld_oreg;
  output sync3_Pop_mioi_biwt;
  output sync3_Pop_mioi_bdwt;
  output sync3_Pop_mioi_irdy_run_sct;
  output sync3_Pop_mioi_biwt_pff;
  input run_wten_pff;
  input sync3_Pop_mioi_iswt0_pff;
  input sync3_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire sync3_Pop_mioi_ogwt;
  reg sync3_Pop_mioi_icwt;
  wire while_and_11_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign sync3_Pop_mioi_bdwt = sync3_Pop_mioi_oswt_unreg & run_wen;
  assign sync3_Pop_mioi_ogwt = ((~ run_wten) & sync3_Pop_mioi_iswt0) | sync3_Pop_mioi_icwt;
  assign while_and_11_rmff = sync3_Pop_mioi_ogwt & (~ sync3_Pop_mioi_biwt);
  assign sync3_Pop_mioi_irdy_run_sct = sync3_Pop_mioi_ogwt;
  assign sync3_Pop_mioi_biwt = sync3_Pop_mioi_ogwt & sync3_Pop_mioi_ivld_oreg;
  assign sync3_Pop_mioi_biwt_pff = (((~ run_wten_pff) & sync3_Pop_mioi_iswt0_pff)
      | while_and_11_rmff) & sync3_Pop_mioi_ivld_oreg_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      sync3_Pop_mioi_icwt <= while_and_11_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp (
  clk, rst, sync2_Push_mioi_oswt_unreg, sync2_Push_mioi_bawt, sync2_Push_mioi_wen_comp,
      sync2_Push_mioi_biwt, sync2_Push_mioi_bdwt, sync2_Push_mioi_bcwt, sync2_Push_mioi_bawt_pff,
      sync2_Push_mioi_biwt_pff, sync2_Push_mioi_bcwt_pff, sync2_Push_mioi_wen_comp_pff,
      sync2_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync2_Push_mioi_oswt_unreg;
  output sync2_Push_mioi_bawt;
  output sync2_Push_mioi_wen_comp;
  input sync2_Push_mioi_biwt;
  input sync2_Push_mioi_bdwt;
  output sync2_Push_mioi_bcwt;
  output sync2_Push_mioi_bawt_pff;
  input sync2_Push_mioi_biwt_pff;
  output sync2_Push_mioi_bcwt_pff;
  output sync2_Push_mioi_wen_comp_pff;
  input sync2_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg sync2_Push_mioi_bcwt_reg;
  wire while_nor_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_2_rmff = ~((~(sync2_Push_mioi_bcwt | sync2_Push_mioi_biwt)) |
      sync2_Push_mioi_bdwt);
  assign sync2_Push_mioi_bawt = sync2_Push_mioi_biwt | sync2_Push_mioi_bcwt;
  assign sync2_Push_mioi_bawt_pff = sync2_Push_mioi_biwt_pff | sync2_Push_mioi_bcwt_pff;
  assign sync2_Push_mioi_bcwt = sync2_Push_mioi_bcwt_reg;
  assign sync2_Push_mioi_bcwt_pff = while_nor_2_rmff;
  assign sync2_Push_mioi_wen_comp = (~ sync2_Push_mioi_oswt_unreg) | sync2_Push_mioi_bawt;
  assign sync2_Push_mioi_wen_comp_pff = (~ sync2_Push_mioi_oswt_unreg_pff) | sync2_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      sync2_Push_mioi_bcwt_reg <= while_nor_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl (
  run_wen, sync2_Push_mioi_oswt_unreg, sync2_Push_mioi_iswt0, sync2_Push_mioi_irdy_oreg,
      sync2_Push_mioi_biwt, sync2_Push_mioi_bdwt, sync2_Push_mioi_bcwt, sync2_Push_mioi_ivld_run_sct,
      sync2_Push_mioi_biwt_pff, sync2_Push_mioi_iswt0_pff, sync2_Push_mioi_bcwt_pff,
      sync2_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input sync2_Push_mioi_oswt_unreg;
  input sync2_Push_mioi_iswt0;
  input sync2_Push_mioi_irdy_oreg;
  output sync2_Push_mioi_biwt;
  output sync2_Push_mioi_bdwt;
  input sync2_Push_mioi_bcwt;
  output sync2_Push_mioi_ivld_run_sct;
  output sync2_Push_mioi_biwt_pff;
  input sync2_Push_mioi_iswt0_pff;
  input sync2_Push_mioi_bcwt_pff;
  input sync2_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync2_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync2_Push_mioi_bdwt = sync2_Push_mioi_oswt_unreg & run_wen;
  assign sync2_Push_mioi_ogwt = sync2_Push_mioi_iswt0 & (~ sync2_Push_mioi_bcwt);
  assign sync2_Push_mioi_ivld_run_sct = sync2_Push_mioi_ogwt;
  assign sync2_Push_mioi_biwt = sync2_Push_mioi_ogwt & sync2_Push_mioi_irdy_oreg;
  assign sync2_Push_mioi_biwt_pff = sync2_Push_mioi_iswt0_pff & (~ sync2_Push_mioi_bcwt_pff)
      & sync2_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_wait_dp
// ------------------------------------------------------------------


module Control_run_wait_dp (
  clk, rst, sync1_Push_mioi_irdy, sync1_Push_mioi_irdy_oreg, sync2_Push_mioi_irdy,
      sync2_Push_mioi_irdy_oreg, sync3_Pop_mioi_ivld, sync3_Pop_mioi_ivld_oreg
);
  input clk;
  input rst;
  input sync1_Push_mioi_irdy;
  output sync1_Push_mioi_irdy_oreg;
  input sync2_Push_mioi_irdy;
  output sync2_Push_mioi_irdy_oreg;
  input sync3_Pop_mioi_ivld;
  output sync3_Pop_mioi_ivld_oreg;


  // Interconnect Declarations
  reg sync1_Push_mioi_irdy_oreg_rneg;
  reg sync2_Push_mioi_irdy_oreg_rneg;
  reg sync3_Pop_mioi_ivld_oreg_rneg;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Push_mioi_irdy_oreg = ~ sync1_Push_mioi_irdy_oreg_rneg;
  assign sync2_Push_mioi_irdy_oreg = ~ sync2_Push_mioi_irdy_oreg_rneg;
  assign sync3_Pop_mioi_ivld_oreg = ~ sync3_Pop_mioi_ivld_oreg_rneg;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Push_mioi_irdy_oreg_rneg <= 1'b0;
      sync2_Push_mioi_irdy_oreg_rneg <= 1'b0;
      sync3_Pop_mioi_ivld_oreg_rneg <= 1'b0;
    end
    else begin
      sync1_Push_mioi_irdy_oreg_rneg <= ~ sync1_Push_mioi_irdy;
      sync2_Push_mioi_irdy_oreg_rneg <= ~ sync2_Push_mioi_irdy;
      sync3_Pop_mioi_ivld_oreg_rneg <= ~ sync3_Pop_mioi_ivld;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp (
  clk, rst, sync1_Push_mioi_oswt_unreg, sync1_Push_mioi_bawt, sync1_Push_mioi_wen_comp,
      sync1_Push_mioi_biwt, sync1_Push_mioi_bdwt, sync1_Push_mioi_bcwt, sync1_Push_mioi_wen_comp_pff,
      sync1_Push_mioi_oswt_unreg_pff, sync1_Push_mioi_bawt_pff, sync1_Push_mioi_biwt_pff,
      sync1_Push_mioi_bcwt_pff
);
  input clk;
  input rst;
  input sync1_Push_mioi_oswt_unreg;
  output sync1_Push_mioi_bawt;
  output sync1_Push_mioi_wen_comp;
  input sync1_Push_mioi_biwt;
  input sync1_Push_mioi_bdwt;
  output sync1_Push_mioi_bcwt;
  output sync1_Push_mioi_wen_comp_pff;
  input sync1_Push_mioi_oswt_unreg_pff;
  output sync1_Push_mioi_bawt_pff;
  input sync1_Push_mioi_biwt_pff;
  output sync1_Push_mioi_bcwt_pff;


  // Interconnect Declarations
  reg sync1_Push_mioi_bcwt_reg;
  wire while_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_rmff = ~((~(sync1_Push_mioi_bcwt | sync1_Push_mioi_biwt)) | sync1_Push_mioi_bdwt);
  assign sync1_Push_mioi_wen_comp = (~ sync1_Push_mioi_oswt_unreg) | sync1_Push_mioi_bawt;
  assign sync1_Push_mioi_wen_comp_pff = (~ sync1_Push_mioi_oswt_unreg_pff) | sync1_Push_mioi_bawt_pff;
  assign sync1_Push_mioi_bawt = sync1_Push_mioi_biwt | sync1_Push_mioi_bcwt;
  assign sync1_Push_mioi_bawt_pff = sync1_Push_mioi_biwt_pff | sync1_Push_mioi_bcwt_pff;
  assign sync1_Push_mioi_bcwt = sync1_Push_mioi_bcwt_reg;
  assign sync1_Push_mioi_bcwt_pff = while_nor_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      sync1_Push_mioi_bcwt_reg <= while_nor_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl (
  run_wen, sync1_Push_mioi_oswt_unreg, sync1_Push_mioi_iswt0, sync1_Push_mioi_irdy_oreg,
      sync1_Push_mioi_biwt, sync1_Push_mioi_bdwt, sync1_Push_mioi_bcwt, sync1_Push_mioi_ivld_run_sct,
      sync1_Push_mioi_biwt_pff, sync1_Push_mioi_iswt0_pff, sync1_Push_mioi_bcwt_pff,
      sync1_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input sync1_Push_mioi_oswt_unreg;
  input sync1_Push_mioi_iswt0;
  input sync1_Push_mioi_irdy_oreg;
  output sync1_Push_mioi_biwt;
  output sync1_Push_mioi_bdwt;
  input sync1_Push_mioi_bcwt;
  output sync1_Push_mioi_ivld_run_sct;
  output sync1_Push_mioi_biwt_pff;
  input sync1_Push_mioi_iswt0_pff;
  input sync1_Push_mioi_bcwt_pff;
  input sync1_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync1_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Push_mioi_bdwt = sync1_Push_mioi_oswt_unreg & run_wen;
  assign sync1_Push_mioi_ogwt = sync1_Push_mioi_iswt0 & (~ sync1_Push_mioi_bcwt);
  assign sync1_Push_mioi_ivld_run_sct = sync1_Push_mioi_ogwt;
  assign sync1_Push_mioi_biwt = sync1_Push_mioi_ogwt & sync1_Push_mioi_irdy_oreg;
  assign sync1_Push_mioi_biwt_pff = sync1_Push_mioi_iswt0_pff & (~ sync1_Push_mioi_bcwt_pff)
      & sync1_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_15_13_64_8192_8192_64_1_gen
// ------------------------------------------------------------------


module InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_15_13_64_8192_8192_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [12:0] radr;
  output we;
  output [63:0] d;
  output [12:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [12:0] radr_d;
  input [12:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_staller
// ------------------------------------------------------------------


module InputBuffer_run_staller (
  clk, rst, run_wen, run_wten, sync1_Pop_mioi_wen_comp, dma_read_ctrl_Push_mioi_wen_comp,
      dma_read_chnl_Pop_mioi_wen_comp, audio_in_Push_mioi_wen_comp, run_flen_unreg,
      sync1_Pop_mioi_wen_comp_pff, run_wten_pff, dma_read_ctrl_Push_mioi_wen_comp_pff,
      dma_read_chnl_Pop_mioi_wen_comp_pff, audio_in_Push_mioi_wen_comp_pff, run_flen_unreg_pff
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  input sync1_Pop_mioi_wen_comp;
  input dma_read_ctrl_Push_mioi_wen_comp;
  input dma_read_chnl_Pop_mioi_wen_comp;
  input audio_in_Push_mioi_wen_comp;
  input run_flen_unreg;
  input sync1_Pop_mioi_wen_comp_pff;
  output run_wten_pff;
  input dma_read_ctrl_Push_mioi_wen_comp_pff;
  input dma_read_chnl_Pop_mioi_wen_comp_pff;
  input audio_in_Push_mioi_wen_comp_pff;
  input run_flen_unreg_pff;


  // Interconnect Declarations
  reg run_wten_reg;
  wire not_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign not_2_rmff = ~(sync1_Pop_mioi_wen_comp & dma_read_ctrl_Push_mioi_wen_comp
      & dma_read_chnl_Pop_mioi_wen_comp & audio_in_Push_mioi_wen_comp & (~ run_flen_unreg));
  assign run_wen = sync1_Pop_mioi_wen_comp_pff & dma_read_ctrl_Push_mioi_wen_comp_pff
      & dma_read_chnl_Pop_mioi_wen_comp_pff & audio_in_Push_mioi_wen_comp_pff & (~
      run_flen_unreg_pff);
  assign run_wten = run_wten_reg;
  assign run_wten_pff = not_2_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten_reg <= 1'b0;
    end
    else begin
      run_wten_reg <= not_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_dp
// ------------------------------------------------------------------


module InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_dp (
  clk, rst, audio_in_Push_mioi_oswt_unreg, audio_in_Push_mioi_bawt, audio_in_Push_mioi_wen_comp,
      audio_in_Push_mioi_biwt, audio_in_Push_mioi_bdwt, audio_in_Push_mioi_bcwt,
      audio_in_Push_mioi_bawt_pff, audio_in_Push_mioi_biwt_pff, audio_in_Push_mioi_bcwt_pff,
      audio_in_Push_mioi_wen_comp_pff, audio_in_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input audio_in_Push_mioi_oswt_unreg;
  output audio_in_Push_mioi_bawt;
  output audio_in_Push_mioi_wen_comp;
  input audio_in_Push_mioi_biwt;
  input audio_in_Push_mioi_bdwt;
  output audio_in_Push_mioi_bcwt;
  output audio_in_Push_mioi_bawt_pff;
  input audio_in_Push_mioi_biwt_pff;
  output audio_in_Push_mioi_bcwt_pff;
  output audio_in_Push_mioi_wen_comp_pff;
  input audio_in_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg audio_in_Push_mioi_bcwt_reg;
  wire while_for_1_for_1_for_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_for_1_for_1_for_nor_rmff = ~((~(audio_in_Push_mioi_bcwt | audio_in_Push_mioi_biwt))
      | audio_in_Push_mioi_bdwt);
  assign audio_in_Push_mioi_bawt = audio_in_Push_mioi_biwt | audio_in_Push_mioi_bcwt;
  assign audio_in_Push_mioi_bawt_pff = audio_in_Push_mioi_biwt_pff | audio_in_Push_mioi_bcwt_pff;
  assign audio_in_Push_mioi_bcwt = audio_in_Push_mioi_bcwt_reg;
  assign audio_in_Push_mioi_bcwt_pff = while_for_1_for_1_for_nor_rmff;
  assign audio_in_Push_mioi_wen_comp = (~ audio_in_Push_mioi_oswt_unreg) | audio_in_Push_mioi_bawt;
  assign audio_in_Push_mioi_wen_comp_pff = (~ audio_in_Push_mioi_oswt_unreg_pff)
      | audio_in_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      audio_in_Push_mioi_bcwt_reg <= while_for_1_for_1_for_nor_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_ctrl (
  run_wen, audio_in_Push_mioi_oswt_unreg, audio_in_Push_mioi_iswt0, audio_in_Push_mioi_irdy_oreg,
      audio_in_Push_mioi_biwt, audio_in_Push_mioi_bdwt, audio_in_Push_mioi_bcwt,
      audio_in_Push_mioi_ivld_run_sct, audio_in_Push_mioi_biwt_pff, audio_in_Push_mioi_iswt0_pff,
      audio_in_Push_mioi_bcwt_pff, audio_in_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input audio_in_Push_mioi_oswt_unreg;
  input audio_in_Push_mioi_iswt0;
  input audio_in_Push_mioi_irdy_oreg;
  output audio_in_Push_mioi_biwt;
  output audio_in_Push_mioi_bdwt;
  input audio_in_Push_mioi_bcwt;
  output audio_in_Push_mioi_ivld_run_sct;
  output audio_in_Push_mioi_biwt_pff;
  input audio_in_Push_mioi_iswt0_pff;
  input audio_in_Push_mioi_bcwt_pff;
  input audio_in_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire audio_in_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign audio_in_Push_mioi_bdwt = audio_in_Push_mioi_oswt_unreg & run_wen;
  assign audio_in_Push_mioi_ogwt = audio_in_Push_mioi_iswt0 & (~ audio_in_Push_mioi_bcwt);
  assign audio_in_Push_mioi_ivld_run_sct = audio_in_Push_mioi_ogwt;
  assign audio_in_Push_mioi_biwt = audio_in_Push_mioi_ogwt & audio_in_Push_mioi_irdy_oreg;
  assign audio_in_Push_mioi_biwt_pff = audio_in_Push_mioi_iswt0_pff & (~ audio_in_Push_mioi_bcwt_pff)
      & audio_in_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_dp
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_dp (
  clk, rst, dma_read_chnl_Pop_mioi_oswt_unreg, dma_read_chnl_Pop_mioi_bawt, dma_read_chnl_Pop_mioi_wen_comp,
      dma_read_chnl_Pop_mioi_idat_mxwt, dma_read_chnl_Pop_mioi_biwt, dma_read_chnl_Pop_mioi_bdwt,
      dma_read_chnl_Pop_mioi_idat, dma_read_chnl_Pop_mioi_bawt_pff, dma_read_chnl_Pop_mioi_biwt_pff,
      dma_read_chnl_Pop_mioi_wen_comp_pff, dma_read_chnl_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input dma_read_chnl_Pop_mioi_oswt_unreg;
  output dma_read_chnl_Pop_mioi_bawt;
  output dma_read_chnl_Pop_mioi_wen_comp;
  output [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;
  input dma_read_chnl_Pop_mioi_biwt;
  input dma_read_chnl_Pop_mioi_bdwt;
  input [63:0] dma_read_chnl_Pop_mioi_idat;
  output dma_read_chnl_Pop_mioi_bawt_pff;
  input dma_read_chnl_Pop_mioi_biwt_pff;
  output dma_read_chnl_Pop_mioi_wen_comp_pff;
  input dma_read_chnl_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg dma_read_chnl_Pop_mioi_bcwt;
  reg [63:0] dma_read_chnl_Pop_mioi_idat_bfwt;
  wire while_for_data_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_for_data_nor_rmff = ~((~(dma_read_chnl_Pop_mioi_bcwt | dma_read_chnl_Pop_mioi_biwt))
      | dma_read_chnl_Pop_mioi_bdwt);
  assign dma_read_chnl_Pop_mioi_idat_mxwt = MUX_v_64_2_2(dma_read_chnl_Pop_mioi_idat,
      dma_read_chnl_Pop_mioi_idat_bfwt, dma_read_chnl_Pop_mioi_bcwt);
  assign dma_read_chnl_Pop_mioi_bawt = dma_read_chnl_Pop_mioi_biwt | dma_read_chnl_Pop_mioi_bcwt;
  assign dma_read_chnl_Pop_mioi_bawt_pff = dma_read_chnl_Pop_mioi_biwt_pff | while_for_data_nor_rmff;
  assign dma_read_chnl_Pop_mioi_wen_comp = (~ dma_read_chnl_Pop_mioi_oswt_unreg)
      | dma_read_chnl_Pop_mioi_bawt;
  assign dma_read_chnl_Pop_mioi_wen_comp_pff = (~ dma_read_chnl_Pop_mioi_oswt_unreg_pff)
      | dma_read_chnl_Pop_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_chnl_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      dma_read_chnl_Pop_mioi_bcwt <= while_for_data_nor_rmff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_chnl_Pop_mioi_idat_bfwt <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( dma_read_chnl_Pop_mioi_biwt ) begin
      dma_read_chnl_Pop_mioi_idat_bfwt <= dma_read_chnl_Pop_mioi_idat;
    end
  end

  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input  sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, dma_read_chnl_Pop_mioi_oswt_unreg, dma_read_chnl_Pop_mioi_iswt0,
      dma_read_chnl_Pop_mioi_ivld_oreg, dma_read_chnl_Pop_mioi_biwt, dma_read_chnl_Pop_mioi_bdwt,
      dma_read_chnl_Pop_mioi_irdy_run_sct, dma_read_chnl_Pop_mioi_biwt_pff, run_wten_pff,
      dma_read_chnl_Pop_mioi_iswt0_pff, dma_read_chnl_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input dma_read_chnl_Pop_mioi_oswt_unreg;
  input dma_read_chnl_Pop_mioi_iswt0;
  input dma_read_chnl_Pop_mioi_ivld_oreg;
  output dma_read_chnl_Pop_mioi_biwt;
  output dma_read_chnl_Pop_mioi_bdwt;
  output dma_read_chnl_Pop_mioi_irdy_run_sct;
  output dma_read_chnl_Pop_mioi_biwt_pff;
  input run_wten_pff;
  input dma_read_chnl_Pop_mioi_iswt0_pff;
  input dma_read_chnl_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire dma_read_chnl_Pop_mioi_ogwt;
  reg dma_read_chnl_Pop_mioi_icwt;
  wire while_for_data_and_3_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign dma_read_chnl_Pop_mioi_bdwt = dma_read_chnl_Pop_mioi_oswt_unreg & run_wen;
  assign dma_read_chnl_Pop_mioi_ogwt = ((~ run_wten) & dma_read_chnl_Pop_mioi_iswt0)
      | dma_read_chnl_Pop_mioi_icwt;
  assign while_for_data_and_3_rmff = dma_read_chnl_Pop_mioi_ogwt & (~ dma_read_chnl_Pop_mioi_biwt);
  assign dma_read_chnl_Pop_mioi_irdy_run_sct = dma_read_chnl_Pop_mioi_ogwt;
  assign dma_read_chnl_Pop_mioi_biwt = dma_read_chnl_Pop_mioi_ogwt & dma_read_chnl_Pop_mioi_ivld_oreg;
  assign dma_read_chnl_Pop_mioi_biwt_pff = (((~ run_wten_pff) & dma_read_chnl_Pop_mioi_iswt0_pff)
      | while_for_data_and_3_rmff) & dma_read_chnl_Pop_mioi_ivld_oreg_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_chnl_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      dma_read_chnl_Pop_mioi_icwt <= while_for_data_and_3_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_dp
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_dp (
  clk, rst, dma_read_ctrl_Push_mioi_oswt_unreg, dma_read_ctrl_Push_mioi_bawt, dma_read_ctrl_Push_mioi_wen_comp,
      dma_read_ctrl_Push_mioi_biwt, dma_read_ctrl_Push_mioi_bdwt, dma_read_ctrl_Push_mioi_bcwt,
      dma_read_ctrl_Push_mioi_bawt_pff, dma_read_ctrl_Push_mioi_biwt_pff, dma_read_ctrl_Push_mioi_bcwt_pff,
      dma_read_ctrl_Push_mioi_wen_comp_pff, dma_read_ctrl_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input dma_read_ctrl_Push_mioi_oswt_unreg;
  output dma_read_ctrl_Push_mioi_bawt;
  output dma_read_ctrl_Push_mioi_wen_comp;
  input dma_read_ctrl_Push_mioi_biwt;
  input dma_read_ctrl_Push_mioi_bdwt;
  output dma_read_ctrl_Push_mioi_bcwt;
  output dma_read_ctrl_Push_mioi_bawt_pff;
  input dma_read_ctrl_Push_mioi_biwt_pff;
  output dma_read_ctrl_Push_mioi_bcwt_pff;
  output dma_read_ctrl_Push_mioi_wen_comp_pff;
  input dma_read_ctrl_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg dma_read_ctrl_Push_mioi_bcwt_reg;
  wire while_nor_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_2_rmff = ~((~(dma_read_ctrl_Push_mioi_bcwt | dma_read_ctrl_Push_mioi_biwt))
      | dma_read_ctrl_Push_mioi_bdwt);
  assign dma_read_ctrl_Push_mioi_bawt = dma_read_ctrl_Push_mioi_biwt | dma_read_ctrl_Push_mioi_bcwt;
  assign dma_read_ctrl_Push_mioi_bawt_pff = dma_read_ctrl_Push_mioi_biwt_pff | dma_read_ctrl_Push_mioi_bcwt_pff;
  assign dma_read_ctrl_Push_mioi_bcwt = dma_read_ctrl_Push_mioi_bcwt_reg;
  assign dma_read_ctrl_Push_mioi_bcwt_pff = while_nor_2_rmff;
  assign dma_read_ctrl_Push_mioi_wen_comp = (~ dma_read_ctrl_Push_mioi_oswt_unreg)
      | dma_read_ctrl_Push_mioi_bawt;
  assign dma_read_ctrl_Push_mioi_wen_comp_pff = (~ dma_read_ctrl_Push_mioi_oswt_unreg_pff)
      | dma_read_ctrl_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_ctrl_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      dma_read_ctrl_Push_mioi_bcwt_reg <= while_nor_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl (
  run_wen, dma_read_ctrl_Push_mioi_oswt_unreg, dma_read_ctrl_Push_mioi_iswt0, dma_read_ctrl_Push_mioi_irdy_oreg,
      dma_read_ctrl_Push_mioi_biwt, dma_read_ctrl_Push_mioi_bdwt, dma_read_ctrl_Push_mioi_bcwt,
      dma_read_ctrl_Push_mioi_ivld_run_sct, dma_read_ctrl_Push_mioi_biwt_pff, dma_read_ctrl_Push_mioi_iswt0_pff,
      dma_read_ctrl_Push_mioi_bcwt_pff, dma_read_ctrl_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input dma_read_ctrl_Push_mioi_oswt_unreg;
  input dma_read_ctrl_Push_mioi_iswt0;
  input dma_read_ctrl_Push_mioi_irdy_oreg;
  output dma_read_ctrl_Push_mioi_biwt;
  output dma_read_ctrl_Push_mioi_bdwt;
  input dma_read_ctrl_Push_mioi_bcwt;
  output dma_read_ctrl_Push_mioi_ivld_run_sct;
  output dma_read_ctrl_Push_mioi_biwt_pff;
  input dma_read_ctrl_Push_mioi_iswt0_pff;
  input dma_read_ctrl_Push_mioi_bcwt_pff;
  input dma_read_ctrl_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire dma_read_ctrl_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_read_ctrl_Push_mioi_bdwt = dma_read_ctrl_Push_mioi_oswt_unreg & run_wen;
  assign dma_read_ctrl_Push_mioi_ogwt = dma_read_ctrl_Push_mioi_iswt0 & (~ dma_read_ctrl_Push_mioi_bcwt);
  assign dma_read_ctrl_Push_mioi_ivld_run_sct = dma_read_ctrl_Push_mioi_ogwt;
  assign dma_read_ctrl_Push_mioi_biwt = dma_read_ctrl_Push_mioi_ogwt & dma_read_ctrl_Push_mioi_irdy_oreg;
  assign dma_read_ctrl_Push_mioi_biwt_pff = dma_read_ctrl_Push_mioi_iswt0_pff & (~
      dma_read_ctrl_Push_mioi_bcwt_pff) & dma_read_ctrl_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_wait_dp
// ------------------------------------------------------------------


module InputBuffer_run_wait_dp (
  clk, rst, sync1_Pop_mioi_ivld, sync1_Pop_mioi_ivld_oreg, dma_read_ctrl_Push_mioi_irdy,
      dma_read_ctrl_Push_mioi_irdy_oreg, dma_read_chnl_Pop_mioi_ivld, dma_read_chnl_Pop_mioi_ivld_oreg,
      audio_in_Push_mioi_irdy, audio_in_Push_mioi_irdy_oreg
);
  input clk;
  input rst;
  input sync1_Pop_mioi_ivld;
  output sync1_Pop_mioi_ivld_oreg;
  input dma_read_ctrl_Push_mioi_irdy;
  output dma_read_ctrl_Push_mioi_irdy_oreg;
  input dma_read_chnl_Pop_mioi_ivld;
  output dma_read_chnl_Pop_mioi_ivld_oreg;
  input audio_in_Push_mioi_irdy;
  output audio_in_Push_mioi_irdy_oreg;


  // Interconnect Declarations
  reg sync1_Pop_mioi_ivld_oreg_rneg;
  reg dma_read_ctrl_Push_mioi_irdy_oreg_rneg;
  reg dma_read_chnl_Pop_mioi_ivld_oreg_rneg;
  reg audio_in_Push_mioi_irdy_oreg_rneg;


  // Interconnect Declarations for Component Instantiations 
  assign audio_in_Push_mioi_irdy_oreg = ~ audio_in_Push_mioi_irdy_oreg_rneg;
  assign dma_read_ctrl_Push_mioi_irdy_oreg = ~ dma_read_ctrl_Push_mioi_irdy_oreg_rneg;
  assign dma_read_chnl_Pop_mioi_ivld_oreg = ~ dma_read_chnl_Pop_mioi_ivld_oreg_rneg;
  assign sync1_Pop_mioi_ivld_oreg = ~ sync1_Pop_mioi_ivld_oreg_rneg;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Pop_mioi_ivld_oreg_rneg <= 1'b0;
      dma_read_ctrl_Push_mioi_irdy_oreg_rneg <= 1'b0;
      dma_read_chnl_Pop_mioi_ivld_oreg_rneg <= 1'b0;
      audio_in_Push_mioi_irdy_oreg_rneg <= 1'b0;
    end
    else begin
      sync1_Pop_mioi_ivld_oreg_rneg <= ~ sync1_Pop_mioi_ivld;
      dma_read_ctrl_Push_mioi_irdy_oreg_rneg <= ~ dma_read_ctrl_Push_mioi_irdy;
      dma_read_chnl_Pop_mioi_ivld_oreg_rneg <= ~ dma_read_chnl_Pop_mioi_ivld;
      audio_in_Push_mioi_irdy_oreg_rneg <= ~ audio_in_Push_mioi_irdy;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_dp
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_dp (
  clk, rst, sync1_Pop_mioi_oswt_unreg, sync1_Pop_mioi_bawt, sync1_Pop_mioi_wen_comp,
      sync1_Pop_mioi_biwt, sync1_Pop_mioi_bdwt, sync1_Pop_mioi_wen_comp_pff, sync1_Pop_mioi_oswt_unreg_pff,
      sync1_Pop_mioi_bawt_pff, sync1_Pop_mioi_biwt_pff
);
  input clk;
  input rst;
  input sync1_Pop_mioi_oswt_unreg;
  output sync1_Pop_mioi_bawt;
  output sync1_Pop_mioi_wen_comp;
  input sync1_Pop_mioi_biwt;
  input sync1_Pop_mioi_bdwt;
  output sync1_Pop_mioi_wen_comp_pff;
  input sync1_Pop_mioi_oswt_unreg_pff;
  output sync1_Pop_mioi_bawt_pff;
  input sync1_Pop_mioi_biwt_pff;


  // Interconnect Declarations
  reg sync1_Pop_mioi_bcwt;
  wire while_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_rmff = ~((~(sync1_Pop_mioi_bcwt | sync1_Pop_mioi_biwt)) | sync1_Pop_mioi_bdwt);
  assign sync1_Pop_mioi_wen_comp = (~ sync1_Pop_mioi_oswt_unreg) | sync1_Pop_mioi_bawt;
  assign sync1_Pop_mioi_wen_comp_pff = (~ sync1_Pop_mioi_oswt_unreg_pff) | sync1_Pop_mioi_bawt_pff;
  assign sync1_Pop_mioi_bawt = sync1_Pop_mioi_biwt | sync1_Pop_mioi_bcwt;
  assign sync1_Pop_mioi_bawt_pff = sync1_Pop_mioi_biwt_pff | while_nor_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      sync1_Pop_mioi_bcwt <= while_nor_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync1_Pop_mioi_oswt_unreg, sync1_Pop_mioi_iswt0, sync1_Pop_mioi_ivld_oreg,
      sync1_Pop_mioi_biwt, sync1_Pop_mioi_bdwt, sync1_Pop_mioi_irdy_run_sct, sync1_Pop_mioi_biwt_pff,
      run_wten_pff, sync1_Pop_mioi_iswt0_pff, sync1_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync1_Pop_mioi_oswt_unreg;
  input sync1_Pop_mioi_iswt0;
  input sync1_Pop_mioi_ivld_oreg;
  output sync1_Pop_mioi_biwt;
  output sync1_Pop_mioi_bdwt;
  output sync1_Pop_mioi_irdy_run_sct;
  output sync1_Pop_mioi_biwt_pff;
  input run_wten_pff;
  input sync1_Pop_mioi_iswt0_pff;
  input sync1_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire sync1_Pop_mioi_ogwt;
  reg sync1_Pop_mioi_icwt;
  wire while_and_3_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Pop_mioi_bdwt = sync1_Pop_mioi_oswt_unreg & run_wen;
  assign sync1_Pop_mioi_ogwt = ((~ run_wten) & sync1_Pop_mioi_iswt0) | sync1_Pop_mioi_icwt;
  assign while_and_3_rmff = sync1_Pop_mioi_ogwt & (~ sync1_Pop_mioi_biwt);
  assign sync1_Pop_mioi_irdy_run_sct = sync1_Pop_mioi_ogwt;
  assign sync1_Pop_mioi_biwt = sync1_Pop_mioi_ogwt & sync1_Pop_mioi_ivld_oreg;
  assign sync1_Pop_mioi_biwt_pff = (((~ run_wten_pff) & sync1_Pop_mioi_iswt0_pff)
      | while_and_3_rmff) & sync1_Pop_mioi_ivld_oreg_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      sync1_Pop_mioi_icwt <= while_and_3_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_staller
// ------------------------------------------------------------------


module Encoder_run_staller (
  clk, rst, run_wen, run_wten, audio_in_Pop_mioi_wen_comp, audio_out_Push_mioi_wen_comp,
      run_flen_unreg, audio_in_Pop_mioi_wen_comp_pff, run_wten_pff, audio_out_Push_mioi_wen_comp_pff,
      run_flen_unreg_pff
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  input audio_in_Pop_mioi_wen_comp;
  input audio_out_Push_mioi_wen_comp;
  input run_flen_unreg;
  input audio_in_Pop_mioi_wen_comp_pff;
  output run_wten_pff;
  input audio_out_Push_mioi_wen_comp_pff;
  input run_flen_unreg_pff;


  // Interconnect Declarations
  reg run_wten_reg;
  wire not_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign not_2_rmff = ~(audio_in_Pop_mioi_wen_comp & audio_out_Push_mioi_wen_comp
      & (~ run_flen_unreg));
  assign run_wen = audio_in_Pop_mioi_wen_comp_pff & audio_out_Push_mioi_wen_comp_pff
      & (~ run_flen_unreg_pff);
  assign run_wten = run_wten_reg;
  assign run_wten_pff = not_2_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten_reg <= 1'b0;
    end
    else begin
      run_wten_reg <= not_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_dp
// ------------------------------------------------------------------


module Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_dp (
  clk, rst, audio_out_Push_mioi_oswt_unreg, audio_out_Push_mioi_bawt, audio_out_Push_mioi_wen_comp,
      audio_out_Push_mioi_biwt, audio_out_Push_mioi_bdwt, audio_out_Push_mioi_bcwt,
      audio_out_Push_mioi_bawt_pff, audio_out_Push_mioi_biwt_pff, audio_out_Push_mioi_bcwt_pff,
      audio_out_Push_mioi_wen_comp_pff, audio_out_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input audio_out_Push_mioi_oswt_unreg;
  output audio_out_Push_mioi_bawt;
  output audio_out_Push_mioi_wen_comp;
  input audio_out_Push_mioi_biwt;
  input audio_out_Push_mioi_bdwt;
  output audio_out_Push_mioi_bcwt;
  output audio_out_Push_mioi_bawt_pff;
  input audio_out_Push_mioi_biwt_pff;
  output audio_out_Push_mioi_bcwt_pff;
  output audio_out_Push_mioi_wen_comp_pff;
  input audio_out_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg audio_out_Push_mioi_bcwt_reg;
  wire while_if_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_if_nor_rmff = ~((~(audio_out_Push_mioi_bcwt | audio_out_Push_mioi_biwt))
      | audio_out_Push_mioi_bdwt);
  assign audio_out_Push_mioi_bawt = audio_out_Push_mioi_biwt | audio_out_Push_mioi_bcwt;
  assign audio_out_Push_mioi_bawt_pff = audio_out_Push_mioi_biwt_pff | audio_out_Push_mioi_bcwt_pff;
  assign audio_out_Push_mioi_bcwt = audio_out_Push_mioi_bcwt_reg;
  assign audio_out_Push_mioi_bcwt_pff = while_if_nor_rmff;
  assign audio_out_Push_mioi_wen_comp = (~ audio_out_Push_mioi_oswt_unreg) | audio_out_Push_mioi_bawt;
  assign audio_out_Push_mioi_wen_comp_pff = (~ audio_out_Push_mioi_oswt_unreg_pff)
      | audio_out_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_out_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      audio_out_Push_mioi_bcwt_reg <= while_if_nor_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_ctrl (
  run_wen, audio_out_Push_mioi_oswt_unreg, audio_out_Push_mioi_iswt0, audio_out_Push_mioi_irdy_oreg,
      audio_out_Push_mioi_biwt, audio_out_Push_mioi_bdwt, audio_out_Push_mioi_bcwt,
      audio_out_Push_mioi_ivld_run_sct, audio_out_Push_mioi_biwt_pff, audio_out_Push_mioi_iswt0_pff,
      audio_out_Push_mioi_bcwt_pff, audio_out_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input audio_out_Push_mioi_oswt_unreg;
  input audio_out_Push_mioi_iswt0;
  input audio_out_Push_mioi_irdy_oreg;
  output audio_out_Push_mioi_biwt;
  output audio_out_Push_mioi_bdwt;
  input audio_out_Push_mioi_bcwt;
  output audio_out_Push_mioi_ivld_run_sct;
  output audio_out_Push_mioi_biwt_pff;
  input audio_out_Push_mioi_iswt0_pff;
  input audio_out_Push_mioi_bcwt_pff;
  input audio_out_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire audio_out_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign audio_out_Push_mioi_bdwt = audio_out_Push_mioi_oswt_unreg & run_wen;
  assign audio_out_Push_mioi_ogwt = audio_out_Push_mioi_iswt0 & (~ audio_out_Push_mioi_bcwt);
  assign audio_out_Push_mioi_ivld_run_sct = audio_out_Push_mioi_ogwt;
  assign audio_out_Push_mioi_biwt = audio_out_Push_mioi_ogwt & audio_out_Push_mioi_irdy_oreg;
  assign audio_out_Push_mioi_biwt_pff = audio_out_Push_mioi_iswt0_pff & (~ audio_out_Push_mioi_bcwt_pff)
      & audio_out_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_wait_dp
// ------------------------------------------------------------------


module Encoder_run_wait_dp (
  clk, rst, audio_in_Pop_mioi_ivld, audio_in_Pop_mioi_ivld_oreg, audio_out_Push_mioi_irdy,
      audio_out_Push_mioi_irdy_oreg
);
  input clk;
  input rst;
  input audio_in_Pop_mioi_ivld;
  output audio_in_Pop_mioi_ivld_oreg;
  input audio_out_Push_mioi_irdy;
  output audio_out_Push_mioi_irdy_oreg;


  // Interconnect Declarations
  reg audio_in_Pop_mioi_ivld_oreg_rneg;
  reg audio_out_Push_mioi_irdy_oreg_rneg;


  // Interconnect Declarations for Component Instantiations 
  assign audio_out_Push_mioi_irdy_oreg = ~ audio_out_Push_mioi_irdy_oreg_rneg;
  assign audio_in_Pop_mioi_ivld_oreg = ~ audio_in_Pop_mioi_ivld_oreg_rneg;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Pop_mioi_ivld_oreg_rneg <= 1'b0;
      audio_out_Push_mioi_irdy_oreg_rneg <= 1'b0;
    end
    else begin
      audio_in_Pop_mioi_ivld_oreg_rneg <= ~ audio_in_Pop_mioi_ivld;
      audio_out_Push_mioi_irdy_oreg_rneg <= ~ audio_out_Push_mioi_irdy;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_dp
// ------------------------------------------------------------------


module Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_dp (
  clk, rst, audio_in_Pop_mioi_oswt_unreg, audio_in_Pop_mioi_bawt, audio_in_Pop_mioi_wen_comp,
      audio_in_Pop_mioi_idat_mxwt, audio_in_Pop_mioi_biwt, audio_in_Pop_mioi_bdwt,
      audio_in_Pop_mioi_idat, audio_in_Pop_mioi_wen_comp_pff, audio_in_Pop_mioi_oswt_unreg_pff,
      audio_in_Pop_mioi_bawt_pff, audio_in_Pop_mioi_biwt_pff
);
  input clk;
  input rst;
  input audio_in_Pop_mioi_oswt_unreg;
  output audio_in_Pop_mioi_bawt;
  output audio_in_Pop_mioi_wen_comp;
  output [15:0] audio_in_Pop_mioi_idat_mxwt;
  input audio_in_Pop_mioi_biwt;
  input audio_in_Pop_mioi_bdwt;
  input [15:0] audio_in_Pop_mioi_idat;
  output audio_in_Pop_mioi_wen_comp_pff;
  input audio_in_Pop_mioi_oswt_unreg_pff;
  output audio_in_Pop_mioi_bawt_pff;
  input audio_in_Pop_mioi_biwt_pff;


  // Interconnect Declarations
  reg audio_in_Pop_mioi_bcwt;
  reg [15:0] audio_in_Pop_mioi_idat_bfwt;
  wire while_audio_in_reg_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_audio_in_reg_nor_rmff = ~((~(audio_in_Pop_mioi_bcwt | audio_in_Pop_mioi_biwt))
      | audio_in_Pop_mioi_bdwt);
  assign audio_in_Pop_mioi_idat_mxwt = MUX_v_16_2_2(audio_in_Pop_mioi_idat, audio_in_Pop_mioi_idat_bfwt,
      audio_in_Pop_mioi_bcwt);
  assign audio_in_Pop_mioi_wen_comp = (~ audio_in_Pop_mioi_oswt_unreg) | audio_in_Pop_mioi_bawt;
  assign audio_in_Pop_mioi_wen_comp_pff = (~ audio_in_Pop_mioi_oswt_unreg_pff) |
      audio_in_Pop_mioi_bawt_pff;
  assign audio_in_Pop_mioi_bawt = audio_in_Pop_mioi_biwt | audio_in_Pop_mioi_bcwt;
  assign audio_in_Pop_mioi_bawt_pff = audio_in_Pop_mioi_biwt_pff | while_audio_in_reg_nor_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      audio_in_Pop_mioi_bcwt <= while_audio_in_reg_nor_rmff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Pop_mioi_idat_bfwt <= 16'b0000000000000000;
    end
    else if ( audio_in_Pop_mioi_biwt ) begin
      audio_in_Pop_mioi_idat_bfwt <= audio_in_Pop_mioi_idat;
    end
  end

  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, audio_in_Pop_mioi_oswt_unreg, audio_in_Pop_mioi_iswt0,
      audio_in_Pop_mioi_ivld_oreg, audio_in_Pop_mioi_biwt, audio_in_Pop_mioi_bdwt,
      audio_in_Pop_mioi_irdy_run_sct, audio_in_Pop_mioi_biwt_pff, run_wten_pff, audio_in_Pop_mioi_iswt0_pff,
      audio_in_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input audio_in_Pop_mioi_oswt_unreg;
  input audio_in_Pop_mioi_iswt0;
  input audio_in_Pop_mioi_ivld_oreg;
  output audio_in_Pop_mioi_biwt;
  output audio_in_Pop_mioi_bdwt;
  output audio_in_Pop_mioi_irdy_run_sct;
  output audio_in_Pop_mioi_biwt_pff;
  input run_wten_pff;
  input audio_in_Pop_mioi_iswt0_pff;
  input audio_in_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire audio_in_Pop_mioi_ogwt;
  reg audio_in_Pop_mioi_icwt;
  wire while_audio_in_reg_and_3_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign audio_in_Pop_mioi_bdwt = audio_in_Pop_mioi_oswt_unreg & run_wen;
  assign audio_in_Pop_mioi_ogwt = ((~ run_wten) & audio_in_Pop_mioi_iswt0) | audio_in_Pop_mioi_icwt;
  assign while_audio_in_reg_and_3_rmff = audio_in_Pop_mioi_ogwt & (~ audio_in_Pop_mioi_biwt);
  assign audio_in_Pop_mioi_irdy_run_sct = audio_in_Pop_mioi_ogwt;
  assign audio_in_Pop_mioi_biwt = audio_in_Pop_mioi_ogwt & audio_in_Pop_mioi_ivld_oreg;
  assign audio_in_Pop_mioi_biwt_pff = (((~ run_wten_pff) & audio_in_Pop_mioi_iswt0_pff)
      | while_audio_in_reg_and_3_rmff) & audio_in_Pop_mioi_ivld_oreg_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      audio_in_Pop_mioi_icwt <= while_audio_in_reg_and_3_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
// ------------------------------------------------------------------


module OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [13:0] radr;
  output we;
  output [63:0] d;
  output [13:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [13:0] radr_d;
  input [13:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_staller
// ------------------------------------------------------------------


module OutputBuffer_run_staller (
  clk, rst, run_wen, run_wten, sync2_Pop_mioi_wen_comp, audio_out_Pop_mioi_wen_comp,
      dma_write_ctrl_Push_mioi_wen_comp, dma_write_chnl_Push_mioi_wen_comp, sync3_Push_mioi_wen_comp,
      run_flen_unreg, sync2_Pop_mioi_wen_comp_pff, run_wten_pff, audio_out_Pop_mioi_wen_comp_pff,
      dma_write_ctrl_Push_mioi_wen_comp_pff, dma_write_chnl_Push_mioi_wen_comp_pff,
      sync3_Push_mioi_wen_comp_pff, run_flen_unreg_pff
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  input sync2_Pop_mioi_wen_comp;
  input audio_out_Pop_mioi_wen_comp;
  input dma_write_ctrl_Push_mioi_wen_comp;
  input dma_write_chnl_Push_mioi_wen_comp;
  input sync3_Push_mioi_wen_comp;
  input run_flen_unreg;
  input sync2_Pop_mioi_wen_comp_pff;
  output run_wten_pff;
  input audio_out_Pop_mioi_wen_comp_pff;
  input dma_write_ctrl_Push_mioi_wen_comp_pff;
  input dma_write_chnl_Push_mioi_wen_comp_pff;
  input sync3_Push_mioi_wen_comp_pff;
  input run_flen_unreg_pff;


  // Interconnect Declarations
  reg run_wten_reg;
  wire not_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign not_2_rmff = ~(sync2_Pop_mioi_wen_comp & audio_out_Pop_mioi_wen_comp & dma_write_ctrl_Push_mioi_wen_comp
      & dma_write_chnl_Push_mioi_wen_comp & sync3_Push_mioi_wen_comp & (~ run_flen_unreg));
  assign run_wen = sync2_Pop_mioi_wen_comp_pff & audio_out_Pop_mioi_wen_comp_pff
      & dma_write_ctrl_Push_mioi_wen_comp_pff & dma_write_chnl_Push_mioi_wen_comp_pff
      & sync3_Push_mioi_wen_comp_pff & (~ run_flen_unreg_pff);
  assign run_wten = run_wten_reg;
  assign run_wten_pff = not_2_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten_reg <= 1'b0;
    end
    else begin
      run_wten_reg <= not_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_dp (
  clk, rst, sync3_Push_mioi_oswt_unreg, sync3_Push_mioi_bawt, sync3_Push_mioi_wen_comp,
      sync3_Push_mioi_biwt, sync3_Push_mioi_bdwt, sync3_Push_mioi_bcwt, sync3_Push_mioi_bawt_pff,
      sync3_Push_mioi_biwt_pff, sync3_Push_mioi_bcwt_pff, sync3_Push_mioi_wen_comp_pff,
      sync3_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync3_Push_mioi_oswt_unreg;
  output sync3_Push_mioi_bawt;
  output sync3_Push_mioi_wen_comp;
  input sync3_Push_mioi_biwt;
  input sync3_Push_mioi_bdwt;
  output sync3_Push_mioi_bcwt;
  output sync3_Push_mioi_bawt_pff;
  input sync3_Push_mioi_biwt_pff;
  output sync3_Push_mioi_bcwt_pff;
  output sync3_Push_mioi_wen_comp_pff;
  input sync3_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg sync3_Push_mioi_bcwt_reg;
  wire while_nor_4_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_4_rmff = ~((~(sync3_Push_mioi_bcwt | sync3_Push_mioi_biwt)) |
      sync3_Push_mioi_bdwt);
  assign sync3_Push_mioi_bawt = sync3_Push_mioi_biwt | sync3_Push_mioi_bcwt;
  assign sync3_Push_mioi_bawt_pff = sync3_Push_mioi_biwt_pff | sync3_Push_mioi_bcwt_pff;
  assign sync3_Push_mioi_bcwt = sync3_Push_mioi_bcwt_reg;
  assign sync3_Push_mioi_bcwt_pff = while_nor_4_rmff;
  assign sync3_Push_mioi_wen_comp = (~ sync3_Push_mioi_oswt_unreg) | sync3_Push_mioi_bawt;
  assign sync3_Push_mioi_wen_comp_pff = (~ sync3_Push_mioi_oswt_unreg_pff) | sync3_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      sync3_Push_mioi_bcwt_reg <= while_nor_4_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl (
  run_wen, sync3_Push_mioi_oswt_unreg, sync3_Push_mioi_iswt0, sync3_Push_mioi_irdy_oreg,
      sync3_Push_mioi_biwt, sync3_Push_mioi_bdwt, sync3_Push_mioi_bcwt, sync3_Push_mioi_ivld_run_sct,
      sync3_Push_mioi_biwt_pff, sync3_Push_mioi_iswt0_pff, sync3_Push_mioi_bcwt_pff,
      sync3_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input sync3_Push_mioi_oswt_unreg;
  input sync3_Push_mioi_iswt0;
  input sync3_Push_mioi_irdy_oreg;
  output sync3_Push_mioi_biwt;
  output sync3_Push_mioi_bdwt;
  input sync3_Push_mioi_bcwt;
  output sync3_Push_mioi_ivld_run_sct;
  output sync3_Push_mioi_biwt_pff;
  input sync3_Push_mioi_iswt0_pff;
  input sync3_Push_mioi_bcwt_pff;
  input sync3_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync3_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync3_Push_mioi_bdwt = sync3_Push_mioi_oswt_unreg & run_wen;
  assign sync3_Push_mioi_ogwt = sync3_Push_mioi_iswt0 & (~ sync3_Push_mioi_bcwt);
  assign sync3_Push_mioi_ivld_run_sct = sync3_Push_mioi_ogwt;
  assign sync3_Push_mioi_biwt = sync3_Push_mioi_ogwt & sync3_Push_mioi_irdy_oreg;
  assign sync3_Push_mioi_biwt_pff = sync3_Push_mioi_iswt0_pff & (~ sync3_Push_mioi_bcwt_pff)
      & sync3_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_dp
    (
  clk, rst, dma_write_chnl_Push_mioi_oswt_unreg, dma_write_chnl_Push_mioi_bawt, dma_write_chnl_Push_mioi_wen_comp,
      dma_write_chnl_Push_mioi_biwt, dma_write_chnl_Push_mioi_bdwt, dma_write_chnl_Push_mioi_bcwt,
      dma_write_chnl_Push_mioi_bawt_pff, dma_write_chnl_Push_mioi_biwt_pff, dma_write_chnl_Push_mioi_bcwt_pff,
      dma_write_chnl_Push_mioi_wen_comp_pff, dma_write_chnl_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input dma_write_chnl_Push_mioi_oswt_unreg;
  output dma_write_chnl_Push_mioi_bawt;
  output dma_write_chnl_Push_mioi_wen_comp;
  input dma_write_chnl_Push_mioi_biwt;
  input dma_write_chnl_Push_mioi_bdwt;
  output dma_write_chnl_Push_mioi_bcwt;
  output dma_write_chnl_Push_mioi_bawt_pff;
  input dma_write_chnl_Push_mioi_biwt_pff;
  output dma_write_chnl_Push_mioi_bcwt_pff;
  output dma_write_chnl_Push_mioi_wen_comp_pff;
  input dma_write_chnl_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg dma_write_chnl_Push_mioi_bcwt_reg;
  wire while_for_1_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_for_1_nor_rmff = ~((~(dma_write_chnl_Push_mioi_bcwt | dma_write_chnl_Push_mioi_biwt))
      | dma_write_chnl_Push_mioi_bdwt);
  assign dma_write_chnl_Push_mioi_bawt = dma_write_chnl_Push_mioi_biwt | dma_write_chnl_Push_mioi_bcwt;
  assign dma_write_chnl_Push_mioi_bawt_pff = dma_write_chnl_Push_mioi_biwt_pff |
      dma_write_chnl_Push_mioi_bcwt_pff;
  assign dma_write_chnl_Push_mioi_bcwt = dma_write_chnl_Push_mioi_bcwt_reg;
  assign dma_write_chnl_Push_mioi_bcwt_pff = while_for_1_nor_rmff;
  assign dma_write_chnl_Push_mioi_wen_comp = (~ dma_write_chnl_Push_mioi_oswt_unreg)
      | dma_write_chnl_Push_mioi_bawt;
  assign dma_write_chnl_Push_mioi_wen_comp_pff = (~ dma_write_chnl_Push_mioi_oswt_unreg_pff)
      | dma_write_chnl_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_chnl_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      dma_write_chnl_Push_mioi_bcwt_reg <= while_for_1_nor_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl
    (
  run_wen, dma_write_chnl_Push_mioi_oswt_unreg, dma_write_chnl_Push_mioi_iswt0, dma_write_chnl_Push_mioi_irdy_oreg,
      dma_write_chnl_Push_mioi_biwt, dma_write_chnl_Push_mioi_bdwt, dma_write_chnl_Push_mioi_bcwt,
      dma_write_chnl_Push_mioi_ivld_run_sct, dma_write_chnl_Push_mioi_biwt_pff, dma_write_chnl_Push_mioi_iswt0_pff,
      dma_write_chnl_Push_mioi_bcwt_pff, dma_write_chnl_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input dma_write_chnl_Push_mioi_oswt_unreg;
  input dma_write_chnl_Push_mioi_iswt0;
  input dma_write_chnl_Push_mioi_irdy_oreg;
  output dma_write_chnl_Push_mioi_biwt;
  output dma_write_chnl_Push_mioi_bdwt;
  input dma_write_chnl_Push_mioi_bcwt;
  output dma_write_chnl_Push_mioi_ivld_run_sct;
  output dma_write_chnl_Push_mioi_biwt_pff;
  input dma_write_chnl_Push_mioi_iswt0_pff;
  input dma_write_chnl_Push_mioi_bcwt_pff;
  input dma_write_chnl_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire dma_write_chnl_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_write_chnl_Push_mioi_bdwt = dma_write_chnl_Push_mioi_oswt_unreg & run_wen;
  assign dma_write_chnl_Push_mioi_ogwt = dma_write_chnl_Push_mioi_iswt0 & (~ dma_write_chnl_Push_mioi_bcwt);
  assign dma_write_chnl_Push_mioi_ivld_run_sct = dma_write_chnl_Push_mioi_ogwt;
  assign dma_write_chnl_Push_mioi_biwt = dma_write_chnl_Push_mioi_ogwt & dma_write_chnl_Push_mioi_irdy_oreg;
  assign dma_write_chnl_Push_mioi_biwt_pff = dma_write_chnl_Push_mioi_iswt0_pff &
      (~ dma_write_chnl_Push_mioi_bcwt_pff) & dma_write_chnl_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_dp
    (
  clk, rst, dma_write_ctrl_Push_mioi_oswt_unreg, dma_write_ctrl_Push_mioi_bawt, dma_write_ctrl_Push_mioi_wen_comp,
      dma_write_ctrl_Push_mioi_biwt, dma_write_ctrl_Push_mioi_bdwt, dma_write_ctrl_Push_mioi_bcwt,
      dma_write_ctrl_Push_mioi_bawt_pff, dma_write_ctrl_Push_mioi_biwt_pff, dma_write_ctrl_Push_mioi_bcwt_pff,
      dma_write_ctrl_Push_mioi_wen_comp_pff, dma_write_ctrl_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input dma_write_ctrl_Push_mioi_oswt_unreg;
  output dma_write_ctrl_Push_mioi_bawt;
  output dma_write_ctrl_Push_mioi_wen_comp;
  input dma_write_ctrl_Push_mioi_biwt;
  input dma_write_ctrl_Push_mioi_bdwt;
  output dma_write_ctrl_Push_mioi_bcwt;
  output dma_write_ctrl_Push_mioi_bawt_pff;
  input dma_write_ctrl_Push_mioi_biwt_pff;
  output dma_write_ctrl_Push_mioi_bcwt_pff;
  output dma_write_ctrl_Push_mioi_wen_comp_pff;
  input dma_write_ctrl_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg dma_write_ctrl_Push_mioi_bcwt_reg;
  wire while_nor_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_2_rmff = ~((~(dma_write_ctrl_Push_mioi_bcwt | dma_write_ctrl_Push_mioi_biwt))
      | dma_write_ctrl_Push_mioi_bdwt);
  assign dma_write_ctrl_Push_mioi_bawt = dma_write_ctrl_Push_mioi_biwt | dma_write_ctrl_Push_mioi_bcwt;
  assign dma_write_ctrl_Push_mioi_bawt_pff = dma_write_ctrl_Push_mioi_biwt_pff |
      dma_write_ctrl_Push_mioi_bcwt_pff;
  assign dma_write_ctrl_Push_mioi_bcwt = dma_write_ctrl_Push_mioi_bcwt_reg;
  assign dma_write_ctrl_Push_mioi_bcwt_pff = while_nor_2_rmff;
  assign dma_write_ctrl_Push_mioi_wen_comp = (~ dma_write_ctrl_Push_mioi_oswt_unreg)
      | dma_write_ctrl_Push_mioi_bawt;
  assign dma_write_ctrl_Push_mioi_wen_comp_pff = (~ dma_write_ctrl_Push_mioi_oswt_unreg_pff)
      | dma_write_ctrl_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_ctrl_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      dma_write_ctrl_Push_mioi_bcwt_reg <= while_nor_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl
    (
  run_wen, dma_write_ctrl_Push_mioi_oswt_unreg, dma_write_ctrl_Push_mioi_iswt0, dma_write_ctrl_Push_mioi_irdy_oreg,
      dma_write_ctrl_Push_mioi_biwt, dma_write_ctrl_Push_mioi_bdwt, dma_write_ctrl_Push_mioi_bcwt,
      dma_write_ctrl_Push_mioi_ivld_run_sct, dma_write_ctrl_Push_mioi_biwt_pff, dma_write_ctrl_Push_mioi_iswt0_pff,
      dma_write_ctrl_Push_mioi_bcwt_pff, dma_write_ctrl_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input dma_write_ctrl_Push_mioi_oswt_unreg;
  input dma_write_ctrl_Push_mioi_iswt0;
  input dma_write_ctrl_Push_mioi_irdy_oreg;
  output dma_write_ctrl_Push_mioi_biwt;
  output dma_write_ctrl_Push_mioi_bdwt;
  input dma_write_ctrl_Push_mioi_bcwt;
  output dma_write_ctrl_Push_mioi_ivld_run_sct;
  output dma_write_ctrl_Push_mioi_biwt_pff;
  input dma_write_ctrl_Push_mioi_iswt0_pff;
  input dma_write_ctrl_Push_mioi_bcwt_pff;
  input dma_write_ctrl_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire dma_write_ctrl_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_write_ctrl_Push_mioi_bdwt = dma_write_ctrl_Push_mioi_oswt_unreg & run_wen;
  assign dma_write_ctrl_Push_mioi_ogwt = dma_write_ctrl_Push_mioi_iswt0 & (~ dma_write_ctrl_Push_mioi_bcwt);
  assign dma_write_ctrl_Push_mioi_ivld_run_sct = dma_write_ctrl_Push_mioi_ogwt;
  assign dma_write_ctrl_Push_mioi_biwt = dma_write_ctrl_Push_mioi_ogwt & dma_write_ctrl_Push_mioi_irdy_oreg;
  assign dma_write_ctrl_Push_mioi_biwt_pff = dma_write_ctrl_Push_mioi_iswt0_pff &
      (~ dma_write_ctrl_Push_mioi_bcwt_pff) & dma_write_ctrl_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_dp (
  clk, rst, audio_out_Pop_mioi_oswt_unreg, audio_out_Pop_mioi_bawt, audio_out_Pop_mioi_wen_comp,
      audio_out_Pop_mioi_idat_mxwt, audio_out_Pop_mioi_biwt, audio_out_Pop_mioi_bdwt,
      audio_out_Pop_mioi_idat, audio_out_Pop_mioi_bawt_pff, audio_out_Pop_mioi_biwt_pff,
      audio_out_Pop_mioi_wen_comp_pff, audio_out_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input audio_out_Pop_mioi_oswt_unreg;
  output audio_out_Pop_mioi_bawt;
  output audio_out_Pop_mioi_wen_comp;
  output [511:0] audio_out_Pop_mioi_idat_mxwt;
  input audio_out_Pop_mioi_biwt;
  input audio_out_Pop_mioi_bdwt;
  input [511:0] audio_out_Pop_mioi_idat;
  output audio_out_Pop_mioi_bawt_pff;
  input audio_out_Pop_mioi_biwt_pff;
  output audio_out_Pop_mioi_wen_comp_pff;
  input audio_out_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg audio_out_Pop_mioi_bcwt;
  reg [511:0] audio_out_Pop_mioi_idat_bfwt;
  wire while_for_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_for_nor_rmff = ~((~(audio_out_Pop_mioi_bcwt | audio_out_Pop_mioi_biwt))
      | audio_out_Pop_mioi_bdwt);
  assign audio_out_Pop_mioi_idat_mxwt = MUX_v_512_2_2(audio_out_Pop_mioi_idat, audio_out_Pop_mioi_idat_bfwt,
      audio_out_Pop_mioi_bcwt);
  assign audio_out_Pop_mioi_bawt = audio_out_Pop_mioi_biwt | audio_out_Pop_mioi_bcwt;
  assign audio_out_Pop_mioi_bawt_pff = audio_out_Pop_mioi_biwt_pff | while_for_nor_rmff;
  assign audio_out_Pop_mioi_wen_comp = (~ audio_out_Pop_mioi_oswt_unreg) | audio_out_Pop_mioi_bawt;
  assign audio_out_Pop_mioi_wen_comp_pff = (~ audio_out_Pop_mioi_oswt_unreg_pff)
      | audio_out_Pop_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_out_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      audio_out_Pop_mioi_bcwt <= while_for_nor_rmff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_out_Pop_mioi_idat_bfwt <= 512'b
    end
    else if ( audio_out_Pop_mioi_biwt ) begin
      audio_out_Pop_mioi_idat_bfwt <= audio_out_Pop_mioi_idat;
    end
  end

  function automatic [511:0] MUX_v_512_2_2;
    input [511:0] input_0;
    input [511:0] input_1;
    input  sel;
    reg [511:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_512_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, audio_out_Pop_mioi_oswt_unreg, audio_out_Pop_mioi_iswt0,
      audio_out_Pop_mioi_ivld_oreg, audio_out_Pop_mioi_biwt, audio_out_Pop_mioi_bdwt,
      audio_out_Pop_mioi_irdy_run_sct, audio_out_Pop_mioi_biwt_pff, run_wten_pff,
      audio_out_Pop_mioi_iswt0_pff, audio_out_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input audio_out_Pop_mioi_oswt_unreg;
  input audio_out_Pop_mioi_iswt0;
  input audio_out_Pop_mioi_ivld_oreg;
  output audio_out_Pop_mioi_biwt;
  output audio_out_Pop_mioi_bdwt;
  output audio_out_Pop_mioi_irdy_run_sct;
  output audio_out_Pop_mioi_biwt_pff;
  input run_wten_pff;
  input audio_out_Pop_mioi_iswt0_pff;
  input audio_out_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire audio_out_Pop_mioi_ogwt;
  reg audio_out_Pop_mioi_icwt;
  wire while_for_and_3_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign audio_out_Pop_mioi_bdwt = audio_out_Pop_mioi_oswt_unreg & run_wen;
  assign audio_out_Pop_mioi_ogwt = ((~ run_wten) & audio_out_Pop_mioi_iswt0) | audio_out_Pop_mioi_icwt;
  assign while_for_and_3_rmff = audio_out_Pop_mioi_ogwt & (~ audio_out_Pop_mioi_biwt);
  assign audio_out_Pop_mioi_irdy_run_sct = audio_out_Pop_mioi_ogwt;
  assign audio_out_Pop_mioi_biwt = audio_out_Pop_mioi_ogwt & audio_out_Pop_mioi_ivld_oreg;
  assign audio_out_Pop_mioi_biwt_pff = (((~ run_wten_pff) & audio_out_Pop_mioi_iswt0_pff)
      | while_for_and_3_rmff) & audio_out_Pop_mioi_ivld_oreg_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_out_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      audio_out_Pop_mioi_icwt <= while_for_and_3_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_wait_dp (
  clk, rst, sync2_Pop_mioi_ivld, sync2_Pop_mioi_ivld_oreg, audio_out_Pop_mioi_ivld,
      audio_out_Pop_mioi_ivld_oreg, dma_write_ctrl_Push_mioi_irdy, dma_write_ctrl_Push_mioi_irdy_oreg,
      dma_write_chnl_Push_mioi_irdy, dma_write_chnl_Push_mioi_irdy_oreg, sync3_Push_mioi_irdy,
      sync3_Push_mioi_irdy_oreg
);
  input clk;
  input rst;
  input sync2_Pop_mioi_ivld;
  output sync2_Pop_mioi_ivld_oreg;
  input audio_out_Pop_mioi_ivld;
  output audio_out_Pop_mioi_ivld_oreg;
  input dma_write_ctrl_Push_mioi_irdy;
  output dma_write_ctrl_Push_mioi_irdy_oreg;
  input dma_write_chnl_Push_mioi_irdy;
  output dma_write_chnl_Push_mioi_irdy_oreg;
  input sync3_Push_mioi_irdy;
  output sync3_Push_mioi_irdy_oreg;


  // Interconnect Declarations
  reg sync2_Pop_mioi_ivld_oreg_rneg;
  reg audio_out_Pop_mioi_ivld_oreg_rneg;
  reg dma_write_ctrl_Push_mioi_irdy_oreg_rneg;
  reg dma_write_chnl_Push_mioi_irdy_oreg_rneg;
  reg sync3_Push_mioi_irdy_oreg_rneg;


  // Interconnect Declarations for Component Instantiations 
  assign dma_write_ctrl_Push_mioi_irdy_oreg = ~ dma_write_ctrl_Push_mioi_irdy_oreg_rneg;
  assign dma_write_chnl_Push_mioi_irdy_oreg = ~ dma_write_chnl_Push_mioi_irdy_oreg_rneg;
  assign audio_out_Pop_mioi_ivld_oreg = ~ audio_out_Pop_mioi_ivld_oreg_rneg;
  assign sync3_Push_mioi_irdy_oreg = ~ sync3_Push_mioi_irdy_oreg_rneg;
  assign sync2_Pop_mioi_ivld_oreg = ~ sync2_Pop_mioi_ivld_oreg_rneg;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Pop_mioi_ivld_oreg_rneg <= 1'b0;
      audio_out_Pop_mioi_ivld_oreg_rneg <= 1'b0;
      dma_write_ctrl_Push_mioi_irdy_oreg_rneg <= 1'b0;
      dma_write_chnl_Push_mioi_irdy_oreg_rneg <= 1'b0;
      sync3_Push_mioi_irdy_oreg_rneg <= 1'b0;
    end
    else begin
      sync2_Pop_mioi_ivld_oreg_rneg <= ~ sync2_Pop_mioi_ivld;
      audio_out_Pop_mioi_ivld_oreg_rneg <= ~ audio_out_Pop_mioi_ivld;
      dma_write_ctrl_Push_mioi_irdy_oreg_rneg <= ~ dma_write_ctrl_Push_mioi_irdy;
      dma_write_chnl_Push_mioi_irdy_oreg_rneg <= ~ dma_write_chnl_Push_mioi_irdy;
      sync3_Push_mioi_irdy_oreg_rneg <= ~ sync3_Push_mioi_irdy;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_dp (
  clk, rst, sync2_Pop_mioi_oswt_unreg, sync2_Pop_mioi_bawt, sync2_Pop_mioi_wen_comp,
      sync2_Pop_mioi_biwt, sync2_Pop_mioi_bdwt, sync2_Pop_mioi_wen_comp_pff, sync2_Pop_mioi_oswt_unreg_pff,
      sync2_Pop_mioi_bawt_pff, sync2_Pop_mioi_biwt_pff
);
  input clk;
  input rst;
  input sync2_Pop_mioi_oswt_unreg;
  output sync2_Pop_mioi_bawt;
  output sync2_Pop_mioi_wen_comp;
  input sync2_Pop_mioi_biwt;
  input sync2_Pop_mioi_bdwt;
  output sync2_Pop_mioi_wen_comp_pff;
  input sync2_Pop_mioi_oswt_unreg_pff;
  output sync2_Pop_mioi_bawt_pff;
  input sync2_Pop_mioi_biwt_pff;


  // Interconnect Declarations
  reg sync2_Pop_mioi_bcwt;
  wire while_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_rmff = ~((~(sync2_Pop_mioi_bcwt | sync2_Pop_mioi_biwt)) | sync2_Pop_mioi_bdwt);
  assign sync2_Pop_mioi_wen_comp = (~ sync2_Pop_mioi_oswt_unreg) | sync2_Pop_mioi_bawt;
  assign sync2_Pop_mioi_wen_comp_pff = (~ sync2_Pop_mioi_oswt_unreg_pff) | sync2_Pop_mioi_bawt_pff;
  assign sync2_Pop_mioi_bawt = sync2_Pop_mioi_biwt | sync2_Pop_mioi_bcwt;
  assign sync2_Pop_mioi_bawt_pff = sync2_Pop_mioi_biwt_pff | while_nor_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      sync2_Pop_mioi_bcwt <= while_nor_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync2_Pop_mioi_oswt_unreg, sync2_Pop_mioi_iswt0, sync2_Pop_mioi_ivld_oreg,
      sync2_Pop_mioi_biwt, sync2_Pop_mioi_bdwt, sync2_Pop_mioi_irdy_run_sct, sync2_Pop_mioi_biwt_pff,
      run_wten_pff, sync2_Pop_mioi_iswt0_pff, sync2_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync2_Pop_mioi_oswt_unreg;
  input sync2_Pop_mioi_iswt0;
  input sync2_Pop_mioi_ivld_oreg;
  output sync2_Pop_mioi_biwt;
  output sync2_Pop_mioi_bdwt;
  output sync2_Pop_mioi_irdy_run_sct;
  output sync2_Pop_mioi_biwt_pff;
  input run_wten_pff;
  input sync2_Pop_mioi_iswt0_pff;
  input sync2_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire sync2_Pop_mioi_ogwt;
  reg sync2_Pop_mioi_icwt;
  wire while_and_3_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign sync2_Pop_mioi_bdwt = sync2_Pop_mioi_oswt_unreg & run_wen;
  assign sync2_Pop_mioi_ogwt = ((~ run_wten) & sync2_Pop_mioi_iswt0) | sync2_Pop_mioi_icwt;
  assign while_and_3_rmff = sync2_Pop_mioi_ogwt & (~ sync2_Pop_mioi_biwt);
  assign sync2_Pop_mioi_irdy_run_sct = sync2_Pop_mioi_ogwt;
  assign sync2_Pop_mioi_biwt = sync2_Pop_mioi_ogwt & sync2_Pop_mioi_ivld_oreg;
  assign sync2_Pop_mioi_biwt_pff = (((~ run_wten_pff) & sync2_Pop_mioi_iswt0_pff)
      | while_and_3_rmff) & sync2_Pop_mioi_ivld_oreg_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      sync2_Pop_mioi_icwt <= while_and_3_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi (
  clk, rst, sync3_val, sync3_rdy, sync3_msg, run_wen, run_wten, sync3_Pop_mioi_oswt_unreg,
      sync3_Pop_mioi_bawt, sync3_Pop_mioi_iswt0, sync3_Pop_mioi_wen_comp, sync3_Pop_mioi_ivld,
      sync3_Pop_mioi_ivld_oreg, sync3_Pop_mioi_bawt_pff, run_wten_pff, sync3_Pop_mioi_iswt0_pff,
      sync3_Pop_mioi_ivld_oreg_pff, sync3_Pop_mioi_wen_comp_pff, sync3_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;
  input run_wen;
  input run_wten;
  input sync3_Pop_mioi_oswt_unreg;
  output sync3_Pop_mioi_bawt;
  input sync3_Pop_mioi_iswt0;
  output sync3_Pop_mioi_wen_comp;
  output sync3_Pop_mioi_ivld;
  input sync3_Pop_mioi_ivld_oreg;
  output sync3_Pop_mioi_bawt_pff;
  input run_wten_pff;
  input sync3_Pop_mioi_iswt0_pff;
  input sync3_Pop_mioi_ivld_oreg_pff;
  output sync3_Pop_mioi_wen_comp_pff;
  input sync3_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire sync3_Pop_mioi_biwt;
  wire sync3_Pop_mioi_bdwt;
  wire sync3_Pop_mioi_idat;
  wire sync3_Pop_mioi_irdy_run_sct;
  wire sync3_Pop_mioi_bawt_reg;
  wire sync3_Pop_mioi_bawt_iff;
  wire sync3_Pop_mioi_biwt_iff;
  wire sync3_Pop_mioi_wen_comp_reg;
  wire sync3_Pop_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd5),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync3_Pop_mioi (
      .vld(sync3_val),
      .rdy(sync3_rdy),
      .dat(sync3_msg),
      .idat(sync3_Pop_mioi_idat),
      .irdy(sync3_Pop_mioi_irdy_run_sct),
      .ivld(sync3_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Pop_mioi_oswt_unreg(sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_iswt0(sync3_Pop_mioi_iswt0),
      .sync3_Pop_mioi_ivld_oreg(sync3_Pop_mioi_ivld_oreg),
      .sync3_Pop_mioi_biwt(sync3_Pop_mioi_biwt),
      .sync3_Pop_mioi_bdwt(sync3_Pop_mioi_bdwt),
      .sync3_Pop_mioi_irdy_run_sct(sync3_Pop_mioi_irdy_run_sct),
      .sync3_Pop_mioi_biwt_pff(sync3_Pop_mioi_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .sync3_Pop_mioi_iswt0_pff(sync3_Pop_mioi_iswt0_pff),
      .sync3_Pop_mioi_ivld_oreg_pff(sync3_Pop_mioi_ivld_oreg_pff)
    );
  Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync3_Pop_mioi_oswt_unreg(sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_bawt(sync3_Pop_mioi_bawt_reg),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp_reg),
      .sync3_Pop_mioi_biwt(sync3_Pop_mioi_biwt),
      .sync3_Pop_mioi_bdwt(sync3_Pop_mioi_bdwt),
      .sync3_Pop_mioi_bawt_pff(sync3_Pop_mioi_bawt_iff),
      .sync3_Pop_mioi_biwt_pff(sync3_Pop_mioi_biwt_iff),
      .sync3_Pop_mioi_wen_comp_pff(sync3_Pop_mioi_wen_comp_iff),
      .sync3_Pop_mioi_oswt_unreg_pff(sync3_Pop_mioi_oswt_unreg_pff)
    );
  assign sync3_Pop_mioi_bawt = sync3_Pop_mioi_bawt_reg;
  assign sync3_Pop_mioi_bawt_pff = sync3_Pop_mioi_bawt_iff;
  assign sync3_Pop_mioi_wen_comp = sync3_Pop_mioi_wen_comp_reg;
  assign sync3_Pop_mioi_wen_comp_pff = sync3_Pop_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi (
  clk, rst, sync2_val, sync2_rdy, sync2_msg, run_wen, sync2_Push_mioi_oswt_unreg,
      sync2_Push_mioi_bawt, sync2_Push_mioi_iswt0, sync2_Push_mioi_wen_comp, sync2_Push_mioi_irdy,
      sync2_Push_mioi_irdy_oreg, sync2_Push_mioi_bawt_pff, sync2_Push_mioi_iswt0_pff,
      sync2_Push_mioi_irdy_oreg_pff, sync2_Push_mioi_wen_comp_pff, sync2_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input run_wen;
  input sync2_Push_mioi_oswt_unreg;
  output sync2_Push_mioi_bawt;
  input sync2_Push_mioi_iswt0;
  output sync2_Push_mioi_wen_comp;
  output sync2_Push_mioi_irdy;
  input sync2_Push_mioi_irdy_oreg;
  output sync2_Push_mioi_bawt_pff;
  input sync2_Push_mioi_iswt0_pff;
  input sync2_Push_mioi_irdy_oreg_pff;
  output sync2_Push_mioi_wen_comp_pff;
  input sync2_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire sync2_Push_mioi_biwt;
  wire sync2_Push_mioi_bdwt;
  wire sync2_Push_mioi_bcwt;
  wire sync2_Push_mioi_ivld_run_sct;
  wire sync2_Push_mioi_bawt_reg;
  wire sync2_Push_mioi_bawt_iff;
  wire sync2_Push_mioi_biwt_iff;
  wire sync2_Push_mioi_bcwt_iff;
  wire sync2_Push_mioi_wen_comp_reg;
  wire sync2_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd4),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync2_Push_mioi (
      .vld(sync2_val),
      .rdy(sync2_rdy),
      .dat(sync2_msg),
      .idat(1'b1),
      .irdy(sync2_Push_mioi_irdy),
      .ivld(sync2_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .sync2_Push_mioi_oswt_unreg(sync2_Push_mioi_oswt_unreg),
      .sync2_Push_mioi_iswt0(sync2_Push_mioi_iswt0),
      .sync2_Push_mioi_irdy_oreg(sync2_Push_mioi_irdy_oreg),
      .sync2_Push_mioi_biwt(sync2_Push_mioi_biwt),
      .sync2_Push_mioi_bdwt(sync2_Push_mioi_bdwt),
      .sync2_Push_mioi_bcwt(sync2_Push_mioi_bcwt),
      .sync2_Push_mioi_ivld_run_sct(sync2_Push_mioi_ivld_run_sct),
      .sync2_Push_mioi_biwt_pff(sync2_Push_mioi_biwt_iff),
      .sync2_Push_mioi_iswt0_pff(sync2_Push_mioi_iswt0_pff),
      .sync2_Push_mioi_bcwt_pff(sync2_Push_mioi_bcwt_iff),
      .sync2_Push_mioi_irdy_oreg_pff(sync2_Push_mioi_irdy_oreg_pff)
    );
  Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync2_Push_mioi_oswt_unreg(sync2_Push_mioi_oswt_unreg),
      .sync2_Push_mioi_bawt(sync2_Push_mioi_bawt_reg),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp_reg),
      .sync2_Push_mioi_biwt(sync2_Push_mioi_biwt),
      .sync2_Push_mioi_bdwt(sync2_Push_mioi_bdwt),
      .sync2_Push_mioi_bcwt(sync2_Push_mioi_bcwt),
      .sync2_Push_mioi_bawt_pff(sync2_Push_mioi_bawt_iff),
      .sync2_Push_mioi_biwt_pff(sync2_Push_mioi_biwt_iff),
      .sync2_Push_mioi_bcwt_pff(sync2_Push_mioi_bcwt_iff),
      .sync2_Push_mioi_wen_comp_pff(sync2_Push_mioi_wen_comp_iff),
      .sync2_Push_mioi_oswt_unreg_pff(sync2_Push_mioi_oswt_unreg_pff)
    );
  assign sync2_Push_mioi_bawt = sync2_Push_mioi_bawt_reg;
  assign sync2_Push_mioi_bawt_pff = sync2_Push_mioi_bawt_iff;
  assign sync2_Push_mioi_wen_comp = sync2_Push_mioi_wen_comp_reg;
  assign sync2_Push_mioi_wen_comp_pff = sync2_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi (
  clk, rst, sync1_val, sync1_rdy, sync1_msg, run_wen, sync1_Push_mioi_oswt_unreg,
      sync1_Push_mioi_bawt, sync1_Push_mioi_iswt0, sync1_Push_mioi_wen_comp, sync1_Push_mioi_irdy,
      sync1_Push_mioi_irdy_oreg, sync1_Push_mioi_wen_comp_pff, sync1_Push_mioi_oswt_unreg_pff,
      sync1_Push_mioi_bawt_pff, sync1_Push_mioi_iswt0_pff, sync1_Push_mioi_irdy_oreg_pff
);
  input clk;
  input rst;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  input run_wen;
  input sync1_Push_mioi_oswt_unreg;
  output sync1_Push_mioi_bawt;
  input sync1_Push_mioi_iswt0;
  output sync1_Push_mioi_wen_comp;
  output sync1_Push_mioi_irdy;
  input sync1_Push_mioi_irdy_oreg;
  output sync1_Push_mioi_wen_comp_pff;
  input sync1_Push_mioi_oswt_unreg_pff;
  output sync1_Push_mioi_bawt_pff;
  input sync1_Push_mioi_iswt0_pff;
  input sync1_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync1_Push_mioi_biwt;
  wire sync1_Push_mioi_bdwt;
  wire sync1_Push_mioi_bcwt;
  wire sync1_Push_mioi_ivld_run_sct;
  wire sync1_Push_mioi_wen_comp_reg;
  wire sync1_Push_mioi_wen_comp_iff;
  wire sync1_Push_mioi_bawt_reg;
  wire sync1_Push_mioi_bawt_iff;
  wire sync1_Push_mioi_biwt_iff;
  wire sync1_Push_mioi_bcwt_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd3),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync1_Push_mioi (
      .vld(sync1_val),
      .rdy(sync1_rdy),
      .dat(sync1_msg),
      .idat(1'b1),
      .irdy(sync1_Push_mioi_irdy),
      .ivld(sync1_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .sync1_Push_mioi_oswt_unreg(sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_iswt0(sync1_Push_mioi_iswt0),
      .sync1_Push_mioi_irdy_oreg(sync1_Push_mioi_irdy_oreg),
      .sync1_Push_mioi_biwt(sync1_Push_mioi_biwt),
      .sync1_Push_mioi_bdwt(sync1_Push_mioi_bdwt),
      .sync1_Push_mioi_bcwt(sync1_Push_mioi_bcwt),
      .sync1_Push_mioi_ivld_run_sct(sync1_Push_mioi_ivld_run_sct),
      .sync1_Push_mioi_biwt_pff(sync1_Push_mioi_biwt_iff),
      .sync1_Push_mioi_iswt0_pff(sync1_Push_mioi_iswt0_pff),
      .sync1_Push_mioi_bcwt_pff(sync1_Push_mioi_bcwt_iff),
      .sync1_Push_mioi_irdy_oreg_pff(sync1_Push_mioi_irdy_oreg_pff)
    );
  Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync1_Push_mioi_oswt_unreg(sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_bawt(sync1_Push_mioi_bawt_reg),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp_reg),
      .sync1_Push_mioi_biwt(sync1_Push_mioi_biwt),
      .sync1_Push_mioi_bdwt(sync1_Push_mioi_bdwt),
      .sync1_Push_mioi_bcwt(sync1_Push_mioi_bcwt),
      .sync1_Push_mioi_wen_comp_pff(sync1_Push_mioi_wen_comp_iff),
      .sync1_Push_mioi_oswt_unreg_pff(sync1_Push_mioi_oswt_unreg_pff),
      .sync1_Push_mioi_bawt_pff(sync1_Push_mioi_bawt_iff),
      .sync1_Push_mioi_biwt_pff(sync1_Push_mioi_biwt_iff),
      .sync1_Push_mioi_bcwt_pff(sync1_Push_mioi_bcwt_iff)
    );
  assign sync1_Push_mioi_wen_comp = sync1_Push_mioi_wen_comp_reg;
  assign sync1_Push_mioi_wen_comp_pff = sync1_Push_mioi_wen_comp_iff;
  assign sync1_Push_mioi_bawt = sync1_Push_mioi_bawt_reg;
  assign sync1_Push_mioi_bawt_pff = sync1_Push_mioi_bawt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_audio_in_Push_mioi
// ------------------------------------------------------------------


module InputBuffer_run_audio_in_Push_mioi (
  clk, rst, audio_in_val, audio_in_rdy, audio_in_msg, run_wen, audio_in_Push_mioi_oswt_unreg,
      audio_in_Push_mioi_bawt, audio_in_Push_mioi_iswt0, audio_in_Push_mioi_wen_comp,
      audio_in_Push_mioi_idat, audio_in_Push_mioi_irdy, audio_in_Push_mioi_irdy_oreg,
      audio_in_Push_mioi_bawt_pff, audio_in_Push_mioi_iswt0_pff, audio_in_Push_mioi_irdy_oreg_pff,
      audio_in_Push_mioi_wen_comp_pff, audio_in_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output audio_in_val;
  input audio_in_rdy;
  output [15:0] audio_in_msg;
  input run_wen;
  input audio_in_Push_mioi_oswt_unreg;
  output audio_in_Push_mioi_bawt;
  input audio_in_Push_mioi_iswt0;
  output audio_in_Push_mioi_wen_comp;
  input [15:0] audio_in_Push_mioi_idat;
  output audio_in_Push_mioi_irdy;
  input audio_in_Push_mioi_irdy_oreg;
  output audio_in_Push_mioi_bawt_pff;
  input audio_in_Push_mioi_iswt0_pff;
  input audio_in_Push_mioi_irdy_oreg_pff;
  output audio_in_Push_mioi_wen_comp_pff;
  input audio_in_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire audio_in_Push_mioi_biwt;
  wire audio_in_Push_mioi_bdwt;
  wire audio_in_Push_mioi_bcwt;
  wire audio_in_Push_mioi_ivld_run_sct;
  wire audio_in_Push_mioi_bawt_reg;
  wire audio_in_Push_mioi_bawt_iff;
  wire audio_in_Push_mioi_biwt_iff;
  wire audio_in_Push_mioi_bcwt_iff;
  wire audio_in_Push_mioi_wen_comp_reg;
  wire audio_in_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd14),
  .width(32'sd16),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) audio_in_Push_mioi (
      .vld(audio_in_val),
      .rdy(audio_in_rdy),
      .dat(audio_in_msg),
      .idat(audio_in_Push_mioi_idat),
      .irdy(audio_in_Push_mioi_irdy),
      .ivld(audio_in_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_ctrl InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .audio_in_Push_mioi_oswt_unreg(audio_in_Push_mioi_oswt_unreg),
      .audio_in_Push_mioi_iswt0(audio_in_Push_mioi_iswt0),
      .audio_in_Push_mioi_irdy_oreg(audio_in_Push_mioi_irdy_oreg),
      .audio_in_Push_mioi_biwt(audio_in_Push_mioi_biwt),
      .audio_in_Push_mioi_bdwt(audio_in_Push_mioi_bdwt),
      .audio_in_Push_mioi_bcwt(audio_in_Push_mioi_bcwt),
      .audio_in_Push_mioi_ivld_run_sct(audio_in_Push_mioi_ivld_run_sct),
      .audio_in_Push_mioi_biwt_pff(audio_in_Push_mioi_biwt_iff),
      .audio_in_Push_mioi_iswt0_pff(audio_in_Push_mioi_iswt0_pff),
      .audio_in_Push_mioi_bcwt_pff(audio_in_Push_mioi_bcwt_iff),
      .audio_in_Push_mioi_irdy_oreg_pff(audio_in_Push_mioi_irdy_oreg_pff)
    );
  InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_dp InputBuffer_run_audio_in_Push_mioi_audio_in_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .audio_in_Push_mioi_oswt_unreg(audio_in_Push_mioi_oswt_unreg),
      .audio_in_Push_mioi_bawt(audio_in_Push_mioi_bawt_reg),
      .audio_in_Push_mioi_wen_comp(audio_in_Push_mioi_wen_comp_reg),
      .audio_in_Push_mioi_biwt(audio_in_Push_mioi_biwt),
      .audio_in_Push_mioi_bdwt(audio_in_Push_mioi_bdwt),
      .audio_in_Push_mioi_bcwt(audio_in_Push_mioi_bcwt),
      .audio_in_Push_mioi_bawt_pff(audio_in_Push_mioi_bawt_iff),
      .audio_in_Push_mioi_biwt_pff(audio_in_Push_mioi_biwt_iff),
      .audio_in_Push_mioi_bcwt_pff(audio_in_Push_mioi_bcwt_iff),
      .audio_in_Push_mioi_wen_comp_pff(audio_in_Push_mioi_wen_comp_iff),
      .audio_in_Push_mioi_oswt_unreg_pff(audio_in_Push_mioi_oswt_unreg_pff)
    );
  assign audio_in_Push_mioi_bawt = audio_in_Push_mioi_bawt_reg;
  assign audio_in_Push_mioi_bawt_pff = audio_in_Push_mioi_bawt_iff;
  assign audio_in_Push_mioi_wen_comp = audio_in_Push_mioi_wen_comp_reg;
  assign audio_in_Push_mioi_wen_comp_pff = audio_in_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi (
  clk, rst, dma_read_chnl_val, dma_read_chnl_rdy, dma_read_chnl_msg, run_wen, run_wten,
      dma_read_chnl_Pop_mioi_oswt_unreg, dma_read_chnl_Pop_mioi_bawt, dma_read_chnl_Pop_mioi_iswt0,
      dma_read_chnl_Pop_mioi_wen_comp, dma_read_chnl_Pop_mioi_idat_mxwt, dma_read_chnl_Pop_mioi_ivld,
      dma_read_chnl_Pop_mioi_ivld_oreg, dma_read_chnl_Pop_mioi_bawt_pff, run_wten_pff,
      dma_read_chnl_Pop_mioi_iswt0_pff, dma_read_chnl_Pop_mioi_ivld_oreg_pff, dma_read_chnl_Pop_mioi_wen_comp_pff,
      dma_read_chnl_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  input run_wen;
  input run_wten;
  input dma_read_chnl_Pop_mioi_oswt_unreg;
  output dma_read_chnl_Pop_mioi_bawt;
  input dma_read_chnl_Pop_mioi_iswt0;
  output dma_read_chnl_Pop_mioi_wen_comp;
  output [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;
  output dma_read_chnl_Pop_mioi_ivld;
  input dma_read_chnl_Pop_mioi_ivld_oreg;
  output dma_read_chnl_Pop_mioi_bawt_pff;
  input run_wten_pff;
  input dma_read_chnl_Pop_mioi_iswt0_pff;
  input dma_read_chnl_Pop_mioi_ivld_oreg_pff;
  output dma_read_chnl_Pop_mioi_wen_comp_pff;
  input dma_read_chnl_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire dma_read_chnl_Pop_mioi_biwt;
  wire dma_read_chnl_Pop_mioi_bdwt;
  wire [63:0] dma_read_chnl_Pop_mioi_idat;
  wire dma_read_chnl_Pop_mioi_irdy_run_sct;
  wire dma_read_chnl_Pop_mioi_bawt_reg;
  wire dma_read_chnl_Pop_mioi_bawt_iff;
  wire dma_read_chnl_Pop_mioi_biwt_iff;
  wire dma_read_chnl_Pop_mioi_wen_comp_reg;
  wire dma_read_chnl_Pop_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd13),
  .width(32'sd64),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_read_chnl_Pop_mioi (
      .vld(dma_read_chnl_val),
      .rdy(dma_read_chnl_rdy),
      .dat(dma_read_chnl_msg),
      .idat(dma_read_chnl_Pop_mioi_idat),
      .irdy(dma_read_chnl_Pop_mioi_irdy_run_sct),
      .ivld(dma_read_chnl_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_read_chnl_Pop_mioi_oswt_unreg(dma_read_chnl_Pop_mioi_oswt_unreg),
      .dma_read_chnl_Pop_mioi_iswt0(dma_read_chnl_Pop_mioi_iswt0),
      .dma_read_chnl_Pop_mioi_ivld_oreg(dma_read_chnl_Pop_mioi_ivld_oreg),
      .dma_read_chnl_Pop_mioi_biwt(dma_read_chnl_Pop_mioi_biwt),
      .dma_read_chnl_Pop_mioi_bdwt(dma_read_chnl_Pop_mioi_bdwt),
      .dma_read_chnl_Pop_mioi_irdy_run_sct(dma_read_chnl_Pop_mioi_irdy_run_sct),
      .dma_read_chnl_Pop_mioi_biwt_pff(dma_read_chnl_Pop_mioi_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .dma_read_chnl_Pop_mioi_iswt0_pff(dma_read_chnl_Pop_mioi_iswt0_pff),
      .dma_read_chnl_Pop_mioi_ivld_oreg_pff(dma_read_chnl_Pop_mioi_ivld_oreg_pff)
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_dp InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_chnl_Pop_mioi_oswt_unreg(dma_read_chnl_Pop_mioi_oswt_unreg),
      .dma_read_chnl_Pop_mioi_bawt(dma_read_chnl_Pop_mioi_bawt_reg),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp_reg),
      .dma_read_chnl_Pop_mioi_idat_mxwt(dma_read_chnl_Pop_mioi_idat_mxwt),
      .dma_read_chnl_Pop_mioi_biwt(dma_read_chnl_Pop_mioi_biwt),
      .dma_read_chnl_Pop_mioi_bdwt(dma_read_chnl_Pop_mioi_bdwt),
      .dma_read_chnl_Pop_mioi_idat(dma_read_chnl_Pop_mioi_idat),
      .dma_read_chnl_Pop_mioi_bawt_pff(dma_read_chnl_Pop_mioi_bawt_iff),
      .dma_read_chnl_Pop_mioi_biwt_pff(dma_read_chnl_Pop_mioi_biwt_iff),
      .dma_read_chnl_Pop_mioi_wen_comp_pff(dma_read_chnl_Pop_mioi_wen_comp_iff),
      .dma_read_chnl_Pop_mioi_oswt_unreg_pff(dma_read_chnl_Pop_mioi_oswt_unreg_pff)
    );
  assign dma_read_chnl_Pop_mioi_bawt = dma_read_chnl_Pop_mioi_bawt_reg;
  assign dma_read_chnl_Pop_mioi_bawt_pff = dma_read_chnl_Pop_mioi_bawt_iff;
  assign dma_read_chnl_Pop_mioi_wen_comp = dma_read_chnl_Pop_mioi_wen_comp_reg;
  assign dma_read_chnl_Pop_mioi_wen_comp_pff = dma_read_chnl_Pop_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi (
  clk, rst, dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, run_wen, dma_read_ctrl_Push_mioi_oswt_unreg,
      dma_read_ctrl_Push_mioi_bawt, dma_read_ctrl_Push_mioi_iswt0, dma_read_ctrl_Push_mioi_wen_comp,
      dma_read_ctrl_Push_mioi_idat, dma_read_ctrl_Push_mioi_irdy, dma_read_ctrl_Push_mioi_irdy_oreg,
      dma_read_ctrl_Push_mioi_bawt_pff, dma_read_ctrl_Push_mioi_iswt0_pff, dma_read_ctrl_Push_mioi_irdy_oreg_pff,
      dma_read_ctrl_Push_mioi_wen_comp_pff, dma_read_ctrl_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input run_wen;
  input dma_read_ctrl_Push_mioi_oswt_unreg;
  output dma_read_ctrl_Push_mioi_bawt;
  input dma_read_ctrl_Push_mioi_iswt0;
  output dma_read_ctrl_Push_mioi_wen_comp;
  input [66:0] dma_read_ctrl_Push_mioi_idat;
  output dma_read_ctrl_Push_mioi_irdy;
  input dma_read_ctrl_Push_mioi_irdy_oreg;
  output dma_read_ctrl_Push_mioi_bawt_pff;
  input dma_read_ctrl_Push_mioi_iswt0_pff;
  input dma_read_ctrl_Push_mioi_irdy_oreg_pff;
  output dma_read_ctrl_Push_mioi_wen_comp_pff;
  input dma_read_ctrl_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire dma_read_ctrl_Push_mioi_biwt;
  wire dma_read_ctrl_Push_mioi_bdwt;
  wire dma_read_ctrl_Push_mioi_bcwt;
  wire dma_read_ctrl_Push_mioi_ivld_run_sct;
  wire dma_read_ctrl_Push_mioi_bawt_reg;
  wire dma_read_ctrl_Push_mioi_bawt_iff;
  wire dma_read_ctrl_Push_mioi_biwt_iff;
  wire dma_read_ctrl_Push_mioi_bcwt_iff;
  wire dma_read_ctrl_Push_mioi_wen_comp_reg;
  wire dma_read_ctrl_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_dma_read_ctrl_Push_mioi_idat;
  assign nl_dma_read_ctrl_Push_mioi_idat = {3'b011 , (dma_read_ctrl_Push_mioi_idat[63:0])};
  ccs_out_buf_wait_v5 #(.rscid(32'sd12),
  .width(32'sd67),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_read_ctrl_Push_mioi (
      .vld(dma_read_ctrl_val),
      .rdy(dma_read_ctrl_rdy),
      .dat(dma_read_ctrl_msg),
      .idat(nl_dma_read_ctrl_Push_mioi_idat[66:0]),
      .irdy(dma_read_ctrl_Push_mioi_irdy),
      .ivld(dma_read_ctrl_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dma_read_ctrl_Push_mioi_oswt_unreg(dma_read_ctrl_Push_mioi_oswt_unreg),
      .dma_read_ctrl_Push_mioi_iswt0(dma_read_ctrl_Push_mioi_iswt0),
      .dma_read_ctrl_Push_mioi_irdy_oreg(dma_read_ctrl_Push_mioi_irdy_oreg),
      .dma_read_ctrl_Push_mioi_biwt(dma_read_ctrl_Push_mioi_biwt),
      .dma_read_ctrl_Push_mioi_bdwt(dma_read_ctrl_Push_mioi_bdwt),
      .dma_read_ctrl_Push_mioi_bcwt(dma_read_ctrl_Push_mioi_bcwt),
      .dma_read_ctrl_Push_mioi_ivld_run_sct(dma_read_ctrl_Push_mioi_ivld_run_sct),
      .dma_read_ctrl_Push_mioi_biwt_pff(dma_read_ctrl_Push_mioi_biwt_iff),
      .dma_read_ctrl_Push_mioi_iswt0_pff(dma_read_ctrl_Push_mioi_iswt0_pff),
      .dma_read_ctrl_Push_mioi_bcwt_pff(dma_read_ctrl_Push_mioi_bcwt_iff),
      .dma_read_ctrl_Push_mioi_irdy_oreg_pff(dma_read_ctrl_Push_mioi_irdy_oreg_pff)
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_dp InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_ctrl_Push_mioi_oswt_unreg(dma_read_ctrl_Push_mioi_oswt_unreg),
      .dma_read_ctrl_Push_mioi_bawt(dma_read_ctrl_Push_mioi_bawt_reg),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp_reg),
      .dma_read_ctrl_Push_mioi_biwt(dma_read_ctrl_Push_mioi_biwt),
      .dma_read_ctrl_Push_mioi_bdwt(dma_read_ctrl_Push_mioi_bdwt),
      .dma_read_ctrl_Push_mioi_bcwt(dma_read_ctrl_Push_mioi_bcwt),
      .dma_read_ctrl_Push_mioi_bawt_pff(dma_read_ctrl_Push_mioi_bawt_iff),
      .dma_read_ctrl_Push_mioi_biwt_pff(dma_read_ctrl_Push_mioi_biwt_iff),
      .dma_read_ctrl_Push_mioi_bcwt_pff(dma_read_ctrl_Push_mioi_bcwt_iff),
      .dma_read_ctrl_Push_mioi_wen_comp_pff(dma_read_ctrl_Push_mioi_wen_comp_iff),
      .dma_read_ctrl_Push_mioi_oswt_unreg_pff(dma_read_ctrl_Push_mioi_oswt_unreg_pff)
    );
  assign dma_read_ctrl_Push_mioi_bawt = dma_read_ctrl_Push_mioi_bawt_reg;
  assign dma_read_ctrl_Push_mioi_bawt_pff = dma_read_ctrl_Push_mioi_bawt_iff;
  assign dma_read_ctrl_Push_mioi_wen_comp = dma_read_ctrl_Push_mioi_wen_comp_reg;
  assign dma_read_ctrl_Push_mioi_wen_comp_pff = dma_read_ctrl_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi (
  clk, rst, sync1_val, sync1_rdy, sync1_msg, run_wen, run_wten, sync1_Pop_mioi_oswt_unreg,
      sync1_Pop_mioi_bawt, sync1_Pop_mioi_iswt0, sync1_Pop_mioi_wen_comp, sync1_Pop_mioi_ivld,
      sync1_Pop_mioi_ivld_oreg, sync1_Pop_mioi_wen_comp_pff, sync1_Pop_mioi_oswt_unreg_pff,
      sync1_Pop_mioi_bawt_pff, run_wten_pff, sync1_Pop_mioi_iswt0_pff, sync1_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  input run_wen;
  input run_wten;
  input sync1_Pop_mioi_oswt_unreg;
  output sync1_Pop_mioi_bawt;
  input sync1_Pop_mioi_iswt0;
  output sync1_Pop_mioi_wen_comp;
  output sync1_Pop_mioi_ivld;
  input sync1_Pop_mioi_ivld_oreg;
  output sync1_Pop_mioi_wen_comp_pff;
  input sync1_Pop_mioi_oswt_unreg_pff;
  output sync1_Pop_mioi_bawt_pff;
  input run_wten_pff;
  input sync1_Pop_mioi_iswt0_pff;
  input sync1_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire sync1_Pop_mioi_biwt;
  wire sync1_Pop_mioi_bdwt;
  wire sync1_Pop_mioi_idat;
  wire sync1_Pop_mioi_irdy_run_sct;
  wire sync1_Pop_mioi_wen_comp_reg;
  wire sync1_Pop_mioi_wen_comp_iff;
  wire sync1_Pop_mioi_bawt_reg;
  wire sync1_Pop_mioi_bawt_iff;
  wire sync1_Pop_mioi_biwt_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd11),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync1_Pop_mioi (
      .vld(sync1_val),
      .rdy(sync1_rdy),
      .dat(sync1_msg),
      .idat(sync1_Pop_mioi_idat),
      .irdy(sync1_Pop_mioi_irdy_run_sct),
      .ivld(sync1_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync1_Pop_mioi_oswt_unreg(sync1_Pop_mioi_oswt_unreg),
      .sync1_Pop_mioi_iswt0(sync1_Pop_mioi_iswt0),
      .sync1_Pop_mioi_ivld_oreg(sync1_Pop_mioi_ivld_oreg),
      .sync1_Pop_mioi_biwt(sync1_Pop_mioi_biwt),
      .sync1_Pop_mioi_bdwt(sync1_Pop_mioi_bdwt),
      .sync1_Pop_mioi_irdy_run_sct(sync1_Pop_mioi_irdy_run_sct),
      .sync1_Pop_mioi_biwt_pff(sync1_Pop_mioi_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .sync1_Pop_mioi_iswt0_pff(sync1_Pop_mioi_iswt0_pff),
      .sync1_Pop_mioi_ivld_oreg_pff(sync1_Pop_mioi_ivld_oreg_pff)
    );
  InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_dp InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync1_Pop_mioi_oswt_unreg(sync1_Pop_mioi_oswt_unreg),
      .sync1_Pop_mioi_bawt(sync1_Pop_mioi_bawt_reg),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp_reg),
      .sync1_Pop_mioi_biwt(sync1_Pop_mioi_biwt),
      .sync1_Pop_mioi_bdwt(sync1_Pop_mioi_bdwt),
      .sync1_Pop_mioi_wen_comp_pff(sync1_Pop_mioi_wen_comp_iff),
      .sync1_Pop_mioi_oswt_unreg_pff(sync1_Pop_mioi_oswt_unreg_pff),
      .sync1_Pop_mioi_bawt_pff(sync1_Pop_mioi_bawt_iff),
      .sync1_Pop_mioi_biwt_pff(sync1_Pop_mioi_biwt_iff)
    );
  assign sync1_Pop_mioi_wen_comp = sync1_Pop_mioi_wen_comp_reg;
  assign sync1_Pop_mioi_wen_comp_pff = sync1_Pop_mioi_wen_comp_iff;
  assign sync1_Pop_mioi_bawt = sync1_Pop_mioi_bawt_reg;
  assign sync1_Pop_mioi_bawt_pff = sync1_Pop_mioi_bawt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_out_Push_mioi
// ------------------------------------------------------------------


module Encoder_run_audio_out_Push_mioi (
  clk, rst, audio_out_val, audio_out_rdy, audio_out_msg, run_wen, audio_out_Push_mioi_oswt_unreg,
      audio_out_Push_mioi_bawt, audio_out_Push_mioi_iswt0, audio_out_Push_mioi_wen_comp,
      audio_out_Push_mioi_idat, audio_out_Push_mioi_irdy, audio_out_Push_mioi_irdy_oreg,
      audio_out_Push_mioi_bawt_pff, audio_out_Push_mioi_iswt0_pff, audio_out_Push_mioi_irdy_oreg_pff,
      audio_out_Push_mioi_wen_comp_pff, audio_out_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output audio_out_val;
  input audio_out_rdy;
  output [511:0] audio_out_msg;
  input run_wen;
  input audio_out_Push_mioi_oswt_unreg;
  output audio_out_Push_mioi_bawt;
  input audio_out_Push_mioi_iswt0;
  output audio_out_Push_mioi_wen_comp;
  input [511:0] audio_out_Push_mioi_idat;
  output audio_out_Push_mioi_irdy;
  input audio_out_Push_mioi_irdy_oreg;
  output audio_out_Push_mioi_bawt_pff;
  input audio_out_Push_mioi_iswt0_pff;
  input audio_out_Push_mioi_irdy_oreg_pff;
  output audio_out_Push_mioi_wen_comp_pff;
  input audio_out_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire audio_out_Push_mioi_biwt;
  wire audio_out_Push_mioi_bdwt;
  wire audio_out_Push_mioi_bcwt;
  wire audio_out_Push_mioi_ivld_run_sct;
  wire audio_out_Push_mioi_bawt_reg;
  wire audio_out_Push_mioi_bawt_iff;
  wire audio_out_Push_mioi_biwt_iff;
  wire audio_out_Push_mioi_bcwt_iff;
  wire audio_out_Push_mioi_wen_comp_reg;
  wire audio_out_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd21),
  .width(32'sd512),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) audio_out_Push_mioi (
      .vld(audio_out_val),
      .rdy(audio_out_rdy),
      .dat(audio_out_msg),
      .idat(audio_out_Push_mioi_idat),
      .irdy(audio_out_Push_mioi_irdy),
      .ivld(audio_out_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_ctrl Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .audio_out_Push_mioi_oswt_unreg(audio_out_Push_mioi_oswt_unreg),
      .audio_out_Push_mioi_iswt0(audio_out_Push_mioi_iswt0),
      .audio_out_Push_mioi_irdy_oreg(audio_out_Push_mioi_irdy_oreg),
      .audio_out_Push_mioi_biwt(audio_out_Push_mioi_biwt),
      .audio_out_Push_mioi_bdwt(audio_out_Push_mioi_bdwt),
      .audio_out_Push_mioi_bcwt(audio_out_Push_mioi_bcwt),
      .audio_out_Push_mioi_ivld_run_sct(audio_out_Push_mioi_ivld_run_sct),
      .audio_out_Push_mioi_biwt_pff(audio_out_Push_mioi_biwt_iff),
      .audio_out_Push_mioi_iswt0_pff(audio_out_Push_mioi_iswt0_pff),
      .audio_out_Push_mioi_bcwt_pff(audio_out_Push_mioi_bcwt_iff),
      .audio_out_Push_mioi_irdy_oreg_pff(audio_out_Push_mioi_irdy_oreg_pff)
    );
  Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_dp Encoder_run_audio_out_Push_mioi_audio_out_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .audio_out_Push_mioi_oswt_unreg(audio_out_Push_mioi_oswt_unreg),
      .audio_out_Push_mioi_bawt(audio_out_Push_mioi_bawt_reg),
      .audio_out_Push_mioi_wen_comp(audio_out_Push_mioi_wen_comp_reg),
      .audio_out_Push_mioi_biwt(audio_out_Push_mioi_biwt),
      .audio_out_Push_mioi_bdwt(audio_out_Push_mioi_bdwt),
      .audio_out_Push_mioi_bcwt(audio_out_Push_mioi_bcwt),
      .audio_out_Push_mioi_bawt_pff(audio_out_Push_mioi_bawt_iff),
      .audio_out_Push_mioi_biwt_pff(audio_out_Push_mioi_biwt_iff),
      .audio_out_Push_mioi_bcwt_pff(audio_out_Push_mioi_bcwt_iff),
      .audio_out_Push_mioi_wen_comp_pff(audio_out_Push_mioi_wen_comp_iff),
      .audio_out_Push_mioi_oswt_unreg_pff(audio_out_Push_mioi_oswt_unreg_pff)
    );
  assign audio_out_Push_mioi_bawt = audio_out_Push_mioi_bawt_reg;
  assign audio_out_Push_mioi_bawt_pff = audio_out_Push_mioi_bawt_iff;
  assign audio_out_Push_mioi_wen_comp = audio_out_Push_mioi_wen_comp_reg;
  assign audio_out_Push_mioi_wen_comp_pff = audio_out_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run_audio_in_Pop_mioi
// ------------------------------------------------------------------


module Encoder_run_audio_in_Pop_mioi (
  clk, rst, audio_in_val, audio_in_rdy, audio_in_msg, run_wen, run_wten, audio_in_Pop_mioi_oswt_unreg,
      audio_in_Pop_mioi_bawt, audio_in_Pop_mioi_iswt0, audio_in_Pop_mioi_wen_comp,
      audio_in_Pop_mioi_idat_mxwt, audio_in_Pop_mioi_ivld, audio_in_Pop_mioi_ivld_oreg,
      audio_in_Pop_mioi_wen_comp_pff, audio_in_Pop_mioi_oswt_unreg_pff, audio_in_Pop_mioi_bawt_pff,
      run_wten_pff, audio_in_Pop_mioi_iswt0_pff, audio_in_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input audio_in_val;
  output audio_in_rdy;
  input [15:0] audio_in_msg;
  input run_wen;
  input run_wten;
  input audio_in_Pop_mioi_oswt_unreg;
  output audio_in_Pop_mioi_bawt;
  input audio_in_Pop_mioi_iswt0;
  output audio_in_Pop_mioi_wen_comp;
  output [15:0] audio_in_Pop_mioi_idat_mxwt;
  output audio_in_Pop_mioi_ivld;
  input audio_in_Pop_mioi_ivld_oreg;
  output audio_in_Pop_mioi_wen_comp_pff;
  input audio_in_Pop_mioi_oswt_unreg_pff;
  output audio_in_Pop_mioi_bawt_pff;
  input run_wten_pff;
  input audio_in_Pop_mioi_iswt0_pff;
  input audio_in_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire audio_in_Pop_mioi_biwt;
  wire audio_in_Pop_mioi_bdwt;
  wire [15:0] audio_in_Pop_mioi_idat;
  wire audio_in_Pop_mioi_irdy_run_sct;
  wire audio_in_Pop_mioi_wen_comp_reg;
  wire audio_in_Pop_mioi_wen_comp_iff;
  wire audio_in_Pop_mioi_bawt_reg;
  wire audio_in_Pop_mioi_bawt_iff;
  wire audio_in_Pop_mioi_biwt_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd20),
  .width(32'sd16),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) audio_in_Pop_mioi (
      .vld(audio_in_val),
      .rdy(audio_in_rdy),
      .dat(audio_in_msg),
      .idat(audio_in_Pop_mioi_idat),
      .irdy(audio_in_Pop_mioi_irdy_run_sct),
      .ivld(audio_in_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_ctrl Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .audio_in_Pop_mioi_oswt_unreg(audio_in_Pop_mioi_oswt_unreg),
      .audio_in_Pop_mioi_iswt0(audio_in_Pop_mioi_iswt0),
      .audio_in_Pop_mioi_ivld_oreg(audio_in_Pop_mioi_ivld_oreg),
      .audio_in_Pop_mioi_biwt(audio_in_Pop_mioi_biwt),
      .audio_in_Pop_mioi_bdwt(audio_in_Pop_mioi_bdwt),
      .audio_in_Pop_mioi_irdy_run_sct(audio_in_Pop_mioi_irdy_run_sct),
      .audio_in_Pop_mioi_biwt_pff(audio_in_Pop_mioi_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .audio_in_Pop_mioi_iswt0_pff(audio_in_Pop_mioi_iswt0_pff),
      .audio_in_Pop_mioi_ivld_oreg_pff(audio_in_Pop_mioi_ivld_oreg_pff)
    );
  Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_dp Encoder_run_audio_in_Pop_mioi_audio_in_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .audio_in_Pop_mioi_oswt_unreg(audio_in_Pop_mioi_oswt_unreg),
      .audio_in_Pop_mioi_bawt(audio_in_Pop_mioi_bawt_reg),
      .audio_in_Pop_mioi_wen_comp(audio_in_Pop_mioi_wen_comp_reg),
      .audio_in_Pop_mioi_idat_mxwt(audio_in_Pop_mioi_idat_mxwt),
      .audio_in_Pop_mioi_biwt(audio_in_Pop_mioi_biwt),
      .audio_in_Pop_mioi_bdwt(audio_in_Pop_mioi_bdwt),
      .audio_in_Pop_mioi_idat(audio_in_Pop_mioi_idat),
      .audio_in_Pop_mioi_wen_comp_pff(audio_in_Pop_mioi_wen_comp_iff),
      .audio_in_Pop_mioi_oswt_unreg_pff(audio_in_Pop_mioi_oswt_unreg_pff),
      .audio_in_Pop_mioi_bawt_pff(audio_in_Pop_mioi_bawt_iff),
      .audio_in_Pop_mioi_biwt_pff(audio_in_Pop_mioi_biwt_iff)
    );
  assign audio_in_Pop_mioi_wen_comp = audio_in_Pop_mioi_wen_comp_reg;
  assign audio_in_Pop_mioi_wen_comp_pff = audio_in_Pop_mioi_wen_comp_iff;
  assign audio_in_Pop_mioi_bawt = audio_in_Pop_mioi_bawt_reg;
  assign audio_in_Pop_mioi_bawt_pff = audio_in_Pop_mioi_bawt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi (
  clk, rst, sync3_val, sync3_rdy, sync3_msg, run_wen, sync3_Push_mioi_oswt_unreg,
      sync3_Push_mioi_bawt, sync3_Push_mioi_iswt0, sync3_Push_mioi_wen_comp, sync3_Push_mioi_irdy,
      sync3_Push_mioi_irdy_oreg, sync3_Push_mioi_bawt_pff, sync3_Push_mioi_iswt0_pff,
      sync3_Push_mioi_irdy_oreg_pff, sync3_Push_mioi_wen_comp_pff, sync3_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  input run_wen;
  input sync3_Push_mioi_oswt_unreg;
  output sync3_Push_mioi_bawt;
  input sync3_Push_mioi_iswt0;
  output sync3_Push_mioi_wen_comp;
  output sync3_Push_mioi_irdy;
  input sync3_Push_mioi_irdy_oreg;
  output sync3_Push_mioi_bawt_pff;
  input sync3_Push_mioi_iswt0_pff;
  input sync3_Push_mioi_irdy_oreg_pff;
  output sync3_Push_mioi_wen_comp_pff;
  input sync3_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire sync3_Push_mioi_biwt;
  wire sync3_Push_mioi_bdwt;
  wire sync3_Push_mioi_bcwt;
  wire sync3_Push_mioi_ivld_run_sct;
  wire sync3_Push_mioi_bawt_reg;
  wire sync3_Push_mioi_bawt_iff;
  wire sync3_Push_mioi_biwt_iff;
  wire sync3_Push_mioi_bcwt_iff;
  wire sync3_Push_mioi_wen_comp_reg;
  wire sync3_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd31),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync3_Push_mioi (
      .vld(sync3_val),
      .rdy(sync3_rdy),
      .dat(sync3_msg),
      .idat(1'b1),
      .irdy(sync3_Push_mioi_irdy),
      .ivld(sync3_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .sync3_Push_mioi_oswt_unreg(sync3_Push_mioi_oswt_unreg),
      .sync3_Push_mioi_iswt0(sync3_Push_mioi_iswt0),
      .sync3_Push_mioi_irdy_oreg(sync3_Push_mioi_irdy_oreg),
      .sync3_Push_mioi_biwt(sync3_Push_mioi_biwt),
      .sync3_Push_mioi_bdwt(sync3_Push_mioi_bdwt),
      .sync3_Push_mioi_bcwt(sync3_Push_mioi_bcwt),
      .sync3_Push_mioi_ivld_run_sct(sync3_Push_mioi_ivld_run_sct),
      .sync3_Push_mioi_biwt_pff(sync3_Push_mioi_biwt_iff),
      .sync3_Push_mioi_iswt0_pff(sync3_Push_mioi_iswt0_pff),
      .sync3_Push_mioi_bcwt_pff(sync3_Push_mioi_bcwt_iff),
      .sync3_Push_mioi_irdy_oreg_pff(sync3_Push_mioi_irdy_oreg_pff)
    );
  OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_dp OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync3_Push_mioi_oswt_unreg(sync3_Push_mioi_oswt_unreg),
      .sync3_Push_mioi_bawt(sync3_Push_mioi_bawt_reg),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp_reg),
      .sync3_Push_mioi_biwt(sync3_Push_mioi_biwt),
      .sync3_Push_mioi_bdwt(sync3_Push_mioi_bdwt),
      .sync3_Push_mioi_bcwt(sync3_Push_mioi_bcwt),
      .sync3_Push_mioi_bawt_pff(sync3_Push_mioi_bawt_iff),
      .sync3_Push_mioi_biwt_pff(sync3_Push_mioi_biwt_iff),
      .sync3_Push_mioi_bcwt_pff(sync3_Push_mioi_bcwt_iff),
      .sync3_Push_mioi_wen_comp_pff(sync3_Push_mioi_wen_comp_iff),
      .sync3_Push_mioi_oswt_unreg_pff(sync3_Push_mioi_oswt_unreg_pff)
    );
  assign sync3_Push_mioi_bawt = sync3_Push_mioi_bawt_reg;
  assign sync3_Push_mioi_bawt_pff = sync3_Push_mioi_bawt_iff;
  assign sync3_Push_mioi_wen_comp = sync3_Push_mioi_wen_comp_reg;
  assign sync3_Push_mioi_wen_comp_pff = sync3_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi (
  clk, rst, dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, run_wen,
      dma_write_chnl_Push_mioi_oswt_unreg, dma_write_chnl_Push_mioi_bawt, dma_write_chnl_Push_mioi_iswt0,
      dma_write_chnl_Push_mioi_wen_comp, dma_write_chnl_Push_mioi_idat, dma_write_chnl_Push_mioi_irdy,
      dma_write_chnl_Push_mioi_irdy_oreg, dma_write_chnl_Push_mioi_bawt_pff, dma_write_chnl_Push_mioi_iswt0_pff,
      dma_write_chnl_Push_mioi_irdy_oreg_pff, dma_write_chnl_Push_mioi_wen_comp_pff,
      dma_write_chnl_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input run_wen;
  input dma_write_chnl_Push_mioi_oswt_unreg;
  output dma_write_chnl_Push_mioi_bawt;
  input dma_write_chnl_Push_mioi_iswt0;
  output dma_write_chnl_Push_mioi_wen_comp;
  input [63:0] dma_write_chnl_Push_mioi_idat;
  output dma_write_chnl_Push_mioi_irdy;
  input dma_write_chnl_Push_mioi_irdy_oreg;
  output dma_write_chnl_Push_mioi_bawt_pff;
  input dma_write_chnl_Push_mioi_iswt0_pff;
  input dma_write_chnl_Push_mioi_irdy_oreg_pff;
  output dma_write_chnl_Push_mioi_wen_comp_pff;
  input dma_write_chnl_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire dma_write_chnl_Push_mioi_biwt;
  wire dma_write_chnl_Push_mioi_bdwt;
  wire dma_write_chnl_Push_mioi_bcwt;
  wire dma_write_chnl_Push_mioi_ivld_run_sct;
  wire dma_write_chnl_Push_mioi_bawt_reg;
  wire dma_write_chnl_Push_mioi_bawt_iff;
  wire dma_write_chnl_Push_mioi_biwt_iff;
  wire dma_write_chnl_Push_mioi_bcwt_iff;
  wire dma_write_chnl_Push_mioi_wen_comp_reg;
  wire dma_write_chnl_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd30),
  .width(32'sd64),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_write_chnl_Push_mioi (
      .vld(dma_write_chnl_val),
      .rdy(dma_write_chnl_rdy),
      .dat(dma_write_chnl_msg),
      .idat(dma_write_chnl_Push_mioi_idat),
      .irdy(dma_write_chnl_Push_mioi_irdy),
      .ivld(dma_write_chnl_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dma_write_chnl_Push_mioi_oswt_unreg(dma_write_chnl_Push_mioi_oswt_unreg),
      .dma_write_chnl_Push_mioi_iswt0(dma_write_chnl_Push_mioi_iswt0),
      .dma_write_chnl_Push_mioi_irdy_oreg(dma_write_chnl_Push_mioi_irdy_oreg),
      .dma_write_chnl_Push_mioi_biwt(dma_write_chnl_Push_mioi_biwt),
      .dma_write_chnl_Push_mioi_bdwt(dma_write_chnl_Push_mioi_bdwt),
      .dma_write_chnl_Push_mioi_bcwt(dma_write_chnl_Push_mioi_bcwt),
      .dma_write_chnl_Push_mioi_ivld_run_sct(dma_write_chnl_Push_mioi_ivld_run_sct),
      .dma_write_chnl_Push_mioi_biwt_pff(dma_write_chnl_Push_mioi_biwt_iff),
      .dma_write_chnl_Push_mioi_iswt0_pff(dma_write_chnl_Push_mioi_iswt0_pff),
      .dma_write_chnl_Push_mioi_bcwt_pff(dma_write_chnl_Push_mioi_bcwt_iff),
      .dma_write_chnl_Push_mioi_irdy_oreg_pff(dma_write_chnl_Push_mioi_irdy_oreg_pff)
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_dp OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_chnl_Push_mioi_oswt_unreg(dma_write_chnl_Push_mioi_oswt_unreg),
      .dma_write_chnl_Push_mioi_bawt(dma_write_chnl_Push_mioi_bawt_reg),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp_reg),
      .dma_write_chnl_Push_mioi_biwt(dma_write_chnl_Push_mioi_biwt),
      .dma_write_chnl_Push_mioi_bdwt(dma_write_chnl_Push_mioi_bdwt),
      .dma_write_chnl_Push_mioi_bcwt(dma_write_chnl_Push_mioi_bcwt),
      .dma_write_chnl_Push_mioi_bawt_pff(dma_write_chnl_Push_mioi_bawt_iff),
      .dma_write_chnl_Push_mioi_biwt_pff(dma_write_chnl_Push_mioi_biwt_iff),
      .dma_write_chnl_Push_mioi_bcwt_pff(dma_write_chnl_Push_mioi_bcwt_iff),
      .dma_write_chnl_Push_mioi_wen_comp_pff(dma_write_chnl_Push_mioi_wen_comp_iff),
      .dma_write_chnl_Push_mioi_oswt_unreg_pff(dma_write_chnl_Push_mioi_oswt_unreg_pff)
    );
  assign dma_write_chnl_Push_mioi_bawt = dma_write_chnl_Push_mioi_bawt_reg;
  assign dma_write_chnl_Push_mioi_bawt_pff = dma_write_chnl_Push_mioi_bawt_iff;
  assign dma_write_chnl_Push_mioi_wen_comp = dma_write_chnl_Push_mioi_wen_comp_reg;
  assign dma_write_chnl_Push_mioi_wen_comp_pff = dma_write_chnl_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi (
  clk, rst, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg, run_wen,
      dma_write_ctrl_Push_mioi_oswt_unreg, dma_write_ctrl_Push_mioi_bawt, dma_write_ctrl_Push_mioi_iswt0,
      dma_write_ctrl_Push_mioi_wen_comp, dma_write_ctrl_Push_mioi_idat, dma_write_ctrl_Push_mioi_irdy,
      dma_write_ctrl_Push_mioi_irdy_oreg, dma_write_ctrl_Push_mioi_bawt_pff, dma_write_ctrl_Push_mioi_iswt0_pff,
      dma_write_ctrl_Push_mioi_irdy_oreg_pff, dma_write_ctrl_Push_mioi_wen_comp_pff,
      dma_write_ctrl_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  input run_wen;
  input dma_write_ctrl_Push_mioi_oswt_unreg;
  output dma_write_ctrl_Push_mioi_bawt;
  input dma_write_ctrl_Push_mioi_iswt0;
  output dma_write_ctrl_Push_mioi_wen_comp;
  input [66:0] dma_write_ctrl_Push_mioi_idat;
  output dma_write_ctrl_Push_mioi_irdy;
  input dma_write_ctrl_Push_mioi_irdy_oreg;
  output dma_write_ctrl_Push_mioi_bawt_pff;
  input dma_write_ctrl_Push_mioi_iswt0_pff;
  input dma_write_ctrl_Push_mioi_irdy_oreg_pff;
  output dma_write_ctrl_Push_mioi_wen_comp_pff;
  input dma_write_ctrl_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire dma_write_ctrl_Push_mioi_biwt;
  wire dma_write_ctrl_Push_mioi_bdwt;
  wire dma_write_ctrl_Push_mioi_bcwt;
  wire dma_write_ctrl_Push_mioi_ivld_run_sct;
  wire dma_write_ctrl_Push_mioi_bawt_reg;
  wire dma_write_ctrl_Push_mioi_bawt_iff;
  wire dma_write_ctrl_Push_mioi_biwt_iff;
  wire dma_write_ctrl_Push_mioi_bcwt_iff;
  wire dma_write_ctrl_Push_mioi_wen_comp_reg;
  wire dma_write_ctrl_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_dma_write_ctrl_Push_mioi_idat;
  assign nl_dma_write_ctrl_Push_mioi_idat = {3'b011 , (dma_write_ctrl_Push_mioi_idat[63:36])
      , 4'b0000 , (dma_write_ctrl_Push_mioi_idat[31:0])};
  ccs_out_buf_wait_v5 #(.rscid(32'sd29),
  .width(32'sd67),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_write_ctrl_Push_mioi (
      .vld(dma_write_ctrl_val),
      .rdy(dma_write_ctrl_rdy),
      .dat(dma_write_ctrl_msg),
      .idat(nl_dma_write_ctrl_Push_mioi_idat[66:0]),
      .irdy(dma_write_ctrl_Push_mioi_irdy),
      .ivld(dma_write_ctrl_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dma_write_ctrl_Push_mioi_oswt_unreg(dma_write_ctrl_Push_mioi_oswt_unreg),
      .dma_write_ctrl_Push_mioi_iswt0(dma_write_ctrl_Push_mioi_iswt0),
      .dma_write_ctrl_Push_mioi_irdy_oreg(dma_write_ctrl_Push_mioi_irdy_oreg),
      .dma_write_ctrl_Push_mioi_biwt(dma_write_ctrl_Push_mioi_biwt),
      .dma_write_ctrl_Push_mioi_bdwt(dma_write_ctrl_Push_mioi_bdwt),
      .dma_write_ctrl_Push_mioi_bcwt(dma_write_ctrl_Push_mioi_bcwt),
      .dma_write_ctrl_Push_mioi_ivld_run_sct(dma_write_ctrl_Push_mioi_ivld_run_sct),
      .dma_write_ctrl_Push_mioi_biwt_pff(dma_write_ctrl_Push_mioi_biwt_iff),
      .dma_write_ctrl_Push_mioi_iswt0_pff(dma_write_ctrl_Push_mioi_iswt0_pff),
      .dma_write_ctrl_Push_mioi_bcwt_pff(dma_write_ctrl_Push_mioi_bcwt_iff),
      .dma_write_ctrl_Push_mioi_irdy_oreg_pff(dma_write_ctrl_Push_mioi_irdy_oreg_pff)
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_dp OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_ctrl_Push_mioi_oswt_unreg(dma_write_ctrl_Push_mioi_oswt_unreg),
      .dma_write_ctrl_Push_mioi_bawt(dma_write_ctrl_Push_mioi_bawt_reg),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp_reg),
      .dma_write_ctrl_Push_mioi_biwt(dma_write_ctrl_Push_mioi_biwt),
      .dma_write_ctrl_Push_mioi_bdwt(dma_write_ctrl_Push_mioi_bdwt),
      .dma_write_ctrl_Push_mioi_bcwt(dma_write_ctrl_Push_mioi_bcwt),
      .dma_write_ctrl_Push_mioi_bawt_pff(dma_write_ctrl_Push_mioi_bawt_iff),
      .dma_write_ctrl_Push_mioi_biwt_pff(dma_write_ctrl_Push_mioi_biwt_iff),
      .dma_write_ctrl_Push_mioi_bcwt_pff(dma_write_ctrl_Push_mioi_bcwt_iff),
      .dma_write_ctrl_Push_mioi_wen_comp_pff(dma_write_ctrl_Push_mioi_wen_comp_iff),
      .dma_write_ctrl_Push_mioi_oswt_unreg_pff(dma_write_ctrl_Push_mioi_oswt_unreg_pff)
    );
  assign dma_write_ctrl_Push_mioi_bawt = dma_write_ctrl_Push_mioi_bawt_reg;
  assign dma_write_ctrl_Push_mioi_bawt_pff = dma_write_ctrl_Push_mioi_bawt_iff;
  assign dma_write_ctrl_Push_mioi_wen_comp = dma_write_ctrl_Push_mioi_wen_comp_reg;
  assign dma_write_ctrl_Push_mioi_wen_comp_pff = dma_write_ctrl_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_audio_out_Pop_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_audio_out_Pop_mioi (
  clk, rst, audio_out_val, audio_out_rdy, audio_out_msg, run_wen, run_wten, audio_out_Pop_mioi_oswt_unreg,
      audio_out_Pop_mioi_bawt, audio_out_Pop_mioi_iswt0, audio_out_Pop_mioi_wen_comp,
      audio_out_Pop_mioi_idat_mxwt, audio_out_Pop_mioi_ivld, audio_out_Pop_mioi_ivld_oreg,
      audio_out_Pop_mioi_bawt_pff, run_wten_pff, audio_out_Pop_mioi_iswt0_pff, audio_out_Pop_mioi_ivld_oreg_pff,
      audio_out_Pop_mioi_wen_comp_pff, audio_out_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input audio_out_val;
  output audio_out_rdy;
  input [511:0] audio_out_msg;
  input run_wen;
  input run_wten;
  input audio_out_Pop_mioi_oswt_unreg;
  output audio_out_Pop_mioi_bawt;
  input audio_out_Pop_mioi_iswt0;
  output audio_out_Pop_mioi_wen_comp;
  output [511:0] audio_out_Pop_mioi_idat_mxwt;
  output audio_out_Pop_mioi_ivld;
  input audio_out_Pop_mioi_ivld_oreg;
  output audio_out_Pop_mioi_bawt_pff;
  input run_wten_pff;
  input audio_out_Pop_mioi_iswt0_pff;
  input audio_out_Pop_mioi_ivld_oreg_pff;
  output audio_out_Pop_mioi_wen_comp_pff;
  input audio_out_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire audio_out_Pop_mioi_biwt;
  wire audio_out_Pop_mioi_bdwt;
  wire [511:0] audio_out_Pop_mioi_idat;
  wire audio_out_Pop_mioi_irdy_run_sct;
  wire audio_out_Pop_mioi_bawt_reg;
  wire audio_out_Pop_mioi_bawt_iff;
  wire audio_out_Pop_mioi_biwt_iff;
  wire audio_out_Pop_mioi_wen_comp_reg;
  wire audio_out_Pop_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd28),
  .width(32'sd512),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) audio_out_Pop_mioi (
      .vld(audio_out_val),
      .rdy(audio_out_rdy),
      .dat(audio_out_msg),
      .idat(audio_out_Pop_mioi_idat),
      .irdy(audio_out_Pop_mioi_irdy_run_sct),
      .ivld(audio_out_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_ctrl OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .audio_out_Pop_mioi_oswt_unreg(audio_out_Pop_mioi_oswt_unreg),
      .audio_out_Pop_mioi_iswt0(audio_out_Pop_mioi_iswt0),
      .audio_out_Pop_mioi_ivld_oreg(audio_out_Pop_mioi_ivld_oreg),
      .audio_out_Pop_mioi_biwt(audio_out_Pop_mioi_biwt),
      .audio_out_Pop_mioi_bdwt(audio_out_Pop_mioi_bdwt),
      .audio_out_Pop_mioi_irdy_run_sct(audio_out_Pop_mioi_irdy_run_sct),
      .audio_out_Pop_mioi_biwt_pff(audio_out_Pop_mioi_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .audio_out_Pop_mioi_iswt0_pff(audio_out_Pop_mioi_iswt0_pff),
      .audio_out_Pop_mioi_ivld_oreg_pff(audio_out_Pop_mioi_ivld_oreg_pff)
    );
  OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_dp OutputBuffer_run_audio_out_Pop_mioi_audio_out_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .audio_out_Pop_mioi_oswt_unreg(audio_out_Pop_mioi_oswt_unreg),
      .audio_out_Pop_mioi_bawt(audio_out_Pop_mioi_bawt_reg),
      .audio_out_Pop_mioi_wen_comp(audio_out_Pop_mioi_wen_comp_reg),
      .audio_out_Pop_mioi_idat_mxwt(audio_out_Pop_mioi_idat_mxwt),
      .audio_out_Pop_mioi_biwt(audio_out_Pop_mioi_biwt),
      .audio_out_Pop_mioi_bdwt(audio_out_Pop_mioi_bdwt),
      .audio_out_Pop_mioi_idat(audio_out_Pop_mioi_idat),
      .audio_out_Pop_mioi_bawt_pff(audio_out_Pop_mioi_bawt_iff),
      .audio_out_Pop_mioi_biwt_pff(audio_out_Pop_mioi_biwt_iff),
      .audio_out_Pop_mioi_wen_comp_pff(audio_out_Pop_mioi_wen_comp_iff),
      .audio_out_Pop_mioi_oswt_unreg_pff(audio_out_Pop_mioi_oswt_unreg_pff)
    );
  assign audio_out_Pop_mioi_bawt = audio_out_Pop_mioi_bawt_reg;
  assign audio_out_Pop_mioi_bawt_pff = audio_out_Pop_mioi_bawt_iff;
  assign audio_out_Pop_mioi_wen_comp = audio_out_Pop_mioi_wen_comp_reg;
  assign audio_out_Pop_mioi_wen_comp_pff = audio_out_Pop_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi (
  clk, rst, sync2_val, sync2_rdy, sync2_msg, run_wen, run_wten, sync2_Pop_mioi_oswt_unreg,
      sync2_Pop_mioi_bawt, sync2_Pop_mioi_iswt0, sync2_Pop_mioi_wen_comp, sync2_Pop_mioi_ivld,
      sync2_Pop_mioi_ivld_oreg, sync2_Pop_mioi_wen_comp_pff, sync2_Pop_mioi_oswt_unreg_pff,
      sync2_Pop_mioi_bawt_pff, run_wten_pff, sync2_Pop_mioi_iswt0_pff, sync2_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  input run_wen;
  input run_wten;
  input sync2_Pop_mioi_oswt_unreg;
  output sync2_Pop_mioi_bawt;
  input sync2_Pop_mioi_iswt0;
  output sync2_Pop_mioi_wen_comp;
  output sync2_Pop_mioi_ivld;
  input sync2_Pop_mioi_ivld_oreg;
  output sync2_Pop_mioi_wen_comp_pff;
  input sync2_Pop_mioi_oswt_unreg_pff;
  output sync2_Pop_mioi_bawt_pff;
  input run_wten_pff;
  input sync2_Pop_mioi_iswt0_pff;
  input sync2_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire sync2_Pop_mioi_biwt;
  wire sync2_Pop_mioi_bdwt;
  wire sync2_Pop_mioi_idat;
  wire sync2_Pop_mioi_irdy_run_sct;
  wire sync2_Pop_mioi_wen_comp_reg;
  wire sync2_Pop_mioi_wen_comp_iff;
  wire sync2_Pop_mioi_bawt_reg;
  wire sync2_Pop_mioi_bawt_iff;
  wire sync2_Pop_mioi_biwt_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd27),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync2_Pop_mioi (
      .vld(sync2_val),
      .rdy(sync2_rdy),
      .dat(sync2_msg),
      .idat(sync2_Pop_mioi_idat),
      .irdy(sync2_Pop_mioi_irdy_run_sct),
      .ivld(sync2_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync2_Pop_mioi_oswt_unreg(sync2_Pop_mioi_oswt_unreg),
      .sync2_Pop_mioi_iswt0(sync2_Pop_mioi_iswt0),
      .sync2_Pop_mioi_ivld_oreg(sync2_Pop_mioi_ivld_oreg),
      .sync2_Pop_mioi_biwt(sync2_Pop_mioi_biwt),
      .sync2_Pop_mioi_bdwt(sync2_Pop_mioi_bdwt),
      .sync2_Pop_mioi_irdy_run_sct(sync2_Pop_mioi_irdy_run_sct),
      .sync2_Pop_mioi_biwt_pff(sync2_Pop_mioi_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .sync2_Pop_mioi_iswt0_pff(sync2_Pop_mioi_iswt0_pff),
      .sync2_Pop_mioi_ivld_oreg_pff(sync2_Pop_mioi_ivld_oreg_pff)
    );
  OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_dp OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync2_Pop_mioi_oswt_unreg(sync2_Pop_mioi_oswt_unreg),
      .sync2_Pop_mioi_bawt(sync2_Pop_mioi_bawt_reg),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp_reg),
      .sync2_Pop_mioi_biwt(sync2_Pop_mioi_biwt),
      .sync2_Pop_mioi_bdwt(sync2_Pop_mioi_bdwt),
      .sync2_Pop_mioi_wen_comp_pff(sync2_Pop_mioi_wen_comp_iff),
      .sync2_Pop_mioi_oswt_unreg_pff(sync2_Pop_mioi_oswt_unreg_pff),
      .sync2_Pop_mioi_bawt_pff(sync2_Pop_mioi_bawt_iff),
      .sync2_Pop_mioi_biwt_pff(sync2_Pop_mioi_biwt_iff)
    );
  assign sync2_Pop_mioi_wen_comp = sync2_Pop_mioi_wen_comp_reg;
  assign sync2_Pop_mioi_wen_comp_pff = sync2_Pop_mioi_wen_comp_iff;
  assign sync2_Pop_mioi_bawt = sync2_Pop_mioi_bawt_reg;
  assign sync2_Pop_mioi_bawt_pff = sync2_Pop_mioi_bawt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run
// ------------------------------------------------------------------


module Control_run (
  clk, rst, acc_start, acc_done, sync1_val, sync1_rdy, sync1_msg, sync2_val, sync2_rdy,
      sync2_msg, sync3_val, sync3_rdy, sync3_msg
);
  input clk;
  input rst;
  input acc_start;
  output acc_done;
  reg acc_done;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;


  // Interconnect Declarations
  reg run_wen;
  wire run_wten;
  wire sync1_Push_mioi_bawt;
  wire sync1_Push_mioi_wen_comp;
  wire sync1_Push_mioi_irdy;
  wire sync1_Push_mioi_irdy_oreg;
  wire sync2_Push_mioi_bawt;
  wire sync2_Push_mioi_wen_comp;
  wire sync2_Push_mioi_irdy;
  wire sync2_Push_mioi_irdy_oreg;
  wire sync3_Pop_mioi_bawt;
  wire sync3_Pop_mioi_wen_comp;
  wire sync3_Pop_mioi_ivld;
  wire sync3_Pop_mioi_ivld_oreg;
  wire [1:0] while_for_2_mux_3_tmp;
  wire or_tmp_1;
  wire and_tmp;
  wire and_tmp_4;
  wire and_dcpl_2;
  wire and_dcpl_9;
  wire and_dcpl_11;
  wire and_dcpl_12;
  wire and_dcpl_17;
  wire nor_tmp;
  wire nor_tmp_1;
  wire and_tmp_12;
  wire mux_tmp_16;
  wire or_tmp_47;
  wire or_dcpl_12;
  wire and_dcpl_29;
  wire and_tmp_14;
  wire and_dcpl_30;
  wire or_tmp_60;
  wire or_tmp_66;
  wire mux_tmp_31;
  wire or_dcpl_13;
  wire and_tmp_22;
  wire or_dcpl_14;
  wire and_dcpl_37;
  wire while_while_or_3_cse_1;
  wire while_while_or_1_cse_1;
  wire while_while_or_cse_1;
  wire lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0;
  wire [1:0] lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0;
  reg exitL_exit_while_for_2_sva;
  reg while_for_2_equal_tmp_2_1;
  reg while_for_2_or_tmp_1;
  wire while_for_2_and_ssc_1;
  wire while_for_2_and_2_ssc_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_1;
  reg lfst_exit_while_for_2_lpi_1_dfm_5_2;
  reg while_for_slc_while_for_acc_3_svs_1;
  reg while_for_2_equal_tmp_1;
  wire lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2;
  reg [1:0] lfst_exit_while_for_2_lpi_1_dfm_5_1_0;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_3;
  wire [3:0] while_for_1_i_3_0_sva_2;
  wire [4:0] nl_while_for_1_i_3_0_sva_2;
  wire [3:0] while_for_2_i_3_0_sva_2;
  wire [4:0] nl_while_for_2_i_3_0_sva_2;
  wire exitL_exit_while_for_2_sva_mx0;
  wire [1:0] lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1;
  wire while_for_2_and_6_cse;
  wire while_and_16_cse;
  wire while_for_2_and_9_cse;
  wire while_for_i_and_cse;
  wire while_for_and_3_cse;
  wire or_7_cse;
  wire or_62_cse;
  wire while_for_2_or_tmp_mx0w0;
  wire while_for_2_equal_tmp_2_mx0w0;
  wire while_for_2_equal_tmp_mx0w0;
  wire while_for_2_or_5_tmp;
  wire or_72_cse;
  wire sync1_write_reset_check_reset_while_nor_1_rmff;
  wire run_wen_rtff;
  reg reg_while_stage_v_2_tmp;
  reg reg_while_for_slc_while_for_acc_3_svs_st_1_tmp;
  reg [1:0] reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp;
  reg reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp;
  reg reg_sync1_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_3_tmp;
  reg [1:0] reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp;
  reg reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp;
  reg reg_while_for_slc_while_for_acc_3_svs_st_2_tmp;
  reg reg_sync2_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_4_tmp;
  reg reg_sync3_Pop_mioi_iswt0_tmp;
  reg [1:0] reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp;
  reg reg_while_for_slc_while_for_acc_3_svs_st_3_tmp;
  reg reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp;
  reg reg_while_stage_v_1_tmp;
  wire sync1_Push_mioi_wen_comp_iff;
  wire while_mux_rmff;
  wire while_for_mux_rmff;
  wire [1:0] while_for_2_mux_16_rmff;
  wire while_for_2_mux_17_rmff;
  wire sync1_Push_mioi_bawt_iff;
  wire while_mux_1_rmff;
  wire and_tmp_pff;
  wire while_mux_2_rmff;
  wire [1:0] while_for_2_mux_18_rmff;
  wire while_for_2_mux_19_rmff;
  wire while_for_mux_4_rmff;
  wire sync2_Push_mioi_bawt_iff;
  wire while_mux_3_rmff;
  wire or_tmp_1_pff;
  wire while_mux_4_rmff;
  wire sync3_Pop_mioi_bawt_iff;
  wire run_wten_iff;
  wire while_mux_5_rmff;
  wire [1:0] while_for_2_mux_20_rmff;
  wire while_for_mux_5_rmff;
  wire while_for_2_mux_21_rmff;
  wire sync2_Push_mioi_wen_comp_iff;
  wire and_dcpl_11_pff;
  wire and_dcpl_9_pff;
  wire sync3_Pop_mioi_wen_comp_iff;
  wire while_mux_6_rmff;
  wire while_while_or_3_cse_1_pff;
  wire while_while_or_1_cse_1_pff;
  wire while_while_or_cse_1_pff;
  wire while_for_2_equal_tmp_1_mx1w1;
  reg [3:0] while_for_2_i_3_0_lpi_1;
  wire or_110_tmp;
  reg [3:0] while_for_i_3_0_lpi_1;
  reg [3:0] while_for_1_i_3_0_lpi_1;
  reg while_for_slc_while_for_acc_3_svs_st;
  reg [3:0] while_for_i_3_0_sva_1_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_2;
  wire acc_done_mx0c1;
  wire sync2_Push_mioi_iswt0_mx0c1;
  wire sync1_Push_mioi_iswt0_mx0c1;
  wire [3:0] while_for_i_3_0_lpi_1_mx0w0;
  wire [3:0] while_for_i_3_0_sva_2;
  wire [4:0] nl_while_for_i_3_0_sva_2;
  wire exitL_exit_while_for_2_sva_mx0w0;
  wire exitL_exit_while_for_2_sva_mx1c1;
  wire exitL_exit_while_for_2_sva_mx1c2;
  wire while_for_slc_while_for_acc_3_svs_st_1_mx0c1;
  wire while_stage_v_3_mx1c1;
  wire while_stage_v_4_mx1c1;
  wire while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1;
  wire while_for_acc_itm_3_1;
  wire while_for_2_acc_itm_3_1;
  wire while_for_1_acc_itm_3_1;

  wire while_and_nl;
  wire while_and_15_nl;
  wire while_for_while_for_mux_nl;
  wire while_for_and_nl;
  wire while_and_18_nl;
  wire while_and_19_nl;
  wire[3:0] while_for_while_for_and_nl;
  wire while_for_2_i_and_2_nl;
  wire mux_45_nl;
  wire nor_29_nl;
  wire nor_30_nl;
  wire mux_44_nl;
  wire or_94_nl;
  wire nor_35_nl;
  wire and_83_nl;
  wire[3:0] while_for_acc_nl;
  wire[4:0] nl_while_for_acc_nl;
  wire[3:0] while_for_i_mux_nl;
  wire while_for_2_while_for_2_nor_3_nl;
  wire while_for_2_and_16_nl;
  wire[1:0] while_for_2_and_4_nl;
  wire[1:0] while_for_2_mux_nl;
  wire while_for_2_not_9_nl;
  wire[3:0] while_for_2_acc_nl;
  wire[4:0] nl_while_for_2_acc_nl;
  wire while_for_2_mux_6_nl;
  wire[3:0] while_for_1_acc_nl;
  wire[4:0] nl_while_for_1_acc_nl;
  wire or_56_nl;
  wire or_54_nl;
  wire mux_30_nl;
  wire mux_29_nl;
  wire mux_14_nl;
  wire nor_26_nl;
  wire or_44_nl;
  wire mux_19_nl;
  wire mux_18_nl;
  wire mux_17_nl;
  wire nor_6_nl;
  wire mux_28_nl;
  wire or_75_nl;
  wire mux_27_nl;
  wire mux_26_nl;
  wire mux_34_nl;
  wire and_52_nl;
  wire mux_33_nl;
  wire mux_32_nl;
  wire mux_37_nl;
  wire and_55_nl;
  wire mux_36_nl;
  wire mux_35_nl;
  wire mux_38_nl;
  wire nor_28_nl;
  wire mux_41_nl;
  wire or_91_nl;
  wire and_66_nl;
  wire and_65_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg;
  assign nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg = ~((~ reg_while_stage_v_2_tmp)
      | reg_while_for_slc_while_for_acc_3_svs_st_1_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0])
      | (~(sync1_Push_mioi_bawt & and_tmp)));
  wire  nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg_pff;
  assign nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg_pff = ~((~
      while_mux_rmff) | while_for_mux_rmff | (~ (while_for_2_mux_16_rmff[1])) | while_for_2_mux_17_rmff
      | (while_for_2_mux_16_rmff[0]) | (~(sync1_Push_mioi_bawt_iff & and_tmp_pff)));
  wire  nl_Control_run_sync2_Push_mioi_inst_sync2_Push_mioi_oswt_unreg_pff;
  assign nl_Control_run_sync2_Push_mioi_inst_sync2_Push_mioi_oswt_unreg_pff = ~((and_dcpl_11_pff
      & and_dcpl_9_pff & while_mux_4_rmff) | while_for_2_mux_19_rmff | while_for_mux_4_rmff
      | (~ sync2_Push_mioi_bawt_iff) | (while_for_2_mux_18_rmff!=2'b10) | (~ while_mux_2_rmff));
  wire  nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg;
  assign nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg = ~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp!=2'b10) | reg_while_for_slc_while_for_acc_3_svs_st_3_tmp
      | (~ sync3_Pop_mioi_bawt) | (~ reg_while_stage_v_4_tmp));
  wire  nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg_pff;
  assign nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg_pff = ~(while_for_2_mux_21_rmff
      | (while_for_2_mux_20_rmff!=2'b10) | while_for_mux_5_rmff | (~ sync3_Pop_mioi_bawt_iff)
      | (~ while_mux_4_rmff));
  wire  nl_Control_run_staller_inst_run_flen_unreg;
  assign nl_Control_run_staller_inst_run_flen_unreg = ~(((~(reg_while_stage_v_1_tmp
      & or_dcpl_13)) & while_while_or_3_cse_1 & while_while_or_1_cse_1 & while_while_or_cse_1)
      | (reg_while_stage_v_1_tmp & (~(reg_while_stage_v_2_tmp & or_dcpl_12)) & while_while_or_3_cse_1
      & while_while_or_1_cse_1 & while_while_or_cse_1) | (reg_while_stage_v_2_tmp
      & (~(reg_while_stage_v_3_tmp & or_dcpl_14)) & while_while_or_3_cse_1 & while_while_or_1_cse_1
      & while_while_or_cse_1) | (reg_while_stage_v_3_tmp & (~(reg_while_stage_v_4_tmp
      & and_dcpl_37)) & while_while_or_1_cse_1 & while_while_or_cse_1) | (reg_while_stage_v_4_tmp
      & while_while_or_cse_1));
  wire  nl_Control_run_staller_inst_run_flen_unreg_pff;
  assign nl_Control_run_staller_inst_run_flen_unreg_pff = ~(((~(while_mux_6_rmff
      & (~(((~ while_mux_rmff) | while_for_mux_rmff | (~ (while_for_2_mux_16_rmff[1]))
      | while_for_2_mux_17_rmff | (while_for_2_mux_16_rmff[0]) | sync1_Push_mioi_bawt_iff)
      & and_tmp_pff)))) & while_while_or_3_cse_1_pff & while_while_or_1_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_6_rmff & (~(while_mux_rmff & (~((while_for_mux_rmff
      | (~ (while_for_2_mux_16_rmff[1])) | while_for_2_mux_17_rmff | (while_for_2_mux_16_rmff[0])
      | sync1_Push_mioi_bawt_iff) & and_tmp_pff)))) & while_while_or_3_cse_1_pff
      & while_while_or_1_cse_1_pff & while_while_or_cse_1_pff) | (while_mux_rmff
      & (~(while_mux_2_rmff & (~(((while_for_2_mux_18_rmff!=2'b10) | sync2_Push_mioi_bawt_iff
      | while_for_mux_4_rmff | while_for_2_mux_19_rmff) & or_tmp_1_pff)))) & while_while_or_3_cse_1_pff
      & while_while_or_1_cse_1_pff & while_while_or_cse_1_pff) | (while_mux_2_rmff
      & (~(while_mux_4_rmff & and_dcpl_11_pff & and_dcpl_9_pff)) & while_while_or_1_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_4_rmff & while_while_or_cse_1_pff));
  Control_run_sync1_Push_mioi Control_run_sync1_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .run_wen(run_wen),
      .sync1_Push_mioi_oswt_unreg(nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_bawt(sync1_Push_mioi_bawt),
      .sync1_Push_mioi_iswt0(reg_sync1_Push_mioi_iswt0_tmp),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp),
      .sync1_Push_mioi_irdy(sync1_Push_mioi_irdy),
      .sync1_Push_mioi_irdy_oreg(sync1_Push_mioi_irdy_oreg),
      .sync1_Push_mioi_wen_comp_pff(sync1_Push_mioi_wen_comp_iff),
      .sync1_Push_mioi_oswt_unreg_pff(nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg_pff),
      .sync1_Push_mioi_bawt_pff(sync1_Push_mioi_bawt_iff),
      .sync1_Push_mioi_iswt0_pff(while_mux_1_rmff),
      .sync1_Push_mioi_irdy_oreg_pff(sync1_Push_mioi_irdy)
    );
  Control_run_wait_dp Control_run_wait_dp_inst (
      .clk(clk),
      .rst(rst),
      .sync1_Push_mioi_irdy(sync1_Push_mioi_irdy),
      .sync1_Push_mioi_irdy_oreg(sync1_Push_mioi_irdy_oreg),
      .sync2_Push_mioi_irdy(sync2_Push_mioi_irdy),
      .sync2_Push_mioi_irdy_oreg(sync2_Push_mioi_irdy_oreg),
      .sync3_Pop_mioi_ivld(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_ivld_oreg(sync3_Pop_mioi_ivld_oreg)
    );
  Control_run_sync2_Push_mioi Control_run_sync2_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .run_wen(run_wen),
      .sync2_Push_mioi_oswt_unreg(sync1_write_reset_check_reset_while_nor_1_rmff),
      .sync2_Push_mioi_bawt(sync2_Push_mioi_bawt),
      .sync2_Push_mioi_iswt0(reg_sync2_Push_mioi_iswt0_tmp),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp),
      .sync2_Push_mioi_irdy(sync2_Push_mioi_irdy),
      .sync2_Push_mioi_irdy_oreg(sync2_Push_mioi_irdy_oreg),
      .sync2_Push_mioi_bawt_pff(sync2_Push_mioi_bawt_iff),
      .sync2_Push_mioi_iswt0_pff(while_mux_3_rmff),
      .sync2_Push_mioi_irdy_oreg_pff(sync2_Push_mioi_irdy),
      .sync2_Push_mioi_wen_comp_pff(sync2_Push_mioi_wen_comp_iff),
      .sync2_Push_mioi_oswt_unreg_pff(nl_Control_run_sync2_Push_mioi_inst_sync2_Push_mioi_oswt_unreg_pff)
    );
  Control_run_sync3_Pop_mioi Control_run_sync3_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Pop_mioi_oswt_unreg(nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_bawt(sync3_Pop_mioi_bawt),
      .sync3_Pop_mioi_iswt0(reg_sync3_Pop_mioi_iswt0_tmp),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp),
      .sync3_Pop_mioi_ivld(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_ivld_oreg(sync3_Pop_mioi_ivld_oreg),
      .sync3_Pop_mioi_bawt_pff(sync3_Pop_mioi_bawt_iff),
      .run_wten_pff(run_wten_iff),
      .sync3_Pop_mioi_iswt0_pff(while_mux_5_rmff),
      .sync3_Pop_mioi_ivld_oreg_pff(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_wen_comp_pff(sync3_Pop_mioi_wen_comp_iff),
      .sync3_Pop_mioi_oswt_unreg_pff(nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg_pff)
    );
  Control_run_staller Control_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen_rtff),
      .run_wten(run_wten),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp),
      .run_flen_unreg(nl_Control_run_staller_inst_run_flen_unreg),
      .sync1_Push_mioi_wen_comp_pff(sync1_Push_mioi_wen_comp_iff),
      .run_wten_pff(run_wten_iff),
      .sync2_Push_mioi_wen_comp_pff(sync2_Push_mioi_wen_comp_iff),
      .sync3_Pop_mioi_wen_comp_pff(sync3_Pop_mioi_wen_comp_iff),
      .run_flen_unreg_pff(nl_Control_run_staller_inst_run_flen_unreg_pff)
    );
  assign sync1_write_reset_check_reset_while_nor_1_rmff = ~(and_dcpl_12 | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp | (~ sync2_Push_mioi_bawt)
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10) | (~ reg_while_stage_v_3_tmp));
  assign while_mux_5_rmff = MUX_s_1_2_2(reg_sync3_Pop_mioi_iswt0_tmp, sync1_write_reset_check_reset_while_nor_1_rmff,
      run_wen);
  assign while_and_nl = run_wen & ((and_tmp & and_dcpl_17) | sync2_Push_mioi_iswt0_mx0c1);
  assign while_mux_3_rmff = MUX_s_1_2_2(reg_sync2_Push_mioi_iswt0_tmp, (~ sync2_Push_mioi_iswt0_mx0c1),
      while_and_nl);
  assign or_62_cse = nor_tmp_1 | (while_for_2_mux_3_tmp!=2'b10) | while_for_2_equal_tmp_2_1;
  assign while_and_15_nl = run_wen & (((~ mux_tmp_16) & reg_while_stage_v_1_tmp &
      (~ while_for_acc_itm_3_1)) | sync1_Push_mioi_iswt0_mx0c1);
  assign while_mux_1_rmff = MUX_s_1_2_2(reg_sync1_Push_mioi_iswt0_tmp, (~ sync1_Push_mioi_iswt0_mx0c1),
      while_and_15_nl);
  assign while_for_i_and_cse = run_wen & (~ or_dcpl_12);
  assign while_for_2_and_6_cse = run_wen & (and_dcpl_29 | and_dcpl_30);
  assign while_and_16_cse = run_wen & and_tmp_14;
  assign while_mux_6_rmff = reg_while_stage_v_1_tmp | while_and_16_cse;
  assign while_mux_rmff = MUX_s_1_2_2(reg_while_stage_v_2_tmp, (~ and_dcpl_29), while_for_2_and_6_cse);
  assign while_for_while_for_mux_nl = MUX_s_1_2_2(while_for_acc_itm_3_1, while_for_slc_while_for_acc_3_svs_st,
      while_for_slc_while_for_acc_3_svs_st_1_mx0c1);
  assign while_for_and_nl = run_wen & (((~ mux_tmp_16) & reg_while_stage_v_1_tmp)
      | while_for_slc_while_for_acc_3_svs_st_1_mx0c1);
  assign while_for_mux_rmff = MUX_s_1_2_2(reg_while_for_slc_while_for_acc_3_svs_st_1_tmp,
      while_for_while_for_mux_nl, while_for_and_nl);
  assign while_for_2_and_9_cse = run_wen & (~ or_dcpl_13);
  assign while_for_2_mux_17_rmff = MUX_s_1_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp,
      lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2, while_for_2_and_9_cse);
  assign while_for_2_mux_16_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp,
      lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1, while_for_2_and_9_cse);
  assign while_and_18_nl = run_wen & ((and_tmp_4 & reg_while_stage_v_2_tmp) | while_stage_v_3_mx1c1);
  assign while_mux_2_rmff = MUX_s_1_2_2(reg_while_stage_v_3_tmp, (~ while_stage_v_3_mx1c1),
      while_and_18_nl);
  assign while_for_mux_4_rmff = MUX_s_1_2_2(reg_while_for_slc_while_for_acc_3_svs_st_2_tmp,
      reg_while_for_slc_while_for_acc_3_svs_st_1_tmp, while_for_i_and_cse);
  assign while_for_2_mux_19_rmff = MUX_s_1_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp, while_for_i_and_cse);
  assign while_for_2_mux_18_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp, while_for_i_and_cse);
  assign while_and_19_nl = run_wen & ((reg_while_stage_v_3_tmp & and_tmp_22) | while_stage_v_4_mx1c1);
  assign while_mux_4_rmff = MUX_s_1_2_2(reg_while_stage_v_4_tmp, (~ while_stage_v_4_mx1c1),
      while_and_19_nl);
  assign while_for_and_3_cse = run_wen & (~ or_dcpl_14);
  assign while_for_mux_5_rmff = MUX_s_1_2_2(reg_while_for_slc_while_for_acc_3_svs_st_3_tmp,
      reg_while_for_slc_while_for_acc_3_svs_st_2_tmp, while_for_and_3_cse);
  assign while_for_2_mux_21_rmff = MUX_s_1_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp, while_for_and_3_cse);
  assign while_for_2_mux_20_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp, while_for_and_3_cse);
  assign or_7_cse = (~ while_for_2_equal_tmp_1) | while_for_slc_while_for_acc_3_svs_1;
  assign or_110_tmp = (while_for_2_or_tmp_1 & (~ acc_start)) | lfst_exit_while_for_2_lpi_1_dfm_5_2
      | while_for_2_equal_tmp_2_1;
  assign nor_35_nl = ~(while_for_2_equal_tmp_1 | or_110_tmp);
  assign and_83_nl = while_for_2_equal_tmp_1 & (~ or_110_tmp);
  assign while_for_i_3_0_lpi_1_mx0w0 = MUX1HOT_v_4_3_2((signext_4_1(~ acc_start)),
      while_for_i_3_0_sva_1_1, while_for_i_3_0_lpi_1, {nor_35_nl , and_83_nl , or_110_tmp});
  assign nl_while_for_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_i_3_0_sva_2[3:1]);
  assign while_for_acc_nl = nl_while_for_acc_nl[3:0];
  assign while_for_acc_itm_3_1 = readslicef_4_1_3(while_for_acc_nl);
  assign while_for_i_mux_nl = MUX_v_4_2_2(while_for_i_3_0_lpi_1, while_for_i_3_0_lpi_1_mx0w0,
      reg_while_stage_v_2_tmp);
  assign nl_while_for_i_3_0_sva_2 = while_for_i_mux_nl + 4'b0001;
  assign while_for_i_3_0_sva_2 = nl_while_for_i_3_0_sva_2[3:0];
  assign while_for_2_or_5_tmp = (while_for_slc_while_for_acc_3_svs_1 & while_for_2_equal_tmp_1)
      | (while_for_1_slc_while_for_1_acc_3_svs_1 & lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign while_for_2_while_for_2_nor_3_nl = ~(acc_start | while_for_2_or_5_tmp);
  assign while_for_2_and_16_nl = acc_start & (~ while_for_2_or_5_tmp);
  assign while_for_2_mux_3_tmp = MUX1HOT_v_2_3_2(2'b01, 2'b10, lfst_exit_while_for_2_lpi_1_dfm_5_1_0,
      {while_for_2_while_for_2_nor_3_nl , while_for_2_and_16_nl , while_for_2_or_5_tmp});
  assign while_for_2_and_4_nl = while_for_2_mux_3_tmp & (signext_2_1(~ while_for_2_equal_tmp_2_1))
      & (signext_2_1(~ while_for_2_and_2_ssc_1));
  assign lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0 = MUX_v_2_2_2(while_for_2_and_4_nl,
      2'b11, while_for_2_and_ssc_1);
  assign while_for_2_mux_nl = MUX_v_2_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_1_0,
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0, reg_while_stage_v_2_tmp);
  assign while_for_2_not_9_nl = ~ exitL_exit_while_for_2_sva_mx0;
  assign lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1 = MUX_v_2_2_2(2'b00, while_for_2_mux_nl,
      while_for_2_not_9_nl);
  assign exitL_exit_while_for_2_sva_mx0w0 = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0
      | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0!=2'b00));
  assign exitL_exit_while_for_2_sva_mx0 = MUX_s_1_2_2(exitL_exit_while_for_2_sva,
      exitL_exit_while_for_2_sva_mx0w0, reg_while_stage_v_2_tmp);
  assign nl_while_for_2_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_2_i_3_0_sva_2[3:1]);
  assign while_for_2_acc_nl = nl_while_for_2_acc_nl[3:0];
  assign while_for_2_acc_itm_3_1 = readslicef_4_1_3(while_for_2_acc_nl);
  assign while_for_2_mux_6_nl = MUX_s_1_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_2,
      lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0, reg_while_stage_v_2_tmp);
  assign lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 = while_for_2_mux_6_nl & (~ exitL_exit_while_for_2_sva_mx0);
  assign lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0 = (exitL_exit_while_for_2_sva
      & (~(while_for_2_or_tmp_1 | while_for_2_and_ssc_1))) | while_for_2_and_2_ssc_1;
  assign while_for_2_equal_tmp_1_mx1w1 = (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1==2'b11)
      & (~ lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2);
  assign while_for_2_or_tmp_mx0w0 = ((lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[0])
      & (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[1]))))
      | (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1!=2'b00)));
  assign while_for_2_equal_tmp_mx0w0 = (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[1])
      & (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[0])));
  assign while_for_2_equal_tmp_2_mx0w0 = lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2
      & (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1==2'b00);
  assign while_for_2_and_ssc_1 = (~ while_for_slc_while_for_acc_3_svs_1) & while_for_2_equal_tmp_1;
  assign while_for_2_and_2_ssc_1 = (~ while_for_1_slc_while_for_1_acc_3_svs_1) &
      lfst_exit_while_for_2_lpi_1_dfm_5_2;
  assign nl_while_for_1_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_1_i_3_0_sva_2[3:1]);
  assign while_for_1_acc_nl = nl_while_for_1_acc_nl[3:0];
  assign while_for_1_acc_itm_3_1 = readslicef_4_1_3(while_for_1_acc_nl);
  assign while_while_or_3_cse_1 = sync1_Push_mioi_bawt | (~((~ reg_while_for_slc_while_for_acc_3_svs_st_1_tmp)
      & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]) & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]))) & reg_while_stage_v_2_tmp));
  assign while_while_or_1_cse_1 = sync2_Push_mioi_bawt | (~((~ reg_while_for_slc_while_for_acc_3_svs_st_2_tmp)
      & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp[1]) & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp[0]))) & reg_while_stage_v_3_tmp));
  assign while_while_or_cse_1 = sync3_Pop_mioi_bawt | (~((~ reg_while_for_slc_while_for_acc_3_svs_st_3_tmp)
      & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]) & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]))) & reg_while_stage_v_4_tmp));
  assign nl_while_for_1_i_3_0_sva_2 = while_for_1_i_3_0_lpi_1 + 4'b0001;
  assign while_for_1_i_3_0_sva_2 = nl_while_for_1_i_3_0_sva_2[3:0];
  assign nl_while_for_2_i_3_0_sva_2 = while_for_2_i_3_0_lpi_1 + 4'b0001;
  assign while_for_2_i_3_0_sva_2 = nl_while_for_2_i_3_0_sva_2[3:0];
  assign or_tmp_1 = (~ reg_while_stage_v_4_tmp) | sync3_Pop_mioi_bawt | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0])
      | reg_while_for_slc_while_for_acc_3_svs_st_3_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp;
  assign and_tmp = ((~ reg_while_stage_v_3_tmp) | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10)
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp
      | sync2_Push_mioi_bawt) & or_tmp_1;
  assign and_tmp_4 = (reg_while_for_slc_while_for_acc_3_svs_st_1_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0])
      | sync1_Push_mioi_bawt) & and_tmp;
  assign and_dcpl_2 = (~ reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp) & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]);
  assign and_dcpl_9 = ~(reg_while_for_slc_while_for_acc_3_svs_st_3_tmp | sync3_Pop_mioi_bawt);
  assign and_dcpl_11 = and_dcpl_2 & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]));
  assign and_dcpl_12 = and_dcpl_11 & and_dcpl_9 & reg_while_stage_v_4_tmp;
  assign and_dcpl_17 = sync1_Push_mioi_bawt & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]))
      & (~ reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp) & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1])
      & (~ reg_while_for_slc_while_for_acc_3_svs_st_1_tmp) & reg_while_stage_v_2_tmp;
  assign nor_tmp = ~(while_for_1_slc_while_for_1_acc_3_svs_1 | (~ lfst_exit_while_for_2_lpi_1_dfm_5_2));
  assign nor_tmp_1 = ~(while_for_2_or_tmp_1 | (~ exitL_exit_while_for_2_sva));
  assign and_tmp_12 = or_7_cse & and_tmp_4;
  assign or_56_nl = lfst_exit_while_for_2_lpi_1_dfm_5_2 | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b10)
      | exitL_exit_while_for_2_sva | (~ and_tmp);
  assign or_54_nl = nor_tmp | nor_tmp_1 | (while_for_2_mux_3_tmp!=2'b10) | while_for_2_equal_tmp_2_1
      | (~ and_tmp_12);
  assign mux_tmp_16 = MUX_s_1_2_2(or_56_nl, or_54_nl, reg_while_stage_v_2_tmp);
  assign or_tmp_47 = or_7_cse | (~ and_tmp);
  assign or_dcpl_12 = ~(and_tmp_4 & reg_while_stage_v_2_tmp);
  assign and_dcpl_29 = and_tmp_4 & reg_while_stage_v_2_tmp & (~ reg_while_stage_v_1_tmp);
  assign and_tmp_14 = ((~ reg_while_stage_v_2_tmp) | reg_while_for_slc_while_for_acc_3_svs_st_1_tmp
      | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1])) | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]) | sync1_Push_mioi_bawt)
      & and_tmp;
  assign and_dcpl_30 = and_tmp_14 & reg_while_stage_v_1_tmp;
  assign or_72_cse = (~((while_for_2_mux_3_tmp!=2'b00))) | while_for_2_equal_tmp_2_1;
  assign or_tmp_60 = while_for_2_or_tmp_1 | (~(exitL_exit_while_for_2_sva & or_72_cse
      & and_tmp_12));
  assign or_tmp_66 = or_7_cse | (~ and_tmp_4);
  assign mux_29_nl = MUX_s_1_2_2(and_tmp_4, (~ or_tmp_66), or_72_cse);
  assign mux_30_nl = MUX_s_1_2_2(and_tmp_4, mux_29_nl, exitL_exit_while_for_2_sva);
  assign mux_tmp_31 = MUX_s_1_2_2(mux_30_nl, and_tmp_4, while_for_2_or_tmp_1);
  assign or_dcpl_13 = ~(and_tmp_14 & reg_while_stage_v_1_tmp);
  assign and_tmp_22 = ((reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10)
      | sync2_Push_mioi_bawt | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp)
      & or_tmp_1;
  assign or_dcpl_14 = ~(and_tmp_22 & reg_while_stage_v_3_tmp);
  assign and_dcpl_37 = and_dcpl_11 & and_dcpl_9;
  assign acc_done_mx0c1 = reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]))
      & (~ while_for_1_slc_while_for_1_acc_3_svs_st_3) & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]))
      & reg_while_stage_v_4_tmp;
  assign nor_26_nl = ~(sync1_Push_mioi_bawt | and_dcpl_12);
  assign or_44_nl = (~ reg_while_stage_v_2_tmp) | reg_while_for_slc_while_for_acc_3_svs_st_1_tmp
      | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1])) | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]);
  assign mux_14_nl = MUX_s_1_2_2(nor_26_nl, or_tmp_1, or_44_nl);
  assign sync2_Push_mioi_iswt0_mx0c1 = mux_14_nl & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp)) & sync2_Push_mioi_bawt &
      (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp==2'b10) & reg_while_stage_v_3_tmp;
  assign mux_17_nl = MUX_s_1_2_2((~ or_tmp_47), and_tmp, or_62_cse);
  assign mux_18_nl = MUX_s_1_2_2(mux_17_nl, and_tmp, nor_tmp);
  assign nor_6_nl = ~(while_for_acc_itm_3_1 | (~ reg_while_stage_v_1_tmp));
  assign mux_19_nl = MUX_s_1_2_2(and_tmp, mux_18_nl, nor_6_nl);
  assign sync1_Push_mioi_iswt0_mx0c1 = mux_19_nl & and_dcpl_17;
  assign or_75_nl = (~ lfst_exit_while_for_2_lpi_1_dfm_5_2) | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b00)
      | exitL_exit_while_for_2_sva | (~ and_tmp);
  assign mux_26_nl = MUX_s_1_2_2(or_tmp_60, (~ and_tmp_12), lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign mux_27_nl = MUX_s_1_2_2(mux_26_nl, or_tmp_60, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign mux_28_nl = MUX_s_1_2_2(or_75_nl, mux_27_nl, reg_while_stage_v_2_tmp);
  assign exitL_exit_while_for_2_sva_mx1c1 = (~ mux_28_nl) & reg_while_stage_v_1_tmp;
  assign and_52_nl = ((~ lfst_exit_while_for_2_lpi_1_dfm_5_2) | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b00)
      | exitL_exit_while_for_2_sva) & and_tmp;
  assign mux_32_nl = MUX_s_1_2_2(mux_tmp_31, (~ or_tmp_66), lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign mux_33_nl = MUX_s_1_2_2(mux_32_nl, mux_tmp_31, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign mux_34_nl = MUX_s_1_2_2(and_52_nl, mux_33_nl, reg_while_stage_v_2_tmp);
  assign exitL_exit_while_for_2_sva_mx1c2 = mux_34_nl & reg_while_stage_v_1_tmp;
  assign and_55_nl = (lfst_exit_while_for_2_lpi_1_dfm_5_2 | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b10)
      | exitL_exit_while_for_2_sva) & and_tmp;
  assign mux_35_nl = MUX_s_1_2_2((~ or_tmp_66), and_tmp_4, or_62_cse);
  assign mux_36_nl = MUX_s_1_2_2(mux_35_nl, and_tmp_4, nor_tmp);
  assign mux_37_nl = MUX_s_1_2_2(and_55_nl, mux_36_nl, reg_while_stage_v_2_tmp);
  assign while_for_slc_while_for_acc_3_svs_st_1_mx0c1 = mux_37_nl & reg_while_stage_v_1_tmp;
  assign nor_28_nl = ~(reg_while_for_slc_while_for_acc_3_svs_st_1_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0])
      | sync1_Push_mioi_bawt | (~ and_tmp_22));
  assign mux_38_nl = MUX_s_1_2_2(and_tmp_22, nor_28_nl, reg_while_stage_v_2_tmp);
  assign while_stage_v_3_mx1c1 = mux_38_nl & reg_while_stage_v_3_tmp;
  assign or_91_nl = (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10) | sync2_Push_mioi_bawt
      | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | and_dcpl_37;
  assign mux_41_nl = MUX_s_1_2_2(and_dcpl_37, or_91_nl, reg_while_stage_v_3_tmp);
  assign while_stage_v_4_mx1c1 = (~ mux_41_nl) & reg_while_stage_v_4_tmp;
  assign and_66_nl = lfst_exit_while_for_2_lpi_1_dfm_5_2 & and_tmp;
  assign and_65_nl = (nor_tmp | (~ (while_for_2_mux_3_tmp[0])) | while_for_2_equal_tmp_2_1)
      & or_7_cse & and_tmp;
  assign while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1 = MUX_s_1_2_2(and_66_nl,
      and_65_nl, reg_while_stage_v_2_tmp);
  assign or_tmp_1_pff = (~ while_mux_4_rmff) | sync3_Pop_mioi_bawt_iff | (while_for_2_mux_20_rmff[0])
      | while_for_mux_5_rmff | (~ (while_for_2_mux_20_rmff[1])) | while_for_2_mux_21_rmff;
  assign and_tmp_pff = ((~ while_mux_2_rmff) | (while_for_2_mux_18_rmff!=2'b10) |
      while_for_2_mux_19_rmff | while_for_mux_4_rmff | sync2_Push_mioi_bawt_iff)
      & or_tmp_1_pff;
  assign and_dcpl_11_pff = (~ while_for_2_mux_21_rmff) & (while_for_2_mux_20_rmff==2'b10);
  assign and_dcpl_9_pff = ~(while_for_mux_5_rmff | sync3_Pop_mioi_bawt_iff);
  assign while_while_or_3_cse_1_pff = sync1_Push_mioi_bawt_iff | (~((~ while_for_mux_rmff)
      & (while_for_2_mux_16_rmff[1]) & (~(while_for_2_mux_17_rmff | (while_for_2_mux_16_rmff[0])))
      & while_mux_rmff));
  assign while_while_or_1_cse_1_pff = sync2_Push_mioi_bawt_iff | (~((~ while_for_mux_4_rmff)
      & (while_for_2_mux_18_rmff[1]) & (~(while_for_2_mux_19_rmff | (while_for_2_mux_18_rmff[0])))
      & while_mux_2_rmff));
  assign while_while_or_cse_1_pff = sync3_Pop_mioi_bawt_iff | (~((~ while_for_mux_5_rmff)
      & (while_for_2_mux_20_rmff[1]) & (~(while_for_2_mux_21_rmff | (while_for_2_mux_20_rmff[0])))
      & while_mux_4_rmff));
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      acc_done <= 1'b0;
    end
    else if ( run_wen & ((and_dcpl_2 & (~ while_for_1_slc_while_for_1_acc_3_svs_st_3)
        & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]) & reg_while_stage_v_4_tmp)
        | acc_done_mx0c1) ) begin
      acc_done <= ~ acc_done_mx0c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_sync3_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_sync2_Push_mioi_iswt0_tmp <= 1'b0;
      reg_sync1_Push_mioi_iswt0_tmp <= 1'b0;
      reg_while_stage_v_1_tmp <= 1'b0;
      reg_while_stage_v_2_tmp <= 1'b0;
      reg_while_for_slc_while_for_acc_3_svs_st_1_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp <= 2'b00;
      reg_while_stage_v_3_tmp <= 1'b0;
      reg_while_for_slc_while_for_acc_3_svs_st_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp <= 2'b00;
      reg_while_stage_v_4_tmp <= 1'b0;
      reg_while_for_slc_while_for_acc_3_svs_st_3_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp <= 2'b00;
      run_wen <= 1'b1;
    end
    else begin
      reg_sync3_Pop_mioi_iswt0_tmp <= while_mux_5_rmff;
      reg_sync2_Push_mioi_iswt0_tmp <= while_mux_3_rmff;
      reg_sync1_Push_mioi_iswt0_tmp <= while_mux_1_rmff;
      reg_while_stage_v_1_tmp <= while_mux_6_rmff;
      reg_while_stage_v_2_tmp <= while_mux_rmff;
      reg_while_for_slc_while_for_acc_3_svs_st_1_tmp <= while_for_mux_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp <= while_for_2_mux_17_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp <= while_for_2_mux_16_rmff;
      reg_while_stage_v_3_tmp <= while_mux_2_rmff;
      reg_while_for_slc_while_for_acc_3_svs_st_2_tmp <= while_for_mux_4_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp <= while_for_2_mux_19_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp <= while_for_2_mux_18_rmff;
      reg_while_stage_v_4_tmp <= while_mux_4_rmff;
      reg_while_for_slc_while_for_acc_3_svs_st_3_tmp <= while_for_mux_5_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp <= while_for_2_mux_21_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp <= while_for_2_mux_20_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( while_for_i_and_cse ) begin
      while_for_i_3_0_lpi_1 <= while_for_i_3_0_lpi_1_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0 <= 2'b00;
      lfst_exit_while_for_2_lpi_1_dfm_5_2 <= 1'b0;
    end
    else if ( while_for_2_and_6_cse ) begin
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0 <= MUX_v_2_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0,
          lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1, and_dcpl_30);
      lfst_exit_while_for_2_lpi_1_dfm_5_2 <= MUX_s_1_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0,
          while_for_2_equal_tmp_1_mx1w1, and_dcpl_30);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exit_while_for_2_sva <= 1'b1;
    end
    else if ( run_wen & (and_dcpl_29 | exitL_exit_while_for_2_sva_mx1c1 | exitL_exit_while_for_2_sva_mx1c2)
        ) begin
      exitL_exit_while_for_2_sva <= MUX1HOT_s_1_3_2(exitL_exit_while_for_2_sva_mx0w0,
          while_for_2_acc_itm_3_1, lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2, {and_dcpl_29
          , exitL_exit_while_for_2_sva_mx1c1 , exitL_exit_while_for_2_sva_mx1c2});
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_2_or_tmp_1 <= 1'b0;
      while_for_i_3_0_sva_1_1 <= 4'b0000;
      while_for_2_equal_tmp_1 <= 1'b0;
      while_for_2_equal_tmp_2_1 <= 1'b0;
      while_for_slc_while_for_acc_3_svs_1 <= 1'b0;
      while_for_1_slc_while_for_1_acc_3_svs_1 <= 1'b0;
    end
    else if ( while_and_16_cse ) begin
      while_for_2_or_tmp_1 <= while_for_2_or_tmp_mx0w0;
      while_for_i_3_0_sva_1_1 <= while_for_i_3_0_sva_2;
      while_for_2_equal_tmp_1 <= while_for_2_equal_tmp_mx0w0;
      while_for_2_equal_tmp_2_1 <= while_for_2_equal_tmp_2_mx0w0;
      while_for_slc_while_for_acc_3_svs_1 <= while_for_acc_itm_3_1;
      while_for_1_slc_while_for_1_acc_3_svs_1 <= while_for_1_acc_itm_3_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_3 <= 1'b0;
    end
    else if ( run_wen ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_3 <= while_for_1_slc_while_for_1_acc_3_svs_st_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_slc_while_for_acc_3_svs_st <= 1'b0;
    end
    else if ( run_wen & (~ mux_tmp_16) ) begin
      while_for_slc_while_for_acc_3_svs_st <= while_for_acc_itm_3_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( run_wen & (~(while_for_2_or_tmp_mx0w0 | while_for_2_equal_tmp_2_mx0w0
        | or_dcpl_13)) ) begin
      while_for_1_i_3_0_lpi_1 <= MUX_v_4_2_2(while_for_while_for_and_nl, while_for_1_i_3_0_sva_2,
          while_for_2_equal_tmp_1_mx1w1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_2_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( run_wen & (~((while_for_1_acc_itm_3_1 & while_for_2_equal_tmp_1_mx1w1)
        | or_dcpl_13 | while_for_2_equal_tmp_mx0w0 | while_for_2_or_tmp_mx0w0)) )
        begin
      while_for_2_i_3_0_lpi_1 <= MUX_v_4_2_2(({{3{while_for_1_acc_itm_3_1}}, while_for_1_acc_itm_3_1}),
          while_for_2_i_3_0_sva_2, while_for_2_i_and_2_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_2 <= 1'b0;
    end
    else if ( run_wen & (~ and_dcpl_12) ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_2 <= while_for_1_slc_while_for_1_acc_3_svs_st_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_1 <= 1'b0;
    end
    else if ( run_wen & (mux_45_nl | while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1)
        ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_1 <= MUX_s_1_2_2(while_for_1_acc_itm_3_1,
          while_for_2_acc_itm_3_1, while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1);
    end
  end
  assign while_for_while_for_and_nl = MUX_v_4_2_2(4'b0000, while_for_1_i_3_0_lpi_1,
      while_for_acc_itm_3_1);
  assign while_for_2_i_and_2_nl = while_for_2_equal_tmp_2_mx0w0 & (~ or_dcpl_13);
  assign nor_29_nl = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2 | (~ and_tmp));
  assign or_94_nl = (~ (while_for_2_mux_3_tmp[0])) | while_for_2_equal_tmp_2_1;
  assign mux_44_nl = MUX_s_1_2_2((~ and_tmp), or_tmp_47, or_94_nl);
  assign nor_30_nl = ~(nor_tmp | mux_44_nl);
  assign mux_45_nl = MUX_s_1_2_2(nor_29_nl, nor_30_nl, reg_while_stage_v_2_tmp);

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input  vector;
  begin
    signext_2_1= {{1{vector}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_1;
    input  vector;
  begin
    signext_4_1= {{3{vector}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run
// ------------------------------------------------------------------


module InputBuffer_run (
  clk, rst, cfg_src_num, cfg_block_size, cfg_input_base, sync1_val, sync1_rdy, sync1_msg,
      dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val,
      dma_read_chnl_rdy, dma_read_chnl_msg, audio_in_val, audio_in_rdy, audio_in_msg,
      mem_rsci_clken_d, mem_rsci_d_d, mem_rsci_q_d, mem_rsci_wadr_d, mem_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      operator_32_true_acc_2_cmp_a, operator_32_true_acc_2_cmp_b, operator_32_true_acc_2_cmp_c,
      mem_rsci_we_d_pff
);
  input clk;
  input rst;
  input [31:0] cfg_src_num;
  input [31:0] cfg_block_size;
  input [31:0] cfg_input_base;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output audio_in_val;
  input audio_in_rdy;
  output [15:0] audio_in_msg;
  output mem_rsci_clken_d;
  output [63:0] mem_rsci_d_d;
  input [63:0] mem_rsci_q_d;
  output [12:0] mem_rsci_wadr_d;
  output mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output [12:0] operator_32_true_acc_2_cmp_a;
  output [12:0] operator_32_true_acc_2_cmp_b;
  output [12:0] operator_32_true_acc_2_cmp_c;
  output mem_rsci_we_d_pff;


  // Interconnect Declarations
  reg run_wen;
  wire run_wten;
  wire sync1_Pop_mioi_bawt;
  wire sync1_Pop_mioi_wen_comp;
  wire sync1_Pop_mioi_ivld;
  wire sync1_Pop_mioi_ivld_oreg;
  wire dma_read_ctrl_Push_mioi_bawt;
  wire dma_read_ctrl_Push_mioi_wen_comp;
  wire dma_read_ctrl_Push_mioi_irdy;
  wire dma_read_ctrl_Push_mioi_irdy_oreg;
  wire dma_read_chnl_Pop_mioi_bawt;
  wire dma_read_chnl_Pop_mioi_wen_comp;
  wire [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;
  wire dma_read_chnl_Pop_mioi_ivld;
  wire dma_read_chnl_Pop_mioi_ivld_oreg;
  wire audio_in_Push_mioi_bawt;
  wire audio_in_Push_mioi_wen_comp;
  reg [15:0] audio_in_Push_mioi_idat;
  wire audio_in_Push_mioi_irdy;
  wire audio_in_Push_mioi_irdy_oreg;
  reg [31:0] dma_read_ctrl_Push_mioi_idat_63_32;
  reg [31:0] dma_read_ctrl_Push_mioi_idat_31_0;
  wire [1:0] while_for_1_while_for_1_mux1h_2_tmp;
  wire operator_32_false_less_tmp;
  wire [1:0] while_for_1_for_1_while_for_1_for_1_mux1h_1_tmp;
  wire operator_32_true_1_less_tmp;
  wire operator_32_true_2_less_tmp;
  wire or_tmp_3;
  wire and_tmp_5;
  wire and_dcpl_20;
  wire or_dcpl_15;
  wire or_dcpl_17;
  wire and_dcpl_23;
  wire or_dcpl_19;
  wire or_dcpl_20;
  wire or_dcpl_21;
  wire or_dcpl_27;
  wire or_dcpl_32;
  wire not_tmp_55;
  wire mux_tmp_31;
  wire not_tmp_58;
  wire not_tmp_61;
  wire not_tmp_64;
  wire not_tmp_67;
  wire not_tmp_70;
  wire not_tmp_73;
  wire not_tmp_76;
  wire not_tmp_79;
  wire not_tmp_82;
  wire not_tmp_85;
  wire not_tmp_88;
  wire not_tmp_91;
  wire not_tmp_94;
  wire not_tmp_97;
  wire not_tmp_100;
  wire and_tmp_13;
  wire and_tmp_14;
  wire mux_tmp_79;
  wire or_dcpl_66;
  wire or_dcpl_67;
  wire and_dcpl_42;
  wire or_dcpl_72;
  wire not_tmp_109;
  wire or_dcpl_81;
  wire or_dcpl_85;
  wire or_dcpl_86;
  wire and_dcpl_43;
  wire or_tmp_109;
  wire or_tmp_110;
  wire mux_tmp_84;
  wire or_dcpl_89;
  wire or_dcpl_92;
  wire and_tmp_18;
  wire or_dcpl_97;
  wire and_dcpl_47;
  wire or_tmp_128;
  wire or_tmp_146;
  wire and_tmp_32;
  wire or_tmp_149;
  wire or_tmp_150;
  wire mux_tmp_109;
  wire mux_tmp_111;
  wire nor_tmp_24;
  wire mux_tmp_113;
  wire mux_tmp_114;
  wire mux_tmp_123;
  wire and_tmp_33;
  wire and_tmp_35;
  wire and_tmp_36;
  wire mux_tmp_128;
  wire mux_tmp_129;
  wire mux_tmp_131;
  wire mux_tmp_132;
  wire or_dcpl_101;
  wire and_dcpl_67;
  wire while_while_or_2_cse_1;
  wire while_or_1_cse_1;
  wire while_or_2_cse_1;
  wire while_while_or_cse_1;
  wire lfst_exitL_exit_while_for_1_for_1_lpi_1_mx0;
  wire exitL_exitL_exit_while_for_1_for_1_lpi_1_mx0;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_1;
  wire while_for_1_for_1_equal_tmp_1;
  reg while_for_1_asn_sft_lpi_1_dfm_1;
  reg [1:0] lfst_exit_while_for_1_for_1_lpi_1_dfm_1;
  wire while_for_1_for_and_stg_2_7_sva_1;
  wire while_for_1_for_and_stg_2_0_sva_1;
  wire while_for_1_for_and_stg_2_6_sva_1;
  wire while_for_1_for_and_stg_2_1_sva_1;
  wire while_for_1_for_and_stg_2_5_sva_1;
  wire while_for_1_for_and_stg_2_2_sva_1;
  wire while_for_1_for_and_stg_2_4_sva_1;
  wire while_for_1_for_and_stg_2_3_sva_1;
  wire while_for_1_for_and_stg_1_0_sva_1;
  wire while_for_1_for_and_stg_1_1_sva_1;
  wire while_for_1_for_and_stg_1_2_sva_1;
  wire while_for_1_for_and_stg_1_3_sva_1;
  wire [1:0] lfst_exit_while_for_1_for_1_lpi_1_mx0;
  reg sfi_exit_while_for_1_lpi_1;
  wire lfst_exitL_exit_while_for_1_for_1_lpi_1_dfm_1;
  reg while_for_1_equal_tmp_1;
  reg [31:0] while_for_1_for_j_lpi_1;
  reg [31:0] while_for_1_for_j_lpi_1_dfm_1;
  wire while_for_1_for_1_and_tmp_1;
  reg while_for_1_asn_1_itm_1;
  reg [1:0] lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1;
  reg while_for_1_asn_sft_lpi_1_dfm_st_1;
  reg while_for_1_asn_sft_lpi_1_dfm_2;
  reg while_for_1_for_1_equal_tmp_1_1;
  reg while_for_1_equal_tmp_2;
  reg operator_32_true_1_slc_32_svs_1;
  reg [3:0] while_for_1_for_j_lpi_1_dfm_2_3_0;
  reg while_for_1_for_and_27_psp;
  reg while_for_1_for_and_26_psp;
  reg while_for_1_for_and_25_psp;
  reg while_for_1_for_and_24_psp;
  reg while_for_1_for_and_23_psp;
  reg while_for_1_for_and_22_psp;
  reg while_for_1_for_and_21_psp;
  reg while_for_1_for_and_20_psp;
  reg while_for_1_for_and_19_psp;
  reg while_for_1_for_and_18_psp;
  reg while_for_1_for_and_17_psp;
  reg while_for_1_for_and_16_psp;
  reg while_for_1_for_and_15_psp;
  reg while_for_1_for_and_14_psp;
  reg while_for_1_for_and_13_psp;
  reg while_for_1_for_and_12_psp;
  reg lfst_exitL_exit_while_for_1_for_1_lpi_1;
  wire [2:0] while_for_1_for_1_k_2_0_sva_2;
  wire [3:0] nl_while_for_1_for_1_k_2_0_sva_2;
  reg [1:0] while_for_1_for_1_k_2_0_lpi_1_1_0;
  wire exitL_exit_while_for_1_sva_mx0;
  wire sfi_exit_while_for_1_lpi_1_dfm_1;
  wire [31:0] while_for_1_for_j_lpi_1_mx0w0;
  wire while_for_1_and_42_rgt;
  wire while_for_1_for_1_and_2_rgt;
  wire while_and_8_cse;
  wire or_22_cse;
  wire while_for_1_and_51_cse;
  wire or_231_cse;
  wire while_for_1_i_and_cse;
  wire and_124_cse;
  wire nor_9_cse;
  wire and_127_cse;
  wire nor_13_cse;
  wire and_129_cse;
  wire nor_17_cse;
  wire nor_19_cse;
  wire and_131_cse;
  wire and_119_cse;
  wire nor_62_cse;
  wire or_50_cse;
  wire and_12_cse;
  wire or_200_cse;
  wire or_cse;
  wire and_134_cse;
  wire sync1_read_reset_check_reset_while_for_nor_2_rmff;
  reg [31:0] while_for_1_i_lpi_1;
  reg [12:0] while_for_slc_while_for_i_12_0_itm_1;
  wire run_wen_rtff;
  reg reg_while_stage_v_3_tmp;
  reg [1:0] reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp;
  reg reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp;
  reg reg_operator_32_true_2_slc_32_svs_st_1_tmp;
  reg [1:0] reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp;
  reg reg_audio_in_Push_mioi_iswt0_tmp;
  reg reg_dma_read_ctrl_Push_mioi_iswt0_tmp;
  reg reg_while_for_1_asn_itm_2_tmp;
  reg [1:0] reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp;
  reg reg_operator_32_false_slc_33_svs_st_1_tmp;
  reg reg_dma_read_chnl_Pop_mioi_iswt0_tmp;
  reg reg_while_stage_v_2_tmp;
  reg reg_sync1_Pop_mioi_iswt0_tmp;
  reg reg_while_for_1_asn_itm_1_tmp;
  reg reg_while_stage_v_1_tmp;
  wire sync1_Pop_mioi_wen_comp_iff;
  wire mux_tmp_79_pff;
  wire or_dcpl_17_pff;
  wire while_mux_rmff;
  wire [1:0] while_for_1_mux_87_rmff;
  wire while_for_1_mux_88_rmff;
  wire operator_32_true_2_mux_rmff;
  wire [1:0] while_for_1_for_1_mux_rmff;
  wire audio_in_Push_mioi_bawt_iff;
  wire while_for_1_for_1_for_mux_rmff;
  wire dma_read_ctrl_Push_mioi_bawt_iff;
  wire while_mux_3_rmff;
  wire while_for_1_mux_89_rmff;
  wire [1:0] while_for_1_mux_90_rmff;
  wire operator_32_false_mux_1_rmff;
  wire dma_read_chnl_Pop_mioi_bawt_iff;
  wire run_wten_iff;
  wire while_for_data_mux_rmff;
  wire while_mux_4_rmff;
  wire sync1_Pop_mioi_bawt_iff;
  wire while_mux_5_rmff;
  wire while_for_1_mux_91_rmff;
  wire while_mux_6_rmff;
  wire dma_read_ctrl_Push_mioi_wen_comp_iff;
  wire and_dcpl_42_pff;
  wire dma_read_chnl_Pop_mioi_wen_comp_iff;
  wire or_dcpl_72_pff;
  wire audio_in_Push_mioi_wen_comp_iff;
  wire while_while_or_2_cse_1_pff;
  wire while_or_1_cse_1_pff;
  wire while_or_2_cse_1_pff;
  wire while_while_or_cse_1_pff;
  wire while_for_1_asn_70;
  reg [31:0] while_for_1_for_1_for_j_lpi_1;
  wire and_147_tmp;
  wire operator_32_true_less_itm;
  wire [31:0] z_out;
  wire [32:0] nl_z_out;
  reg exitL_exitL_exit_while_for_1_for_1_lpi_1;
  reg while_for_1_asn_sft_lpi_1;
  reg [1:0] lfst_exit_while_for_1_for_1_lpi_1;
  reg [63:0] mem_tmp_7_sva;
  reg [63:0] mem_tmp_8_sva;
  reg [63:0] mem_tmp_6_sva;
  reg [63:0] mem_tmp_9_sva;
  reg [63:0] mem_tmp_5_sva;
  reg [63:0] mem_tmp_10_sva;
  reg [63:0] mem_tmp_4_sva;
  reg [63:0] mem_tmp_11_sva;
  reg [63:0] mem_tmp_3_sva;
  reg [63:0] mem_tmp_12_sva;
  reg [63:0] mem_tmp_2_sva;
  reg [63:0] mem_tmp_13_sva;
  reg [63:0] mem_tmp_1_sva;
  reg [63:0] mem_tmp_14_sva;
  reg [63:0] mem_tmp_0_sva;
  reg [63:0] mem_tmp_15_sva;
  reg [31:0] while_length_lpi_1_dfm;
  reg operator_32_false_slc_33_svs_st;
  reg while_for_1_asn_sft_lpi_1_dfm_st;
  reg [1:0] lfst_exit_while_for_1_for_1_lpi_1_dfm_st;
  reg operator_32_true_2_slc_32_svs_st;
  reg [31:0] while_for_1_i_lpi_1_dfm_1;
  reg [31:0] while_for_i_sva_1_1;
  wire [32:0] nl_while_for_i_sva_1_1;
  reg [31:0] while_length_sva_1;
  wire signed [61:0] nl_while_length_sva_1;
  reg [31:0] while_for_i_lpi_1_dfm_1;
  reg while_for_while_for_or_itm_1;
  wire audio_in_Push_mioi_iswt0_mx0c1;
  wire [63:0] mem_tmp_15_sva_mx0;
  wire [63:0] mem_tmp_0_sva_mx0;
  wire [63:0] mem_tmp_14_sva_mx0;
  wire [63:0] mem_tmp_1_sva_mx0;
  wire [63:0] mem_tmp_13_sva_mx0;
  wire [63:0] mem_tmp_2_sva_mx0;
  wire [63:0] mem_tmp_12_sva_mx0;
  wire [63:0] mem_tmp_3_sva_mx0;
  wire [63:0] mem_tmp_11_sva_mx0;
  wire [63:0] mem_tmp_4_sva_mx0;
  wire [63:0] mem_tmp_10_sva_mx0;
  wire [63:0] mem_tmp_5_sva_mx0;
  wire [63:0] mem_tmp_9_sva_mx0;
  wire [63:0] mem_tmp_6_sva_mx0;
  wire [63:0] mem_tmp_8_sva_mx0;
  wire [63:0] mem_tmp_7_sva_mx0;
  wire dma_read_ctrl_Push_mioi_iswt0_mx0c1;
  wire [31:0] while_for_1_i_lpi_1_mx0w0;
  wire [31:0] while_for_1_i_lpi_1_mx0;
  wire exit_while_for_1_lpi_1_dfm_1;
  wire exitL_exit_while_for_1_sva_mx0w0;
  wire [31:0] while_for_i_lpi_1_dfm_mx0w0;
  wire [31:0] while_length_lpi_1_dfm_mx0;
  wire while_for_1_asn_itm_1_mx0c1;
  wire while_stage_v_2_mx1c1;
  wire operator_32_false_slc_33_svs_st_1_mx0c1;
  wire while_for_1_asn_sft_lpi_1_dfm_1_mx0c1;
  wire while_for_1_and_44_tmp_1;
  wire exitL_exit_while_for_1_for_1_lpi_1_dfm_1;
  wire [1:0] lfst_exit_while_for_1_for_1_lpi_1_dfm_mx0w0;
  wire lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1_mx0c1;
  wire while_for_1_asn_sft_lpi_1_dfm_st_mx0w0;
  wire while_stage_v_3_mx1c1;
  wire operator_32_true_2_slc_32_svs_st_1_mx0c1;
  wire while_for_1_and_56_cse;
  wire while_for_and_cse;
  wire while_for_1_for_and_28_cse;
  wire operator_32_true_1_and_cse;

  wire mux_82_nl;
  wire mux_81_nl;
  wire or_180_nl;
  wire or_179_nl;
  wire while_for_1_for_1_for_and_nl;
  wire[15:0] while_for_1_for_1_for_out_reg_mux_1_nl;
  wire[15:0] while_for_1_for_1_for_out_reg_mux_2_nl;
  wire[15:0] while_for_1_for_1_for_out_reg_mux_3_nl;
  wire[15:0] while_for_1_for_1_for_out_reg_mux_4_nl;
  wire mux_33_nl;
  wire mux_32_nl;
  wire mux_36_nl;
  wire mux_35_nl;
  wire or_97_nl;
  wire mux_39_nl;
  wire mux_38_nl;
  wire nand_18_nl;
  wire mux_42_nl;
  wire mux_41_nl;
  wire mux_45_nl;
  wire mux_44_nl;
  wire mux_48_nl;
  wire mux_47_nl;
  wire or_117_nl;
  wire mux_51_nl;
  wire mux_50_nl;
  wire or_123_nl;
  wire mux_54_nl;
  wire mux_53_nl;
  wire mux_57_nl;
  wire mux_56_nl;
  wire mux_60_nl;
  wire mux_59_nl;
  wire or_137_nl;
  wire mux_63_nl;
  wire mux_62_nl;
  wire or_143_nl;
  wire mux_66_nl;
  wire mux_65_nl;
  wire mux_69_nl;
  wire mux_68_nl;
  wire mux_72_nl;
  wire mux_71_nl;
  wire or_157_nl;
  wire mux_75_nl;
  wire mux_74_nl;
  wire or_163_nl;
  wire mux_78_nl;
  wire mux_77_nl;
  wire while_and_nl;
  wire while_for_1_not_94_nl;
  wire sync1_read_reset_check_reset_while_for_data_nor_nl;
  wire mux_91_nl;
  wire nor_69_nl;
  wire while_for_1_mux_86_nl;
  wire while_for_1_while_for_1_while_for_1_or_1_nl;
  wire while_for_1_and_49_nl;
  wire while_and_11_nl;
  wire operator_32_false_operator_32_false_mux_nl;
  wire operator_32_false_and_nl;
  wire mux_99_nl;
  wire nor_63_nl;
  wire mux_98_nl;
  wire nor_64_nl;
  wire mux_97_nl;
  wire mux_96_nl;
  wire mux_95_nl;
  wire nor_65_nl;
  wire nor_66_nl;
  wire[31:0] while_for_1_for_j_mux_1_nl;
  wire while_for_1_not_98_nl;
  wire[1:0] while_for_1_for_while_for_1_for_and_1_nl;
  wire[31:0] nor_73_nl;
  wire while_for_1_for_1_not_22_nl;
  wire or_297_nl;
  wire and_102_nl;
  wire while_and_12_nl;
  wire operator_32_true_2_operator_32_true_2_mux_nl;
  wire operator_32_true_2_and_nl;
  wire or_87_nl;
  wire mux_29_nl;
  wire or_85_nl;
  wire or_96_nl;
  wire mux_34_nl;
  wire or_94_nl;
  wire or_102_nl;
  wire mux_37_nl;
  wire or_100_nl;
  wire or_107_nl;
  wire mux_40_nl;
  wire or_105_nl;
  wire or_111_nl;
  wire mux_43_nl;
  wire or_109_nl;
  wire or_116_nl;
  wire mux_46_nl;
  wire or_114_nl;
  wire or_122_nl;
  wire mux_49_nl;
  wire or_120_nl;
  wire or_127_nl;
  wire mux_52_nl;
  wire or_125_nl;
  wire or_131_nl;
  wire mux_55_nl;
  wire or_129_nl;
  wire or_136_nl;
  wire mux_58_nl;
  wire or_134_nl;
  wire or_142_nl;
  wire mux_61_nl;
  wire or_140_nl;
  wire or_147_nl;
  wire mux_64_nl;
  wire or_145_nl;
  wire or_151_nl;
  wire mux_67_nl;
  wire or_149_nl;
  wire or_156_nl;
  wire mux_70_nl;
  wire or_154_nl;
  wire or_162_nl;
  wire mux_73_nl;
  wire or_160_nl;
  wire or_167_nl;
  wire mux_76_nl;
  wire or_165_nl;
  wire[31:0] while_for_1_acc_1_nl;
  wire[32:0] nl_while_for_1_acc_1_nl;
  wire while_for_1_and_47_nl;
  wire while_for_1_and_48_nl;
  wire and_63_nl;
  wire and_64_nl;
  wire[31:0] while_for_i_mux_1_nl;
  wire or_282_nl;
  wire mux_148_nl;
  wire while_for_1_not_104_nl;
  wire[1:0] while_for_1_while_for_1_and_6_nl;
  wire while_for_1_not_5_nl;
  wire while_for_1_while_for_1_nor_4_nl;
  wire while_for_1_and_22_nl;
  wire nor_74_nl;
  wire while_for_1_for_1_and_3_nl;
  wire while_for_1_not_106_nl;
  wire mux_90_nl;
  wire mux_89_nl;
  wire mux_88_nl;
  wire mux_86_nl;
  wire mux_85_nl;
  wire or_280_nl;
  wire while_for_1_or_18_nl;
  wire while_for_1_and_46_nl;
  wire while_for_1_and_25_nl;
  wire mux_30_nl;
  wire or_91_nl;
  wire or_90_nl;
  wire or_89_nl;
  wire mux_83_nl;
  wire mux_110_nl;
  wire mux_105_nl;
  wire nand_38_nl;
  wire or_252_nl;
  wire nand_5_nl;
  wire mux_112_nl;
  wire mux_107_nl;
  wire mux_106_nl;
  wire mux_122_nl;
  wire mux_121_nl;
  wire mux_119_nl;
  wire nand_6_nl;
  wire mux_118_nl;
  wire and_97_nl;
  wire mux_124_nl;
  wire and_94_nl;
  wire and_99_nl;
  wire and_98_nl;
  wire mux_130_nl;
  wire mux_126_nl;
  wire mux_125_nl;
  wire mux_92_nl;
  wire nor_61_nl;
  wire and_88_nl;
  wire mux_103_nl;
  wire and_87_nl;
  wire mux_102_nl;
  wire mux_101_nl;
  wire mux_100_nl;
  wire and_83_nl;
  wire and_82_nl;
  wire mux_141_nl;
  wire mux_140_nl;
  wire mux_139_nl;
  wire mux_137_nl;
  wire and_100_nl;
  wire mux_136_nl;
  wire nor_4_nl;
  wire mux_144_nl;
  wire mux_143_nl;
  wire or_264_nl;
  wire mux_147_nl;
  wire mux_146_nl;
  wire and_116_nl;
  wire or_268_nl;
  wire and_138_nl;
  wire[31:0] while_for_1_for_1_for_mux_3_nl;
  wire or_301_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_InputBuffer_run_sync1_Pop_mioi_inst_sync1_Pop_mioi_oswt_unreg;
  assign nl_InputBuffer_run_sync1_Pop_mioi_inst_sync1_Pop_mioi_oswt_unreg = ~ or_dcpl_67;
  wire  nl_InputBuffer_run_sync1_Pop_mioi_inst_sync1_Pop_mioi_oswt_unreg_pff;
  assign nl_InputBuffer_run_sync1_Pop_mioi_inst_sync1_Pop_mioi_oswt_unreg_pff = mux_tmp_79_pff
      & sync1_Pop_mioi_bawt_iff & while_for_1_mux_91_rmff & while_mux_6_rmff;
  wire  nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_oswt_unreg;
  assign nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_oswt_unreg
      = ~((~ or_dcpl_17) | and_dcpl_42 | (~(dma_read_ctrl_Push_mioi_bawt & reg_while_for_1_asn_itm_2_tmp
      & reg_while_stage_v_2_tmp)));
  wire [66:0] nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat;
  assign nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat
      = {3'b011 , dma_read_ctrl_Push_mioi_idat_63_32 , dma_read_ctrl_Push_mioi_idat_31_0};
  wire  nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_oswt_unreg_pff;
  assign nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_oswt_unreg_pff
      = ~((~ or_dcpl_17_pff) | and_dcpl_42_pff | (~(dma_read_ctrl_Push_mioi_bawt_iff
      & while_for_1_mux_89_rmff & while_mux_4_rmff)));
  wire  nl_InputBuffer_run_dma_read_chnl_Pop_mioi_inst_dma_read_chnl_Pop_mioi_oswt_unreg_pff;
  assign nl_InputBuffer_run_dma_read_chnl_Pop_mioi_inst_dma_read_chnl_Pop_mioi_oswt_unreg_pff
      = ~((~ or_dcpl_17_pff) | (~(dma_read_chnl_Pop_mioi_bawt_iff & operator_32_false_mux_1_rmff))
      | (while_for_1_mux_90_rmff[1]) | or_dcpl_72_pff);
  wire  nl_InputBuffer_run_audio_in_Push_mioi_inst_audio_in_Push_mioi_oswt_unreg;
  assign nl_InputBuffer_run_audio_in_Push_mioi_inst_audio_in_Push_mioi_oswt_unreg
      = ~((~ audio_in_Push_mioi_bawt) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp!=2'b10)
      | (~ reg_operator_32_true_2_slc_32_svs_st_1_tmp) | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp
      | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10) | (~ reg_while_stage_v_3_tmp));
  wire  nl_InputBuffer_run_audio_in_Push_mioi_inst_audio_in_Push_mioi_oswt_unreg_pff;
  assign nl_InputBuffer_run_audio_in_Push_mioi_inst_audio_in_Push_mioi_oswt_unreg_pff
      = ~((~ audio_in_Push_mioi_bawt_iff) | (while_for_1_for_1_mux_rmff!=2'b10) |
      (~ operator_32_true_2_mux_rmff) | while_for_1_mux_88_rmff | (while_for_1_mux_87_rmff!=2'b10)
      | (~ while_mux_rmff));
  wire  nl_InputBuffer_run_staller_inst_run_flen_unreg;
  assign nl_InputBuffer_run_staller_inst_run_flen_unreg = ~(((~(reg_while_stage_v_1_tmp
      & or_dcpl_97)) & while_while_or_2_cse_1 & while_or_1_cse_1 & while_or_2_cse_1
      & while_while_or_cse_1) | (reg_while_stage_v_1_tmp & (~(reg_while_stage_v_2_tmp
      & or_dcpl_86)) & while_while_or_2_cse_1 & while_or_1_cse_1 & while_or_2_cse_1
      & while_while_or_cse_1) | (reg_while_stage_v_2_tmp & (~(reg_while_stage_v_3_tmp
      & and_dcpl_67)) & while_or_1_cse_1 & while_or_2_cse_1 & while_while_or_cse_1)
      | (reg_while_stage_v_3_tmp & while_while_or_cse_1));
  wire  nl_InputBuffer_run_staller_inst_run_flen_unreg_pff;
  assign nl_InputBuffer_run_staller_inst_run_flen_unreg_pff = ~(((~(while_mux_6_rmff
      & (~(mux_tmp_79_pff & (~((~ sync1_Pop_mioi_bawt_iff) & while_for_1_mux_91_rmff))))))
      & while_while_or_2_cse_1_pff & while_or_1_cse_1_pff & while_or_2_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_6_rmff & (~(while_mux_4_rmff & ((~
      or_dcpl_17_pff) | and_dcpl_42_pff | or_dcpl_72_pff))) & while_while_or_2_cse_1_pff
      & while_or_1_cse_1_pff & while_or_2_cse_1_pff & while_while_or_cse_1_pff) |
      (while_mux_4_rmff & (~(while_mux_rmff & (while_for_1_mux_87_rmff==2'b10) &
      (~ while_for_1_mux_88_rmff) & operator_32_true_2_mux_rmff & (while_for_1_for_1_mux_rmff==2'b10)
      & (~ audio_in_Push_mioi_bawt_iff))) & while_or_1_cse_1_pff & while_or_2_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_rmff & while_while_or_cse_1_pff));
  InputBuffer_run_sync1_Pop_mioi InputBuffer_run_sync1_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync1_Pop_mioi_oswt_unreg(nl_InputBuffer_run_sync1_Pop_mioi_inst_sync1_Pop_mioi_oswt_unreg),
      .sync1_Pop_mioi_bawt(sync1_Pop_mioi_bawt),
      .sync1_Pop_mioi_iswt0(reg_sync1_Pop_mioi_iswt0_tmp),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp),
      .sync1_Pop_mioi_ivld(sync1_Pop_mioi_ivld),
      .sync1_Pop_mioi_ivld_oreg(sync1_Pop_mioi_ivld_oreg),
      .sync1_Pop_mioi_wen_comp_pff(sync1_Pop_mioi_wen_comp_iff),
      .sync1_Pop_mioi_oswt_unreg_pff(nl_InputBuffer_run_sync1_Pop_mioi_inst_sync1_Pop_mioi_oswt_unreg_pff),
      .sync1_Pop_mioi_bawt_pff(sync1_Pop_mioi_bawt_iff),
      .run_wten_pff(run_wten_iff),
      .sync1_Pop_mioi_iswt0_pff(while_mux_5_rmff),
      .sync1_Pop_mioi_ivld_oreg_pff(sync1_Pop_mioi_ivld)
    );
  InputBuffer_run_wait_dp InputBuffer_run_wait_dp_inst (
      .clk(clk),
      .rst(rst),
      .sync1_Pop_mioi_ivld(sync1_Pop_mioi_ivld),
      .sync1_Pop_mioi_ivld_oreg(sync1_Pop_mioi_ivld_oreg),
      .dma_read_ctrl_Push_mioi_irdy(dma_read_ctrl_Push_mioi_irdy),
      .dma_read_ctrl_Push_mioi_irdy_oreg(dma_read_ctrl_Push_mioi_irdy_oreg),
      .dma_read_chnl_Pop_mioi_ivld(dma_read_chnl_Pop_mioi_ivld),
      .dma_read_chnl_Pop_mioi_ivld_oreg(dma_read_chnl_Pop_mioi_ivld_oreg),
      .audio_in_Push_mioi_irdy(audio_in_Push_mioi_irdy),
      .audio_in_Push_mioi_irdy_oreg(audio_in_Push_mioi_irdy_oreg)
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi InputBuffer_run_dma_read_ctrl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .run_wen(run_wen),
      .dma_read_ctrl_Push_mioi_oswt_unreg(nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_oswt_unreg),
      .dma_read_ctrl_Push_mioi_bawt(dma_read_ctrl_Push_mioi_bawt),
      .dma_read_ctrl_Push_mioi_iswt0(reg_dma_read_ctrl_Push_mioi_iswt0_tmp),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp),
      .dma_read_ctrl_Push_mioi_idat(nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat[66:0]),
      .dma_read_ctrl_Push_mioi_irdy(dma_read_ctrl_Push_mioi_irdy),
      .dma_read_ctrl_Push_mioi_irdy_oreg(dma_read_ctrl_Push_mioi_irdy_oreg),
      .dma_read_ctrl_Push_mioi_bawt_pff(dma_read_ctrl_Push_mioi_bawt_iff),
      .dma_read_ctrl_Push_mioi_iswt0_pff(while_mux_3_rmff),
      .dma_read_ctrl_Push_mioi_irdy_oreg_pff(dma_read_ctrl_Push_mioi_irdy),
      .dma_read_ctrl_Push_mioi_wen_comp_pff(dma_read_ctrl_Push_mioi_wen_comp_iff),
      .dma_read_ctrl_Push_mioi_oswt_unreg_pff(nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_oswt_unreg_pff)
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi InputBuffer_run_dma_read_chnl_Pop_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_read_chnl_Pop_mioi_oswt_unreg(sync1_read_reset_check_reset_while_for_nor_2_rmff),
      .dma_read_chnl_Pop_mioi_bawt(dma_read_chnl_Pop_mioi_bawt),
      .dma_read_chnl_Pop_mioi_iswt0(reg_dma_read_chnl_Pop_mioi_iswt0_tmp),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp),
      .dma_read_chnl_Pop_mioi_idat_mxwt(dma_read_chnl_Pop_mioi_idat_mxwt),
      .dma_read_chnl_Pop_mioi_ivld(dma_read_chnl_Pop_mioi_ivld),
      .dma_read_chnl_Pop_mioi_ivld_oreg(dma_read_chnl_Pop_mioi_ivld_oreg),
      .dma_read_chnl_Pop_mioi_bawt_pff(dma_read_chnl_Pop_mioi_bawt_iff),
      .run_wten_pff(run_wten_iff),
      .dma_read_chnl_Pop_mioi_iswt0_pff(while_for_data_mux_rmff),
      .dma_read_chnl_Pop_mioi_ivld_oreg_pff(dma_read_chnl_Pop_mioi_ivld),
      .dma_read_chnl_Pop_mioi_wen_comp_pff(dma_read_chnl_Pop_mioi_wen_comp_iff),
      .dma_read_chnl_Pop_mioi_oswt_unreg_pff(nl_InputBuffer_run_dma_read_chnl_Pop_mioi_inst_dma_read_chnl_Pop_mioi_oswt_unreg_pff)
    );
  InputBuffer_run_audio_in_Push_mioi InputBuffer_run_audio_in_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .run_wen(run_wen),
      .audio_in_Push_mioi_oswt_unreg(nl_InputBuffer_run_audio_in_Push_mioi_inst_audio_in_Push_mioi_oswt_unreg),
      .audio_in_Push_mioi_bawt(audio_in_Push_mioi_bawt),
      .audio_in_Push_mioi_iswt0(reg_audio_in_Push_mioi_iswt0_tmp),
      .audio_in_Push_mioi_wen_comp(audio_in_Push_mioi_wen_comp),
      .audio_in_Push_mioi_idat(audio_in_Push_mioi_idat),
      .audio_in_Push_mioi_irdy(audio_in_Push_mioi_irdy),
      .audio_in_Push_mioi_irdy_oreg(audio_in_Push_mioi_irdy_oreg),
      .audio_in_Push_mioi_bawt_pff(audio_in_Push_mioi_bawt_iff),
      .audio_in_Push_mioi_iswt0_pff(while_for_1_for_1_for_mux_rmff),
      .audio_in_Push_mioi_irdy_oreg_pff(audio_in_Push_mioi_irdy),
      .audio_in_Push_mioi_wen_comp_pff(audio_in_Push_mioi_wen_comp_iff),
      .audio_in_Push_mioi_oswt_unreg_pff(nl_InputBuffer_run_audio_in_Push_mioi_inst_audio_in_Push_mioi_oswt_unreg_pff)
    );
  InputBuffer_run_staller InputBuffer_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen_rtff),
      .run_wten(run_wten),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp),
      .audio_in_Push_mioi_wen_comp(audio_in_Push_mioi_wen_comp),
      .run_flen_unreg(nl_InputBuffer_run_staller_inst_run_flen_unreg),
      .sync1_Pop_mioi_wen_comp_pff(sync1_Pop_mioi_wen_comp_iff),
      .run_wten_pff(run_wten_iff),
      .dma_read_ctrl_Push_mioi_wen_comp_pff(dma_read_ctrl_Push_mioi_wen_comp_iff),
      .dma_read_chnl_Pop_mioi_wen_comp_pff(dma_read_chnl_Pop_mioi_wen_comp_iff),
      .audio_in_Push_mioi_wen_comp_pff(audio_in_Push_mioi_wen_comp_iff),
      .run_flen_unreg_pff(nl_InputBuffer_run_staller_inst_run_flen_unreg_pff)
    );
  assign mux_81_nl = MUX_s_1_2_2(not_tmp_109, or_dcpl_27, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign or_180_nl = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]) | not_tmp_109;
  assign or_179_nl = (~ operator_32_true_1_less_tmp) | (lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1[1])
      | while_for_1_asn_sft_lpi_1_dfm_st_1;
  assign mux_82_nl = MUX_s_1_2_2(mux_81_nl, or_180_nl, or_179_nl);
  assign mem_rsci_clken_d = ~(mux_82_nl | or_dcpl_72);
  assign while_for_1_for_1_for_and_nl = run_wen & ((and_dcpl_23 & and_dcpl_20 & reg_while_stage_v_2_tmp
      & (~ while_for_1_asn_sft_lpi_1_dfm_st_1) & (lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1==2'b10)
      & operator_32_true_2_less_tmp) | audio_in_Push_mioi_iswt0_mx0c1);
  assign while_for_1_for_1_for_mux_rmff = MUX_s_1_2_2(reg_audio_in_Push_mioi_iswt0_tmp,
      (~ audio_in_Push_mioi_iswt0_mx0c1), while_for_1_for_1_for_and_nl);
  assign and_124_cse = (while_for_1_for_j_lpi_1_dfm_2_3_0==4'b1111);
  assign nor_9_cse = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0001));
  assign and_127_cse = (while_for_1_for_j_lpi_1_dfm_2_3_0==4'b1101);
  assign nor_13_cse = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0011));
  assign and_129_cse = (while_for_1_for_j_lpi_1_dfm_2_3_0==4'b1011);
  assign nor_17_cse = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0101));
  assign nor_19_cse = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1001));
  assign and_131_cse = (while_for_1_for_j_lpi_1_dfm_2_3_0==4'b0111);
  assign while_and_nl = run_wen & ((mux_tmp_79 & sync1_Pop_mioi_bawt & reg_while_for_1_asn_itm_1_tmp
      & reg_while_stage_v_1_tmp) | dma_read_ctrl_Push_mioi_iswt0_mx0c1);
  assign while_mux_3_rmff = MUX_s_1_2_2(reg_dma_read_ctrl_Push_mioi_iswt0_tmp, (~
      dma_read_ctrl_Push_mioi_iswt0_mx0c1), while_and_nl);
  assign while_and_8_cse = run_wen & (~ or_dcpl_67);
  assign sync1_read_reset_check_reset_while_for_nor_2_rmff = ~((~ or_dcpl_17) | (~(dma_read_chnl_Pop_mioi_bawt
      & reg_operator_32_false_slc_33_svs_st_1_tmp)) | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1])
      | or_dcpl_72);
  assign while_for_1_i_and_cse = run_wen & (~ or_dcpl_86);
  assign while_for_1_and_56_cse = run_wen & mux_tmp_79 & (~(and_dcpl_43 & reg_while_stage_v_1_tmp));
  assign sync1_read_reset_check_reset_while_for_data_nor_nl = ~((~ mux_tmp_79) |
      and_dcpl_43 | (lfst_exit_while_for_1_lpi_1_dfm_1[1]) | (~(reg_while_stage_v_1_tmp
      & operator_32_false_less_tmp)));
  assign while_for_data_mux_rmff = MUX_s_1_2_2(reg_dma_read_chnl_Pop_mioi_iswt0_tmp,
      sync1_read_reset_check_reset_while_for_data_nor_nl, run_wen);
  assign nor_69_nl = ~((while_for_1_while_for_1_mux1h_2_tmp!=2'b00) | (~ and_tmp_18));
  assign mux_91_nl = MUX_s_1_2_2(mux_tmp_79, nor_69_nl, reg_while_stage_v_1_tmp);
  assign while_mux_5_rmff = MUX_s_1_2_2(reg_sync1_Pop_mioi_iswt0_tmp, mux_91_nl,
      run_wen);
  assign while_mux_6_rmff = reg_while_stage_v_1_tmp | while_for_1_and_56_cse;
  assign while_for_1_while_for_1_while_for_1_or_1_nl = exitL_exit_while_for_1_sva_mx0w0
      | while_for_1_asn_itm_1_mx0c1;
  assign while_for_1_and_49_nl = run_wen & (and_dcpl_47 | while_for_1_asn_itm_1_mx0c1);
  assign while_for_1_mux_91_rmff = MUX_s_1_2_2(reg_while_for_1_asn_itm_1_tmp, while_for_1_while_for_1_while_for_1_or_1_nl,
      while_for_1_and_49_nl);
  assign while_and_11_nl = run_wen & (and_dcpl_47 | while_stage_v_2_mx1c1);
  assign while_mux_4_rmff = MUX_s_1_2_2(reg_while_stage_v_2_tmp, (~ while_stage_v_2_mx1c1),
      while_and_11_nl);
  assign or_22_cse = (~ reg_while_for_1_asn_itm_1_tmp) | sync1_Pop_mioi_bawt;
  assign while_for_and_cse = run_wen & mux_tmp_79;
  assign operator_32_false_operator_32_false_mux_nl = MUX_s_1_2_2(operator_32_false_less_tmp,
      operator_32_false_slc_33_svs_st, operator_32_false_slc_33_svs_st_1_mx0c1);
  assign operator_32_false_and_nl = run_wen & ((and_tmp_18 & (~ (lfst_exit_while_for_1_lpi_1_dfm_1[1]))
      & reg_while_stage_v_1_tmp) | operator_32_false_slc_33_svs_st_1_mx0c1);
  assign operator_32_false_mux_1_rmff = MUX_s_1_2_2(reg_operator_32_false_slc_33_svs_st_1_tmp,
      operator_32_false_operator_32_false_mux_nl, operator_32_false_and_nl);
  assign or_231_cse = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]) | (~ reg_operator_32_false_slc_33_svs_st_1_tmp)
      | dma_read_chnl_Pop_mioi_bawt;
  assign nor_62_cse = ~((while_for_1_for_1_while_for_1_for_1_mux1h_1_tmp!=2'b00));
  assign and_134_cse = or_tmp_128 & and_tmp_5;
  assign while_for_1_and_51_cse = run_wen & (~ or_dcpl_97);
  assign while_for_1_mux_90_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp,
      lfst_exit_while_for_1_lpi_1_dfm_1, while_for_1_and_51_cse);
  assign while_for_1_mux_89_rmff = MUX_s_1_2_2(reg_while_for_1_asn_itm_2_tmp, reg_while_for_1_asn_itm_1_tmp,
      while_for_1_and_51_cse);
  assign or_cse = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10) | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp
      | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp!=2'b10) | (~ reg_operator_32_true_2_slc_32_svs_st_1_tmp)
      | audio_in_Push_mioi_bawt;
  assign while_and_12_nl = run_wen & ((reg_while_stage_v_2_tmp & and_tmp_14) | while_stage_v_3_mx1c1);
  assign while_mux_rmff = MUX_s_1_2_2(reg_while_stage_v_3_tmp, (~ while_stage_v_3_mx1c1),
      while_and_12_nl);
  assign operator_32_true_2_operator_32_true_2_mux_nl = MUX_s_1_2_2(operator_32_true_2_less_tmp,
      operator_32_true_2_slc_32_svs_st, operator_32_true_2_slc_32_svs_st_1_mx0c1);
  assign operator_32_true_2_and_nl = run_wen & ((and_dcpl_23 & and_dcpl_20 & reg_while_stage_v_2_tmp
      & (~ while_for_1_asn_sft_lpi_1_dfm_st_1) & (lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1==2'b10))
      | operator_32_true_2_slc_32_svs_st_1_mx0c1);
  assign operator_32_true_2_mux_rmff = MUX_s_1_2_2(reg_operator_32_true_2_slc_32_svs_st_1_tmp,
      operator_32_true_2_operator_32_true_2_mux_nl, operator_32_true_2_and_nl);
  assign while_for_1_for_1_mux_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp,
      lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1, while_for_1_i_and_cse);
  assign while_for_1_mux_88_rmff = MUX_s_1_2_2(reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp,
      while_for_1_asn_sft_lpi_1_dfm_st_1, while_for_1_i_and_cse);
  assign while_for_1_for_and_28_cse = run_wen & (~(or_dcpl_15 | (~ (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp[1]))
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (~ operator_32_true_1_slc_32_svs_1)
      | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])));
  assign or_50_cse = dma_read_ctrl_Push_mioi_bawt | (~ reg_while_for_1_asn_itm_2_tmp);
  assign operator_32_true_1_and_cse = run_wen & or_dcpl_17;
  assign while_for_1_mux_87_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp,
      reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp, while_for_1_i_and_cse);
  assign or_85_nl = and_124_cse | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_29_nl = MUX_s_1_2_2(not_tmp_55, or_85_nl, while_for_1_for_and_27_psp);
  assign or_87_nl = (~ mux_29_nl) | or_dcpl_32;
  assign mem_tmp_15_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_15_sva, or_87_nl);
  assign or_94_nl = (~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0000))) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_34_nl = MUX_s_1_2_2(not_tmp_58, or_94_nl, while_for_1_for_and_26_psp);
  assign or_96_nl = (~ mux_34_nl) | or_dcpl_32;
  assign mem_tmp_0_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_0_sva, or_96_nl);
  assign or_100_nl = ((while_for_1_for_j_lpi_1_dfm_2_3_0==4'b1110)) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_37_nl = MUX_s_1_2_2(not_tmp_61, or_100_nl, while_for_1_for_and_25_psp);
  assign or_102_nl = (~ mux_37_nl) | or_dcpl_32;
  assign mem_tmp_14_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_14_sva, or_102_nl);
  assign or_105_nl = nor_9_cse | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_40_nl = MUX_s_1_2_2(not_tmp_64, or_105_nl, while_for_1_for_and_24_psp);
  assign or_107_nl = (~ mux_40_nl) | or_dcpl_32;
  assign mem_tmp_1_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_1_sva, or_107_nl);
  assign or_109_nl = and_127_cse | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_43_nl = MUX_s_1_2_2(not_tmp_67, or_109_nl, while_for_1_for_and_23_psp);
  assign or_111_nl = (~ mux_43_nl) | or_dcpl_32;
  assign mem_tmp_13_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_13_sva, or_111_nl);
  assign or_114_nl = (~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0010))) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_46_nl = MUX_s_1_2_2(not_tmp_70, or_114_nl, while_for_1_for_and_22_psp);
  assign or_116_nl = (~ mux_46_nl) | or_dcpl_32;
  assign mem_tmp_2_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_2_sva, or_116_nl);
  assign or_120_nl = (~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1100))) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_49_nl = MUX_s_1_2_2(not_tmp_73, or_120_nl, while_for_1_for_and_21_psp);
  assign or_122_nl = (~ mux_49_nl) | or_dcpl_32;
  assign mem_tmp_12_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_12_sva, or_122_nl);
  assign or_125_nl = nor_13_cse | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_52_nl = MUX_s_1_2_2(not_tmp_76, or_125_nl, while_for_1_for_and_20_psp);
  assign or_127_nl = (~ mux_52_nl) | or_dcpl_32;
  assign mem_tmp_3_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_3_sva, or_127_nl);
  assign or_129_nl = and_129_cse | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_55_nl = MUX_s_1_2_2(not_tmp_79, or_129_nl, while_for_1_for_and_19_psp);
  assign or_131_nl = (~ mux_55_nl) | or_dcpl_32;
  assign mem_tmp_11_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_11_sva, or_131_nl);
  assign or_134_nl = (~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0100))) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_58_nl = MUX_s_1_2_2(not_tmp_82, or_134_nl, while_for_1_for_and_18_psp);
  assign or_136_nl = (~ mux_58_nl) | or_dcpl_32;
  assign mem_tmp_4_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_4_sva, or_136_nl);
  assign or_140_nl = (~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1010))) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_61_nl = MUX_s_1_2_2(not_tmp_85, or_140_nl, while_for_1_for_and_17_psp);
  assign or_142_nl = (~ mux_61_nl) | or_dcpl_32;
  assign mem_tmp_10_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_10_sva, or_142_nl);
  assign or_145_nl = nor_17_cse | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_64_nl = MUX_s_1_2_2(not_tmp_88, or_145_nl, while_for_1_for_and_16_psp);
  assign or_147_nl = (~ mux_64_nl) | or_dcpl_32;
  assign mem_tmp_5_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_5_sva, or_147_nl);
  assign or_149_nl = nor_19_cse | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_67_nl = MUX_s_1_2_2(not_tmp_91, or_149_nl, while_for_1_for_and_15_psp);
  assign or_151_nl = (~ mux_67_nl) | or_dcpl_32;
  assign mem_tmp_9_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_9_sva, or_151_nl);
  assign or_154_nl = (~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0110))) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_70_nl = MUX_s_1_2_2(not_tmp_94, or_154_nl, while_for_1_for_and_14_psp);
  assign or_156_nl = (~ mux_70_nl) | or_dcpl_32;
  assign mem_tmp_6_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_6_sva, or_156_nl);
  assign or_160_nl = (~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1000))) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_73_nl = MUX_s_1_2_2(not_tmp_97, or_160_nl, while_for_1_for_and_13_psp);
  assign or_162_nl = (~ mux_73_nl) | or_dcpl_32;
  assign mem_tmp_8_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_8_sva, or_162_nl);
  assign or_165_nl = and_131_cse | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_76_nl = MUX_s_1_2_2(not_tmp_100, or_165_nl, while_for_1_for_and_12_psp);
  assign or_167_nl = (~ mux_76_nl) | or_dcpl_32;
  assign mem_tmp_7_sva_mx0 = MUX_v_64_2_2(mem_rsci_q_d, mem_tmp_7_sva, or_167_nl);
  assign nl_while_for_1_acc_1_nl = while_for_1_i_lpi_1 + 32'b00000000000000000000000000000001;
  assign while_for_1_acc_1_nl = nl_while_for_1_acc_1_nl[31:0];
  assign while_for_1_and_47_nl = (~ while_for_1_and_44_tmp_1) & while_for_1_equal_tmp_1;
  assign while_for_1_and_48_nl = while_for_1_and_44_tmp_1 & while_for_1_equal_tmp_1;
  assign while_for_1_i_lpi_1_mx0w0 = MUX1HOT_v_32_3_2(while_for_1_i_lpi_1_dfm_1,
      while_for_1_i_lpi_1, while_for_1_acc_1_nl, {(~ while_for_1_equal_tmp_1) , while_for_1_and_47_nl
      , while_for_1_and_48_nl});
  assign while_for_1_i_lpi_1_mx0 = MUX_v_32_2_2(while_for_1_i_lpi_1, while_for_1_i_lpi_1_mx0w0,
      reg_while_stage_v_2_tmp);
  assign operator_32_true_less_itm = $signed(while_for_1_i_lpi_1_mx0) < $signed((cfg_block_size[31:2]));
  assign exit_while_for_1_lpi_1_dfm_1 = (~ operator_32_true_less_itm) & exitL_exitL_exit_while_for_1_for_1_lpi_1_mx0;
  assign and_63_nl = while_for_1_equal_tmp_1 & reg_while_stage_v_2_tmp;
  assign and_64_nl = (~ while_for_1_equal_tmp_1) & reg_while_stage_v_2_tmp;
  assign exitL_exitL_exit_while_for_1_for_1_lpi_1_mx0 = MUX1HOT_s_1_3_2(exitL_exit_while_for_1_for_1_lpi_1_dfm_1,
      while_for_while_for_or_itm_1, exitL_exitL_exit_while_for_1_for_1_lpi_1, {and_63_nl
      , and_64_nl , (~ reg_while_stage_v_2_tmp)});
  assign lfst_exitL_exit_while_for_1_for_1_lpi_1_mx0 = MUX_s_1_2_2((~ exitL_exit_while_for_1_for_1_lpi_1_dfm_1),
      lfst_exitL_exit_while_for_1_for_1_lpi_1, or_dcpl_92);
  assign exitL_exit_while_for_1_sva_mx0w0 = ~((while_for_1_while_for_1_mux1h_2_tmp!=2'b00));
  assign exitL_exit_while_for_1_sva_mx0 = exitL_exit_while_for_1_sva_mx0w0 | (~ reg_while_stage_v_1_tmp);
  assign operator_32_false_less_tmp = $signed(while_for_i_lpi_1_dfm_1) < $signed({1'b0,
      while_length_lpi_1_dfm_mx0});
  assign and_119_cse = (lfst_exit_while_for_1_lpi_1_dfm_1==2'b10);
  assign mux_148_nl = MUX_s_1_2_2((~ (lfst_exit_while_for_1_lpi_1_dfm_1[1])), (lfst_exit_while_for_1_lpi_1_dfm_1[1]),
      operator_32_false_less_tmp);
  assign or_282_nl = mux_148_nl | and_119_cse;
  assign while_for_i_mux_1_nl = MUX_v_32_2_2(while_for_i_sva_1_1, while_for_i_lpi_1_dfm_1,
      or_282_nl);
  assign while_for_1_not_104_nl = ~ exitL_exit_while_for_1_sva_mx0;
  assign while_for_i_lpi_1_dfm_mx0w0 = MUX_v_32_2_2(32'b00000000000000000000000000000000,
      while_for_i_mux_1_nl, while_for_1_not_104_nl);
  assign while_length_lpi_1_dfm_mx0 = MUX_v_32_2_2(while_length_lpi_1_dfm, while_length_sva_1,
      while_for_1_asn_1_itm_1);
  assign lfst_exitL_exit_while_for_1_for_1_lpi_1_dfm_1 = lfst_exitL_exit_while_for_1_for_1_lpi_1_mx0
      & (~ exitL_exitL_exit_while_for_1_for_1_lpi_1_mx0);
  assign while_for_1_not_5_nl = ~ exit_while_for_1_lpi_1_dfm_1;
  assign while_for_1_while_for_1_and_6_nl = MUX_v_2_2_2(2'b00, lfst_exit_while_for_1_lpi_1_dfm_1,
      while_for_1_not_5_nl);
  assign while_for_1_while_for_1_nor_4_nl = ~(operator_32_false_less_tmp | and_119_cse);
  assign while_for_1_and_22_nl = operator_32_false_less_tmp & (~ and_119_cse);
  assign while_for_1_while_for_1_mux1h_2_tmp = MUX1HOT_v_2_3_2(2'b10, 2'b01, while_for_1_while_for_1_and_6_nl,
      {while_for_1_while_for_1_nor_4_nl , while_for_1_and_22_nl , and_119_cse});
  assign nl_while_for_1_for_1_k_2_0_sva_2 = 3'b001 + conv_u2s_2_3(while_for_1_for_1_k_2_0_lpi_1_1_0);
  assign while_for_1_for_1_k_2_0_sva_2 = nl_while_for_1_for_1_k_2_0_sva_2[2:0];
  assign operator_32_true_2_less_tmp = $signed(while_for_1_for_1_for_j_lpi_1) < $signed(cfg_src_num);
  assign while_for_1_for_1_equal_tmp_1 = (lfst_exit_while_for_1_for_1_lpi_1_dfm_1==2'b10);
  assign while_for_1_and_44_tmp_1 = (while_for_1_for_1_k_2_0_sva_2[2]) & (~ operator_32_true_2_less_tmp)
      & while_for_1_for_1_equal_tmp_1 & (~ while_for_1_asn_sft_lpi_1_dfm_1);
  assign exitL_exit_while_for_1_for_1_lpi_1_dfm_1 = nor_62_cse | while_for_1_asn_sft_lpi_1_dfm_1;
  assign and_147_tmp = ((~ (while_for_1_for_1_k_2_0_sva_2[2])) | operator_32_true_2_less_tmp)
      & while_for_1_for_1_equal_tmp_1;
  assign nor_74_nl = ~(operator_32_true_1_less_tmp | while_for_1_for_1_equal_tmp_1);
  assign while_for_1_for_1_and_3_nl = while_for_1_for_1_equal_tmp_1 & (~ and_147_tmp);
  assign while_for_1_for_1_while_for_1_for_1_mux1h_1_tmp = MUX1HOT_v_2_4_2(2'b10,
      2'b01, (signext_2_1(~ (while_for_1_for_1_k_2_0_sva_2[2]))), lfst_exit_while_for_1_for_1_lpi_1_dfm_1,
      {nor_74_nl , while_for_1_for_1_and_tmp_1 , while_for_1_for_1_and_3_nl , and_147_tmp});
  assign operator_32_true_1_less_tmp = $signed(while_for_1_for_j_lpi_1_dfm_1) < $signed(cfg_src_num);
  assign while_for_1_not_106_nl = ~ sfi_exit_while_for_1_lpi_1_dfm_1;
  assign lfst_exit_while_for_1_for_1_lpi_1_dfm_mx0w0 = MUX_v_2_2_2(2'b00, lfst_exit_while_for_1_for_1_lpi_1_mx0,
      while_for_1_not_106_nl);
  assign while_for_1_and_42_rgt = (~ operator_32_true_2_less_tmp) & while_for_1_for_1_equal_tmp_1
      & (~ while_for_1_asn_sft_lpi_1_dfm_1) & while_for_1_equal_tmp_1;
  assign while_for_1_for_1_and_2_rgt = operator_32_true_2_less_tmp & while_for_1_for_1_equal_tmp_1
      & (~ while_for_1_asn_sft_lpi_1_dfm_1) & while_for_1_equal_tmp_1;
  assign or_200_cse = (while_for_1_for_1_while_for_1_for_1_mux1h_1_tmp!=2'b00);
  assign mux_85_nl = MUX_s_1_2_2(or_tmp_109, or_dcpl_81, while_for_1_equal_tmp_1);
  assign mux_86_nl = MUX_s_1_2_2(or_tmp_110, mux_85_nl, reg_while_stage_v_2_tmp);
  assign mux_88_nl = MUX_s_1_2_2(mux_tmp_84, mux_86_nl, or_200_cse);
  assign mux_89_nl = MUX_s_1_2_2(mux_88_nl, mux_tmp_84, while_for_1_asn_sft_lpi_1_dfm_st_1);
  assign mux_90_nl = MUX_s_1_2_2(mux_89_nl, mux_tmp_84, while_for_1_asn_sft_lpi_1_dfm_1);
  assign while_for_1_asn_sft_lpi_1_dfm_st_mx0w0 = MUX_s_1_2_2(while_for_1_asn_sft_lpi_1,
      exit_while_for_1_lpi_1_dfm_1, mux_90_nl);
  assign while_for_1_for_and_stg_2_7_sva_1 = while_for_1_for_and_stg_1_3_sva_1 &
      (while_for_1_for_j_lpi_1_dfm_2_3_0[2]);
  assign while_for_1_for_and_stg_2_0_sva_1 = while_for_1_for_and_stg_1_0_sva_1 &
      (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[2]));
  assign while_for_1_for_and_stg_2_6_sva_1 = while_for_1_for_and_stg_1_2_sva_1 &
      (while_for_1_for_j_lpi_1_dfm_2_3_0[2]);
  assign while_for_1_for_and_stg_2_1_sva_1 = while_for_1_for_and_stg_1_1_sva_1 &
      (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[2]));
  assign while_for_1_for_and_stg_2_5_sva_1 = while_for_1_for_and_stg_1_1_sva_1 &
      (while_for_1_for_j_lpi_1_dfm_2_3_0[2]);
  assign while_for_1_for_and_stg_2_2_sva_1 = while_for_1_for_and_stg_1_2_sva_1 &
      (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[2]));
  assign while_for_1_for_and_stg_2_4_sva_1 = while_for_1_for_and_stg_1_0_sva_1 &
      (while_for_1_for_j_lpi_1_dfm_2_3_0[2]);
  assign while_for_1_for_and_stg_2_3_sva_1 = while_for_1_for_and_stg_1_3_sva_1 &
      (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[2]));
  assign while_for_1_for_and_stg_1_0_sva_1 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0[1:0]!=2'b00));
  assign while_for_1_for_and_stg_1_1_sva_1 = (while_for_1_for_j_lpi_1_dfm_2_3_0[1:0]==2'b01);
  assign while_for_1_for_and_stg_1_2_sva_1 = (while_for_1_for_j_lpi_1_dfm_2_3_0[1:0]==2'b10);
  assign while_for_1_for_and_stg_1_3_sva_1 = (while_for_1_for_j_lpi_1_dfm_2_3_0[1:0]==2'b11);
  assign while_while_or_2_cse_1 = sync1_Pop_mioi_bawt | (~(reg_while_for_1_asn_itm_1_tmp
      & reg_while_stage_v_1_tmp));
  assign while_or_1_cse_1 = dma_read_ctrl_Push_mioi_bawt | (~(reg_while_for_1_asn_itm_2_tmp
      & reg_while_stage_v_2_tmp));
  assign while_or_2_cse_1 = dma_read_chnl_Pop_mioi_bawt | (~(reg_operator_32_false_slc_33_svs_st_1_tmp
      & (((reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp==2'b01)) | (~((reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp!=2'b00))))
      & reg_while_stage_v_2_tmp));
  assign while_while_or_cse_1 = audio_in_Push_mioi_bawt | (~(reg_operator_32_true_2_slc_32_svs_st_1_tmp
      & (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp==2'b10) & (~ reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp)
      & (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp==2'b10) & reg_while_stage_v_3_tmp));
  assign sfi_exit_while_for_1_lpi_1_dfm_1 = sfi_exit_while_for_1_lpi_1 | (~ lfst_exitL_exit_while_for_1_for_1_lpi_1_dfm_1);
  assign or_280_nl = or_dcpl_92 | while_for_1_asn_sft_lpi_1_dfm_1;
  assign lfst_exit_while_for_1_for_1_lpi_1_mx0 = MUX_v_2_2_2(while_for_1_for_1_while_for_1_for_1_mux1h_1_tmp,
      lfst_exit_while_for_1_for_1_lpi_1, or_280_nl);
  assign while_for_1_or_18_nl = (~ while_for_1_equal_tmp_1) | while_for_1_asn_sft_lpi_1_dfm_1;
  assign while_for_1_and_46_nl = (~(while_for_1_for_1_and_tmp_1 | while_for_1_asn_sft_lpi_1_dfm_1))
      & while_for_1_equal_tmp_1;
  assign while_for_1_and_25_nl = while_for_1_for_1_and_tmp_1 & (~ while_for_1_asn_sft_lpi_1_dfm_1)
      & while_for_1_equal_tmp_1;
  assign while_for_1_for_j_lpi_1_mx0w0 = MUX1HOT_v_32_3_2(while_for_1_for_j_lpi_1,
      while_for_1_for_j_lpi_1_dfm_1, z_out, {while_for_1_or_18_nl , while_for_1_and_46_nl
      , while_for_1_and_25_nl});
  assign while_for_1_for_1_and_tmp_1 = operator_32_true_1_less_tmp & (~ while_for_1_for_1_equal_tmp_1);
  assign while_for_1_asn_70 = (~(while_for_1_for_1_equal_tmp_1 | while_for_1_asn_sft_lpi_1_dfm_1))
      & while_for_1_equal_tmp_1;
  assign or_tmp_3 = audio_in_Push_mioi_bawt | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp!=2'b10)
      | (~ reg_operator_32_true_2_slc_32_svs_st_1_tmp) | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp
      | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10) | (~ reg_while_stage_v_3_tmp);
  assign and_tmp_5 = or_50_cse & or_tmp_3;
  assign and_12_cse = (~ dma_read_ctrl_Push_mioi_bawt) & reg_while_for_1_asn_itm_2_tmp;
  assign and_dcpl_20 = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp==2'b10);
  assign or_dcpl_15 = (~ reg_while_stage_v_3_tmp) | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp[0]);
  assign or_dcpl_17 = or_dcpl_15 | (~ (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp[1]))
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (~ reg_operator_32_true_2_slc_32_svs_st_1_tmp)
      | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp!=2'b10) | audio_in_Push_mioi_bawt;
  assign and_dcpl_23 = or_dcpl_17 & or_50_cse;
  assign or_dcpl_19 = while_for_1_asn_sft_lpi_1_dfm_st_1 | (~ (lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1[1]));
  assign or_dcpl_20 = or_dcpl_19 | (lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1[0])
      | (~ operator_32_true_2_less_tmp);
  assign or_dcpl_21 = ~((reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]) & reg_while_stage_v_2_tmp);
  assign or_dcpl_27 = (~ or_dcpl_17) | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]);
  assign or_dcpl_32 = (~(reg_while_stage_v_3_tmp & operator_32_true_1_slc_32_svs_1
      & while_for_1_equal_tmp_2)) | while_for_1_asn_sft_lpi_1_dfm_2 | while_for_1_for_1_equal_tmp_1_1;
  assign not_tmp_55 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1111) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign or_91_nl = reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign or_90_nl = (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[0]) | (~
      reg_operator_32_true_2_slc_32_svs_st_1_tmp) | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp
      | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_30_nl = MUX_s_1_2_2(or_91_nl, or_90_nl, reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign or_89_nl = (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1]) | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp
      | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10);
  assign mux_tmp_31 = MUX_s_1_2_2(mux_30_nl, or_89_nl, audio_in_Push_mioi_bawt);
  assign not_tmp_58 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0000) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_61 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1110) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_64 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0001) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_67 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1101) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_70 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0010) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_73 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1100) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_76 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0011) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_79 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1011) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_82 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0100) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_85 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1010) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_88 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0101) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_91 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1001) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_94 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0110) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_97 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1000) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign not_tmp_100 = ~((while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0111) | (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp!=2'b10));
  assign and_tmp_13 = or_231_cse & or_dcpl_17;
  assign and_tmp_14 = or_50_cse & and_tmp_13;
  assign mux_tmp_79 = MUX_s_1_2_2(or_dcpl_17, and_tmp_14, reg_while_stage_v_2_tmp);
  assign or_dcpl_66 = ~(sync1_Pop_mioi_bawt & reg_while_for_1_asn_itm_1_tmp & reg_while_stage_v_1_tmp);
  assign or_dcpl_67 = (~ mux_tmp_79) | or_dcpl_66;
  assign and_dcpl_42 = (~ dma_read_chnl_Pop_mioi_bawt) & reg_operator_32_false_slc_33_svs_st_1_tmp
      & (~ (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]));
  assign or_dcpl_72 = and_12_cse | (~ reg_while_stage_v_2_tmp);
  assign not_tmp_109 = ~(reg_operator_32_false_slc_33_svs_st_1_tmp & dma_read_chnl_Pop_mioi_bawt
      & or_dcpl_17);
  assign or_dcpl_81 = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp!=2'b10);
  assign or_dcpl_85 = (~ or_dcpl_17) | and_dcpl_42;
  assign or_dcpl_86 = or_dcpl_85 | or_dcpl_72;
  assign and_dcpl_43 = (~ sync1_Pop_mioi_bawt) & reg_while_for_1_asn_itm_1_tmp;
  assign or_tmp_109 = while_for_while_for_or_itm_1 | (~ lfst_exitL_exit_while_for_1_for_1_lpi_1);
  assign or_tmp_110 = exitL_exitL_exit_while_for_1_for_1_lpi_1 | (~ lfst_exitL_exit_while_for_1_for_1_lpi_1);
  assign mux_83_nl = MUX_s_1_2_2(or_tmp_109, and_dcpl_20, while_for_1_equal_tmp_1);
  assign mux_tmp_84 = MUX_s_1_2_2(or_tmp_110, mux_83_nl, reg_while_stage_v_2_tmp);
  assign or_dcpl_89 = and_dcpl_43 | (~ reg_while_stage_v_1_tmp);
  assign or_dcpl_92 = ~(while_for_1_equal_tmp_1 & reg_while_stage_v_2_tmp);
  assign and_tmp_18 = or_22_cse & mux_tmp_79;
  assign or_dcpl_97 = (~ mux_tmp_79) | or_dcpl_89;
  assign and_dcpl_47 = and_tmp_18 & reg_while_stage_v_1_tmp;
  assign or_tmp_128 = (~ reg_operator_32_false_slc_33_svs_st_1_tmp) | dma_read_chnl_Pop_mioi_bawt;
  assign or_tmp_146 = ~(operator_32_true_less_itm & or_dcpl_17);
  assign and_tmp_32 = or_tmp_128 & or_dcpl_17;
  assign or_tmp_149 = while_for_1_asn_sft_lpi_1 | (~ or_dcpl_17);
  assign or_tmp_150 = while_for_1_asn_sft_lpi_1 | (~ and_tmp_32);
  assign mux_tmp_109 = MUX_s_1_2_2(or_tmp_150, or_tmp_149, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mux_110_nl = MUX_s_1_2_2(or_dcpl_85, mux_tmp_109, lfst_exitL_exit_while_for_1_for_1_lpi_1);
  assign nand_38_nl = ~(operator_32_true_less_itm & and_tmp_32);
  assign mux_105_nl = MUX_s_1_2_2(nand_38_nl, or_tmp_146, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mux_tmp_111 = MUX_s_1_2_2(mux_110_nl, mux_105_nl, while_for_while_for_or_itm_1);
  assign nor_tmp_24 = lfst_exitL_exit_while_for_1_for_1_lpi_1 & while_for_1_asn_sft_lpi_1;
  assign or_252_nl = nor_tmp_24 | (~ or_dcpl_17);
  assign mux_tmp_113 = MUX_s_1_2_2(or_252_nl, or_tmp_146, exitL_exitL_exit_while_for_1_for_1_lpi_1);
  assign mux_106_nl = MUX_s_1_2_2(or_tmp_146, or_tmp_149, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]);
  assign mux_107_nl = MUX_s_1_2_2(or_tmp_150, mux_106_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mux_112_nl = MUX_s_1_2_2(mux_tmp_111, mux_107_nl, while_for_1_equal_tmp_1);
  assign nand_5_nl = ~(or_50_cse & (~ mux_112_nl));
  assign mux_tmp_114 = MUX_s_1_2_2(mux_tmp_113, nand_5_nl, reg_while_stage_v_2_tmp);
  assign mux_118_nl = MUX_s_1_2_2(mux_tmp_111, mux_tmp_109, while_for_1_equal_tmp_1);
  assign nand_6_nl = ~(or_50_cse & (~ mux_118_nl));
  assign mux_119_nl = MUX_s_1_2_2(mux_tmp_113, nand_6_nl, reg_while_stage_v_2_tmp);
  assign mux_121_nl = MUX_s_1_2_2(mux_tmp_114, mux_119_nl, or_200_cse);
  assign mux_122_nl = MUX_s_1_2_2(mux_121_nl, mux_tmp_114, while_for_1_asn_sft_lpi_1_dfm_st_1);
  assign mux_tmp_123 = MUX_s_1_2_2(mux_122_nl, mux_tmp_114, while_for_1_asn_sft_lpi_1_dfm_1);
  assign and_tmp_33 = (~ operator_32_true_less_itm) & or_dcpl_17;
  assign and_tmp_35 = while_for_1_asn_sft_lpi_1 & or_dcpl_17;
  assign and_tmp_36 = while_for_1_asn_sft_lpi_1 & and_tmp_32;
  assign mux_tmp_128 = MUX_s_1_2_2(and_tmp_36, and_tmp_35, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign and_97_nl = lfst_exitL_exit_while_for_1_for_1_lpi_1 & mux_tmp_128;
  assign and_94_nl = (~ operator_32_true_less_itm) & and_tmp_32;
  assign mux_124_nl = MUX_s_1_2_2(and_94_nl, and_tmp_33, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mux_tmp_129 = MUX_s_1_2_2(and_97_nl, mux_124_nl, while_for_while_for_or_itm_1);
  assign and_99_nl = nor_tmp_24 & or_dcpl_17;
  assign mux_tmp_131 = MUX_s_1_2_2(and_99_nl, and_tmp_33, exitL_exitL_exit_while_for_1_for_1_lpi_1);
  assign mux_125_nl = MUX_s_1_2_2(and_tmp_33, and_tmp_35, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]);
  assign mux_126_nl = MUX_s_1_2_2(and_tmp_36, mux_125_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mux_130_nl = MUX_s_1_2_2(mux_tmp_129, mux_126_nl, while_for_1_equal_tmp_1);
  assign and_98_nl = or_50_cse & mux_130_nl;
  assign mux_tmp_132 = MUX_s_1_2_2(mux_tmp_131, and_98_nl, reg_while_stage_v_2_tmp);
  assign or_dcpl_101 = (lfst_exit_while_for_1_lpi_1_dfm_1!=2'b10);
  assign and_dcpl_67 = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp==2'b10) & (~
      reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp) & reg_operator_32_true_2_slc_32_svs_st_1_tmp
      & (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp==2'b10) & (~ audio_in_Push_mioi_bawt);
  assign audio_in_Push_mioi_iswt0_mx0c1 = (and_12_cse | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0])
      | or_dcpl_21 | or_dcpl_20) & reg_while_stage_v_3_tmp & (reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp==2'b10)
      & (~ reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp) & reg_operator_32_true_2_slc_32_svs_st_1_tmp
      & (reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp==2'b10) & audio_in_Push_mioi_bawt;
  assign dma_read_ctrl_Push_mioi_iswt0_mx0c1 = and_tmp_13 & dma_read_ctrl_Push_mioi_bawt
      & reg_while_for_1_asn_itm_2_tmp & reg_while_stage_v_2_tmp & or_dcpl_66;
  assign while_for_1_asn_itm_1_mx0c1 = mux_tmp_79 & (~ reg_while_stage_v_1_tmp);
  assign nor_61_nl = ~(or_22_cse | (~ or_dcpl_17));
  assign mux_92_nl = MUX_s_1_2_2(or_dcpl_17, nor_61_nl, reg_while_stage_v_1_tmp);
  assign while_stage_v_2_mx1c1 = mux_92_nl & or_231_cse & or_50_cse & reg_while_stage_v_2_tmp;
  assign operator_32_false_slc_33_svs_st_1_mx0c1 = and_tmp_18 & (lfst_exit_while_for_1_lpi_1_dfm_1[1])
      & reg_while_stage_v_1_tmp;
  assign and_88_nl = or_tmp_110 & or_tmp_3;
  assign and_87_nl = or_tmp_109 & or_231_cse & and_tmp_5;
  assign and_83_nl = exitL_exit_while_for_1_for_1_lpi_1_dfm_1 & and_tmp_5;
  assign and_82_nl = while_for_1_asn_sft_lpi_1_dfm_1 & and_tmp_5;
  assign mux_100_nl = MUX_s_1_2_2(and_83_nl, and_82_nl, while_for_1_asn_sft_lpi_1_dfm_st_1);
  assign mux_101_nl = MUX_s_1_2_2(mux_100_nl, and_tmp_5, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]);
  assign mux_102_nl = MUX_s_1_2_2(and_134_cse, mux_101_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mux_103_nl = MUX_s_1_2_2(and_87_nl, mux_102_nl, while_for_1_equal_tmp_1);
  assign while_for_1_asn_sft_lpi_1_dfm_1_mx0c1 = MUX_s_1_2_2(and_88_nl, mux_103_nl,
      reg_while_stage_v_2_tmp);
  assign mux_136_nl = MUX_s_1_2_2(mux_tmp_129, mux_tmp_128, while_for_1_equal_tmp_1);
  assign and_100_nl = or_50_cse & mux_136_nl;
  assign mux_137_nl = MUX_s_1_2_2(mux_tmp_131, and_100_nl, reg_while_stage_v_2_tmp);
  assign mux_139_nl = MUX_s_1_2_2(mux_tmp_132, mux_137_nl, or_200_cse);
  assign mux_140_nl = MUX_s_1_2_2(mux_139_nl, mux_tmp_132, while_for_1_asn_sft_lpi_1_dfm_st_1);
  assign mux_141_nl = MUX_s_1_2_2(mux_140_nl, mux_tmp_132, while_for_1_asn_sft_lpi_1_dfm_1);
  assign nor_4_nl = ~((lfst_exit_while_for_1_lpi_1_dfm_1!=2'b10));
  assign lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1_mx0c1 = MUX_s_1_2_2(mux_tmp_79,
      mux_141_nl, nor_4_nl);
  assign or_264_nl = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]) | (~ reg_operator_32_false_slc_33_svs_st_1_tmp)
      | dma_read_chnl_Pop_mioi_bawt | and_dcpl_67;
  assign mux_143_nl = MUX_s_1_2_2(and_dcpl_67, or_264_nl, or_50_cse);
  assign mux_144_nl = MUX_s_1_2_2(and_dcpl_67, mux_143_nl, reg_while_stage_v_2_tmp);
  assign while_stage_v_3_mx1c1 = (~ mux_144_nl) & reg_while_stage_v_3_tmp;
  assign and_116_nl = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]) & or_dcpl_17;
  assign mux_146_nl = MUX_s_1_2_2(and_tmp_32, and_116_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign or_268_nl = (lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1!=2'b10) | while_for_1_asn_sft_lpi_1_dfm_st_1;
  assign mux_147_nl = MUX_s_1_2_2(mux_146_nl, and_tmp_13, or_268_nl);
  assign operator_32_true_2_slc_32_svs_st_1_mx0c1 = mux_147_nl & or_50_cse & reg_while_stage_v_2_tmp;
  assign operator_32_true_acc_2_cmp_a = while_for_1_for_j_lpi_1_dfm_1[12:0];
  assign operator_32_true_acc_2_cmp_b = cfg_block_size[14:2];
  assign operator_32_true_acc_2_cmp_c = while_for_1_i_lpi_1[12:0];
  assign mem_rsci_d_d = dma_read_chnl_Pop_mioi_idat_mxwt;
  assign mem_rsci_wadr_d = while_for_slc_while_for_i_12_0_itm_1;
  assign mem_rsci_we_d_pff = sync1_read_reset_check_reset_while_for_nor_2_rmff;
  assign mem_rsci_readA_r_ram_ir_internal_RMASK_B_d = ~((~ or_dcpl_17) | or_dcpl_81
      | and_12_cse | (~ reg_while_stage_v_2_tmp) | while_for_1_asn_sft_lpi_1_dfm_st_1
      | (lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1[1]) | (~ operator_32_true_1_less_tmp));
  assign or_dcpl_17_pff = (~ while_mux_rmff) | (while_for_1_mux_87_rmff!=2'b10) |
      while_for_1_mux_88_rmff | (~ operator_32_true_2_mux_rmff) | (while_for_1_for_1_mux_rmff!=2'b10)
      | audio_in_Push_mioi_bawt_iff;
  assign and_138_nl = (dma_read_ctrl_Push_mioi_bawt_iff | (~ while_for_1_mux_89_rmff))
      & ((while_for_1_mux_90_rmff[1]) | (~ operator_32_false_mux_1_rmff) | dma_read_chnl_Pop_mioi_bawt_iff)
      & or_dcpl_17_pff;
  assign mux_tmp_79_pff = MUX_s_1_2_2(or_dcpl_17_pff, and_138_nl, while_mux_4_rmff);
  assign and_dcpl_42_pff = (~ dma_read_chnl_Pop_mioi_bawt_iff) & operator_32_false_mux_1_rmff
      & (~ (while_for_1_mux_90_rmff[1]));
  assign or_dcpl_72_pff = ~((~((~ dma_read_ctrl_Push_mioi_bawt_iff) & while_for_1_mux_89_rmff))
      & while_mux_4_rmff);
  assign while_while_or_2_cse_1_pff = sync1_Pop_mioi_bawt_iff | (~(while_for_1_mux_91_rmff
      & while_mux_6_rmff));
  assign while_or_1_cse_1_pff = dma_read_ctrl_Push_mioi_bawt_iff | (~(while_for_1_mux_89_rmff
      & while_mux_4_rmff));
  assign while_or_2_cse_1_pff = dma_read_chnl_Pop_mioi_bawt_iff | (~(operator_32_false_mux_1_rmff
      & (((while_for_1_mux_90_rmff==2'b01)) | (~((while_for_1_mux_90_rmff!=2'b00))))
      & while_mux_4_rmff));
  assign while_while_or_cse_1_pff = audio_in_Push_mioi_bawt_iff | (~(operator_32_true_2_mux_rmff
      & (while_for_1_for_1_mux_rmff==2'b10) & (~ while_for_1_mux_88_rmff) & (while_for_1_mux_87_rmff==2'b10)
      & while_mux_rmff));
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_audio_in_Push_mioi_iswt0_tmp <= 1'b0;
      reg_dma_read_ctrl_Push_mioi_iswt0_tmp <= 1'b0;
      reg_dma_read_chnl_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_sync1_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_while_stage_v_1_tmp <= 1'b0;
      reg_while_for_1_asn_itm_1_tmp <= 1'b0;
      reg_while_stage_v_2_tmp <= 1'b0;
      reg_operator_32_false_slc_33_svs_st_1_tmp <= 1'b0;
      reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp <= 2'b00;
      reg_while_for_1_asn_itm_2_tmp <= 1'b0;
      reg_while_stage_v_3_tmp <= 1'b0;
      reg_operator_32_true_2_slc_32_svs_st_1_tmp <= 1'b0;
      reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp <= 2'b00;
      reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp <= 2'b00;
      run_wen <= 1'b1;
    end
    else begin
      reg_audio_in_Push_mioi_iswt0_tmp <= while_for_1_for_1_for_mux_rmff;
      reg_dma_read_ctrl_Push_mioi_iswt0_tmp <= while_mux_3_rmff;
      reg_dma_read_chnl_Pop_mioi_iswt0_tmp <= while_for_data_mux_rmff;
      reg_sync1_Pop_mioi_iswt0_tmp <= while_mux_5_rmff;
      reg_while_stage_v_1_tmp <= while_mux_6_rmff;
      reg_while_for_1_asn_itm_1_tmp <= while_for_1_mux_91_rmff;
      reg_while_stage_v_2_tmp <= while_mux_4_rmff;
      reg_operator_32_false_slc_33_svs_st_1_tmp <= operator_32_false_mux_1_rmff;
      reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp <= while_for_1_mux_90_rmff;
      reg_while_for_1_asn_itm_2_tmp <= while_for_1_mux_89_rmff;
      reg_while_stage_v_3_tmp <= while_mux_rmff;
      reg_operator_32_true_2_slc_32_svs_st_1_tmp <= operator_32_true_2_mux_rmff;
      reg_lfst_exit_while_for_1_for_1_lpi_1_dfm_st_2_tmp <= while_for_1_for_1_mux_rmff;
      reg_while_for_1_asn_sft_lpi_1_dfm_st_2_tmp <= while_for_1_mux_88_rmff;
      reg_lfst_exit_while_for_1_lpi_1_dfm_st_3_tmp <= while_for_1_mux_87_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_in_Push_mioi_idat <= 16'b0000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_27 | and_12_cse | or_dcpl_21 | or_dcpl_20)) )
        begin
      audio_in_Push_mioi_idat <= MUX_v_16_4_2(while_for_1_for_1_for_out_reg_mux_1_nl,
          while_for_1_for_1_for_out_reg_mux_2_nl, while_for_1_for_1_for_out_reg_mux_3_nl,
          while_for_1_for_1_for_out_reg_mux_4_nl, while_for_1_for_1_k_2_0_lpi_1_1_0);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_15_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_33_nl) | or_dcpl_32)) ) begin
      mem_tmp_15_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_0_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_36_nl) | or_dcpl_32)) ) begin
      mem_tmp_0_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_14_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_39_nl) | or_dcpl_32)) ) begin
      mem_tmp_14_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_1_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_42_nl) | or_dcpl_32)) ) begin
      mem_tmp_1_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_13_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_45_nl) | or_dcpl_32)) ) begin
      mem_tmp_13_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_2_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_48_nl) | or_dcpl_32)) ) begin
      mem_tmp_2_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_12_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_51_nl) | or_dcpl_32)) ) begin
      mem_tmp_12_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_3_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_54_nl) | or_dcpl_32)) ) begin
      mem_tmp_3_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_11_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_57_nl) | or_dcpl_32)) ) begin
      mem_tmp_11_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_4_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_60_nl) | or_dcpl_32)) ) begin
      mem_tmp_4_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_10_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_63_nl) | or_dcpl_32)) ) begin
      mem_tmp_10_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_5_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_66_nl) | or_dcpl_32)) ) begin
      mem_tmp_5_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_9_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_69_nl) | or_dcpl_32)) ) begin
      mem_tmp_9_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_6_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_72_nl) | or_dcpl_32)) ) begin
      mem_tmp_6_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_8_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_75_nl) | or_dcpl_32)) ) begin
      mem_tmp_8_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      mem_tmp_7_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ mux_78_nl) | or_dcpl_32)) ) begin
      mem_tmp_7_sva <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_ctrl_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      dma_read_ctrl_Push_mioi_idat_63_32 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_8_cse ) begin
      dma_read_ctrl_Push_mioi_idat_31_0 <= cfg_input_base;
      dma_read_ctrl_Push_mioi_idat_63_32 <= while_length_sva_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_lpi_1 <= 32'b00000000000000000000000000000000;
      while_for_1_for_j_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_i_and_cse ) begin
      while_for_1_i_lpi_1 <= while_for_1_i_lpi_1_mx0w0;
      while_for_1_for_j_lpi_1 <= while_for_1_for_j_lpi_1_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_1_lpi_1_dfm_1 <= 2'b00;
      while_length_sva_1 <= 32'b00000000000000000000000000000000;
      while_for_i_lpi_1_dfm_1 <= 32'b00000000000000000000000000000000;
      while_for_i_sva_1_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_56_cse ) begin
      lfst_exit_while_for_1_lpi_1_dfm_1 <= MUX_v_2_2_2(2'b00, while_for_1_while_for_1_mux1h_2_tmp,
          while_for_1_not_94_nl);
      while_length_sva_1 <= nl_while_length_sva_1[31:0];
      while_for_i_lpi_1_dfm_1 <= while_for_i_lpi_1_dfm_mx0w0;
      while_for_i_sva_1_1 <= nl_while_for_i_sva_1_1[31:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( run_wen & (~(lfst_exitL_exit_while_for_1_for_1_lpi_1_dfm_1 | (~ mux_tmp_79)
        | or_dcpl_89 | (lfst_exit_while_for_1_lpi_1_dfm_1!=2'b10))) ) begin
      while_for_1_asn_sft_lpi_1 <= exit_while_for_1_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exitL_exit_while_for_1_for_1_lpi_1 <= 1'b0;
      lfst_exitL_exit_while_for_1_for_1_lpi_1 <= 1'b0;
      while_length_lpi_1_dfm <= 32'b00000000000000000000000000000000;
      while_for_1_asn_1_itm_1 <= 1'b0;
      while_for_1_for_j_lpi_1_dfm_2_3_0 <= 4'b0000;
      lfst_exit_while_for_1_for_1_lpi_1 <= 2'b00;
    end
    else if ( run_wen ) begin
      exitL_exitL_exit_while_for_1_for_1_lpi_1 <= exitL_exitL_exit_while_for_1_for_1_lpi_1_mx0;
      lfst_exitL_exit_while_for_1_for_1_lpi_1 <= lfst_exitL_exit_while_for_1_for_1_lpi_1_mx0;
      while_length_lpi_1_dfm <= while_length_lpi_1_dfm_mx0;
      while_for_1_asn_1_itm_1 <= while_for_1_mux_86_nl | (~ reg_while_stage_v_1_tmp);
      while_for_1_for_j_lpi_1_dfm_2_3_0 <= while_for_1_for_j_lpi_1_dfm_1[3:0];
      lfst_exit_while_for_1_for_1_lpi_1 <= lfst_exit_while_for_1_for_1_lpi_1_mx0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_slc_while_for_i_12_0_itm_1 <= 13'b0000000000000;
      while_for_1_equal_tmp_1 <= 1'b0;
      while_for_1_for_j_lpi_1_dfm_1 <= 32'b00000000000000000000000000000000;
      while_for_1_asn_sft_lpi_1_dfm_st_1 <= 1'b0;
      while_for_while_for_or_itm_1 <= 1'b0;
      while_for_1_i_lpi_1_dfm_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_and_cse ) begin
      while_for_slc_while_for_i_12_0_itm_1 <= while_for_i_lpi_1_dfm_1[12:0];
      while_for_1_equal_tmp_1 <= and_119_cse;
      while_for_1_for_j_lpi_1_dfm_1 <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          while_for_1_for_j_mux_1_nl, while_for_1_not_98_nl);
      while_for_1_asn_sft_lpi_1_dfm_st_1 <= MUX_s_1_2_2(while_for_1_asn_sft_lpi_1_dfm_st_mx0w0,
          while_for_1_asn_sft_lpi_1_dfm_st, and_102_nl);
      while_for_while_for_or_itm_1 <= exitL_exitL_exit_while_for_1_for_1_lpi_1_mx0
          | (~ operator_32_false_less_tmp);
      while_for_1_i_lpi_1_dfm_1 <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          while_for_1_i_lpi_1_mx0, operator_32_false_less_tmp);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_asn_sft_lpi_1_dfm_1 <= 1'b0;
    end
    else if ( run_wen & (mux_99_nl | while_for_1_asn_sft_lpi_1_dfm_1_mx0c1) ) begin
      while_for_1_asn_sft_lpi_1_dfm_1 <= MUX_s_1_2_2(while_for_1_asn_sft_lpi_1, exit_while_for_1_lpi_1_dfm_1,
          while_for_1_asn_sft_lpi_1_dfm_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_1_for_1_lpi_1_dfm_1 <= 2'b00;
    end
    else if ( run_wen & or_dcpl_17 & (~(and_12_cse & reg_while_stage_v_2_tmp)) )
        begin
      lfst_exit_while_for_1_for_1_lpi_1_dfm_1 <= lfst_exit_while_for_1_for_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_1_k_2_0_lpi_1_1_0 <= 2'b00;
    end
    else if ( run_wen & (~((~(while_for_1_asn_70 | while_for_1_and_42_rgt)) | or_dcpl_86))
        ) begin
      while_for_1_for_1_k_2_0_lpi_1_1_0 <= MUX_v_2_2_2(while_for_1_for_while_for_1_for_and_1_nl,
          (while_for_1_for_1_k_2_0_sva_2[1:0]), while_for_1_and_42_rgt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_1_for_j_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((~(while_for_1_asn_70 | while_for_1_and_42_rgt | while_for_1_for_1_and_2_rgt))
        | or_dcpl_86)) & (~(((while_for_1_for_1_k_2_0_sva_2[2]) & while_for_1_and_42_rgt)
        | (operator_32_true_1_less_tmp & while_for_1_asn_70))) ) begin
      while_for_1_for_1_for_j_lpi_1 <= ~(MUX_v_32_2_2(nor_73_nl, 32'b11111111111111111111111111111111,
          or_297_nl));
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1 <= 2'b00;
    end
    else if ( run_wen & (((~ mux_tmp_123) & (lfst_exit_while_for_1_lpi_1_dfm_1==2'b10))
        | lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1_mx0c1) ) begin
      lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1 <= MUX_v_2_2_2(lfst_exit_while_for_1_for_1_lpi_1_dfm_mx0w0,
          lfst_exit_while_for_1_for_1_lpi_1_dfm_st, lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_and_27_psp <= 1'b0;
      while_for_1_for_and_26_psp <= 1'b0;
      while_for_1_for_and_25_psp <= 1'b0;
      while_for_1_for_and_24_psp <= 1'b0;
      while_for_1_for_and_23_psp <= 1'b0;
      while_for_1_for_and_22_psp <= 1'b0;
      while_for_1_for_and_21_psp <= 1'b0;
      while_for_1_for_and_20_psp <= 1'b0;
      while_for_1_for_and_19_psp <= 1'b0;
      while_for_1_for_and_18_psp <= 1'b0;
      while_for_1_for_and_17_psp <= 1'b0;
      while_for_1_for_and_16_psp <= 1'b0;
      while_for_1_for_and_15_psp <= 1'b0;
      while_for_1_for_and_14_psp <= 1'b0;
      while_for_1_for_and_13_psp <= 1'b0;
      while_for_1_for_and_12_psp <= 1'b0;
    end
    else if ( while_for_1_for_and_28_cse ) begin
      while_for_1_for_and_27_psp <= while_for_1_for_and_stg_2_7_sva_1 & (while_for_1_for_j_lpi_1_dfm_2_3_0[3]);
      while_for_1_for_and_26_psp <= while_for_1_for_and_stg_2_0_sva_1 & (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[3]));
      while_for_1_for_and_25_psp <= while_for_1_for_and_stg_2_6_sva_1 & (while_for_1_for_j_lpi_1_dfm_2_3_0[3]);
      while_for_1_for_and_24_psp <= while_for_1_for_and_stg_2_1_sva_1 & (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[3]));
      while_for_1_for_and_23_psp <= while_for_1_for_and_stg_2_5_sva_1 & (while_for_1_for_j_lpi_1_dfm_2_3_0[3]);
      while_for_1_for_and_22_psp <= while_for_1_for_and_stg_2_2_sva_1 & (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[3]));
      while_for_1_for_and_21_psp <= while_for_1_for_and_stg_2_4_sva_1 & (while_for_1_for_j_lpi_1_dfm_2_3_0[3]);
      while_for_1_for_and_20_psp <= while_for_1_for_and_stg_2_3_sva_1 & (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[3]));
      while_for_1_for_and_19_psp <= while_for_1_for_and_stg_2_3_sva_1 & (while_for_1_for_j_lpi_1_dfm_2_3_0[3]);
      while_for_1_for_and_18_psp <= while_for_1_for_and_stg_2_4_sva_1 & (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[3]));
      while_for_1_for_and_17_psp <= while_for_1_for_and_stg_2_2_sva_1 & (while_for_1_for_j_lpi_1_dfm_2_3_0[3]);
      while_for_1_for_and_16_psp <= while_for_1_for_and_stg_2_5_sva_1 & (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[3]));
      while_for_1_for_and_15_psp <= while_for_1_for_and_stg_2_1_sva_1 & (while_for_1_for_j_lpi_1_dfm_2_3_0[3]);
      while_for_1_for_and_14_psp <= while_for_1_for_and_stg_2_6_sva_1 & (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[3]));
      while_for_1_for_and_13_psp <= while_for_1_for_and_stg_2_0_sva_1 & (while_for_1_for_j_lpi_1_dfm_2_3_0[3]);
      while_for_1_for_and_12_psp <= while_for_1_for_and_stg_2_7_sva_1 & (~ (while_for_1_for_j_lpi_1_dfm_2_3_0[3]));
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      operator_32_true_1_slc_32_svs_1 <= 1'b0;
      while_for_1_equal_tmp_2 <= 1'b0;
      while_for_1_for_1_equal_tmp_1_1 <= 1'b0;
      while_for_1_asn_sft_lpi_1_dfm_2 <= 1'b0;
    end
    else if ( operator_32_true_1_and_cse ) begin
      operator_32_true_1_slc_32_svs_1 <= operator_32_true_1_less_tmp;
      while_for_1_equal_tmp_2 <= while_for_1_equal_tmp_1;
      while_for_1_for_1_equal_tmp_1_1 <= while_for_1_for_1_equal_tmp_1;
      while_for_1_asn_sft_lpi_1_dfm_2 <= while_for_1_asn_sft_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      operator_32_true_2_slc_32_svs_st <= 1'b0;
    end
    else if ( run_wen & (~(or_dcpl_81 | (~ reg_while_stage_v_2_tmp) | or_dcpl_19
        | (lfst_exit_while_for_1_for_1_lpi_1_dfm_st_1[0]))) ) begin
      operator_32_true_2_slc_32_svs_st <= operator_32_true_2_less_tmp;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_1_for_1_lpi_1_dfm_st <= 2'b00;
    end
    else if ( run_wen & (~(mux_tmp_123 | and_dcpl_43 | (lfst_exit_while_for_1_lpi_1_dfm_1!=2'b10)
        | (~ reg_while_stage_v_1_tmp))) ) begin
      lfst_exit_while_for_1_for_1_lpi_1_dfm_st <= lfst_exit_while_for_1_for_1_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sfi_exit_while_for_1_lpi_1 <= 1'b0;
    end
    else if ( while_for_1_and_51_cse ) begin
      sfi_exit_while_for_1_lpi_1 <= sfi_exit_while_for_1_lpi_1 & (~ and_119_cse);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      operator_32_false_slc_33_svs_st <= 1'b0;
    end
    else if ( run_wen & (~ (lfst_exit_while_for_1_lpi_1_dfm_1[1])) ) begin
      operator_32_false_slc_33_svs_st <= operator_32_false_less_tmp;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_asn_sft_lpi_1_dfm_st <= 1'b0;
    end
    else if ( run_wen & (~(or_dcpl_101 | (~ reg_while_stage_v_1_tmp))) ) begin
      while_for_1_asn_sft_lpi_1_dfm_st <= while_for_1_asn_sft_lpi_1_dfm_st_mx0w0;
    end
  end
  assign while_for_1_for_1_for_out_reg_mux_1_nl = MUX_v_16_16_2((mem_tmp_0_sva_mx0[15:0]),
      (mem_tmp_1_sva_mx0[15:0]), (mem_tmp_2_sva_mx0[15:0]), (mem_tmp_3_sva_mx0[15:0]),
      (mem_tmp_4_sva_mx0[15:0]), (mem_tmp_5_sva_mx0[15:0]), (mem_tmp_6_sva_mx0[15:0]),
      (mem_tmp_7_sva_mx0[15:0]), (mem_tmp_8_sva_mx0[15:0]), (mem_tmp_9_sva_mx0[15:0]),
      (mem_tmp_10_sva_mx0[15:0]), (mem_tmp_11_sva_mx0[15:0]), (mem_tmp_12_sva_mx0[15:0]),
      (mem_tmp_13_sva_mx0[15:0]), (mem_tmp_14_sva_mx0[15:0]), (mem_tmp_15_sva_mx0[15:0]),
      while_for_1_for_1_for_j_lpi_1[3:0]);
  assign while_for_1_for_1_for_out_reg_mux_2_nl = MUX_v_16_16_2((mem_tmp_0_sva_mx0[31:16]),
      (mem_tmp_1_sva_mx0[31:16]), (mem_tmp_2_sva_mx0[31:16]), (mem_tmp_3_sva_mx0[31:16]),
      (mem_tmp_4_sva_mx0[31:16]), (mem_tmp_5_sva_mx0[31:16]), (mem_tmp_6_sva_mx0[31:16]),
      (mem_tmp_7_sva_mx0[31:16]), (mem_tmp_8_sva_mx0[31:16]), (mem_tmp_9_sva_mx0[31:16]),
      (mem_tmp_10_sva_mx0[31:16]), (mem_tmp_11_sva_mx0[31:16]), (mem_tmp_12_sva_mx0[31:16]),
      (mem_tmp_13_sva_mx0[31:16]), (mem_tmp_14_sva_mx0[31:16]), (mem_tmp_15_sva_mx0[31:16]),
      while_for_1_for_1_for_j_lpi_1[3:0]);
  assign while_for_1_for_1_for_out_reg_mux_3_nl = MUX_v_16_16_2((mem_tmp_0_sva_mx0[47:32]),
      (mem_tmp_1_sva_mx0[47:32]), (mem_tmp_2_sva_mx0[47:32]), (mem_tmp_3_sva_mx0[47:32]),
      (mem_tmp_4_sva_mx0[47:32]), (mem_tmp_5_sva_mx0[47:32]), (mem_tmp_6_sva_mx0[47:32]),
      (mem_tmp_7_sva_mx0[47:32]), (mem_tmp_8_sva_mx0[47:32]), (mem_tmp_9_sva_mx0[47:32]),
      (mem_tmp_10_sva_mx0[47:32]), (mem_tmp_11_sva_mx0[47:32]), (mem_tmp_12_sva_mx0[47:32]),
      (mem_tmp_13_sva_mx0[47:32]), (mem_tmp_14_sva_mx0[47:32]), (mem_tmp_15_sva_mx0[47:32]),
      while_for_1_for_1_for_j_lpi_1[3:0]);
  assign while_for_1_for_1_for_out_reg_mux_4_nl = MUX_v_16_16_2((mem_tmp_0_sva_mx0[63:48]),
      (mem_tmp_1_sva_mx0[63:48]), (mem_tmp_2_sva_mx0[63:48]), (mem_tmp_3_sva_mx0[63:48]),
      (mem_tmp_4_sva_mx0[63:48]), (mem_tmp_5_sva_mx0[63:48]), (mem_tmp_6_sva_mx0[63:48]),
      (mem_tmp_7_sva_mx0[63:48]), (mem_tmp_8_sva_mx0[63:48]), (mem_tmp_9_sva_mx0[63:48]),
      (mem_tmp_10_sva_mx0[63:48]), (mem_tmp_11_sva_mx0[63:48]), (mem_tmp_12_sva_mx0[63:48]),
      (mem_tmp_13_sva_mx0[63:48]), (mem_tmp_14_sva_mx0[63:48]), (mem_tmp_15_sva_mx0[63:48]),
      while_for_1_for_1_for_j_lpi_1[3:0]);
  assign mux_32_nl = MUX_s_1_2_2(mux_tmp_31, or_cse, and_124_cse);
  assign mux_33_nl = MUX_s_1_2_2(not_tmp_55, mux_32_nl, while_for_1_for_and_27_psp);
  assign or_97_nl = (while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0000);
  assign mux_35_nl = MUX_s_1_2_2(or_cse, mux_tmp_31, or_97_nl);
  assign mux_36_nl = MUX_s_1_2_2(not_tmp_58, mux_35_nl, while_for_1_for_and_26_psp);
  assign nand_18_nl = ~((while_for_1_for_j_lpi_1_dfm_2_3_0==4'b1110));
  assign mux_38_nl = MUX_s_1_2_2(or_cse, mux_tmp_31, nand_18_nl);
  assign mux_39_nl = MUX_s_1_2_2(not_tmp_61, mux_38_nl, while_for_1_for_and_25_psp);
  assign mux_41_nl = MUX_s_1_2_2(mux_tmp_31, or_cse, nor_9_cse);
  assign mux_42_nl = MUX_s_1_2_2(not_tmp_64, mux_41_nl, while_for_1_for_and_24_psp);
  assign mux_44_nl = MUX_s_1_2_2(mux_tmp_31, or_cse, and_127_cse);
  assign mux_45_nl = MUX_s_1_2_2(not_tmp_67, mux_44_nl, while_for_1_for_and_23_psp);
  assign or_117_nl = (while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0010);
  assign mux_47_nl = MUX_s_1_2_2(or_cse, mux_tmp_31, or_117_nl);
  assign mux_48_nl = MUX_s_1_2_2(not_tmp_70, mux_47_nl, while_for_1_for_and_22_psp);
  assign or_123_nl = (while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1100);
  assign mux_50_nl = MUX_s_1_2_2(or_cse, mux_tmp_31, or_123_nl);
  assign mux_51_nl = MUX_s_1_2_2(not_tmp_73, mux_50_nl, while_for_1_for_and_21_psp);
  assign mux_53_nl = MUX_s_1_2_2(mux_tmp_31, or_cse, nor_13_cse);
  assign mux_54_nl = MUX_s_1_2_2(not_tmp_76, mux_53_nl, while_for_1_for_and_20_psp);
  assign mux_56_nl = MUX_s_1_2_2(mux_tmp_31, or_cse, and_129_cse);
  assign mux_57_nl = MUX_s_1_2_2(not_tmp_79, mux_56_nl, while_for_1_for_and_19_psp);
  assign or_137_nl = (while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0100);
  assign mux_59_nl = MUX_s_1_2_2(or_cse, mux_tmp_31, or_137_nl);
  assign mux_60_nl = MUX_s_1_2_2(not_tmp_82, mux_59_nl, while_for_1_for_and_18_psp);
  assign or_143_nl = (while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1010);
  assign mux_62_nl = MUX_s_1_2_2(or_cse, mux_tmp_31, or_143_nl);
  assign mux_63_nl = MUX_s_1_2_2(not_tmp_85, mux_62_nl, while_for_1_for_and_17_psp);
  assign mux_65_nl = MUX_s_1_2_2(mux_tmp_31, or_cse, nor_17_cse);
  assign mux_66_nl = MUX_s_1_2_2(not_tmp_88, mux_65_nl, while_for_1_for_and_16_psp);
  assign mux_68_nl = MUX_s_1_2_2(mux_tmp_31, or_cse, nor_19_cse);
  assign mux_69_nl = MUX_s_1_2_2(not_tmp_91, mux_68_nl, while_for_1_for_and_15_psp);
  assign or_157_nl = (while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b0110);
  assign mux_71_nl = MUX_s_1_2_2(or_cse, mux_tmp_31, or_157_nl);
  assign mux_72_nl = MUX_s_1_2_2(not_tmp_94, mux_71_nl, while_for_1_for_and_14_psp);
  assign or_163_nl = (while_for_1_for_j_lpi_1_dfm_2_3_0!=4'b1000);
  assign mux_74_nl = MUX_s_1_2_2(or_cse, mux_tmp_31, or_163_nl);
  assign mux_75_nl = MUX_s_1_2_2(not_tmp_97, mux_74_nl, while_for_1_for_and_13_psp);
  assign mux_77_nl = MUX_s_1_2_2(mux_tmp_31, or_cse, and_131_cse);
  assign mux_78_nl = MUX_s_1_2_2(not_tmp_100, mux_77_nl, while_for_1_for_and_12_psp);
  assign while_for_1_not_94_nl = ~ exitL_exit_while_for_1_sva_mx0;
  assign nl_while_length_sva_1  = $signed((cfg_block_size[31:2])) * $signed(cfg_src_num);
  assign nl_while_for_i_sva_1_1  = while_for_i_lpi_1_dfm_mx0w0 + 32'b00000000000000000000000000000001;
  assign while_for_1_mux_86_nl = MUX_s_1_2_2(while_for_1_asn_1_itm_1, exitL_exit_while_for_1_sva_mx0w0,
      and_tmp_18);
  assign while_for_1_for_j_mux_1_nl = MUX_v_32_2_2(while_for_1_for_j_lpi_1, while_for_1_for_j_lpi_1_mx0w0,
      reg_while_stage_v_2_tmp);
  assign while_for_1_not_98_nl = ~ sfi_exit_while_for_1_lpi_1_dfm_1;
  assign and_102_nl = mux_tmp_79 & or_dcpl_101;
  assign nor_63_nl = ~(or_tmp_110 | (~ or_tmp_3));
  assign nor_64_nl = ~(or_tmp_109 | (~(or_231_cse & and_tmp_5)));
  assign nor_65_nl = ~(nor_62_cse | while_for_1_asn_sft_lpi_1_dfm_1 | (~ and_tmp_5));
  assign nor_66_nl = ~(while_for_1_asn_sft_lpi_1_dfm_1 | (~ and_tmp_5));
  assign mux_95_nl = MUX_s_1_2_2(nor_65_nl, nor_66_nl, while_for_1_asn_sft_lpi_1_dfm_st_1);
  assign mux_96_nl = MUX_s_1_2_2(mux_95_nl, and_tmp_5, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]);
  assign mux_97_nl = MUX_s_1_2_2(and_134_cse, mux_96_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mux_98_nl = MUX_s_1_2_2(nor_64_nl, mux_97_nl, while_for_1_equal_tmp_1);
  assign mux_99_nl = MUX_s_1_2_2(nor_63_nl, mux_98_nl, reg_while_stage_v_2_tmp);
  assign while_for_1_for_while_for_1_for_and_1_nl = MUX_v_2_2_2(2'b00, while_for_1_for_1_k_2_0_lpi_1_1_0,
      operator_32_true_1_less_tmp);
  assign while_for_1_for_1_not_22_nl = ~ while_for_1_for_1_and_2_rgt;
  assign nor_73_nl = ~(MUX_v_32_2_2(z_out, 32'b11111111111111111111111111111111,
      while_for_1_for_1_not_22_nl));
  assign or_297_nl = ((~ (while_for_1_for_1_k_2_0_sva_2[2])) & while_for_1_and_42_rgt)
      | ((~ operator_32_true_1_less_tmp) & while_for_1_asn_70);
  assign or_301_nl = (lfst_exit_while_for_1_for_1_lpi_1_dfm_1!=2'b10);
  assign while_for_1_for_1_for_mux_3_nl = MUX_v_32_2_2(while_for_1_for_1_for_j_lpi_1,
      while_for_1_for_j_lpi_1_dfm_1, or_301_nl);
  assign nl_z_out = while_for_1_for_1_for_mux_3_nl + 32'b00000000000000000000000000000001;
  assign z_out = nl_z_out[31:0];

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_16_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input [15:0] input_2;
    input [15:0] input_3;
    input [15:0] input_4;
    input [15:0] input_5;
    input [15:0] input_6;
    input [15:0] input_7;
    input [15:0] input_8;
    input [15:0] input_9;
    input [15:0] input_10;
    input [15:0] input_11;
    input [15:0] input_12;
    input [15:0] input_13;
    input [15:0] input_14;
    input [15:0] input_15;
    input [3:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = input_0;
      end
      4'b0001 : begin
        result = input_1;
      end
      4'b0010 : begin
        result = input_2;
      end
      4'b0011 : begin
        result = input_3;
      end
      4'b0100 : begin
        result = input_4;
      end
      4'b0101 : begin
        result = input_5;
      end
      4'b0110 : begin
        result = input_6;
      end
      4'b0111 : begin
        result = input_7;
      end
      4'b1000 : begin
        result = input_8;
      end
      4'b1001 : begin
        result = input_9;
      end
      4'b1010 : begin
        result = input_10;
      end
      4'b1011 : begin
        result = input_11;
      end
      4'b1100 : begin
        result = input_12;
      end
      4'b1101 : begin
        result = input_13;
      end
      4'b1110 : begin
        result = input_14;
      end
      default : begin
        result = input_15;
      end
    endcase
    MUX_v_16_16_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_4_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input [15:0] input_2;
    input [15:0] input_3;
    input [1:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_16_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input  sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input  vector;
  begin
    signext_2_1= {{1{vector}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder_run
// ------------------------------------------------------------------


module Encoder_run (
  clk, rst, cfg_src_num, cfg_src_coeff_0, cfg_src_coeff_1, cfg_src_coeff_2, cfg_src_coeff_3,
      cfg_src_coeff_4, cfg_src_coeff_5, cfg_src_coeff_6, cfg_src_coeff_7, cfg_src_coeff_8,
      cfg_src_coeff_9, cfg_src_coeff_10, cfg_src_coeff_11, cfg_src_coeff_12, cfg_src_coeff_13,
      cfg_src_coeff_14, cfg_src_coeff_15, cfg_chan_coeff_0, cfg_chan_coeff_1, cfg_chan_coeff_2,
      cfg_chan_coeff_3, cfg_chan_coeff_4, cfg_chan_coeff_5, cfg_chan_coeff_6, cfg_chan_coeff_7,
      cfg_chan_coeff_8, cfg_chan_coeff_9, cfg_chan_coeff_10, cfg_chan_coeff_11, cfg_chan_coeff_12,
      cfg_chan_coeff_13, cfg_chan_coeff_14, cfg_chan_coeff_15, audio_in_val, audio_in_rdy,
      audio_in_msg, audio_out_val, audio_out_rdy, audio_out_msg, while_for_1_mul_cmp_b,
      while_for_1_mul_cmp_en, while_for_1_mul_cmp_z, while_for_1_mul_cmp_1_b, while_for_1_mul_cmp_1_z,
      while_for_1_mul_cmp_2_b, while_for_1_mul_cmp_2_z, while_for_1_mul_cmp_3_b,
      while_for_1_mul_cmp_3_z, while_for_1_mul_cmp_4_b, while_for_1_mul_cmp_4_z,
      while_for_1_mul_cmp_5_b, while_for_1_mul_cmp_5_z, while_for_1_mul_cmp_6_b,
      while_for_1_mul_cmp_6_z, while_for_1_mul_cmp_7_b, while_for_1_mul_cmp_7_z,
      while_for_1_mul_cmp_8_b, while_for_1_mul_cmp_8_z, while_for_1_mul_cmp_9_b,
      while_for_1_mul_cmp_9_z, while_for_1_mul_cmp_10_b, while_for_1_mul_cmp_10_z,
      while_for_1_mul_cmp_11_b, while_for_1_mul_cmp_11_z, while_for_1_mul_cmp_12_b,
      while_for_1_mul_cmp_12_z, while_for_1_mul_cmp_13_b, while_for_1_mul_cmp_13_z,
      while_for_1_mul_cmp_14_b, while_for_1_mul_cmp_14_z, while_for_1_mul_cmp_15_b,
      while_for_1_mul_cmp_15_z, while_for_1_mul_cmp_a_pff
);
  input clk;
  input rst;
  input [31:0] cfg_src_num;
  input [31:0] cfg_src_coeff_0;
  input [31:0] cfg_src_coeff_1;
  input [31:0] cfg_src_coeff_2;
  input [31:0] cfg_src_coeff_3;
  input [31:0] cfg_src_coeff_4;
  input [31:0] cfg_src_coeff_5;
  input [31:0] cfg_src_coeff_6;
  input [31:0] cfg_src_coeff_7;
  input [31:0] cfg_src_coeff_8;
  input [31:0] cfg_src_coeff_9;
  input [31:0] cfg_src_coeff_10;
  input [31:0] cfg_src_coeff_11;
  input [31:0] cfg_src_coeff_12;
  input [31:0] cfg_src_coeff_13;
  input [31:0] cfg_src_coeff_14;
  input [31:0] cfg_src_coeff_15;
  input [31:0] cfg_chan_coeff_0;
  input [31:0] cfg_chan_coeff_1;
  input [31:0] cfg_chan_coeff_2;
  input [31:0] cfg_chan_coeff_3;
  input [31:0] cfg_chan_coeff_4;
  input [31:0] cfg_chan_coeff_5;
  input [31:0] cfg_chan_coeff_6;
  input [31:0] cfg_chan_coeff_7;
  input [31:0] cfg_chan_coeff_8;
  input [31:0] cfg_chan_coeff_9;
  input [31:0] cfg_chan_coeff_10;
  input [31:0] cfg_chan_coeff_11;
  input [31:0] cfg_chan_coeff_12;
  input [31:0] cfg_chan_coeff_13;
  input [31:0] cfg_chan_coeff_14;
  input [31:0] cfg_chan_coeff_15;
  input audio_in_val;
  output audio_in_rdy;
  input [15:0] audio_in_msg;
  output audio_out_val;
  input audio_out_rdy;
  output [511:0] audio_out_msg;
  output [47:0] while_for_1_mul_cmp_b;
  output while_for_1_mul_cmp_en;
  input [62:0] while_for_1_mul_cmp_z;
  output [47:0] while_for_1_mul_cmp_1_b;
  input [62:0] while_for_1_mul_cmp_1_z;
  output [47:0] while_for_1_mul_cmp_2_b;
  input [62:0] while_for_1_mul_cmp_2_z;
  output [47:0] while_for_1_mul_cmp_3_b;
  input [62:0] while_for_1_mul_cmp_3_z;
  output [47:0] while_for_1_mul_cmp_4_b;
  input [62:0] while_for_1_mul_cmp_4_z;
  output [47:0] while_for_1_mul_cmp_5_b;
  input [62:0] while_for_1_mul_cmp_5_z;
  output [47:0] while_for_1_mul_cmp_6_b;
  input [62:0] while_for_1_mul_cmp_6_z;
  output [47:0] while_for_1_mul_cmp_7_b;
  input [62:0] while_for_1_mul_cmp_7_z;
  output [47:0] while_for_1_mul_cmp_8_b;
  input [62:0] while_for_1_mul_cmp_8_z;
  output [47:0] while_for_1_mul_cmp_9_b;
  input [62:0] while_for_1_mul_cmp_9_z;
  output [47:0] while_for_1_mul_cmp_10_b;
  input [62:0] while_for_1_mul_cmp_10_z;
  output [47:0] while_for_1_mul_cmp_11_b;
  input [62:0] while_for_1_mul_cmp_11_z;
  output [47:0] while_for_1_mul_cmp_12_b;
  input [62:0] while_for_1_mul_cmp_12_z;
  output [47:0] while_for_1_mul_cmp_13_b;
  input [62:0] while_for_1_mul_cmp_13_z;
  output [47:0] while_for_1_mul_cmp_14_b;
  input [62:0] while_for_1_mul_cmp_14_z;
  output [47:0] while_for_1_mul_cmp_15_b;
  input [62:0] while_for_1_mul_cmp_15_z;
  output [31:0] while_for_1_mul_cmp_a_pff;


  // Interconnect Declarations
  reg run_wen;
  wire run_wten;
  wire audio_in_Pop_mioi_bawt;
  wire audio_in_Pop_mioi_wen_comp;
  wire [15:0] audio_in_Pop_mioi_idat_mxwt;
  wire audio_in_Pop_mioi_ivld;
  wire audio_in_Pop_mioi_ivld_oreg;
  wire audio_out_Push_mioi_bawt;
  wire audio_out_Push_mioi_wen_comp;
  wire audio_out_Push_mioi_irdy;
  wire audio_out_Push_mioi_irdy_oreg;
  reg [31:0] audio_out_Push_mioi_idat_511_480;
  reg [31:0] audio_out_Push_mioi_idat_479_448;
  reg [31:0] audio_out_Push_mioi_idat_447_416;
  reg [31:0] audio_out_Push_mioi_idat_415_384;
  reg [31:0] audio_out_Push_mioi_idat_383_352;
  reg [31:0] audio_out_Push_mioi_idat_351_320;
  reg [31:0] audio_out_Push_mioi_idat_319_288;
  reg [31:0] audio_out_Push_mioi_idat_287_256;
  reg [31:0] audio_out_Push_mioi_idat_255_224;
  reg [31:0] audio_out_Push_mioi_idat_223_192;
  reg [31:0] audio_out_Push_mioi_idat_191_160;
  reg [31:0] audio_out_Push_mioi_idat_159_128;
  reg [31:0] audio_out_Push_mioi_idat_127_96;
  reg [31:0] audio_out_Push_mioi_idat_95_64;
  reg [31:0] audio_out_Push_mioi_idat_63_32;
  reg [31:0] audio_out_Push_mioi_idat_31_0;
  wire [7:0] operator_8_true_acc_tmp;
  wire [8:0] nl_operator_8_true_acc_tmp;
  wire while_equal_tmp;
  wire or_dcpl_10;
  wire or_dcpl_11;
  wire or_dcpl_12;
  wire and_dcpl_8;
  wire and_dcpl_9;
  wire or_dcpl_14;
  wire or_dcpl_15;
  wire not_tmp_19;
  wire or_dcpl_17;
  wire or_dcpl_18;
  wire or_dcpl_19;
  wire while_while_or_3_cse_1;
  wire while_while_or_cse_1;
  reg while_equal_svs_st_1;
  reg [7:0] src_idx_sva;
  wire run_wen_rtff;
  reg reg_while_equal_svs_st_2_tmp;
  reg reg_audio_out_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_4_tmp;
  reg reg_audio_in_Pop_mioi_iswt0_tmp;
  reg reg_while_stage_v_1_tmp;
  reg reg_while_stage_v_2_tmp;
  reg reg_while_stage_v_3_tmp;
  wire audio_in_Pop_mioi_wen_comp_iff;
  wire or_dcpl_17_pff;
  wire and_dcpl_9_pff;
  wire and_dcpl_8_pff;
  wire while_if_mux_3_rmff;
  wire audio_out_Push_mioi_bawt_iff;
  wire while_if_mux_4_rmff;
  wire while_mux_rmff;
  wire audio_in_Pop_mioi_bawt_iff;
  wire run_wten_iff;
  wire while_audio_in_reg_mux_rmff;
  wire while_mux_1_rmff;
  wire audio_out_Push_mioi_wen_comp_iff;
  wire while_while_or_3_cse_1_pff;
  wire while_while_or_cse_1_pff;
  wire while_mux_2_rmff;
  wire while_mux_3_rmff;
  reg [31:0] audio_out_reg_data_7_sva;
  reg [31:0] audio_out_reg_data_8_sva;
  reg [31:0] audio_out_reg_data_6_sva;
  reg [31:0] audio_out_reg_data_9_sva;
  reg [31:0] audio_out_reg_data_5_sva;
  reg [31:0] audio_out_reg_data_10_sva;
  reg [31:0] audio_out_reg_data_4_sva;
  reg [31:0] audio_out_reg_data_11_sva;
  reg [31:0] audio_out_reg_data_3_sva;
  reg [31:0] audio_out_reg_data_12_sva;
  reg [31:0] audio_out_reg_data_2_sva;
  reg [31:0] audio_out_reg_data_13_sva;
  reg [31:0] audio_out_reg_data_1_sva;
  reg [31:0] audio_out_reg_data_14_sva;
  reg [31:0] audio_out_reg_data_0_sva;
  reg [31:0] audio_out_reg_data_15_sva;
  wire audio_out_Push_mioi_iswt0_mx0c1;
  wire [31:0] audio_out_reg_data_15_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_15_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_0_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_0_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_14_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_14_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_1_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_1_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_13_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_13_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_2_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_2_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_12_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_12_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_3_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_3_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_11_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_11_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_4_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_4_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_10_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_10_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_5_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_5_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_9_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_9_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_6_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_6_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_8_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_8_sva_1_mx0w0;
  wire [31:0] audio_out_reg_data_7_sva_1_mx0w0;
  wire [32:0] nl_audio_out_reg_data_7_sva_1_mx0w0;
  wire while_stage_v_2_mx1c1;
  wire while_stage_v_3_mx1c1;
  wire while_stage_v_4_mx1c1;
  wire while_if_and_2_cse;
  wire audio_out_reg_data_and_cse;

  wire while_if_and_nl;
  wire while_if_not_17_nl;
  wire while_and_6_nl;
  wire while_and_7_nl;
  wire while_if_not_36_nl;
  wire while_if_not_37_nl;
  wire while_if_not_38_nl;
  wire while_if_not_39_nl;
  wire while_if_not_40_nl;
  wire while_if_not_41_nl;
  wire while_if_not_42_nl;
  wire while_if_not_43_nl;
  wire while_if_not_44_nl;
  wire while_if_not_45_nl;
  wire while_if_not_46_nl;
  wire while_if_not_47_nl;
  wire while_if_not_48_nl;
  wire while_if_not_49_nl;
  wire while_if_not_50_nl;
  wire while_if_not_33_nl;
  wire while_and_8_nl;
  wire[32:0] operator_32_true_acc_nl;
  wire[33:0] nl_operator_32_true_acc_nl;
  wire mux_2_nl;
  wire nor_5_nl;
  wire or_19_nl;
  wire mux_3_nl;
  wire nor_7_nl;
  wire nor_8_nl;
  wire mux_4_nl;
  wire nor_9_nl;
  wire nor_10_nl;
  wire mux_5_nl;
  wire nor_11_nl;
  wire nor_12_nl;
  wire mux_6_nl;
  wire nor_13_nl;
  wire nor_14_nl;
  wire mux_7_nl;
  wire nor_15_nl;
  wire nor_16_nl;
  wire mux_8_nl;
  wire nor_17_nl;
  wire nor_18_nl;
  wire mux_9_nl;
  wire nor_19_nl;
  wire nor_20_nl;
  wire mux_10_nl;
  wire nor_21_nl;
  wire nor_22_nl;
  wire mux_11_nl;
  wire nor_23_nl;
  wire nor_24_nl;
  wire mux_12_nl;
  wire nor_25_nl;
  wire nor_26_nl;
  wire mux_13_nl;
  wire nor_27_nl;
  wire nor_28_nl;
  wire mux_14_nl;
  wire nor_29_nl;
  wire nor_30_nl;
  wire mux_15_nl;
  wire and_28_nl;
  wire nor_31_nl;
  wire mux_16_nl;
  wire and_29_nl;
  wire nor_32_nl;
  wire mux_17_nl;
  wire and_31_nl;
  wire and_32_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg;
  assign nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg = ~ or_dcpl_17;
  wire  nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg_pff;
  assign nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg_pff =
      ~ or_dcpl_17_pff;
  wire  nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg;
  assign nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg =
      reg_while_equal_svs_st_2_tmp & audio_out_Push_mioi_bawt & reg_while_stage_v_4_tmp;
  wire [511:0] nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_idat;
  assign nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_idat = {audio_out_Push_mioi_idat_511_480
      , audio_out_Push_mioi_idat_479_448 , audio_out_Push_mioi_idat_447_416 , audio_out_Push_mioi_idat_415_384
      , audio_out_Push_mioi_idat_383_352 , audio_out_Push_mioi_idat_351_320 , audio_out_Push_mioi_idat_319_288
      , audio_out_Push_mioi_idat_287_256 , audio_out_Push_mioi_idat_255_224 , audio_out_Push_mioi_idat_223_192
      , audio_out_Push_mioi_idat_191_160 , audio_out_Push_mioi_idat_159_128 , audio_out_Push_mioi_idat_127_96
      , audio_out_Push_mioi_idat_95_64 , audio_out_Push_mioi_idat_63_32 , audio_out_Push_mioi_idat_31_0};
  wire  nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg_pff;
  assign nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg_pff
      = while_if_mux_3_rmff & audio_out_Push_mioi_bawt_iff & while_mux_rmff;
  wire  nl_Encoder_run_staller_inst_run_flen_unreg;
  assign nl_Encoder_run_staller_inst_run_flen_unreg = ~(((~(reg_while_stage_v_1_tmp
      & or_dcpl_17)) & while_while_or_3_cse_1 & while_while_or_cse_1) | (reg_while_stage_v_1_tmp
      & (~(reg_while_stage_v_2_tmp & or_dcpl_14)) & while_while_or_3_cse_1 & while_while_or_cse_1)
      | (reg_while_stage_v_2_tmp & (~(reg_while_stage_v_3_tmp & or_dcpl_19)) & while_while_or_cse_1)
      | (reg_while_stage_v_3_tmp & (~(reg_while_stage_v_4_tmp & and_dcpl_8)) & while_while_or_cse_1)
      | (reg_while_stage_v_4_tmp & while_while_or_cse_1));
  wire  nl_Encoder_run_staller_inst_run_flen_unreg_pff;
  assign nl_Encoder_run_staller_inst_run_flen_unreg_pff = ~(((~(while_mux_1_rmff
      & or_dcpl_17_pff)) & while_while_or_3_cse_1_pff & while_while_or_cse_1_pff)
      | (while_mux_1_rmff & (~(while_mux_2_rmff & and_dcpl_9_pff)) & while_while_or_3_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_2_rmff & (~(while_mux_3_rmff & and_dcpl_9_pff))
      & while_while_or_cse_1_pff) | (while_mux_3_rmff & (~(while_mux_rmff & and_dcpl_8_pff))
      & while_while_or_cse_1_pff) | (while_mux_rmff & while_while_or_cse_1_pff));
  Encoder_run_audio_in_Pop_mioi Encoder_run_audio_in_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .audio_in_Pop_mioi_oswt_unreg(nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg),
      .audio_in_Pop_mioi_bawt(audio_in_Pop_mioi_bawt),
      .audio_in_Pop_mioi_iswt0(reg_audio_in_Pop_mioi_iswt0_tmp),
      .audio_in_Pop_mioi_wen_comp(audio_in_Pop_mioi_wen_comp),
      .audio_in_Pop_mioi_idat_mxwt(audio_in_Pop_mioi_idat_mxwt),
      .audio_in_Pop_mioi_ivld(audio_in_Pop_mioi_ivld),
      .audio_in_Pop_mioi_ivld_oreg(audio_in_Pop_mioi_ivld_oreg),
      .audio_in_Pop_mioi_wen_comp_pff(audio_in_Pop_mioi_wen_comp_iff),
      .audio_in_Pop_mioi_oswt_unreg_pff(nl_Encoder_run_audio_in_Pop_mioi_inst_audio_in_Pop_mioi_oswt_unreg_pff),
      .audio_in_Pop_mioi_bawt_pff(audio_in_Pop_mioi_bawt_iff),
      .run_wten_pff(run_wten_iff),
      .audio_in_Pop_mioi_iswt0_pff(while_audio_in_reg_mux_rmff),
      .audio_in_Pop_mioi_ivld_oreg_pff(audio_in_Pop_mioi_ivld)
    );
  Encoder_run_wait_dp Encoder_run_wait_dp_inst (
      .clk(clk),
      .rst(rst),
      .audio_in_Pop_mioi_ivld(audio_in_Pop_mioi_ivld),
      .audio_in_Pop_mioi_ivld_oreg(audio_in_Pop_mioi_ivld_oreg),
      .audio_out_Push_mioi_irdy(audio_out_Push_mioi_irdy),
      .audio_out_Push_mioi_irdy_oreg(audio_out_Push_mioi_irdy_oreg)
    );
  Encoder_run_audio_out_Push_mioi Encoder_run_audio_out_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg),
      .run_wen(run_wen),
      .audio_out_Push_mioi_oswt_unreg(nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg),
      .audio_out_Push_mioi_bawt(audio_out_Push_mioi_bawt),
      .audio_out_Push_mioi_iswt0(reg_audio_out_Push_mioi_iswt0_tmp),
      .audio_out_Push_mioi_wen_comp(audio_out_Push_mioi_wen_comp),
      .audio_out_Push_mioi_idat(nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_idat[511:0]),
      .audio_out_Push_mioi_irdy(audio_out_Push_mioi_irdy),
      .audio_out_Push_mioi_irdy_oreg(audio_out_Push_mioi_irdy_oreg),
      .audio_out_Push_mioi_bawt_pff(audio_out_Push_mioi_bawt_iff),
      .audio_out_Push_mioi_iswt0_pff(while_if_mux_4_rmff),
      .audio_out_Push_mioi_irdy_oreg_pff(audio_out_Push_mioi_irdy),
      .audio_out_Push_mioi_wen_comp_pff(audio_out_Push_mioi_wen_comp_iff),
      .audio_out_Push_mioi_oswt_unreg_pff(nl_Encoder_run_audio_out_Push_mioi_inst_audio_out_Push_mioi_oswt_unreg_pff)
    );
  Encoder_run_staller Encoder_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen_rtff),
      .run_wten(run_wten),
      .audio_in_Pop_mioi_wen_comp(audio_in_Pop_mioi_wen_comp),
      .audio_out_Push_mioi_wen_comp(audio_out_Push_mioi_wen_comp),
      .run_flen_unreg(nl_Encoder_run_staller_inst_run_flen_unreg),
      .audio_in_Pop_mioi_wen_comp_pff(audio_in_Pop_mioi_wen_comp_iff),
      .run_wten_pff(run_wten_iff),
      .audio_out_Push_mioi_wen_comp_pff(audio_out_Push_mioi_wen_comp_iff),
      .run_flen_unreg_pff(nl_Encoder_run_staller_inst_run_flen_unreg_pff)
    );
  assign while_for_1_mul_cmp_en = ~(and_dcpl_9 | (or_dcpl_15 & (~ reg_while_stage_v_2_tmp)));
  assign while_if_and_nl = run_wen & ((or_dcpl_11 & while_equal_svs_st_1 & reg_while_stage_v_3_tmp)
      | audio_out_Push_mioi_iswt0_mx0c1);
  assign while_if_mux_4_rmff = MUX_s_1_2_2(reg_audio_out_Push_mioi_iswt0_tmp, (~
      audio_out_Push_mioi_iswt0_mx0c1), while_if_and_nl);
  assign while_if_and_2_cse = run_wen & (~(and_dcpl_9 | or_dcpl_12));
  assign while_audio_in_reg_mux_rmff = MUX_s_1_2_2(reg_audio_in_Pop_mioi_iswt0_tmp,
      (~ or_dcpl_18), run_wen);
  assign while_mux_1_rmff = reg_while_stage_v_1_tmp | (run_wen & (~ or_dcpl_18));
  assign while_and_6_nl = run_wen & ((or_dcpl_11 & audio_in_Pop_mioi_bawt & reg_while_stage_v_1_tmp)
      | while_stage_v_2_mx1c1);
  assign while_mux_2_rmff = MUX_s_1_2_2(reg_while_stage_v_2_tmp, (~ while_stage_v_2_mx1c1),
      while_and_6_nl);
  assign while_and_7_nl = run_wen & ((or_dcpl_11 & reg_while_stage_v_2_tmp) | while_stage_v_3_mx1c1);
  assign while_mux_3_rmff = MUX_s_1_2_2(reg_while_stage_v_3_tmp, (~ while_stage_v_3_mx1c1),
      while_and_7_nl);
  assign audio_out_reg_data_and_cse = run_wen & (~ or_dcpl_19);
  assign while_and_8_nl = run_wen & ((or_dcpl_11 & reg_while_stage_v_3_tmp) | while_stage_v_4_mx1c1);
  assign while_mux_rmff = MUX_s_1_2_2(reg_while_stage_v_4_tmp, (~ while_stage_v_4_mx1c1),
      while_and_8_nl);
  assign while_if_mux_3_rmff = MUX_s_1_2_2(reg_while_equal_svs_st_2_tmp, while_equal_svs_st_1,
      audio_out_reg_data_and_cse);
  assign nl_audio_out_reg_data_15_sva_1_mx0w0 = audio_out_reg_data_15_sva + (while_for_1_mul_cmp_1_z[62:31]);
  assign audio_out_reg_data_15_sva_1_mx0w0 = nl_audio_out_reg_data_15_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_0_sva_1_mx0w0 = audio_out_reg_data_0_sva + (while_for_1_mul_cmp_z[62:31]);
  assign audio_out_reg_data_0_sva_1_mx0w0 = nl_audio_out_reg_data_0_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_14_sva_1_mx0w0 = audio_out_reg_data_14_sva + (while_for_1_mul_cmp_2_z[62:31]);
  assign audio_out_reg_data_14_sva_1_mx0w0 = nl_audio_out_reg_data_14_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_1_sva_1_mx0w0 = audio_out_reg_data_1_sva + (while_for_1_mul_cmp_15_z[62:31]);
  assign audio_out_reg_data_1_sva_1_mx0w0 = nl_audio_out_reg_data_1_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_13_sva_1_mx0w0 = audio_out_reg_data_13_sva + (while_for_1_mul_cmp_3_z[62:31]);
  assign audio_out_reg_data_13_sva_1_mx0w0 = nl_audio_out_reg_data_13_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_2_sva_1_mx0w0 = audio_out_reg_data_2_sva + (while_for_1_mul_cmp_14_z[62:31]);
  assign audio_out_reg_data_2_sva_1_mx0w0 = nl_audio_out_reg_data_2_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_12_sva_1_mx0w0 = audio_out_reg_data_12_sva + (while_for_1_mul_cmp_4_z[62:31]);
  assign audio_out_reg_data_12_sva_1_mx0w0 = nl_audio_out_reg_data_12_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_3_sva_1_mx0w0 = audio_out_reg_data_3_sva + (while_for_1_mul_cmp_13_z[62:31]);
  assign audio_out_reg_data_3_sva_1_mx0w0 = nl_audio_out_reg_data_3_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_11_sva_1_mx0w0 = audio_out_reg_data_11_sva + (while_for_1_mul_cmp_5_z[62:31]);
  assign audio_out_reg_data_11_sva_1_mx0w0 = nl_audio_out_reg_data_11_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_4_sva_1_mx0w0 = audio_out_reg_data_4_sva + (while_for_1_mul_cmp_12_z[62:31]);
  assign audio_out_reg_data_4_sva_1_mx0w0 = nl_audio_out_reg_data_4_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_10_sva_1_mx0w0 = audio_out_reg_data_10_sva + (while_for_1_mul_cmp_6_z[62:31]);
  assign audio_out_reg_data_10_sva_1_mx0w0 = nl_audio_out_reg_data_10_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_5_sva_1_mx0w0 = audio_out_reg_data_5_sva + (while_for_1_mul_cmp_11_z[62:31]);
  assign audio_out_reg_data_5_sva_1_mx0w0 = nl_audio_out_reg_data_5_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_9_sva_1_mx0w0 = audio_out_reg_data_9_sva + (while_for_1_mul_cmp_7_z[62:31]);
  assign audio_out_reg_data_9_sva_1_mx0w0 = nl_audio_out_reg_data_9_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_6_sva_1_mx0w0 = audio_out_reg_data_6_sva + (while_for_1_mul_cmp_10_z[62:31]);
  assign audio_out_reg_data_6_sva_1_mx0w0 = nl_audio_out_reg_data_6_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_8_sva_1_mx0w0 = audio_out_reg_data_8_sva + (while_for_1_mul_cmp_8_z[62:31]);
  assign audio_out_reg_data_8_sva_1_mx0w0 = nl_audio_out_reg_data_8_sva_1_mx0w0[31:0];
  assign nl_audio_out_reg_data_7_sva_1_mx0w0 = audio_out_reg_data_7_sva + (while_for_1_mul_cmp_9_z[62:31]);
  assign audio_out_reg_data_7_sva_1_mx0w0 = nl_audio_out_reg_data_7_sva_1_mx0w0[31:0];
  assign nl_operator_8_true_acc_tmp = src_idx_sva + 8'b00000001;
  assign operator_8_true_acc_tmp = nl_operator_8_true_acc_tmp[7:0];
  assign nl_operator_32_true_acc_nl = conv_s2s_32_33(cfg_src_num) + 33'b111111111111111111111111111111111;
  assign operator_32_true_acc_nl = nl_operator_32_true_acc_nl[32:0];
  assign while_equal_tmp = conv_s2s_8_33(src_idx_sva) == operator_32_true_acc_nl;
  assign while_while_or_3_cse_1 = audio_in_Pop_mioi_bawt | (~ reg_while_stage_v_1_tmp);
  assign while_while_or_cse_1 = audio_out_Push_mioi_bawt | (~(reg_while_equal_svs_st_2_tmp
      & reg_while_stage_v_4_tmp));
  assign or_dcpl_10 = (~ reg_while_equal_svs_st_2_tmp) | audio_out_Push_mioi_bawt;
  assign or_dcpl_11 = or_dcpl_10 | (~ reg_while_stage_v_4_tmp);
  assign or_dcpl_12 = ~(reg_while_stage_v_3_tmp & while_equal_svs_st_1);
  assign and_dcpl_8 = reg_while_equal_svs_st_2_tmp & (~ audio_out_Push_mioi_bawt);
  assign and_dcpl_9 = and_dcpl_8 & reg_while_stage_v_4_tmp;
  assign or_dcpl_14 = and_dcpl_9 | (~ reg_while_stage_v_2_tmp);
  assign or_dcpl_15 = ~(audio_in_Pop_mioi_bawt & reg_while_stage_v_1_tmp);
  assign not_tmp_19 = ~((src_idx_sva[1:0]==2'b11));
  assign or_dcpl_17 = and_dcpl_9 | or_dcpl_15;
  assign or_dcpl_18 = and_dcpl_9 | ((~ audio_in_Pop_mioi_bawt) & reg_while_stage_v_1_tmp);
  assign or_dcpl_19 = and_dcpl_9 | (~ reg_while_stage_v_3_tmp);
  assign audio_out_Push_mioi_iswt0_mx0c1 = reg_while_equal_svs_st_2_tmp & audio_out_Push_mioi_bawt
      & reg_while_stage_v_4_tmp & or_dcpl_12;
  assign while_stage_v_2_mx1c1 = or_dcpl_11 & or_dcpl_15 & reg_while_stage_v_2_tmp;
  assign while_stage_v_3_mx1c1 = or_dcpl_11 & reg_while_stage_v_3_tmp & (~ reg_while_stage_v_2_tmp);
  assign while_stage_v_4_mx1c1 = or_dcpl_10 & reg_while_stage_v_4_tmp & (~ reg_while_stage_v_3_tmp);
  assign nor_5_nl = ~((src_idx_sva[3:0]!=4'b0000));
  assign or_19_nl = (~((operator_8_true_acc_tmp[3:0]!=4'b0000))) | while_equal_tmp;
  assign mux_2_nl = MUX_s_1_2_2(nor_5_nl, or_19_nl, reg_while_stage_v_2_tmp);
  assign nor_7_nl = ~((src_idx_sva[3:0]!=4'b0001));
  assign nor_8_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0001) | while_equal_tmp);
  assign mux_3_nl = MUX_s_1_2_2(nor_7_nl, nor_8_nl, reg_while_stage_v_2_tmp);
  assign nor_9_nl = ~((src_idx_sva[3:0]!=4'b0010));
  assign nor_10_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0010) | while_equal_tmp);
  assign mux_4_nl = MUX_s_1_2_2(nor_9_nl, nor_10_nl, reg_while_stage_v_2_tmp);
  assign nor_11_nl = ~((src_idx_sva[3:2]!=2'b00) | not_tmp_19);
  assign nor_12_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0011) | while_equal_tmp);
  assign mux_5_nl = MUX_s_1_2_2(nor_11_nl, nor_12_nl, reg_while_stage_v_2_tmp);
  assign nor_13_nl = ~((src_idx_sva[3:0]!=4'b0100));
  assign nor_14_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0100) | while_equal_tmp);
  assign mux_6_nl = MUX_s_1_2_2(nor_13_nl, nor_14_nl, reg_while_stage_v_2_tmp);
  assign nor_15_nl = ~((src_idx_sva[3:0]!=4'b0101));
  assign nor_16_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0101) | while_equal_tmp);
  assign mux_7_nl = MUX_s_1_2_2(nor_15_nl, nor_16_nl, reg_while_stage_v_2_tmp);
  assign nor_17_nl = ~((src_idx_sva[3:0]!=4'b0110));
  assign nor_18_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0110) | while_equal_tmp);
  assign mux_8_nl = MUX_s_1_2_2(nor_17_nl, nor_18_nl, reg_while_stage_v_2_tmp);
  assign nor_19_nl = ~((src_idx_sva[3:0]!=4'b0111));
  assign nor_20_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b0111) | while_equal_tmp);
  assign mux_9_nl = MUX_s_1_2_2(nor_19_nl, nor_20_nl, reg_while_stage_v_2_tmp);
  assign nor_21_nl = ~((src_idx_sva[3:0]!=4'b1000));
  assign nor_22_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1000) | while_equal_tmp);
  assign mux_10_nl = MUX_s_1_2_2(nor_21_nl, nor_22_nl, reg_while_stage_v_2_tmp);
  assign nor_23_nl = ~((src_idx_sva[3:0]!=4'b1001));
  assign nor_24_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1001) | while_equal_tmp);
  assign mux_11_nl = MUX_s_1_2_2(nor_23_nl, nor_24_nl, reg_while_stage_v_2_tmp);
  assign nor_25_nl = ~((src_idx_sva[3:0]!=4'b1010));
  assign nor_26_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1010) | while_equal_tmp);
  assign mux_12_nl = MUX_s_1_2_2(nor_25_nl, nor_26_nl, reg_while_stage_v_2_tmp);
  assign nor_27_nl = ~((src_idx_sva[3:2]!=2'b10) | not_tmp_19);
  assign nor_28_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1011) | while_equal_tmp);
  assign mux_13_nl = MUX_s_1_2_2(nor_27_nl, nor_28_nl, reg_while_stage_v_2_tmp);
  assign nor_29_nl = ~((src_idx_sva[3:0]!=4'b1100));
  assign nor_30_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1100) | while_equal_tmp);
  assign mux_14_nl = MUX_s_1_2_2(nor_29_nl, nor_30_nl, reg_while_stage_v_2_tmp);
  assign and_28_nl = (src_idx_sva[3:0]==4'b1101);
  assign nor_31_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1101) | while_equal_tmp);
  assign mux_15_nl = MUX_s_1_2_2(and_28_nl, nor_31_nl, reg_while_stage_v_2_tmp);
  assign and_29_nl = (src_idx_sva[3:0]==4'b1110);
  assign nor_32_nl = ~((operator_8_true_acc_tmp[3:0]!=4'b1110) | while_equal_tmp);
  assign mux_16_nl = MUX_s_1_2_2(and_29_nl, nor_32_nl, reg_while_stage_v_2_tmp);
  assign and_31_nl = (src_idx_sva[3:0]==4'b1111);
  assign and_32_nl = (operator_8_true_acc_tmp[3:0]==4'b1111) & (~ while_equal_tmp);
  assign mux_17_nl = MUX_s_1_2_2(and_31_nl, and_32_nl, reg_while_stage_v_2_tmp);
  assign while_for_1_mul_cmp_a_pff = MUX1HOT_v_32_16_2(cfg_src_coeff_0, cfg_src_coeff_1,
      cfg_src_coeff_2, cfg_src_coeff_3, cfg_src_coeff_4, cfg_src_coeff_5, cfg_src_coeff_6,
      cfg_src_coeff_7, cfg_src_coeff_8, cfg_src_coeff_9, cfg_src_coeff_10, cfg_src_coeff_11,
      cfg_src_coeff_12, cfg_src_coeff_13, cfg_src_coeff_14, cfg_src_coeff_15, {mux_2_nl
      , mux_3_nl , mux_4_nl , mux_5_nl , mux_6_nl , mux_7_nl , mux_8_nl , mux_9_nl
      , mux_10_nl , mux_11_nl , mux_12_nl , mux_13_nl , mux_14_nl , mux_15_nl , mux_16_nl
      , mux_17_nl});
  assign while_for_1_mul_cmp_b = conv_s2u_48_48($signed(cfg_chan_coeff_0) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_1_b = conv_s2u_48_48($signed(cfg_chan_coeff_15) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_2_b = conv_s2u_48_48($signed(cfg_chan_coeff_14) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_3_b = conv_s2u_48_48($signed(cfg_chan_coeff_13) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_4_b = conv_s2u_48_48($signed(cfg_chan_coeff_12) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_5_b = conv_s2u_48_48($signed(cfg_chan_coeff_11) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_6_b = conv_s2u_48_48($signed(cfg_chan_coeff_10) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_7_b = conv_s2u_48_48($signed(cfg_chan_coeff_9) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_8_b = conv_s2u_48_48($signed(cfg_chan_coeff_8) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_9_b = conv_s2u_48_48($signed(cfg_chan_coeff_7) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_10_b = conv_s2u_48_48($signed(cfg_chan_coeff_6) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_11_b = conv_s2u_48_48($signed(cfg_chan_coeff_5) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_12_b = conv_s2u_48_48($signed(cfg_chan_coeff_4) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_13_b = conv_s2u_48_48($signed(cfg_chan_coeff_3) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_14_b = conv_s2u_48_48($signed(cfg_chan_coeff_2) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign while_for_1_mul_cmp_15_b = conv_s2u_48_48($signed(cfg_chan_coeff_1) * $signed((audio_in_Pop_mioi_idat_mxwt)));
  assign and_dcpl_8_pff = while_if_mux_3_rmff & (~ audio_out_Push_mioi_bawt_iff);
  assign and_dcpl_9_pff = and_dcpl_8_pff & while_mux_rmff;
  assign or_dcpl_17_pff = and_dcpl_9_pff | (~(audio_in_Pop_mioi_bawt_iff & while_mux_1_rmff));
  assign while_while_or_3_cse_1_pff = audio_in_Pop_mioi_bawt_iff | (~ while_mux_1_rmff);
  assign while_while_or_cse_1_pff = audio_out_Push_mioi_bawt_iff | (~(while_if_mux_3_rmff
      & while_mux_rmff));
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_audio_out_Push_mioi_iswt0_tmp <= 1'b0;
      reg_audio_in_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_while_stage_v_1_tmp <= 1'b0;
      reg_while_stage_v_2_tmp <= 1'b0;
      reg_while_stage_v_3_tmp <= 1'b0;
      reg_while_stage_v_4_tmp <= 1'b0;
      reg_while_equal_svs_st_2_tmp <= 1'b0;
      run_wen <= 1'b1;
    end
    else begin
      reg_audio_out_Push_mioi_iswt0_tmp <= while_if_mux_4_rmff;
      reg_audio_in_Pop_mioi_iswt0_tmp <= while_audio_in_reg_mux_rmff;
      reg_while_stage_v_1_tmp <= while_mux_1_rmff;
      reg_while_stage_v_2_tmp <= while_mux_2_rmff;
      reg_while_stage_v_3_tmp <= while_mux_3_rmff;
      reg_while_stage_v_4_tmp <= while_mux_rmff;
      reg_while_equal_svs_st_2_tmp <= while_if_mux_3_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_out_Push_mioi_idat_511_480 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_479_448 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_63_32 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_447_416 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_95_64 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_415_384 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_127_96 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_383_352 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_159_128 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_351_320 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_191_160 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_319_288 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_223_192 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_287_256 <= 32'b00000000000000000000000000000000;
      audio_out_Push_mioi_idat_255_224 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_if_and_2_cse ) begin
      audio_out_Push_mioi_idat_511_480 <= audio_out_reg_data_15_sva_1_mx0w0;
      audio_out_Push_mioi_idat_31_0 <= audio_out_reg_data_0_sva_1_mx0w0;
      audio_out_Push_mioi_idat_479_448 <= audio_out_reg_data_14_sva_1_mx0w0;
      audio_out_Push_mioi_idat_63_32 <= audio_out_reg_data_1_sva_1_mx0w0;
      audio_out_Push_mioi_idat_447_416 <= audio_out_reg_data_13_sva_1_mx0w0;
      audio_out_Push_mioi_idat_95_64 <= audio_out_reg_data_2_sva_1_mx0w0;
      audio_out_Push_mioi_idat_415_384 <= audio_out_reg_data_12_sva_1_mx0w0;
      audio_out_Push_mioi_idat_127_96 <= audio_out_reg_data_3_sva_1_mx0w0;
      audio_out_Push_mioi_idat_383_352 <= audio_out_reg_data_11_sva_1_mx0w0;
      audio_out_Push_mioi_idat_159_128 <= audio_out_reg_data_4_sva_1_mx0w0;
      audio_out_Push_mioi_idat_351_320 <= audio_out_reg_data_10_sva_1_mx0w0;
      audio_out_Push_mioi_idat_191_160 <= audio_out_reg_data_5_sva_1_mx0w0;
      audio_out_Push_mioi_idat_319_288 <= audio_out_reg_data_9_sva_1_mx0w0;
      audio_out_Push_mioi_idat_223_192 <= audio_out_reg_data_6_sva_1_mx0w0;
      audio_out_Push_mioi_idat_287_256 <= audio_out_reg_data_8_sva_1_mx0w0;
      audio_out_Push_mioi_idat_255_224 <= audio_out_reg_data_7_sva_1_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      src_idx_sva <= 8'b00000000;
    end
    else if ( run_wen & (~ or_dcpl_14) ) begin
      src_idx_sva <= MUX_v_8_2_2(8'b00000000, operator_8_true_acc_tmp, while_if_not_17_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      audio_out_reg_data_15_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_14_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_13_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_12_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_11_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_10_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_9_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_8_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_7_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_6_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_5_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_4_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_3_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_2_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_1_sva <= 32'b00000000000000000000000000000000;
      audio_out_reg_data_0_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( audio_out_reg_data_and_cse ) begin
      audio_out_reg_data_15_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_15_sva_1_mx0w0, while_if_not_36_nl);
      audio_out_reg_data_14_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_14_sva_1_mx0w0, while_if_not_37_nl);
      audio_out_reg_data_13_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_13_sva_1_mx0w0, while_if_not_38_nl);
      audio_out_reg_data_12_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_12_sva_1_mx0w0, while_if_not_39_nl);
      audio_out_reg_data_11_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_11_sva_1_mx0w0, while_if_not_40_nl);
      audio_out_reg_data_10_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_10_sva_1_mx0w0, while_if_not_41_nl);
      audio_out_reg_data_9_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_9_sva_1_mx0w0, while_if_not_42_nl);
      audio_out_reg_data_8_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_8_sva_1_mx0w0, while_if_not_43_nl);
      audio_out_reg_data_7_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_7_sva_1_mx0w0, while_if_not_44_nl);
      audio_out_reg_data_6_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_6_sva_1_mx0w0, while_if_not_45_nl);
      audio_out_reg_data_5_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_5_sva_1_mx0w0, while_if_not_46_nl);
      audio_out_reg_data_4_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_4_sva_1_mx0w0, while_if_not_47_nl);
      audio_out_reg_data_3_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_3_sva_1_mx0w0, while_if_not_48_nl);
      audio_out_reg_data_2_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_2_sva_1_mx0w0, while_if_not_49_nl);
      audio_out_reg_data_1_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_1_sva_1_mx0w0, while_if_not_50_nl);
      audio_out_reg_data_0_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          audio_out_reg_data_0_sva_1_mx0w0, while_if_not_33_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_equal_svs_st_1 <= 1'b0;
    end
    else if ( run_wen & (~ and_dcpl_9) ) begin
      while_equal_svs_st_1 <= while_equal_tmp;
    end
  end
  assign while_if_not_17_nl = ~ while_equal_tmp;
  assign while_if_not_36_nl = ~ while_equal_svs_st_1;
  assign while_if_not_37_nl = ~ while_equal_svs_st_1;
  assign while_if_not_38_nl = ~ while_equal_svs_st_1;
  assign while_if_not_39_nl = ~ while_equal_svs_st_1;
  assign while_if_not_40_nl = ~ while_equal_svs_st_1;
  assign while_if_not_41_nl = ~ while_equal_svs_st_1;
  assign while_if_not_42_nl = ~ while_equal_svs_st_1;
  assign while_if_not_43_nl = ~ while_equal_svs_st_1;
  assign while_if_not_44_nl = ~ while_equal_svs_st_1;
  assign while_if_not_45_nl = ~ while_equal_svs_st_1;
  assign while_if_not_46_nl = ~ while_equal_svs_st_1;
  assign while_if_not_47_nl = ~ while_equal_svs_st_1;
  assign while_if_not_48_nl = ~ while_equal_svs_st_1;
  assign while_if_not_49_nl = ~ while_equal_svs_st_1;
  assign while_if_not_50_nl = ~ while_equal_svs_st_1;
  assign while_if_not_33_nl = ~ while_equal_svs_st_1;

  function automatic [31:0] MUX1HOT_v_32_16_2;
    input [31:0] input_15;
    input [31:0] input_14;
    input [31:0] input_13;
    input [31:0] input_12;
    input [31:0] input_11;
    input [31:0] input_10;
    input [31:0] input_9;
    input [31:0] input_8;
    input [31:0] input_7;
    input [31:0] input_6;
    input [31:0] input_5;
    input [31:0] input_4;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [15:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    result = result | (input_3 & {32{sel[3]}});
    result = result | (input_4 & {32{sel[4]}});
    result = result | (input_5 & {32{sel[5]}});
    result = result | (input_6 & {32{sel[6]}});
    result = result | (input_7 & {32{sel[7]}});
    result = result | (input_8 & {32{sel[8]}});
    result = result | (input_9 & {32{sel[9]}});
    result = result | (input_10 & {32{sel[10]}});
    result = result | (input_11 & {32{sel[11]}});
    result = result | (input_12 & {32{sel[12]}});
    result = result | (input_13 & {32{sel[13]}});
    result = result | (input_14 & {32{sel[14]}});
    result = result | (input_15 & {32{sel[15]}});
    MUX1HOT_v_32_16_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [32:0] conv_s2s_8_33 ;
    input [7:0]  vector ;
  begin
    conv_s2s_8_33 = {{25{vector[7]}}, vector};
  end
  endfunction


  function automatic [32:0] conv_s2s_32_33 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_33 = {vector[31], vector};
  end
  endfunction


  function automatic [47:0] conv_s2u_48_48 ;
    input [47:0]  vector ;
  begin
    conv_s2u_48_48 = vector;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run
// ------------------------------------------------------------------


module OutputBuffer_run (
  clk, rst, cfg_block_size, cfg_output_base, sync2_val, sync2_rdy, sync2_msg, sync3_val,
      sync3_rdy, sync3_msg, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg,
      dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, audio_out_val,
      audio_out_rdy, audio_out_msg, mem_rsci_clken_d, mem_rsci_d_d, mem_rsci_q_d,
      mem_rsci_radr_d, mem_rsci_wadr_d, mem_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      mem_rsci_we_d_pff
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_output_base;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input audio_out_val;
  output audio_out_rdy;
  input [511:0] audio_out_msg;
  output mem_rsci_clken_d;
  output [63:0] mem_rsci_d_d;
  input [63:0] mem_rsci_q_d;
  output [13:0] mem_rsci_radr_d;
  output [13:0] mem_rsci_wadr_d;
  output mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output mem_rsci_we_d_pff;


  // Interconnect Declarations
  reg run_wen;
  wire run_wten;
  wire sync2_Pop_mioi_bawt;
  wire sync2_Pop_mioi_wen_comp;
  wire sync2_Pop_mioi_ivld;
  wire sync2_Pop_mioi_ivld_oreg;
  wire audio_out_Pop_mioi_bawt;
  wire audio_out_Pop_mioi_wen_comp;
  wire [511:0] audio_out_Pop_mioi_idat_mxwt;
  wire audio_out_Pop_mioi_ivld;
  wire audio_out_Pop_mioi_ivld_oreg;
  wire dma_write_ctrl_Push_mioi_bawt;
  wire dma_write_ctrl_Push_mioi_wen_comp;
  wire dma_write_ctrl_Push_mioi_irdy;
  wire dma_write_ctrl_Push_mioi_irdy_oreg;
  wire dma_write_chnl_Push_mioi_bawt;
  wire dma_write_chnl_Push_mioi_wen_comp;
  reg [63:0] dma_write_chnl_Push_mioi_idat;
  wire dma_write_chnl_Push_mioi_irdy;
  wire dma_write_chnl_Push_mioi_irdy_oreg;
  wire sync3_Push_mioi_bawt;
  wire sync3_Push_mioi_wen_comp;
  wire sync3_Push_mioi_irdy;
  wire sync3_Push_mioi_irdy_oreg;
  reg [27:0] dma_write_ctrl_Push_mioi_idat_63_36;
  reg [31:0] dma_write_ctrl_Push_mioi_idat_31_0;
  wire [1:0] while_for_1_while_for_1_mux1h_tmp;
  wire [3:0] while_for_for_acc_2_tmp;
  wire [4:0] nl_while_for_for_acc_2_tmp;
  wire operator_32_false_less_tmp;
  wire operator_32_false_1_less_tmp;
  wire mux_tmp_127;
  wire or_dcpl_11;
  wire or_dcpl_14;
  wire and_dcpl_12;
  wire or_dcpl_22;
  wire and_dcpl_23;
  wire or_tmp_130;
  wire not_tmp_99;
  wire mux_tmp_133;
  wire mux_tmp_134;
  wire and_dcpl_25;
  wire nand_tmp_23;
  wire or_dcpl_25;
  wire mux_tmp_141;
  wire or_dcpl_34;
  wire and_dcpl_33;
  wire or_dcpl_46;
  wire not_tmp_120;
  wire or_dcpl_49;
  wire or_dcpl_50;
  wire or_dcpl_52;
  wire or_dcpl_53;
  wire and_dcpl_36;
  wire mux_tmp_153;
  wire and_dcpl_45;
  wire mux_tmp_154;
  wire mux_tmp_156;
  wire or_dcpl_60;
  wire while_while_or_cse_1;
  wire while_or_4_cse_1;
  wire while_or_5_cse_1;
  wire while_or_cse_1;
  wire while_or_1_cse_1;
  wire while_for_1_and_m1c_1;
  wire while_for_1_while_for_1_nor_2_cse_1;
  wire exit_while_for_lpi_1_dfm_1;
  wire lfst_exitL_exit_while_for_for_lpi_1_dfm_1;
  reg lfst_exitL_exit_while_for_for_lpi_1;
  reg exitL_exitL_exit_while_for_for_lpi_1_dfm_1;
  wire [1:0] lfst_exit_while_for_1_lpi_1_dfm_6;
  wire while_for_asn_sft_lpi_1_dfm_mx0;
  wire while_for_1_equal_tmp_1;
  reg [2:0] while_for_for_j_3_0_lpi_1_2_0;
  reg while_for_asn_sft_lpi_1;
  reg exitL_exitL_exit_while_for_for_lpi_1;
  reg while_for_asn_sft_lpi_1_dfm_st_2;
  reg exit_while_for_lpi_1_dfm_st_2;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_st_3;
  reg operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2;
  reg while_for_1_and_10_itm_1;
  wire exitL_exit_while_for_1_sva_mx0;
  reg [2:0] while_for_for_j_3_0_lpi_1_dfm_1_2_0_1;
  wire while_for_while_for_or_mx0w0;
  wire while_and_13_cse;
  wire or_199_cse;
  wire while_for_and_2_cse;
  wire and_120_cse;
  wire or_76_cse;
  wire or_12_cse;
  wire nand_31_cse;
  reg [13:0] while_for_1_data_slc_13_0_itm_1;
  reg [511:0] while_audio_out_reg_data_lpi_1;
  wire while_for_for_nor_m1c_1;
  wire while_for_for_and_m1c_7;
  wire while_for_for_and_m1c_8;
  wire while_for_for_and_m1c_9;
  wire while_for_for_and_m1c_10;
  wire while_for_for_and_m1c_11;
  wire while_for_for_and_m1c_12;
  wire while_for_for_and_m1c_13;
  wire run_wen_rtff;
  reg reg_dma_write_ctrl_Push_mioi_iswt0_tmp;
  reg reg_exit_while_for_lpi_1_dfm_st_3_tmp;
  reg reg_while_for_asn_sft_lpi_1_dfm_st_3_tmp;
  reg [1:0] reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp;
  reg reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3_tmp;
  reg reg_dma_write_chnl_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_4_tmp;
  reg reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp;
  reg reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp;
  reg reg_audio_out_Pop_mioi_iswt0_tmp;
  reg [1:0] reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp;
  reg reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp;
  reg reg_sync3_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_2_tmp;
  reg reg_sync2_Pop_mioi_iswt0_tmp;
  reg reg_while_for_1_asn_itm_1_tmp;
  reg reg_while_stage_v_1_tmp;
  reg reg_while_stage_v_3_tmp;
  wire sync2_Pop_mioi_wen_comp_iff;
  wire mux_tmp_134_pff;
  wire or_dcpl_11_pff;
  wire mux_tmp_127_pff;
  wire dma_write_ctrl_Push_mioi_bawt_iff;
  wire while_mux_rmff;
  wire nand_31_cse_pff;
  wire while_for_mux_19_rmff;
  wire while_for_mux_20_rmff;
  wire [1:0] while_for_1_mux_rmff;
  wire operator_32_false_1_mux_3_rmff;
  wire dma_write_chnl_Push_mioi_bawt_iff;
  wire while_for_1_mux_15_rmff;
  wire while_mux_5_rmff;
  wire mux_tmp_133_pff;
  wire while_for_mux_21_rmff;
  wire and_dcpl_12_pff;
  wire while_for_mux_22_rmff;
  wire audio_out_Pop_mioi_bawt_iff;
  wire run_wten_iff;
  wire while_for_mux_23_rmff;
  wire [1:0] while_for_1_mux_16_rmff;
  wire operator_32_false_1_mux_4_rmff;
  wire sync3_Push_mioi_bawt_iff;
  wire while_mux_6_rmff;
  wire while_mux_7_rmff;
  wire sync2_Pop_mioi_bawt_iff;
  wire while_mux_8_rmff;
  wire while_for_1_mux_17_rmff;
  wire while_mux_9_rmff;
  wire audio_out_Pop_mioi_wen_comp_iff;
  wire dma_write_ctrl_Push_mioi_wen_comp_iff;
  wire dma_write_chnl_Push_mioi_wen_comp_iff;
  wire sync3_Push_mioi_wen_comp_iff;
  wire while_while_or_cse_1_pff;
  wire while_or_4_cse_1_pff;
  wire while_or_5_cse_1_pff;
  wire while_or_cse_1_pff;
  wire while_or_1_cse_1_pff;
  wire while_mux_10_rmff;
  reg [31:0] while_for_i_lpi_1_dfm_1;
  reg [31:0] while_for_1_i_lpi_1;
  wire and_148_cse;
  wire [31:0] z_out;
  wire [32:0] nl_z_out;
  reg while_for_asn_sft_lpi_1_dfm_st;
  reg exit_while_for_lpi_1_dfm_st;
  reg sfi_exit_while_for_lpi_1_dfm_st;
  reg operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st;
  reg exit_while_for_lpi_1_dfm_st_1;
  wire dma_write_ctrl_Push_mioi_iswt0_mx0c1;
  wire dma_write_chnl_Push_mioi_iswt0_mx0c1;
  wire sync3_Push_mioi_iswt0_mx0c1;
  wire exitL_exit_while_for_1_sva_mx0w0;
  wire [2:0] while_for_for_j_3_0_lpi_1_dfm_2_0_1;
  wire while_for_1_asn_itm_1_mx0c1;
  wire while_stage_v_2_mx1c1;
  wire operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_mx0c1;
  wire sfi_exit_while_for_lpi_1_dfm_st_1_mx0c1;
  wire while_for_asn_sft_lpi_1_dfm_st_1_mx0c1;
  wire while_stage_v_3_mx1c1;
  wire while_stage_v_4_mx1c1;
  wire not_318_rgt;
  wire mux_166_rgt;
  wire while_and_16_cse;
  wire while_for_for_and_26_cse;
  wire while_for_and_5_cse;
  reg [1:0] reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse;
  reg reg_while_for_for_equal_itm_1_cse;
  reg reg_while_for_for_equal_3_itm_1_cse;
  wire and_69_itm;

  wire mux_142_nl;
  wire nor_76_nl;
  wire nor_77_nl;
  wire while_and_nl;
  wire while_for_1_and_nl;
  wire while_and_15_nl;
  wire sync2_read_reset_check_reset_while_for_nor_1_nl;
  wire mux_144_nl;
  wire nor_78_nl;
  wire sync2_read_reset_check_reset_while_and_1_nl;
  wire mux_148_nl;
  wire mux_147_nl;
  wire or_6_nl;
  wire mux_146_nl;
  wire while_for_1_not_23_nl;
  wire mux_173_nl;
  wire while_for_mux_17_nl;
  wire or_243_nl;
  wire while_for_1_and_3_nl;
  wire while_for_1_while_for_1_while_for_1_or_nl;
  wire while_for_1_and_16_nl;
  wire while_and_17_nl;
  wire operator_32_false_1_operator_32_false_1_mux_nl;
  wire operator_32_false_1_and_nl;
  wire while_for_while_for_mux_nl;
  wire while_for_and_nl;
  wire while_for_while_for_mux_1_nl;
  wire while_for_and_1_nl;
  wire nand_nl;
  wire nor_91_nl;
  wire[10:0] while_for_for_idx_mux_nl;
  wire and_83_nl;
  wire while_for_1_and_17_nl;
  wire while_and_18_nl;
  wire while_and_19_nl;
  wire[1:0] while_for_1_while_for_1_and_4_nl;
  wire while_for_1_or_8_nl;
  wire while_for_1_and_4_nl;
  wire while_for_1_not_25_nl;
  wire or_208_nl;
  wire or_137_nl;
  wire mux_132_nl;
  wire and_57_nl;
  wire mux_137_nl;
  wire or_14_nl;
  wire or_224_nl;
  wire nor_73_nl;
  wire nand_53_nl;
  wire or_226_nl;
  wire mux_136_nl;
  wire mux_135_nl;
  wire or_159_nl;
  wire or_157_nl;
  wire mux_149_nl;
  wire nor_80_nl;
  wire mux_157_nl;
  wire mux_160_nl;
  wire mux_159_nl;
  wire or_234_nl;
  wire or_232_nl;
  wire while_for_for_and_nl;
  wire while_for_for_and_1_nl;
  wire while_for_for_and_2_nl;
  wire while_for_for_and_3_nl;
  wire while_for_for_and_4_nl;
  wire while_for_for_and_5_nl;
  wire while_for_for_and_6_nl;
  wire while_for_for_and_7_nl;
  wire while_for_for_and_8_nl;
  wire while_for_for_and_9_nl;
  wire while_for_for_and_10_nl;
  wire while_for_for_and_11_nl;
  wire while_for_for_and_12_nl;
  wire while_for_for_and_13_nl;
  wire while_for_for_and_14_nl;
  wire while_for_for_and_15_nl;
  wire or_256_nl;
  wire or_255_nl;
  wire mux_171_nl;
  wire nor_84_nl;
  wire or_258_nl;
  wire and_145_nl;
  wire[31:0] while_for_mux_26_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_OutputBuffer_run_sync2_Pop_mioi_inst_sync2_Pop_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_sync2_Pop_mioi_inst_sync2_Pop_mioi_oswt_unreg = mux_tmp_134
      & sync2_Pop_mioi_bawt & reg_while_for_1_asn_itm_1_tmp & reg_while_stage_v_1_tmp;
  wire  nl_OutputBuffer_run_sync2_Pop_mioi_inst_sync2_Pop_mioi_oswt_unreg_pff;
  assign nl_OutputBuffer_run_sync2_Pop_mioi_inst_sync2_Pop_mioi_oswt_unreg_pff =
      mux_tmp_134_pff & sync2_Pop_mioi_bawt_iff & while_for_1_mux_17_rmff & while_mux_9_rmff;
  wire  nl_OutputBuffer_run_audio_out_Pop_mioi_inst_audio_out_Pop_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_audio_out_Pop_mioi_inst_audio_out_Pop_mioi_oswt_unreg
      = ~(and_dcpl_12 | (~(reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp & audio_out_Pop_mioi_bawt))
      | reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp | or_dcpl_25);
  wire  nl_OutputBuffer_run_audio_out_Pop_mioi_inst_audio_out_Pop_mioi_oswt_unreg_pff;
  assign nl_OutputBuffer_run_audio_out_Pop_mioi_inst_audio_out_Pop_mioi_oswt_unreg_pff
      = ~(and_dcpl_12_pff | (~(while_for_mux_21_rmff & audio_out_Pop_mioi_bawt_iff))
      | while_for_mux_22_rmff | (while_for_1_mux_16_rmff[1]) | (~ while_mux_7_rmff));
  wire  nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_oswt_unreg
      = ~(nand_31_cse | (~ dma_write_ctrl_Push_mioi_bawt) | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp[1])
      | (~ reg_while_stage_v_4_tmp));
  wire [66:0] nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat;
  assign nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat
      = {3'b011 , dma_write_ctrl_Push_mioi_idat_63_36 , 4'b0000 , dma_write_ctrl_Push_mioi_idat_31_0};
  wire  nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_oswt_unreg_pff;
  assign nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_oswt_unreg_pff
      = ~(nand_31_cse_pff | (~ dma_write_ctrl_Push_mioi_bawt_iff) | (while_for_1_mux_rmff[1])
      | (~ while_mux_5_rmff));
  wire  nl_OutputBuffer_run_dma_write_chnl_Push_mioi_inst_dma_write_chnl_Push_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_dma_write_chnl_Push_mioi_inst_dma_write_chnl_Push_mioi_oswt_unreg
      = ~((reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp[0]) | (~ reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3_tmp)
      | (~ dma_write_chnl_Push_mioi_bawt) | (~((reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp[1])
      & reg_while_stage_v_4_tmp)));
  wire  nl_OutputBuffer_run_dma_write_chnl_Push_mioi_inst_dma_write_chnl_Push_mioi_oswt_unreg_pff;
  assign nl_OutputBuffer_run_dma_write_chnl_Push_mioi_inst_dma_write_chnl_Push_mioi_oswt_unreg_pff
      = ~((while_for_1_mux_rmff[0]) | (~ operator_32_false_1_mux_3_rmff) | (~ dma_write_chnl_Push_mioi_bawt_iff)
      | (~((while_for_1_mux_rmff[1]) & while_mux_5_rmff)));
  wire  nl_OutputBuffer_run_sync3_Push_mioi_inst_sync3_Push_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_sync3_Push_mioi_inst_sync3_Push_mioi_oswt_unreg = ~(and_dcpl_12
      | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]) | (~ sync3_Push_mioi_bawt)
      | reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp | or_dcpl_34);
  wire  nl_OutputBuffer_run_sync3_Push_mioi_inst_sync3_Push_mioi_oswt_unreg_pff;
  assign nl_OutputBuffer_run_sync3_Push_mioi_inst_sync3_Push_mioi_oswt_unreg_pff
      = ~(and_dcpl_12_pff | (while_for_1_mux_16_rmff[0]) | (~ sync3_Push_mioi_bawt_iff)
      | operator_32_false_1_mux_4_rmff | (~((while_for_1_mux_16_rmff[1]) & while_mux_7_rmff)));
  wire  nl_OutputBuffer_run_staller_inst_run_flen_unreg;
  assign nl_OutputBuffer_run_staller_inst_run_flen_unreg = ~(((~(reg_while_stage_v_1_tmp
      & or_dcpl_49)) & while_while_or_cse_1 & while_or_4_cse_1 & while_or_5_cse_1
      & while_or_cse_1 & while_or_1_cse_1) | (reg_while_stage_v_1_tmp & (~(reg_while_stage_v_2_tmp
      & (~ mux_tmp_133))) & while_while_or_cse_1 & while_or_4_cse_1 & while_or_5_cse_1
      & while_or_cse_1 & while_or_1_cse_1) | (reg_while_stage_v_2_tmp & (~(reg_while_stage_v_3_tmp
      & or_dcpl_60)) & while_or_4_cse_1 & while_or_5_cse_1 & while_or_cse_1 & while_or_1_cse_1)
      | (reg_while_stage_v_3_tmp & (~(reg_while_stage_v_4_tmp & (~ mux_tmp_127)))
      & while_or_cse_1 & while_or_1_cse_1) | (reg_while_stage_v_4_tmp & while_or_cse_1
      & while_or_1_cse_1));
  wire  nl_OutputBuffer_run_staller_inst_run_flen_unreg_pff;
  assign nl_OutputBuffer_run_staller_inst_run_flen_unreg_pff = ~(((~(while_mux_9_rmff
      & (~(mux_tmp_134_pff & (~((~ sync2_Pop_mioi_bawt_iff) & while_for_1_mux_17_rmff))))))
      & while_while_or_cse_1_pff & while_or_4_cse_1_pff & while_or_5_cse_1_pff &
      while_or_cse_1_pff & while_or_1_cse_1_pff) | (while_mux_9_rmff & (~(while_mux_7_rmff
      & (~ mux_tmp_133_pff))) & while_while_or_cse_1_pff & while_or_4_cse_1_pff &
      while_or_5_cse_1_pff & while_or_cse_1_pff & while_or_1_cse_1_pff) | (while_mux_7_rmff
      & (~(while_mux_10_rmff & and_dcpl_12_pff)) & while_or_4_cse_1_pff & while_or_5_cse_1_pff
      & while_or_cse_1_pff & while_or_1_cse_1_pff) | (while_mux_10_rmff & (~(while_mux_5_rmff
      & (~ mux_tmp_127_pff))) & while_or_cse_1_pff & while_or_1_cse_1_pff) | (while_mux_5_rmff
      & while_or_cse_1_pff & while_or_1_cse_1_pff));
  OutputBuffer_run_sync2_Pop_mioi OutputBuffer_run_sync2_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync2_Pop_mioi_oswt_unreg(nl_OutputBuffer_run_sync2_Pop_mioi_inst_sync2_Pop_mioi_oswt_unreg),
      .sync2_Pop_mioi_bawt(sync2_Pop_mioi_bawt),
      .sync2_Pop_mioi_iswt0(reg_sync2_Pop_mioi_iswt0_tmp),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp),
      .sync2_Pop_mioi_ivld(sync2_Pop_mioi_ivld),
      .sync2_Pop_mioi_ivld_oreg(sync2_Pop_mioi_ivld_oreg),
      .sync2_Pop_mioi_wen_comp_pff(sync2_Pop_mioi_wen_comp_iff),
      .sync2_Pop_mioi_oswt_unreg_pff(nl_OutputBuffer_run_sync2_Pop_mioi_inst_sync2_Pop_mioi_oswt_unreg_pff),
      .sync2_Pop_mioi_bawt_pff(sync2_Pop_mioi_bawt_iff),
      .run_wten_pff(run_wten_iff),
      .sync2_Pop_mioi_iswt0_pff(while_mux_8_rmff),
      .sync2_Pop_mioi_ivld_oreg_pff(sync2_Pop_mioi_ivld)
    );
  OutputBuffer_run_wait_dp OutputBuffer_run_wait_dp_inst (
      .clk(clk),
      .rst(rst),
      .sync2_Pop_mioi_ivld(sync2_Pop_mioi_ivld),
      .sync2_Pop_mioi_ivld_oreg(sync2_Pop_mioi_ivld_oreg),
      .audio_out_Pop_mioi_ivld(audio_out_Pop_mioi_ivld),
      .audio_out_Pop_mioi_ivld_oreg(audio_out_Pop_mioi_ivld_oreg),
      .dma_write_ctrl_Push_mioi_irdy(dma_write_ctrl_Push_mioi_irdy),
      .dma_write_ctrl_Push_mioi_irdy_oreg(dma_write_ctrl_Push_mioi_irdy_oreg),
      .dma_write_chnl_Push_mioi_irdy(dma_write_chnl_Push_mioi_irdy),
      .dma_write_chnl_Push_mioi_irdy_oreg(dma_write_chnl_Push_mioi_irdy_oreg),
      .sync3_Push_mioi_irdy(sync3_Push_mioi_irdy),
      .sync3_Push_mioi_irdy_oreg(sync3_Push_mioi_irdy_oreg)
    );
  OutputBuffer_run_audio_out_Pop_mioi OutputBuffer_run_audio_out_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .audio_out_Pop_mioi_oswt_unreg(nl_OutputBuffer_run_audio_out_Pop_mioi_inst_audio_out_Pop_mioi_oswt_unreg),
      .audio_out_Pop_mioi_bawt(audio_out_Pop_mioi_bawt),
      .audio_out_Pop_mioi_iswt0(reg_audio_out_Pop_mioi_iswt0_tmp),
      .audio_out_Pop_mioi_wen_comp(audio_out_Pop_mioi_wen_comp),
      .audio_out_Pop_mioi_idat_mxwt(audio_out_Pop_mioi_idat_mxwt),
      .audio_out_Pop_mioi_ivld(audio_out_Pop_mioi_ivld),
      .audio_out_Pop_mioi_ivld_oreg(audio_out_Pop_mioi_ivld_oreg),
      .audio_out_Pop_mioi_bawt_pff(audio_out_Pop_mioi_bawt_iff),
      .run_wten_pff(run_wten_iff),
      .audio_out_Pop_mioi_iswt0_pff(while_for_mux_23_rmff),
      .audio_out_Pop_mioi_ivld_oreg_pff(audio_out_Pop_mioi_ivld),
      .audio_out_Pop_mioi_wen_comp_pff(audio_out_Pop_mioi_wen_comp_iff),
      .audio_out_Pop_mioi_oswt_unreg_pff(nl_OutputBuffer_run_audio_out_Pop_mioi_inst_audio_out_Pop_mioi_oswt_unreg_pff)
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi OutputBuffer_run_dma_write_ctrl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .run_wen(run_wen),
      .dma_write_ctrl_Push_mioi_oswt_unreg(nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_oswt_unreg),
      .dma_write_ctrl_Push_mioi_bawt(dma_write_ctrl_Push_mioi_bawt),
      .dma_write_ctrl_Push_mioi_iswt0(reg_dma_write_ctrl_Push_mioi_iswt0_tmp),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp),
      .dma_write_ctrl_Push_mioi_idat(nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat[66:0]),
      .dma_write_ctrl_Push_mioi_irdy(dma_write_ctrl_Push_mioi_irdy),
      .dma_write_ctrl_Push_mioi_irdy_oreg(dma_write_ctrl_Push_mioi_irdy_oreg),
      .dma_write_ctrl_Push_mioi_bawt_pff(dma_write_ctrl_Push_mioi_bawt_iff),
      .dma_write_ctrl_Push_mioi_iswt0_pff(while_mux_rmff),
      .dma_write_ctrl_Push_mioi_irdy_oreg_pff(dma_write_ctrl_Push_mioi_irdy),
      .dma_write_ctrl_Push_mioi_wen_comp_pff(dma_write_ctrl_Push_mioi_wen_comp_iff),
      .dma_write_ctrl_Push_mioi_oswt_unreg_pff(nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_oswt_unreg_pff)
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi OutputBuffer_run_dma_write_chnl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .run_wen(run_wen),
      .dma_write_chnl_Push_mioi_oswt_unreg(nl_OutputBuffer_run_dma_write_chnl_Push_mioi_inst_dma_write_chnl_Push_mioi_oswt_unreg),
      .dma_write_chnl_Push_mioi_bawt(dma_write_chnl_Push_mioi_bawt),
      .dma_write_chnl_Push_mioi_iswt0(reg_dma_write_chnl_Push_mioi_iswt0_tmp),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp),
      .dma_write_chnl_Push_mioi_idat(dma_write_chnl_Push_mioi_idat),
      .dma_write_chnl_Push_mioi_irdy(dma_write_chnl_Push_mioi_irdy),
      .dma_write_chnl_Push_mioi_irdy_oreg(dma_write_chnl_Push_mioi_irdy_oreg),
      .dma_write_chnl_Push_mioi_bawt_pff(dma_write_chnl_Push_mioi_bawt_iff),
      .dma_write_chnl_Push_mioi_iswt0_pff(while_for_1_mux_15_rmff),
      .dma_write_chnl_Push_mioi_irdy_oreg_pff(dma_write_chnl_Push_mioi_irdy),
      .dma_write_chnl_Push_mioi_wen_comp_pff(dma_write_chnl_Push_mioi_wen_comp_iff),
      .dma_write_chnl_Push_mioi_oswt_unreg_pff(nl_OutputBuffer_run_dma_write_chnl_Push_mioi_inst_dma_write_chnl_Push_mioi_oswt_unreg_pff)
    );
  OutputBuffer_run_sync3_Push_mioi OutputBuffer_run_sync3_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .run_wen(run_wen),
      .sync3_Push_mioi_oswt_unreg(nl_OutputBuffer_run_sync3_Push_mioi_inst_sync3_Push_mioi_oswt_unreg),
      .sync3_Push_mioi_bawt(sync3_Push_mioi_bawt),
      .sync3_Push_mioi_iswt0(reg_sync3_Push_mioi_iswt0_tmp),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp),
      .sync3_Push_mioi_irdy(sync3_Push_mioi_irdy),
      .sync3_Push_mioi_irdy_oreg(sync3_Push_mioi_irdy_oreg),
      .sync3_Push_mioi_bawt_pff(sync3_Push_mioi_bawt_iff),
      .sync3_Push_mioi_iswt0_pff(while_mux_6_rmff),
      .sync3_Push_mioi_irdy_oreg_pff(sync3_Push_mioi_irdy),
      .sync3_Push_mioi_wen_comp_pff(sync3_Push_mioi_wen_comp_iff),
      .sync3_Push_mioi_oswt_unreg_pff(nl_OutputBuffer_run_sync3_Push_mioi_inst_sync3_Push_mioi_oswt_unreg_pff)
    );
  OutputBuffer_run_staller OutputBuffer_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen_rtff),
      .run_wten(run_wten),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp),
      .audio_out_Pop_mioi_wen_comp(audio_out_Pop_mioi_wen_comp),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp),
      .run_flen_unreg(nl_OutputBuffer_run_staller_inst_run_flen_unreg),
      .sync2_Pop_mioi_wen_comp_pff(sync2_Pop_mioi_wen_comp_iff),
      .run_wten_pff(run_wten_iff),
      .audio_out_Pop_mioi_wen_comp_pff(audio_out_Pop_mioi_wen_comp_iff),
      .dma_write_ctrl_Push_mioi_wen_comp_pff(dma_write_ctrl_Push_mioi_wen_comp_iff),
      .dma_write_chnl_Push_mioi_wen_comp_pff(dma_write_chnl_Push_mioi_wen_comp_iff),
      .sync3_Push_mioi_wen_comp_pff(sync3_Push_mioi_wen_comp_iff),
      .run_flen_unreg_pff(nl_OutputBuffer_run_staller_inst_run_flen_unreg_pff)
    );
  assign nor_76_nl = ~(reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp | (~ mux_tmp_141));
  assign nor_77_nl = ~((~ reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp)
      | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]) | and_dcpl_12);
  assign mux_142_nl = MUX_s_1_2_2(nor_76_nl, nor_77_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mem_rsci_clken_d = mux_142_nl & reg_while_stage_v_2_tmp;
  assign while_and_nl = run_wen & ((or_dcpl_11 & reg_while_stage_v_3_tmp & (~ (lfst_exit_while_for_1_lpi_1_dfm_st_3[1]))
      & while_for_asn_sft_lpi_1_dfm_st_2 & exit_while_for_lpi_1_dfm_st_2) | dma_write_ctrl_Push_mioi_iswt0_mx0c1);
  assign while_mux_rmff = MUX_s_1_2_2(reg_dma_write_ctrl_Push_mioi_iswt0_tmp, (~
      dma_write_ctrl_Push_mioi_iswt0_mx0c1), while_and_nl);
  assign while_and_13_cse = run_wen & (~(and_dcpl_12 | or_dcpl_14));
  assign while_for_1_and_nl = run_wen & ((or_dcpl_11 & reg_while_stage_v_3_tmp &
      (lfst_exit_while_for_1_lpi_1_dfm_st_3==2'b10) & operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2)
      | dma_write_chnl_Push_mioi_iswt0_mx0c1);
  assign while_for_1_mux_15_rmff = MUX_s_1_2_2(reg_dma_write_chnl_Push_mioi_iswt0_tmp,
      (~ dma_write_chnl_Push_mioi_iswt0_mx0c1), while_for_1_and_nl);
  assign while_and_15_nl = run_wen & ((and_dcpl_25 & and_dcpl_23 & (~((reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[0])
      | operator_32_false_1_less_tmp))) | sync3_Push_mioi_iswt0_mx0c1);
  assign while_mux_6_rmff = MUX_s_1_2_2(reg_sync3_Push_mioi_iswt0_tmp, (~ sync3_Push_mioi_iswt0_mx0c1),
      while_and_15_nl);
  assign nor_78_nl = ~(lfst_exitL_exit_while_for_for_lpi_1 | (~ mux_tmp_134));
  assign mux_144_nl = MUX_s_1_2_2(nor_78_nl, and_69_itm, exitL_exitL_exit_while_for_for_lpi_1_dfm_1);
  assign sync2_read_reset_check_reset_while_for_nor_1_nl = ~((~ mux_144_nl) | or_dcpl_46);
  assign while_for_mux_23_rmff = MUX_s_1_2_2(reg_audio_out_Pop_mioi_iswt0_tmp, sync2_read_reset_check_reset_while_for_nor_1_nl,
      run_wen);
  assign or_199_cse = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]) | reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp
      | sync3_Push_mioi_bawt;
  assign or_6_nl = reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp | (~ reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp)
      | audio_out_Pop_mioi_bawt;
  assign mux_147_nl = MUX_s_1_2_2(not_tmp_120, nand_tmp_23, or_6_nl);
  assign mux_146_nl = MUX_s_1_2_2(not_tmp_120, nand_tmp_23, or_199_cse);
  assign mux_148_nl = MUX_s_1_2_2(mux_147_nl, mux_146_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign sync2_read_reset_check_reset_while_and_1_nl = (~(((~ or_76_cse) | (while_for_1_while_for_1_mux1h_tmp!=2'b00))
      & reg_while_stage_v_1_tmp)) & mux_148_nl;
  assign while_mux_8_rmff = MUX_s_1_2_2(reg_sync2_Pop_mioi_iswt0_tmp, sync2_read_reset_check_reset_while_and_1_nl,
      run_wen);
  assign while_and_16_cse = run_wen & (~ or_dcpl_50);
  assign while_mux_9_rmff = reg_while_stage_v_1_tmp | while_and_16_cse;
  assign and_148_cse = while_for_1_and_m1c_1 & (~ exit_while_for_lpi_1_dfm_1);
  assign while_for_1_while_for_1_while_for_1_or_nl = exitL_exit_while_for_1_sva_mx0w0
      | while_for_1_asn_itm_1_mx0c1;
  assign while_for_1_and_16_nl = run_wen & (and_dcpl_36 | while_for_1_asn_itm_1_mx0c1);
  assign while_for_1_mux_17_rmff = MUX_s_1_2_2(reg_while_for_1_asn_itm_1_tmp, while_for_1_while_for_1_while_for_1_or_nl,
      while_for_1_and_16_nl);
  assign while_and_17_nl = run_wen & (and_dcpl_36 | while_stage_v_2_mx1c1);
  assign while_mux_7_rmff = MUX_s_1_2_2(reg_while_stage_v_2_tmp, (~ while_stage_v_2_mx1c1),
      while_and_17_nl);
  assign operator_32_false_1_operator_32_false_1_mux_nl = MUX_s_1_2_2(operator_32_false_1_less_tmp,
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st, operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_mx0c1);
  assign operator_32_false_1_and_nl = run_wen & ((and_dcpl_25 & and_dcpl_23 & (~
      (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[0]))) | operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_mx0c1);
  assign operator_32_false_1_mux_4_rmff = MUX_s_1_2_2(reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp,
      operator_32_false_1_operator_32_false_1_mux_nl, operator_32_false_1_and_nl);
  assign while_for_for_and_26_cse = run_wen & mux_tmp_153;
  assign while_for_while_for_mux_nl = MUX_s_1_2_2((~ lfst_exitL_exit_while_for_for_lpi_1_dfm_1),
      sfi_exit_while_for_lpi_1_dfm_st, sfi_exit_while_for_lpi_1_dfm_st_1_mx0c1);
  assign while_for_and_nl = run_wen & ((mux_tmp_154 & or_76_cse & and_dcpl_45) |
      sfi_exit_while_for_lpi_1_dfm_st_1_mx0c1);
  assign while_for_mux_21_rmff = MUX_s_1_2_2(reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp,
      while_for_while_for_mux_nl, while_for_and_nl);
  assign while_for_while_for_mux_1_nl = MUX_s_1_2_2(while_for_asn_sft_lpi_1_dfm_mx0,
      while_for_asn_sft_lpi_1_dfm_st, while_for_asn_sft_lpi_1_dfm_st_1_mx0c1);
  assign while_for_and_1_nl = run_wen & ((and_dcpl_25 & and_dcpl_45) | while_for_asn_sft_lpi_1_dfm_st_1_mx0c1);
  assign while_for_mux_22_rmff = MUX_s_1_2_2(reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp,
      while_for_while_for_mux_1_nl, while_for_and_1_nl);
  assign and_120_cse = while_for_asn_sft_lpi_1 & lfst_exitL_exit_while_for_for_lpi_1;
  assign or_76_cse = (~ reg_while_for_1_asn_itm_1_tmp) | sync2_Pop_mioi_bawt;
  assign nand_nl = ~(((~ reg_while_stage_v_2_tmp) | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp) & reg_while_stage_v_4_tmp & (~
      mux_tmp_127));
  assign nor_91_nl = ~((~ reg_while_stage_v_2_tmp) | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp | mux_tmp_141);
  assign not_318_rgt = MUX_s_1_2_2(nand_nl, nor_91_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1]);
  assign while_for_1_and_17_nl = run_wen & (~ or_dcpl_49);
  assign while_for_1_mux_16_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp,
      reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse, while_for_1_and_17_nl);
  assign while_and_18_nl = run_wen & ((mux_tmp_133 & reg_while_stage_v_2_tmp) | while_stage_v_3_mx1c1);
  assign while_mux_10_rmff = MUX_s_1_2_2(reg_while_stage_v_3_tmp, (~ while_stage_v_3_mx1c1),
      while_and_18_nl);
  assign while_for_and_5_cse = run_wen & (~ and_dcpl_12);
  assign while_and_19_nl = run_wen & ((or_dcpl_11 & reg_while_stage_v_3_tmp) | while_stage_v_4_mx1c1);
  assign while_mux_5_rmff = MUX_s_1_2_2(reg_while_stage_v_4_tmp, (~ while_stage_v_4_mx1c1),
      while_and_19_nl);
  assign while_for_and_2_cse = run_wen & (~ or_dcpl_60);
  assign while_for_mux_19_rmff = MUX_s_1_2_2(reg_exit_while_for_lpi_1_dfm_st_3_tmp,
      exit_while_for_lpi_1_dfm_st_2, while_for_and_2_cse);
  assign while_for_mux_20_rmff = MUX_s_1_2_2(reg_while_for_asn_sft_lpi_1_dfm_st_3_tmp,
      while_for_asn_sft_lpi_1_dfm_st_2, while_for_and_2_cse);
  assign operator_32_false_1_mux_3_rmff = MUX_s_1_2_2(reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3_tmp,
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2, while_for_and_2_cse);
  assign while_for_1_mux_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp,
      lfst_exit_while_for_1_lpi_1_dfm_st_3, while_for_and_2_cse);
  assign mux_166_rgt = MUX_s_1_2_2(mux_tmp_154, mux_tmp_134, reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1]);
  assign while_for_1_while_for_1_and_4_nl = MUX_v_2_2_2(2'b00, reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse,
      operator_32_false_1_less_tmp);
  assign while_for_1_or_8_nl = and_148_cse | while_for_1_while_for_1_nor_2_cse_1;
  assign while_for_1_and_4_nl = exit_while_for_lpi_1_dfm_1 & while_for_1_and_m1c_1;
  assign while_for_1_while_for_1_mux1h_tmp = MUX1HOT_v_2_3_2(2'b01, 2'b10, while_for_1_while_for_1_and_4_nl,
      {while_for_1_or_8_nl , while_for_1_and_4_nl , while_for_1_equal_tmp_1});
  assign exitL_exit_while_for_1_sva_mx0w0 = ~((while_for_1_while_for_1_mux1h_tmp!=2'b00));
  assign exitL_exit_while_for_1_sva_mx0 = exitL_exit_while_for_1_sva_mx0w0 | (~ reg_while_stage_v_1_tmp);
  assign while_for_1_not_25_nl = ~ exitL_exit_while_for_1_sva_mx0;
  assign lfst_exit_while_for_1_lpi_1_dfm_6 = MUX_v_2_2_2(2'b00, while_for_1_while_for_1_mux1h_tmp,
      while_for_1_not_25_nl);
  assign or_208_nl = (~ lfst_exitL_exit_while_for_for_lpi_1) | exitL_exitL_exit_while_for_for_lpi_1_dfm_1;
  assign while_for_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(while_for_asn_sft_lpi_1, exit_while_for_lpi_1_dfm_1,
      or_208_nl);
  assign exit_while_for_lpi_1_dfm_1 = (~ operator_32_false_less_tmp) & exitL_exitL_exit_while_for_for_lpi_1_dfm_1;
  assign nl_while_for_for_acc_2_tmp = conv_u2s_3_4(while_for_for_j_3_0_lpi_1_dfm_2_0_1)
      + 4'b0001;
  assign while_for_for_acc_2_tmp = nl_while_for_for_acc_2_tmp[3:0];
  assign while_for_for_j_3_0_lpi_1_dfm_2_0_1 = MUX_v_3_2_2(3'b000, while_for_for_j_3_0_lpi_1_2_0,
      lfst_exitL_exit_while_for_for_lpi_1_dfm_1);
  assign lfst_exitL_exit_while_for_for_lpi_1_dfm_1 = lfst_exitL_exit_while_for_for_lpi_1
      & (~ exitL_exitL_exit_while_for_for_lpi_1_dfm_1);
  assign operator_32_false_less_tmp = $signed(while_for_i_lpi_1_dfm_1) < $signed(1'b0);
  assign operator_32_false_1_less_tmp = $signed((while_for_1_i_lpi_1[31:4])) < $signed({1'b0,
      (cfg_block_size[28:1])});
  assign while_for_1_and_m1c_1 = while_for_asn_sft_lpi_1_dfm_mx0 & (~ while_for_1_equal_tmp_1);
  assign while_for_1_while_for_1_nor_2_cse_1 = ~(while_for_asn_sft_lpi_1_dfm_mx0
      | while_for_1_equal_tmp_1);
  assign while_for_1_equal_tmp_1 = (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse==2'b10);
  assign while_for_for_nor_m1c_1 = ~((while_for_for_j_3_0_lpi_1_dfm_1_2_0_1!=3'b000));
  assign while_for_for_and_m1c_7 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b001);
  assign while_for_for_and_m1c_8 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b010);
  assign while_for_for_and_m1c_9 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b011);
  assign while_for_for_and_m1c_10 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b100);
  assign while_for_for_and_m1c_11 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b101);
  assign while_for_for_and_m1c_12 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b110);
  assign while_for_for_and_m1c_13 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b111);
  assign while_while_or_cse_1 = sync2_Pop_mioi_bawt | (~(reg_while_for_1_asn_itm_1_tmp
      & reg_while_stage_v_1_tmp));
  assign while_or_4_cse_1 = audio_out_Pop_mioi_bawt | (~(reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp
      & (~ reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp) & (((reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp==2'b01))
      | (~((reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp!=2'b00)))) & reg_while_stage_v_2_tmp));
  assign while_or_5_cse_1 = sync3_Push_mioi_bawt | (~((~ reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp)
      & (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp==2'b10) & reg_while_stage_v_2_tmp));
  assign while_or_cse_1 = dma_write_ctrl_Push_mioi_bawt | (~(reg_exit_while_for_lpi_1_dfm_st_3_tmp
      & reg_while_for_asn_sft_lpi_1_dfm_st_3_tmp & (((reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp==2'b01))
      | (~((reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp!=2'b00)))) & reg_while_stage_v_4_tmp));
  assign while_or_1_cse_1 = dma_write_chnl_Push_mioi_bawt | (~(reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3_tmp
      & (reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp==2'b10) & reg_while_stage_v_4_tmp));
  assign while_for_while_for_or_mx0w0 = (while_for_for_acc_2_tmp[3]) | while_for_asn_sft_lpi_1_dfm_mx0;
  assign or_12_cse = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp[0]) | (~ reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3_tmp)
      | dma_write_chnl_Push_mioi_bawt;
  assign nand_31_cse = ~(reg_exit_while_for_lpi_1_dfm_st_3_tmp & reg_while_for_asn_sft_lpi_1_dfm_st_3_tmp);
  assign or_137_nl = dma_write_ctrl_Push_mioi_bawt | nand_31_cse;
  assign mux_tmp_127 = MUX_s_1_2_2(or_137_nl, or_12_cse, reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp[1]);
  assign or_dcpl_11 = mux_tmp_127 | (~ reg_while_stage_v_4_tmp);
  assign or_dcpl_14 = (~ reg_while_stage_v_3_tmp) | (lfst_exit_while_for_1_lpi_1_dfm_st_3[1])
      | (~(while_for_asn_sft_lpi_1_dfm_st_2 & exit_while_for_lpi_1_dfm_st_2));
  assign and_dcpl_12 = (~ mux_tmp_127) & reg_while_stage_v_4_tmp;
  assign or_dcpl_22 = (~(reg_while_stage_v_3_tmp & (lfst_exit_while_for_1_lpi_1_dfm_st_3[1])))
      | (lfst_exit_while_for_1_lpi_1_dfm_st_3[0]) | (~ operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2);
  assign and_dcpl_23 = (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1]) & reg_while_stage_v_1_tmp;
  assign or_tmp_130 = reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp | audio_out_Pop_mioi_bawt;
  assign not_tmp_99 = ~(reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp | and_dcpl_12);
  assign mux_132_nl = MUX_s_1_2_2(not_tmp_99, or_dcpl_11, or_tmp_130);
  assign and_57_nl = or_199_cse & or_dcpl_11;
  assign mux_tmp_133 = MUX_s_1_2_2(mux_132_nl, and_57_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mux_tmp_134 = MUX_s_1_2_2(or_dcpl_11, mux_tmp_133, reg_while_stage_v_2_tmp);
  assign and_dcpl_25 = mux_tmp_134 & or_76_cse;
  assign or_14_nl = (~ reg_while_for_asn_sft_lpi_1_dfm_st_3_tmp) | (~ reg_exit_while_for_lpi_1_dfm_st_3_tmp)
      | dma_write_ctrl_Push_mioi_bawt;
  assign mux_137_nl = MUX_s_1_2_2(or_14_nl, or_12_cse, reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp[1]);
  assign nand_tmp_23 = ~(reg_while_stage_v_4_tmp & (~ mux_137_nl));
  assign or_dcpl_25 = (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]) | (~ reg_while_stage_v_2_tmp);
  assign mux_tmp_141 = MUX_s_1_2_2(not_tmp_99, or_dcpl_11, audio_out_Pop_mioi_bawt);
  assign or_dcpl_34 = ~((reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]) & reg_while_stage_v_2_tmp);
  assign and_dcpl_33 = (~ sync2_Pop_mioi_bawt) & reg_while_for_1_asn_itm_1_tmp;
  assign or_dcpl_46 = and_dcpl_33 | (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1])
      | (~ reg_while_stage_v_1_tmp);
  assign and_69_itm = operator_32_false_less_tmp & mux_tmp_134;
  assign not_tmp_120 = ~(reg_while_stage_v_2_tmp | (~ nand_tmp_23));
  assign or_dcpl_49 = (~ mux_tmp_134) | and_dcpl_33 | (~ reg_while_stage_v_1_tmp);
  assign or_dcpl_50 = ~(mux_tmp_134 & (~(and_dcpl_33 & reg_while_stage_v_1_tmp)));
  assign or_dcpl_52 = and_dcpl_33 | while_for_1_equal_tmp_1;
  assign or_dcpl_53 = (~ mux_tmp_134) | or_dcpl_52;
  assign and_dcpl_36 = and_dcpl_25 & reg_while_stage_v_1_tmp;
  assign or_224_nl = (~ reg_while_stage_v_2_tmp) | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1])
      | reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp | audio_out_Pop_mioi_bawt;
  assign mux_tmp_153 = MUX_s_1_2_2(not_tmp_99, or_dcpl_11, or_224_nl);
  assign and_dcpl_45 = (~ (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1])) & reg_while_stage_v_1_tmp;
  assign nor_73_nl = ~(and_120_cse | (~ mux_tmp_134));
  assign mux_tmp_154 = MUX_s_1_2_2(nor_73_nl, and_69_itm, exitL_exitL_exit_while_for_for_lpi_1_dfm_1);
  assign nand_53_nl = ~(and_120_cse & mux_tmp_134);
  assign or_226_nl = operator_32_false_less_tmp | (~ mux_tmp_134);
  assign mux_tmp_156 = MUX_s_1_2_2(nand_53_nl, or_226_nl, exitL_exitL_exit_while_for_for_lpi_1_dfm_1);
  assign or_dcpl_60 = and_dcpl_12 | (~ reg_while_stage_v_3_tmp);
  assign dma_write_ctrl_Push_mioi_iswt0_mx0c1 = or_dcpl_14 & reg_while_for_asn_sft_lpi_1_dfm_st_3_tmp
      & reg_exit_while_for_lpi_1_dfm_st_3_tmp & dma_write_ctrl_Push_mioi_bawt & (~
      (reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp[1])) & reg_while_stage_v_4_tmp;
  assign dma_write_chnl_Push_mioi_iswt0_mx0c1 = or_dcpl_22 & (~ (reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp[0]))
      & reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3_tmp & dma_write_chnl_Push_mioi_bawt
      & (reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp[1]) & reg_while_stage_v_4_tmp;
  assign or_159_nl = or_76_cse | and_dcpl_12;
  assign mux_135_nl = MUX_s_1_2_2(and_dcpl_12, or_159_nl, and_dcpl_23);
  assign or_157_nl = operator_32_false_1_less_tmp | (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[0]);
  assign mux_136_nl = MUX_s_1_2_2((~ mux_135_nl), or_dcpl_11, or_157_nl);
  assign sync3_Push_mioi_iswt0_mx0c1 = mux_136_nl & (~ (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0]))
      & sync3_Push_mioi_bawt & (~ reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp)
      & (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]) & reg_while_stage_v_2_tmp;
  assign while_for_1_asn_itm_1_mx0c1 = mux_tmp_134 & (~ reg_while_stage_v_1_tmp);
  assign nor_80_nl = ~(or_76_cse | (~ mux_tmp_133));
  assign mux_149_nl = MUX_s_1_2_2(mux_tmp_133, nor_80_nl, reg_while_stage_v_1_tmp);
  assign while_stage_v_2_mx1c1 = mux_149_nl & reg_while_stage_v_2_tmp;
  assign operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_mx0c1 = and_dcpl_36
      & ((reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse!=2'b10));
  assign mux_157_nl = MUX_s_1_2_2((~ mux_tmp_156), mux_tmp_134, reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1]);
  assign sfi_exit_while_for_lpi_1_dfm_st_1_mx0c1 = mux_157_nl & or_76_cse & reg_while_stage_v_1_tmp;
  assign while_for_asn_sft_lpi_1_dfm_st_1_mx0c1 = and_dcpl_25 & and_dcpl_23;
  assign or_234_nl = or_tmp_130 | (~(reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp &
      or_dcpl_11));
  assign or_232_nl = reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp
      | sync3_Push_mioi_bawt | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0])
      | and_dcpl_12;
  assign mux_159_nl = MUX_s_1_2_2(or_234_nl, or_232_nl, reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]);
  assign mux_160_nl = MUX_s_1_2_2(and_dcpl_12, mux_159_nl, reg_while_stage_v_2_tmp);
  assign while_stage_v_3_mx1c1 = (~ mux_160_nl) & reg_while_stage_v_3_tmp;
  assign while_stage_v_4_mx1c1 = mux_tmp_127 & reg_while_stage_v_4_tmp & (~ reg_while_stage_v_3_tmp);
  assign while_for_for_and_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_nor_m1c_1;
  assign while_for_for_and_1_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_nor_m1c_1;
  assign while_for_for_and_2_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_7;
  assign while_for_for_and_3_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_7;
  assign while_for_for_and_4_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_8;
  assign while_for_for_and_5_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_8;
  assign while_for_for_and_6_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_9;
  assign while_for_for_and_7_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_9;
  assign while_for_for_and_8_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_10;
  assign while_for_for_and_9_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_10;
  assign while_for_for_and_10_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_11;
  assign while_for_for_and_11_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_11;
  assign while_for_for_and_12_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_12;
  assign while_for_for_and_13_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_12;
  assign while_for_for_and_14_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_13;
  assign while_for_for_and_15_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_13;
  assign mem_rsci_d_d = MUX1HOT_v_64_16_2((while_audio_out_reg_data_lpi_1[63:0]),
      (audio_out_Pop_mioi_idat_mxwt[63:0]), (while_audio_out_reg_data_lpi_1[127:64]),
      (audio_out_Pop_mioi_idat_mxwt[127:64]), (while_audio_out_reg_data_lpi_1[191:128]),
      (audio_out_Pop_mioi_idat_mxwt[191:128]), (while_audio_out_reg_data_lpi_1[255:192]),
      (audio_out_Pop_mioi_idat_mxwt[255:192]), (while_audio_out_reg_data_lpi_1[319:256]),
      (audio_out_Pop_mioi_idat_mxwt[319:256]), (while_audio_out_reg_data_lpi_1[383:320]),
      (audio_out_Pop_mioi_idat_mxwt[383:320]), (while_audio_out_reg_data_lpi_1[447:384]),
      (audio_out_Pop_mioi_idat_mxwt[447:384]), (while_audio_out_reg_data_lpi_1[511:448]),
      (audio_out_Pop_mioi_idat_mxwt[511:448]), {while_for_for_and_nl , while_for_for_and_1_nl
      , while_for_for_and_2_nl , while_for_for_and_3_nl , while_for_for_and_4_nl
      , while_for_for_and_5_nl , while_for_for_and_6_nl , while_for_for_and_7_nl
      , while_for_for_and_8_nl , while_for_for_and_9_nl , while_for_for_and_10_nl
      , while_for_for_and_11_nl , while_for_for_and_12_nl , while_for_for_and_13_nl
      , while_for_for_and_14_nl , while_for_for_and_15_nl});
  assign mem_rsci_radr_d = while_for_1_data_slc_13_0_itm_1;
  assign mem_rsci_wadr_d = {(while_for_1_data_slc_13_0_itm_1[10:0]) , while_for_for_j_3_0_lpi_1_dfm_1_2_0_1};
  assign mem_rsci_we_d_pff = ~(and_dcpl_12 | (reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp
      & (~ audio_out_Pop_mioi_bawt)) | reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp |
      or_dcpl_25);
  assign mem_rsci_readA_r_ram_ir_internal_RMASK_B_d = ~(and_dcpl_12 | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[0])
      | (~ reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp) |
      or_dcpl_34);
  assign nand_31_cse_pff = ~(while_for_mux_19_rmff & while_for_mux_20_rmff);
  assign or_256_nl = dma_write_ctrl_Push_mioi_bawt_iff | nand_31_cse_pff;
  assign or_255_nl = (while_for_1_mux_rmff[0]) | (~ operator_32_false_1_mux_3_rmff)
      | dma_write_chnl_Push_mioi_bawt_iff;
  assign mux_tmp_127_pff = MUX_s_1_2_2(or_256_nl, or_255_nl, while_for_1_mux_rmff[1]);
  assign or_dcpl_11_pff = mux_tmp_127_pff | (~ while_mux_5_rmff);
  assign and_dcpl_12_pff = (~ mux_tmp_127_pff) & while_mux_5_rmff;
  assign nor_84_nl = ~(while_for_mux_21_rmff | and_dcpl_12_pff);
  assign or_258_nl = while_for_mux_22_rmff | audio_out_Pop_mioi_bawt_iff;
  assign mux_171_nl = MUX_s_1_2_2(nor_84_nl, or_dcpl_11_pff, or_258_nl);
  assign and_145_nl = ((while_for_1_mux_16_rmff[0]) | operator_32_false_1_mux_4_rmff
      | sync3_Push_mioi_bawt_iff) & or_dcpl_11_pff;
  assign mux_tmp_133_pff = MUX_s_1_2_2(mux_171_nl, and_145_nl, while_for_1_mux_16_rmff[1]);
  assign mux_tmp_134_pff = MUX_s_1_2_2(or_dcpl_11_pff, mux_tmp_133_pff, while_mux_7_rmff);
  assign while_while_or_cse_1_pff = sync2_Pop_mioi_bawt_iff | (~(while_for_1_mux_17_rmff
      & while_mux_9_rmff));
  assign while_or_4_cse_1_pff = audio_out_Pop_mioi_bawt_iff | (~(while_for_mux_21_rmff
      & (~ while_for_mux_22_rmff) & (((while_for_1_mux_16_rmff==2'b01)) | (~((while_for_1_mux_16_rmff!=2'b00))))
      & while_mux_7_rmff));
  assign while_or_5_cse_1_pff = sync3_Push_mioi_bawt_iff | (~((~ operator_32_false_1_mux_4_rmff)
      & (while_for_1_mux_16_rmff==2'b10) & while_mux_7_rmff));
  assign while_or_cse_1_pff = dma_write_ctrl_Push_mioi_bawt_iff | (~(while_for_mux_19_rmff
      & while_for_mux_20_rmff & (((while_for_1_mux_rmff==2'b01)) | (~((while_for_1_mux_rmff!=2'b00))))
      & while_mux_5_rmff));
  assign while_or_1_cse_1_pff = dma_write_chnl_Push_mioi_bawt_iff | (~(operator_32_false_1_mux_3_rmff
      & (while_for_1_mux_rmff==2'b10) & while_mux_5_rmff));
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_dma_write_ctrl_Push_mioi_iswt0_tmp <= 1'b0;
      reg_dma_write_chnl_Push_mioi_iswt0_tmp <= 1'b0;
      reg_sync3_Push_mioi_iswt0_tmp <= 1'b0;
      reg_audio_out_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_sync2_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_while_stage_v_1_tmp <= 1'b0;
      reg_while_for_1_asn_itm_1_tmp <= 1'b0;
      reg_while_stage_v_2_tmp <= 1'b0;
      reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp <= 1'b0;
      reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp <= 1'b0;
      reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp <= 1'b0;
      reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp <= 2'b00;
      reg_while_stage_v_3_tmp <= 1'b0;
      reg_while_stage_v_4_tmp <= 1'b0;
      reg_exit_while_for_lpi_1_dfm_st_3_tmp <= 1'b0;
      reg_while_for_asn_sft_lpi_1_dfm_st_3_tmp <= 1'b0;
      reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3_tmp <= 1'b0;
      reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp <= 2'b00;
      run_wen <= 1'b1;
    end
    else begin
      reg_dma_write_ctrl_Push_mioi_iswt0_tmp <= while_mux_rmff;
      reg_dma_write_chnl_Push_mioi_iswt0_tmp <= while_for_1_mux_15_rmff;
      reg_sync3_Push_mioi_iswt0_tmp <= while_mux_6_rmff;
      reg_audio_out_Pop_mioi_iswt0_tmp <= while_for_mux_23_rmff;
      reg_sync2_Pop_mioi_iswt0_tmp <= while_mux_8_rmff;
      reg_while_stage_v_1_tmp <= while_mux_9_rmff;
      reg_while_for_1_asn_itm_1_tmp <= while_for_1_mux_17_rmff;
      reg_while_stage_v_2_tmp <= while_mux_7_rmff;
      reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp <= operator_32_false_1_mux_4_rmff;
      reg_sfi_exit_while_for_lpi_1_dfm_st_1_tmp <= while_for_mux_21_rmff;
      reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp <= while_for_mux_22_rmff;
      reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp <= while_for_1_mux_16_rmff;
      reg_while_stage_v_3_tmp <= while_mux_10_rmff;
      reg_while_stage_v_4_tmp <= while_mux_5_rmff;
      reg_exit_while_for_lpi_1_dfm_st_3_tmp <= while_for_mux_19_rmff;
      reg_while_for_asn_sft_lpi_1_dfm_st_3_tmp <= while_for_mux_20_rmff;
      reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3_tmp <= operator_32_false_1_mux_3_rmff;
      reg_lfst_exit_while_for_1_lpi_1_dfm_st_4_tmp <= while_for_1_mux_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_ctrl_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      dma_write_ctrl_Push_mioi_idat_63_36 <= 28'b0000000000000000000000000000;
    end
    else if ( while_and_13_cse ) begin
      dma_write_ctrl_Push_mioi_idat_31_0 <= cfg_output_base;
      dma_write_ctrl_Push_mioi_idat_63_36 <= cfg_block_size[28:1];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_chnl_Push_mioi_idat <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(and_dcpl_12 | or_dcpl_22)) ) begin
      dma_write_chnl_Push_mioi_idat <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_i_lpi_1_dfm_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((~((~(mux_173_nl | while_for_1_equal_tmp_1 | (~ (while_for_for_acc_2_tmp[3]))))
        | exitL_exit_while_for_1_sva_mx0)) | or_dcpl_50)) ) begin
      while_for_i_lpi_1_dfm_1 <= MUX_v_32_2_2(32'b00000000000000000000000000000000,
          z_out, while_for_1_not_23_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_for_j_3_0_lpi_1_2_0 <= 3'b000;
    end
    else if ( run_wen & (~ or_dcpl_53) ) begin
      while_for_for_j_3_0_lpi_1_2_0 <= while_for_for_acc_2_tmp[2:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( run_wen & (~(lfst_exitL_exit_while_for_for_lpi_1_dfm_1 | or_dcpl_53))
        ) begin
      while_for_asn_sft_lpi_1 <= exit_while_for_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exitL_exit_while_for_for_lpi_1 <= 1'b0;
    end
    else if ( run_wen & (~((~ mux_tmp_134) | or_dcpl_52 | (~ reg_while_stage_v_1_tmp)))
        ) begin
      lfst_exitL_exit_while_for_for_lpi_1 <= ~((while_for_for_acc_2_tmp[3]) | while_for_asn_sft_lpi_1_dfm_mx0);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exitL_exit_while_for_for_lpi_1_dfm_1 <= 1'b0;
      reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse <= 2'b00;
    end
    else if ( while_and_16_cse ) begin
      exitL_exitL_exit_while_for_for_lpi_1_dfm_1 <= while_for_mux_17_nl | (~((lfst_exit_while_for_1_lpi_1_dfm_6!=2'b00)));
      reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse <= lfst_exit_while_for_1_lpi_1_dfm_6;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((while_for_1_equal_tmp_1 & (~ operator_32_false_1_less_tmp))
        | or_dcpl_49 | and_148_cse | while_for_1_while_for_1_nor_2_cse_1)) ) begin
      while_for_1_i_lpi_1 <= MUX_v_32_2_2((signext_32_1(~ exit_while_for_lpi_1_dfm_1)),
          z_out, while_for_1_and_3_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_audio_out_reg_data_lpi_1 <= 512'b
    end
    else if ( run_wen & mux_tmp_133 & reg_while_stage_v_2_tmp & while_for_1_and_10_itm_1
        ) begin
      while_audio_out_reg_data_lpi_1 <= audio_out_Pop_mioi_idat_mxwt;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_while_for_for_equal_itm_1_cse <= 1'b0;
      reg_while_for_for_equal_3_itm_1_cse <= 1'b0;
      while_for_for_j_3_0_lpi_1_dfm_1_2_0_1 <= 3'b000;
    end
    else if ( while_for_for_and_26_cse ) begin
      reg_while_for_for_equal_itm_1_cse <= lfst_exitL_exit_while_for_for_lpi_1_dfm_1;
      reg_while_for_for_equal_3_itm_1_cse <= ~ lfst_exitL_exit_while_for_for_lpi_1_dfm_1;
      while_for_for_j_3_0_lpi_1_dfm_1_2_0_1 <= while_for_for_j_3_0_lpi_1_dfm_2_0_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_data_slc_13_0_itm_1 <= 14'b00000000000000;
    end
    else if ( run_wen & ((mux_tmp_153 & (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1]))
        | not_318_rgt) ) begin
      while_for_1_data_slc_13_0_itm_1 <= MUX_v_14_2_2((while_for_1_i_lpi_1[13:0]),
          ({3'b000 , while_for_for_idx_mux_nl}), not_318_rgt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exit_while_for_lpi_1_dfm_st_2 <= 1'b0;
      while_for_asn_sft_lpi_1_dfm_st_2 <= 1'b0;
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2 <= 1'b0;
      lfst_exit_while_for_1_lpi_1_dfm_st_3 <= 2'b00;
    end
    else if ( while_for_and_5_cse ) begin
      exit_while_for_lpi_1_dfm_st_2 <= exit_while_for_lpi_1_dfm_st_1;
      while_for_asn_sft_lpi_1_dfm_st_2 <= reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp;
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2 <= reg_operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_tmp;
      lfst_exit_while_for_1_lpi_1_dfm_st_3 <= reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sfi_exit_while_for_lpi_1_dfm_st <= 1'b0;
    end
    else if ( run_wen & (~((~ mux_tmp_154) | or_dcpl_46)) ) begin
      sfi_exit_while_for_lpi_1_dfm_st <= ~ lfst_exitL_exit_while_for_for_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_asn_sft_lpi_1_dfm_st <= 1'b0;
    end
    else if ( run_wen & (~ (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1])) ) begin
      while_for_asn_sft_lpi_1_dfm_st <= while_for_asn_sft_lpi_1_dfm_mx0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st <= 1'b0;
    end
    else if ( run_wen & (~((~((reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1]) & reg_while_stage_v_1_tmp))
        | (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[0]))) ) begin
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st <= operator_32_false_1_less_tmp;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exitL_exit_while_for_for_lpi_1 <= 1'b0;
    end
    else if ( run_wen & (~((~ mux_tmp_134) | while_for_1_equal_tmp_1)) ) begin
      exitL_exitL_exit_while_for_for_lpi_1 <= while_for_while_for_or_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exit_while_for_lpi_1_dfm_st_1 <= 1'b0;
    end
    else if ( run_wen & ((~(mux_tmp_156 | (reg_lfst_exit_while_for_1_lpi_1_dfm_1_cse[1])))
        | mux_166_rgt) ) begin
      exit_while_for_lpi_1_dfm_st_1 <= MUX_s_1_2_2(exit_while_for_lpi_1_dfm_1, exit_while_for_lpi_1_dfm_st,
          mux_166_rgt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_and_10_itm_1 <= 1'b0;
    end
    else if ( run_wen & mux_tmp_134 ) begin
      while_for_1_and_10_itm_1 <= ~(lfst_exitL_exit_while_for_for_lpi_1_dfm_1 | while_for_asn_sft_lpi_1_dfm_mx0
          | while_for_1_equal_tmp_1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exit_while_for_lpi_1_dfm_st <= 1'b0;
    end
    else if ( run_wen & (~(mux_tmp_156 | or_dcpl_46)) ) begin
      exit_while_for_lpi_1_dfm_st <= exit_while_for_lpi_1_dfm_1;
    end
  end
  assign while_for_1_not_23_nl = ~ exitL_exit_while_for_1_sva_mx0;
  assign mux_173_nl = MUX_s_1_2_2(and_120_cse, (~ operator_32_false_less_tmp), exitL_exitL_exit_while_for_for_lpi_1_dfm_1);
  assign or_243_nl = while_for_1_equal_tmp_1 | (~ reg_while_stage_v_1_tmp);
  assign while_for_mux_17_nl = MUX_s_1_2_2(while_for_while_for_or_mx0w0, exitL_exitL_exit_while_for_for_lpi_1,
      or_243_nl);
  assign while_for_1_and_3_nl = operator_32_false_1_less_tmp & while_for_1_equal_tmp_1
      & (~ or_dcpl_49);
  assign and_83_nl = (~ mux_tmp_141) & (~(reg_while_for_asn_sft_lpi_1_dfm_st_1_tmp
      | (reg_lfst_exit_while_for_1_lpi_1_dfm_st_2_tmp[1]))) & reg_while_stage_v_2_tmp;
  assign while_for_for_idx_mux_nl = MUX_v_11_2_2((while_for_i_lpi_1_dfm_1[10:0]),
      (while_for_1_data_slc_13_0_itm_1[10:0]), and_83_nl);
  assign while_for_mux_26_nl = MUX_v_32_2_2(while_for_i_lpi_1_dfm_1, while_for_1_i_lpi_1,
      while_for_1_equal_tmp_1);
  assign nl_z_out = while_for_mux_26_nl + 32'b00000000000000000000000000000001;
  assign z_out = nl_z_out[31:0];

  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_16_2;
    input [63:0] input_15;
    input [63:0] input_14;
    input [63:0] input_13;
    input [63:0] input_12;
    input [63:0] input_11;
    input [63:0] input_10;
    input [63:0] input_9;
    input [63:0] input_8;
    input [63:0] input_7;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [15:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | (input_1 & {64{sel[1]}});
    result = result | (input_2 & {64{sel[2]}});
    result = result | (input_3 & {64{sel[3]}});
    result = result | (input_4 & {64{sel[4]}});
    result = result | (input_5 & {64{sel[5]}});
    result = result | (input_6 & {64{sel[6]}});
    result = result | (input_7 & {64{sel[7]}});
    result = result | (input_8 & {64{sel[8]}});
    result = result | (input_9 & {64{sel[9]}});
    result = result | (input_10 & {64{sel[10]}});
    result = result | (input_11 & {64{sel[11]}});
    result = result | (input_12 & {64{sel[12]}});
    result = result | (input_13 & {64{sel[13]}});
    result = result | (input_14 & {64{sel[14]}});
    result = result | (input_15 & {64{sel[15]}});
    MUX1HOT_v_64_16_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input  sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input  sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [31:0] signext_32_1;
    input  vector;
  begin
    signext_32_1= {{31{vector}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control
// ------------------------------------------------------------------


module Control (
  clk, rst, acc_start, acc_done, sync1_val, sync1_rdy, sync1_msg, sync2_val, sync2_rdy,
      sync2_msg, sync3_val, sync3_rdy, sync3_msg
);
  input clk;
  input rst;
  input acc_start;
  output acc_done;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;



  // Interconnect Declarations for Component Instantiations 
  Control_run Control_run_inst (
      .clk(clk),
      .rst(rst),
      .acc_start(acc_start),
      .acc_done(acc_done),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer
// ------------------------------------------------------------------


module InputBuffer (
  clk, rst, cfg_src_num, cfg_block_size, cfg_input_base, sync1_val, sync1_rdy, sync1_msg,
      dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val,
      dma_read_chnl_rdy, dma_read_chnl_msg, audio_in_val, audio_in_rdy, audio_in_msg
);
  input clk;
  input rst;
  input [31:0] cfg_src_num;
  input [31:0] cfg_block_size;
  input [31:0] cfg_input_base;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output audio_in_val;
  input audio_in_rdy;
  output [15:0] audio_in_msg;


  // Interconnect Declarations
  wire mem_rsci_clken_d;
  wire [63:0] mem_rsci_d_d;
  wire [63:0] mem_rsci_q_d;
  wire [12:0] mem_rsci_wadr_d;
  wire mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire [12:0] operator_32_true_acc_2_cmp_a;
  wire [12:0] operator_32_true_acc_2_cmp_b;
  wire [12:0] operator_32_true_acc_2_cmp_c;
  wire [12:0] operator_32_true_acc_2_cmp_z;
  wire mem_rsc_clken;
  wire [63:0] mem_rsc_q;
  wire [12:0] mem_rsc_radr;
  wire mem_rsc_we;
  wire [63:0] mem_rsc_d;
  wire [12:0] mem_rsc_wadr;
  wire mem_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_muladd1 #(.width_a(32'sd13),
  .signd_a(32'sd1),
  .width_b(32'sd13),
  .signd_b(32'sd1),
  .width_c(32'sd13),
  .signd_c(32'sd1),
  .width_cst(32'sd1),
  .signd_cst(32'sd0),
  .width_d(32'sd0),
  .signd_d(32'sd1),
  .width_z(32'sd13),
  .add_axb(32'sd1),
  .add_c(32'sd1),
  .add_d(32'sd1),
  .use_const(32'sd1)) operator_32_true_acc_2_cmp (
      .a(operator_32_true_acc_2_cmp_a),
      .b(operator_32_true_acc_2_cmp_b),
      .c(operator_32_true_acc_2_cmp_c),
      .cst(1'b0),
      .z(operator_32_true_acc_2_cmp_z)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd13),
  .data_width(32'sd64),
  .depth(32'sd8192),
  .latency(32'sd1)) mem_rsc_comp (
      .clk(clk),
      .clken(mem_rsc_clken),
      .d(mem_rsc_d),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .wadr(mem_rsc_wadr),
      .we(mem_rsc_we)
    );
  InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_15_13_64_8192_8192_64_1_gen mem_rsci
      (
      .clken(mem_rsc_clken),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .we(mem_rsc_we),
      .d(mem_rsc_d),
      .wadr(mem_rsc_wadr),
      .clken_d(mem_rsci_clken_d),
      .d_d(mem_rsci_d_d),
      .q_d(mem_rsci_q_d),
      .radr_d(operator_32_true_acc_2_cmp_z),
      .wadr_d(mem_rsci_wadr_d),
      .we_d(mem_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(mem_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  InputBuffer_run InputBuffer_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_src_num(cfg_src_num),
      .cfg_block_size(cfg_block_size),
      .cfg_input_base(cfg_input_base),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .mem_rsci_clken_d(mem_rsci_clken_d),
      .mem_rsci_d_d(mem_rsci_d_d),
      .mem_rsci_q_d(mem_rsci_q_d),
      .mem_rsci_wadr_d(mem_rsci_wadr_d),
      .mem_rsci_readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .operator_32_true_acc_2_cmp_a(operator_32_true_acc_2_cmp_a),
      .operator_32_true_acc_2_cmp_b(operator_32_true_acc_2_cmp_b),
      .operator_32_true_acc_2_cmp_c(operator_32_true_acc_2_cmp_c),
      .mem_rsci_we_d_pff(mem_rsci_we_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Encoder
// ------------------------------------------------------------------


module Encoder (
  clk, rst, cfg_src_num, cfg_src_coeff_0, cfg_src_coeff_1, cfg_src_coeff_2, cfg_src_coeff_3,
      cfg_src_coeff_4, cfg_src_coeff_5, cfg_src_coeff_6, cfg_src_coeff_7, cfg_src_coeff_8,
      cfg_src_coeff_9, cfg_src_coeff_10, cfg_src_coeff_11, cfg_src_coeff_12, cfg_src_coeff_13,
      cfg_src_coeff_14, cfg_src_coeff_15, cfg_chan_coeff_0, cfg_chan_coeff_1, cfg_chan_coeff_2,
      cfg_chan_coeff_3, cfg_chan_coeff_4, cfg_chan_coeff_5, cfg_chan_coeff_6, cfg_chan_coeff_7,
      cfg_chan_coeff_8, cfg_chan_coeff_9, cfg_chan_coeff_10, cfg_chan_coeff_11, cfg_chan_coeff_12,
      cfg_chan_coeff_13, cfg_chan_coeff_14, cfg_chan_coeff_15, audio_in_val, audio_in_rdy,
      audio_in_msg, audio_out_val, audio_out_rdy, audio_out_msg
);
  input clk;
  input rst;
  input [31:0] cfg_src_num;
  input [31:0] cfg_src_coeff_0;
  input [31:0] cfg_src_coeff_1;
  input [31:0] cfg_src_coeff_2;
  input [31:0] cfg_src_coeff_3;
  input [31:0] cfg_src_coeff_4;
  input [31:0] cfg_src_coeff_5;
  input [31:0] cfg_src_coeff_6;
  input [31:0] cfg_src_coeff_7;
  input [31:0] cfg_src_coeff_8;
  input [31:0] cfg_src_coeff_9;
  input [31:0] cfg_src_coeff_10;
  input [31:0] cfg_src_coeff_11;
  input [31:0] cfg_src_coeff_12;
  input [31:0] cfg_src_coeff_13;
  input [31:0] cfg_src_coeff_14;
  input [31:0] cfg_src_coeff_15;
  input [31:0] cfg_chan_coeff_0;
  input [31:0] cfg_chan_coeff_1;
  input [31:0] cfg_chan_coeff_2;
  input [31:0] cfg_chan_coeff_3;
  input [31:0] cfg_chan_coeff_4;
  input [31:0] cfg_chan_coeff_5;
  input [31:0] cfg_chan_coeff_6;
  input [31:0] cfg_chan_coeff_7;
  input [31:0] cfg_chan_coeff_8;
  input [31:0] cfg_chan_coeff_9;
  input [31:0] cfg_chan_coeff_10;
  input [31:0] cfg_chan_coeff_11;
  input [31:0] cfg_chan_coeff_12;
  input [31:0] cfg_chan_coeff_13;
  input [31:0] cfg_chan_coeff_14;
  input [31:0] cfg_chan_coeff_15;
  input audio_in_val;
  output audio_in_rdy;
  input [15:0] audio_in_msg;
  output audio_out_val;
  input audio_out_rdy;
  output [511:0] audio_out_msg;


  // Interconnect Declarations
  wire [47:0] while_for_1_mul_cmp_b;
  wire while_for_1_mul_cmp_en;
  wire [62:0] while_for_1_mul_cmp_z;
  wire [47:0] while_for_1_mul_cmp_1_b;
  wire [62:0] while_for_1_mul_cmp_1_z;
  wire [47:0] while_for_1_mul_cmp_2_b;
  wire [62:0] while_for_1_mul_cmp_2_z;
  wire [47:0] while_for_1_mul_cmp_3_b;
  wire [62:0] while_for_1_mul_cmp_3_z;
  wire [47:0] while_for_1_mul_cmp_4_b;
  wire [62:0] while_for_1_mul_cmp_4_z;
  wire [47:0] while_for_1_mul_cmp_5_b;
  wire [62:0] while_for_1_mul_cmp_5_z;
  wire [47:0] while_for_1_mul_cmp_6_b;
  wire [62:0] while_for_1_mul_cmp_6_z;
  wire [47:0] while_for_1_mul_cmp_7_b;
  wire [62:0] while_for_1_mul_cmp_7_z;
  wire [47:0] while_for_1_mul_cmp_8_b;
  wire [62:0] while_for_1_mul_cmp_8_z;
  wire [47:0] while_for_1_mul_cmp_9_b;
  wire [62:0] while_for_1_mul_cmp_9_z;
  wire [47:0] while_for_1_mul_cmp_10_b;
  wire [62:0] while_for_1_mul_cmp_10_z;
  wire [47:0] while_for_1_mul_cmp_11_b;
  wire [62:0] while_for_1_mul_cmp_11_z;
  wire [47:0] while_for_1_mul_cmp_12_b;
  wire [62:0] while_for_1_mul_cmp_12_z;
  wire [47:0] while_for_1_mul_cmp_13_b;
  wire [62:0] while_for_1_mul_cmp_13_z;
  wire [47:0] while_for_1_mul_cmp_14_b;
  wire [62:0] while_for_1_mul_cmp_14_z;
  wire [47:0] while_for_1_mul_cmp_15_b;
  wire [62:0] while_for_1_mul_cmp_15_z;
  wire [31:0] while_for_1_mul_cmp_a_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_1 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_1_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_1_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_2 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_2_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_2_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_3 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_3_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_3_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_4 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_4_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_4_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_5 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_5_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_5_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_6 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_6_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_6_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_7 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_7_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_7_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_8 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_8_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_8_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_9 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_9_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_9_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_10 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_10_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_10_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_11 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_11_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_11_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_12 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_12_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_12_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_13 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_13_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_13_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_14 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_14_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_14_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd48),
  .signd_b(32'sd1),
  .width_z(32'sd63),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_for_1_mul_cmp_15 (
      .a(while_for_1_mul_cmp_a_iff),
      .b(while_for_1_mul_cmp_15_b),
      .clk(clk),
      .en(while_for_1_mul_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_for_1_mul_cmp_15_z)
    );
  Encoder_run Encoder_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_src_num(cfg_src_num),
      .cfg_src_coeff_0(cfg_src_coeff_0),
      .cfg_src_coeff_1(cfg_src_coeff_1),
      .cfg_src_coeff_2(cfg_src_coeff_2),
      .cfg_src_coeff_3(cfg_src_coeff_3),
      .cfg_src_coeff_4(cfg_src_coeff_4),
      .cfg_src_coeff_5(cfg_src_coeff_5),
      .cfg_src_coeff_6(cfg_src_coeff_6),
      .cfg_src_coeff_7(cfg_src_coeff_7),
      .cfg_src_coeff_8(cfg_src_coeff_8),
      .cfg_src_coeff_9(cfg_src_coeff_9),
      .cfg_src_coeff_10(cfg_src_coeff_10),
      .cfg_src_coeff_11(cfg_src_coeff_11),
      .cfg_src_coeff_12(cfg_src_coeff_12),
      .cfg_src_coeff_13(cfg_src_coeff_13),
      .cfg_src_coeff_14(cfg_src_coeff_14),
      .cfg_src_coeff_15(cfg_src_coeff_15),
      .cfg_chan_coeff_0(cfg_chan_coeff_0),
      .cfg_chan_coeff_1(cfg_chan_coeff_1),
      .cfg_chan_coeff_2(cfg_chan_coeff_2),
      .cfg_chan_coeff_3(cfg_chan_coeff_3),
      .cfg_chan_coeff_4(cfg_chan_coeff_4),
      .cfg_chan_coeff_5(cfg_chan_coeff_5),
      .cfg_chan_coeff_6(cfg_chan_coeff_6),
      .cfg_chan_coeff_7(cfg_chan_coeff_7),
      .cfg_chan_coeff_8(cfg_chan_coeff_8),
      .cfg_chan_coeff_9(cfg_chan_coeff_9),
      .cfg_chan_coeff_10(cfg_chan_coeff_10),
      .cfg_chan_coeff_11(cfg_chan_coeff_11),
      .cfg_chan_coeff_12(cfg_chan_coeff_12),
      .cfg_chan_coeff_13(cfg_chan_coeff_13),
      .cfg_chan_coeff_14(cfg_chan_coeff_14),
      .cfg_chan_coeff_15(cfg_chan_coeff_15),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg),
      .while_for_1_mul_cmp_b(while_for_1_mul_cmp_b),
      .while_for_1_mul_cmp_en(while_for_1_mul_cmp_en),
      .while_for_1_mul_cmp_z(while_for_1_mul_cmp_z),
      .while_for_1_mul_cmp_1_b(while_for_1_mul_cmp_1_b),
      .while_for_1_mul_cmp_1_z(while_for_1_mul_cmp_1_z),
      .while_for_1_mul_cmp_2_b(while_for_1_mul_cmp_2_b),
      .while_for_1_mul_cmp_2_z(while_for_1_mul_cmp_2_z),
      .while_for_1_mul_cmp_3_b(while_for_1_mul_cmp_3_b),
      .while_for_1_mul_cmp_3_z(while_for_1_mul_cmp_3_z),
      .while_for_1_mul_cmp_4_b(while_for_1_mul_cmp_4_b),
      .while_for_1_mul_cmp_4_z(while_for_1_mul_cmp_4_z),
      .while_for_1_mul_cmp_5_b(while_for_1_mul_cmp_5_b),
      .while_for_1_mul_cmp_5_z(while_for_1_mul_cmp_5_z),
      .while_for_1_mul_cmp_6_b(while_for_1_mul_cmp_6_b),
      .while_for_1_mul_cmp_6_z(while_for_1_mul_cmp_6_z),
      .while_for_1_mul_cmp_7_b(while_for_1_mul_cmp_7_b),
      .while_for_1_mul_cmp_7_z(while_for_1_mul_cmp_7_z),
      .while_for_1_mul_cmp_8_b(while_for_1_mul_cmp_8_b),
      .while_for_1_mul_cmp_8_z(while_for_1_mul_cmp_8_z),
      .while_for_1_mul_cmp_9_b(while_for_1_mul_cmp_9_b),
      .while_for_1_mul_cmp_9_z(while_for_1_mul_cmp_9_z),
      .while_for_1_mul_cmp_10_b(while_for_1_mul_cmp_10_b),
      .while_for_1_mul_cmp_10_z(while_for_1_mul_cmp_10_z),
      .while_for_1_mul_cmp_11_b(while_for_1_mul_cmp_11_b),
      .while_for_1_mul_cmp_11_z(while_for_1_mul_cmp_11_z),
      .while_for_1_mul_cmp_12_b(while_for_1_mul_cmp_12_b),
      .while_for_1_mul_cmp_12_z(while_for_1_mul_cmp_12_z),
      .while_for_1_mul_cmp_13_b(while_for_1_mul_cmp_13_b),
      .while_for_1_mul_cmp_13_z(while_for_1_mul_cmp_13_z),
      .while_for_1_mul_cmp_14_b(while_for_1_mul_cmp_14_b),
      .while_for_1_mul_cmp_14_z(while_for_1_mul_cmp_14_z),
      .while_for_1_mul_cmp_15_b(while_for_1_mul_cmp_15_b),
      .while_for_1_mul_cmp_15_z(while_for_1_mul_cmp_15_z),
      .while_for_1_mul_cmp_a_pff(while_for_1_mul_cmp_a_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer
// ------------------------------------------------------------------


module OutputBuffer (
  clk, rst, cfg_block_size, cfg_output_base, sync2_val, sync2_rdy, sync2_msg, sync3_val,
      sync3_rdy, sync3_msg, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg,
      dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, audio_out_val,
      audio_out_rdy, audio_out_msg
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_output_base;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input audio_out_val;
  output audio_out_rdy;
  input [511:0] audio_out_msg;


  // Interconnect Declarations
  wire mem_rsci_clken_d;
  wire [63:0] mem_rsci_d_d;
  wire [63:0] mem_rsci_q_d;
  wire [13:0] mem_rsci_radr_d;
  wire [13:0] mem_rsci_wadr_d;
  wire mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire mem_rsc_clken;
  wire [63:0] mem_rsc_q;
  wire [13:0] mem_rsc_radr;
  wire mem_rsc_we;
  wire [63:0] mem_rsc_d;
  wire [13:0] mem_rsc_wadr;
  wire mem_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd14),
  .data_width(32'sd64),
  .depth(32'sd16384),
  .latency(32'sd1)) mem_rsc_comp (
      .clk(clk),
      .clken(mem_rsc_clken),
      .d(mem_rsc_d),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .wadr(mem_rsc_wadr),
      .we(mem_rsc_we)
    );
  OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
      mem_rsci (
      .clken(mem_rsc_clken),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .we(mem_rsc_we),
      .d(mem_rsc_d),
      .wadr(mem_rsc_wadr),
      .clken_d(mem_rsci_clken_d),
      .d_d(mem_rsci_d_d),
      .q_d(mem_rsci_q_d),
      .radr_d(mem_rsci_radr_d),
      .wadr_d(mem_rsci_wadr_d),
      .we_d(mem_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(mem_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  OutputBuffer_run OutputBuffer_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_block_size),
      .cfg_output_base(cfg_output_base),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg),
      .mem_rsci_clken_d(mem_rsci_clken_d),
      .mem_rsci_d_d(mem_rsci_d_d),
      .mem_rsci_q_d(mem_rsci_q_d),
      .mem_rsci_radr_d(mem_rsci_radr_d),
      .mem_rsci_wadr_d(mem_rsci_wadr_d),
      .mem_rsci_readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .mem_rsci_we_d_pff(mem_rsci_we_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Top_rtl
// ------------------------------------------------------------------


module Top_rtl (
  clk, rst, cfg_regs_0, cfg_regs_1, cfg_regs_2, cfg_regs_3, cfg_regs_4, cfg_regs_5,
      cfg_regs_6, cfg_regs_7, cfg_regs_8, cfg_regs_9, cfg_regs_10, cfg_regs_11, cfg_regs_12,
      cfg_regs_13, cfg_regs_14, cfg_regs_15, cfg_regs_16, cfg_regs_17, cfg_regs_18,
      cfg_regs_19, cfg_regs_20, cfg_regs_21, cfg_regs_22, cfg_regs_23, cfg_regs_24,
      cfg_regs_25, cfg_regs_26, cfg_regs_27, cfg_regs_28, cfg_regs_29, cfg_regs_30,
      cfg_regs_31, cfg_regs_32, cfg_regs_33, cfg_regs_34, cfg_regs_35, cfg_regs_36,
      cfg_regs_37, cfg_regs_38, cfg_regs_39, cfg_regs_40, cfg_regs_41, cfg_regs_42,
      cfg_regs_43, cfg_regs_44, cfg_regs_45, cfg_regs_46, cfg_regs_47, acc_start,
      acc_done, dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val,
      dma_read_chnl_rdy, dma_read_chnl_msg, dma_write_ctrl_val, dma_write_ctrl_rdy,
      dma_write_ctrl_msg, dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg
);
  input clk;
  input rst;
  input [31:0] cfg_regs_0;
  input [31:0] cfg_regs_1;
  input [31:0] cfg_regs_2;
  input [31:0] cfg_regs_3;
  input [31:0] cfg_regs_4;
  input [31:0] cfg_regs_5;
  input [31:0] cfg_regs_6;
  input [31:0] cfg_regs_7;
  input [31:0] cfg_regs_8;
  input [31:0] cfg_regs_9;
  input [31:0] cfg_regs_10;
  input [31:0] cfg_regs_11;
  input [31:0] cfg_regs_12;
  input [31:0] cfg_regs_13;
  input [31:0] cfg_regs_14;
  input [31:0] cfg_regs_15;
  input [31:0] cfg_regs_16;
  input [31:0] cfg_regs_17;
  input [31:0] cfg_regs_18;
  input [31:0] cfg_regs_19;
  input [31:0] cfg_regs_20;
  input [31:0] cfg_regs_21;
  input [31:0] cfg_regs_22;
  input [31:0] cfg_regs_23;
  input [31:0] cfg_regs_24;
  input [31:0] cfg_regs_25;
  input [31:0] cfg_regs_26;
  input [31:0] cfg_regs_27;
  input [31:0] cfg_regs_28;
  input [31:0] cfg_regs_29;
  input [31:0] cfg_regs_30;
  input [31:0] cfg_regs_31;
  input [31:0] cfg_regs_32;
  input [31:0] cfg_regs_33;
  input [31:0] cfg_regs_34;
  input [31:0] cfg_regs_35;
  input [31:0] cfg_regs_36;
  input [31:0] cfg_regs_37;
  input [31:0] cfg_regs_38;
  input [31:0] cfg_regs_39;
  input [31:0] cfg_regs_40;
  input [31:0] cfg_regs_41;
  input [31:0] cfg_regs_42;
  input [31:0] cfg_regs_43;
  input [31:0] cfg_regs_44;
  input [31:0] cfg_regs_45;
  input [31:0] cfg_regs_46;
  input [31:0] cfg_regs_47;
  input acc_start;
  output acc_done;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;


  // Interconnect Declarations
  wire sync1_val;
  wire sync1_rdy;
  wire sync1_msg;
  wire sync2_val;
  wire sync2_rdy;
  wire sync2_msg;
  wire sync3_val;
  wire sync3_rdy;
  wire sync3_msg;
  wire audio_in_val;
  wire audio_in_rdy;
  wire [15:0] audio_in_msg;
  wire audio_out_val;
  wire audio_out_rdy;
  wire [511:0] audio_out_msg;


  // Interconnect Declarations for Component Instantiations 
  Control ctr (
      .clk(clk),
      .rst(rst),
      .acc_start(acc_start),
      .acc_done(acc_done),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg)
    );
  InputBuffer inb (
      .clk(clk),
      .rst(rst),
      .cfg_src_num(cfg_regs_1),
      .cfg_block_size(cfg_regs_2),
      .cfg_input_base(cfg_regs_3),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg)
    );
  Encoder enc (
      .clk(clk),
      .rst(rst),
      .cfg_src_num(cfg_regs_1),
      .cfg_src_coeff_0(cfg_regs_16),
      .cfg_src_coeff_1(cfg_regs_17),
      .cfg_src_coeff_2(cfg_regs_18),
      .cfg_src_coeff_3(cfg_regs_19),
      .cfg_src_coeff_4(cfg_regs_20),
      .cfg_src_coeff_5(cfg_regs_21),
      .cfg_src_coeff_6(cfg_regs_22),
      .cfg_src_coeff_7(cfg_regs_23),
      .cfg_src_coeff_8(cfg_regs_24),
      .cfg_src_coeff_9(cfg_regs_25),
      .cfg_src_coeff_10(cfg_regs_26),
      .cfg_src_coeff_11(cfg_regs_27),
      .cfg_src_coeff_12(cfg_regs_28),
      .cfg_src_coeff_13(cfg_regs_29),
      .cfg_src_coeff_14(cfg_regs_30),
      .cfg_src_coeff_15(cfg_regs_31),
      .cfg_chan_coeff_0(cfg_regs_32),
      .cfg_chan_coeff_1(cfg_regs_33),
      .cfg_chan_coeff_2(cfg_regs_34),
      .cfg_chan_coeff_3(cfg_regs_35),
      .cfg_chan_coeff_4(cfg_regs_36),
      .cfg_chan_coeff_5(cfg_regs_37),
      .cfg_chan_coeff_6(cfg_regs_38),
      .cfg_chan_coeff_7(cfg_regs_39),
      .cfg_chan_coeff_8(cfg_regs_40),
      .cfg_chan_coeff_9(cfg_regs_41),
      .cfg_chan_coeff_10(cfg_regs_42),
      .cfg_chan_coeff_11(cfg_regs_43),
      .cfg_chan_coeff_12(cfg_regs_44),
      .cfg_chan_coeff_13(cfg_regs_45),
      .cfg_chan_coeff_14(cfg_regs_46),
      .cfg_chan_coeff_15(cfg_regs_47),
      .audio_in_val(audio_in_val),
      .audio_in_rdy(audio_in_rdy),
      .audio_in_msg(audio_in_msg),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg)
    );
  OutputBuffer out_0 (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_regs_2),
      .cfg_output_base(cfg_regs_4),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .audio_out_val(audio_out_val),
      .audio_out_rdy(audio_out_rdy),
      .audio_out_msg(audio_out_msg)
    );
endmodule



