// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2022.1/981271 Production Release
//  HLS Date:       Thu Feb 10 22:05:20 PST 2022
// 
//  Generated by:   yingj4@sarangi.cs.illinois.edu
//  Generated date: Fri Jul 29 13:30:39 2022
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Control_run_staller
// ------------------------------------------------------------------


module Control_run_staller (
  clk, rst, run_wen, run_wten, sync1_Push_mioi_wen_comp, sync2_Push_mioi_wen_comp,
      sync3_Pop_mioi_wen_comp, run_flen_unreg, sync1_Push_mioi_wen_comp_pff, run_wten_pff,
      sync2_Push_mioi_wen_comp_pff, sync3_Pop_mioi_wen_comp_pff, run_flen_unreg_pff
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  input sync1_Push_mioi_wen_comp;
  input sync2_Push_mioi_wen_comp;
  input sync3_Pop_mioi_wen_comp;
  input run_flen_unreg;
  input sync1_Push_mioi_wen_comp_pff;
  output run_wten_pff;
  input sync2_Push_mioi_wen_comp_pff;
  input sync3_Pop_mioi_wen_comp_pff;
  input run_flen_unreg_pff;


  // Interconnect Declarations
  reg run_wten_reg;
  wire not_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign not_2_rmff = ~(sync1_Push_mioi_wen_comp & sync2_Push_mioi_wen_comp & sync3_Pop_mioi_wen_comp
      & (~ run_flen_unreg));
  assign run_wen = sync1_Push_mioi_wen_comp_pff & sync2_Push_mioi_wen_comp_pff &
      sync3_Pop_mioi_wen_comp_pff & (~ run_flen_unreg_pff);
  assign run_wten = run_wten_reg;
  assign run_wten_pff = not_2_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten_reg <= 1'b0;
    end
    else begin
      run_wten_reg <= not_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp (
  clk, rst, sync3_Pop_mioi_oswt_unreg, sync3_Pop_mioi_bawt, sync3_Pop_mioi_wen_comp,
      sync3_Pop_mioi_biwt, sync3_Pop_mioi_bdwt, sync3_Pop_mioi_bawt_pff, sync3_Pop_mioi_biwt_pff,
      sync3_Pop_mioi_wen_comp_pff, sync3_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync3_Pop_mioi_oswt_unreg;
  output sync3_Pop_mioi_bawt;
  output sync3_Pop_mioi_wen_comp;
  input sync3_Pop_mioi_biwt;
  input sync3_Pop_mioi_bdwt;
  output sync3_Pop_mioi_bawt_pff;
  input sync3_Pop_mioi_biwt_pff;
  output sync3_Pop_mioi_wen_comp_pff;
  input sync3_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg sync3_Pop_mioi_bcwt;
  wire while_nor_4_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_4_rmff = ~((~(sync3_Pop_mioi_bcwt | sync3_Pop_mioi_biwt)) | sync3_Pop_mioi_bdwt);
  assign sync3_Pop_mioi_bawt = sync3_Pop_mioi_biwt | sync3_Pop_mioi_bcwt;
  assign sync3_Pop_mioi_bawt_pff = sync3_Pop_mioi_biwt_pff | while_nor_4_rmff;
  assign sync3_Pop_mioi_wen_comp = (~ sync3_Pop_mioi_oswt_unreg) | sync3_Pop_mioi_bawt;
  assign sync3_Pop_mioi_wen_comp_pff = (~ sync3_Pop_mioi_oswt_unreg_pff) | sync3_Pop_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      sync3_Pop_mioi_bcwt <= while_nor_4_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync3_Pop_mioi_oswt_unreg, sync3_Pop_mioi_iswt0, sync3_Pop_mioi_ivld_oreg,
      sync3_Pop_mioi_biwt, sync3_Pop_mioi_bdwt, sync3_Pop_mioi_irdy_run_sct, sync3_Pop_mioi_biwt_pff,
      run_wten_pff, sync3_Pop_mioi_iswt0_pff, sync3_Pop_mioi_ivld_oreg_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync3_Pop_mioi_oswt_unreg;
  input sync3_Pop_mioi_iswt0;
  input sync3_Pop_mioi_ivld_oreg;
  output sync3_Pop_mioi_biwt;
  output sync3_Pop_mioi_bdwt;
  output sync3_Pop_mioi_irdy_run_sct;
  output sync3_Pop_mioi_biwt_pff;
  input run_wten_pff;
  input sync3_Pop_mioi_iswt0_pff;
  input sync3_Pop_mioi_ivld_oreg_pff;


  // Interconnect Declarations
  wire sync3_Pop_mioi_ogwt;
  reg sync3_Pop_mioi_icwt;
  wire while_and_11_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign sync3_Pop_mioi_bdwt = sync3_Pop_mioi_oswt_unreg & run_wen;
  assign sync3_Pop_mioi_ogwt = ((~ run_wten) & sync3_Pop_mioi_iswt0) | sync3_Pop_mioi_icwt;
  assign while_and_11_rmff = sync3_Pop_mioi_ogwt & (~ sync3_Pop_mioi_biwt);
  assign sync3_Pop_mioi_irdy_run_sct = sync3_Pop_mioi_ogwt;
  assign sync3_Pop_mioi_biwt = sync3_Pop_mioi_ogwt & sync3_Pop_mioi_ivld_oreg;
  assign sync3_Pop_mioi_biwt_pff = (((~ run_wten_pff) & sync3_Pop_mioi_iswt0_pff)
      | while_and_11_rmff) & sync3_Pop_mioi_ivld_oreg_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      sync3_Pop_mioi_icwt <= while_and_11_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp (
  clk, rst, sync2_Push_mioi_oswt_unreg, sync2_Push_mioi_bawt, sync2_Push_mioi_wen_comp,
      sync2_Push_mioi_biwt, sync2_Push_mioi_bdwt, sync2_Push_mioi_bcwt, sync2_Push_mioi_bawt_pff,
      sync2_Push_mioi_biwt_pff, sync2_Push_mioi_bcwt_pff, sync2_Push_mioi_wen_comp_pff,
      sync2_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync2_Push_mioi_oswt_unreg;
  output sync2_Push_mioi_bawt;
  output sync2_Push_mioi_wen_comp;
  input sync2_Push_mioi_biwt;
  input sync2_Push_mioi_bdwt;
  output sync2_Push_mioi_bcwt;
  output sync2_Push_mioi_bawt_pff;
  input sync2_Push_mioi_biwt_pff;
  output sync2_Push_mioi_bcwt_pff;
  output sync2_Push_mioi_wen_comp_pff;
  input sync2_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  reg sync2_Push_mioi_bcwt_reg;
  wire while_nor_2_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_2_rmff = ~((~(sync2_Push_mioi_bcwt | sync2_Push_mioi_biwt)) |
      sync2_Push_mioi_bdwt);
  assign sync2_Push_mioi_bawt = sync2_Push_mioi_biwt | sync2_Push_mioi_bcwt;
  assign sync2_Push_mioi_bawt_pff = sync2_Push_mioi_biwt_pff | sync2_Push_mioi_bcwt_pff;
  assign sync2_Push_mioi_bcwt = sync2_Push_mioi_bcwt_reg;
  assign sync2_Push_mioi_bcwt_pff = while_nor_2_rmff;
  assign sync2_Push_mioi_wen_comp = (~ sync2_Push_mioi_oswt_unreg) | sync2_Push_mioi_bawt;
  assign sync2_Push_mioi_wen_comp_pff = (~ sync2_Push_mioi_oswt_unreg_pff) | sync2_Push_mioi_bawt_pff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      sync2_Push_mioi_bcwt_reg <= while_nor_2_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl (
  run_wen, sync2_Push_mioi_oswt_unreg, sync2_Push_mioi_iswt0, sync2_Push_mioi_irdy_oreg,
      sync2_Push_mioi_biwt, sync2_Push_mioi_bdwt, sync2_Push_mioi_bcwt, sync2_Push_mioi_ivld_run_sct,
      sync2_Push_mioi_biwt_pff, sync2_Push_mioi_iswt0_pff, sync2_Push_mioi_bcwt_pff,
      sync2_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input sync2_Push_mioi_oswt_unreg;
  input sync2_Push_mioi_iswt0;
  input sync2_Push_mioi_irdy_oreg;
  output sync2_Push_mioi_biwt;
  output sync2_Push_mioi_bdwt;
  input sync2_Push_mioi_bcwt;
  output sync2_Push_mioi_ivld_run_sct;
  output sync2_Push_mioi_biwt_pff;
  input sync2_Push_mioi_iswt0_pff;
  input sync2_Push_mioi_bcwt_pff;
  input sync2_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync2_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync2_Push_mioi_bdwt = sync2_Push_mioi_oswt_unreg & run_wen;
  assign sync2_Push_mioi_ogwt = sync2_Push_mioi_iswt0 & (~ sync2_Push_mioi_bcwt);
  assign sync2_Push_mioi_ivld_run_sct = sync2_Push_mioi_ogwt;
  assign sync2_Push_mioi_biwt = sync2_Push_mioi_ogwt & sync2_Push_mioi_irdy_oreg;
  assign sync2_Push_mioi_biwt_pff = sync2_Push_mioi_iswt0_pff & (~ sync2_Push_mioi_bcwt_pff)
      & sync2_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_wait_dp
// ------------------------------------------------------------------


module Control_run_wait_dp (
  clk, rst, sync1_Push_mioi_irdy, sync1_Push_mioi_irdy_oreg, sync2_Push_mioi_irdy,
      sync2_Push_mioi_irdy_oreg, sync3_Pop_mioi_ivld, sync3_Pop_mioi_ivld_oreg
);
  input clk;
  input rst;
  input sync1_Push_mioi_irdy;
  output sync1_Push_mioi_irdy_oreg;
  input sync2_Push_mioi_irdy;
  output sync2_Push_mioi_irdy_oreg;
  input sync3_Pop_mioi_ivld;
  output sync3_Pop_mioi_ivld_oreg;


  // Interconnect Declarations
  reg sync1_Push_mioi_irdy_oreg_rneg;
  reg sync2_Push_mioi_irdy_oreg_rneg;
  reg sync3_Pop_mioi_ivld_oreg_rneg;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Push_mioi_irdy_oreg = ~ sync1_Push_mioi_irdy_oreg_rneg;
  assign sync2_Push_mioi_irdy_oreg = ~ sync2_Push_mioi_irdy_oreg_rneg;
  assign sync3_Pop_mioi_ivld_oreg = ~ sync3_Pop_mioi_ivld_oreg_rneg;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Push_mioi_irdy_oreg_rneg <= 1'b0;
      sync2_Push_mioi_irdy_oreg_rneg <= 1'b0;
      sync3_Pop_mioi_ivld_oreg_rneg <= 1'b0;
    end
    else begin
      sync1_Push_mioi_irdy_oreg_rneg <= ~ sync1_Push_mioi_irdy;
      sync2_Push_mioi_irdy_oreg_rneg <= ~ sync2_Push_mioi_irdy;
      sync3_Pop_mioi_ivld_oreg_rneg <= ~ sync3_Pop_mioi_ivld;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp (
  clk, rst, sync1_Push_mioi_oswt_unreg, sync1_Push_mioi_bawt, sync1_Push_mioi_wen_comp,
      sync1_Push_mioi_biwt, sync1_Push_mioi_bdwt, sync1_Push_mioi_bcwt, sync1_Push_mioi_wen_comp_pff,
      sync1_Push_mioi_oswt_unreg_pff, sync1_Push_mioi_bawt_pff, sync1_Push_mioi_biwt_pff,
      sync1_Push_mioi_bcwt_pff
);
  input clk;
  input rst;
  input sync1_Push_mioi_oswt_unreg;
  output sync1_Push_mioi_bawt;
  output sync1_Push_mioi_wen_comp;
  input sync1_Push_mioi_biwt;
  input sync1_Push_mioi_bdwt;
  output sync1_Push_mioi_bcwt;
  output sync1_Push_mioi_wen_comp_pff;
  input sync1_Push_mioi_oswt_unreg_pff;
  output sync1_Push_mioi_bawt_pff;
  input sync1_Push_mioi_biwt_pff;
  output sync1_Push_mioi_bcwt_pff;


  // Interconnect Declarations
  reg sync1_Push_mioi_bcwt_reg;
  wire while_nor_rmff;


  // Interconnect Declarations for Component Instantiations 
  assign while_nor_rmff = ~((~(sync1_Push_mioi_bcwt | sync1_Push_mioi_biwt)) | sync1_Push_mioi_bdwt);
  assign sync1_Push_mioi_wen_comp = (~ sync1_Push_mioi_oswt_unreg) | sync1_Push_mioi_bawt;
  assign sync1_Push_mioi_wen_comp_pff = (~ sync1_Push_mioi_oswt_unreg_pff) | sync1_Push_mioi_bawt_pff;
  assign sync1_Push_mioi_bawt = sync1_Push_mioi_biwt | sync1_Push_mioi_bcwt;
  assign sync1_Push_mioi_bawt_pff = sync1_Push_mioi_biwt_pff | sync1_Push_mioi_bcwt_pff;
  assign sync1_Push_mioi_bcwt = sync1_Push_mioi_bcwt_reg;
  assign sync1_Push_mioi_bcwt_pff = while_nor_rmff;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Push_mioi_bcwt_reg <= 1'b0;
    end
    else begin
      sync1_Push_mioi_bcwt_reg <= while_nor_rmff;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl (
  run_wen, sync1_Push_mioi_oswt_unreg, sync1_Push_mioi_iswt0, sync1_Push_mioi_irdy_oreg,
      sync1_Push_mioi_biwt, sync1_Push_mioi_bdwt, sync1_Push_mioi_bcwt, sync1_Push_mioi_ivld_run_sct,
      sync1_Push_mioi_biwt_pff, sync1_Push_mioi_iswt0_pff, sync1_Push_mioi_bcwt_pff,
      sync1_Push_mioi_irdy_oreg_pff
);
  input run_wen;
  input sync1_Push_mioi_oswt_unreg;
  input sync1_Push_mioi_iswt0;
  input sync1_Push_mioi_irdy_oreg;
  output sync1_Push_mioi_biwt;
  output sync1_Push_mioi_bdwt;
  input sync1_Push_mioi_bcwt;
  output sync1_Push_mioi_ivld_run_sct;
  output sync1_Push_mioi_biwt_pff;
  input sync1_Push_mioi_iswt0_pff;
  input sync1_Push_mioi_bcwt_pff;
  input sync1_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync1_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Push_mioi_bdwt = sync1_Push_mioi_oswt_unreg & run_wen;
  assign sync1_Push_mioi_ogwt = sync1_Push_mioi_iswt0 & (~ sync1_Push_mioi_bcwt);
  assign sync1_Push_mioi_ivld_run_sct = sync1_Push_mioi_ogwt;
  assign sync1_Push_mioi_biwt = sync1_Push_mioi_ogwt & sync1_Push_mioi_irdy_oreg;
  assign sync1_Push_mioi_biwt_pff = sync1_Push_mioi_iswt0_pff & (~ sync1_Push_mioi_bcwt_pff)
      & sync1_Push_mioi_irdy_oreg_pff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_14_64_16384_16384_64_1_gen
// ------------------------------------------------------------------


module InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_14_64_16384_16384_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [13:0] radr;
  output we;
  output [63:0] d;
  output [13:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [13:0] radr_d;
  input [13:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module InputBuffer_run_run_fsm (
  clk, rst, run_wen, fsm_output, while_C_2_tr0, while_for_C_1_tr0, while_C_3_tr0,
      while_for_1_for_C_1_tr0, while_for_1_C_0_tr0
);
  input clk;
  input rst;
  input run_wen;
  output [8:0] fsm_output;
  reg [8:0] fsm_output;
  input while_C_2_tr0;
  input while_for_C_1_tr0;
  input while_C_3_tr0;
  input while_for_1_for_C_1_tr0;
  input while_for_1_C_0_tr0;


  // FSM State Type Declaration for InputBuffer_run_run_fsm_1
  parameter
    while_C_0 = 4'd0,
    while_C_1 = 4'd1,
    while_C_2 = 4'd2,
    while_for_C_0 = 4'd3,
    while_for_C_1 = 4'd4,
    while_C_3 = 4'd5,
    while_for_1_for_C_0 = 4'd6,
    while_for_1_for_C_1 = 4'd7,
    while_for_1_C_0 = 4'd8;

  reg [3:0] state_var;
  reg [3:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : InputBuffer_run_run_fsm_1
    case (state_var)
      while_C_1 : begin
        fsm_output = 9'b000000010;
        state_var_NS = while_C_2;
      end
      while_C_2 : begin
        fsm_output = 9'b000000100;
        if ( while_C_2_tr0 ) begin
          state_var_NS = while_C_3;
        end
        else begin
          state_var_NS = while_for_C_0;
        end
      end
      while_for_C_0 : begin
        fsm_output = 9'b000001000;
        state_var_NS = while_for_C_1;
      end
      while_for_C_1 : begin
        fsm_output = 9'b000010000;
        if ( while_for_C_1_tr0 ) begin
          state_var_NS = while_C_3;
        end
        else begin
          state_var_NS = while_for_C_0;
        end
      end
      while_C_3 : begin
        fsm_output = 9'b000100000;
        if ( while_C_3_tr0 ) begin
          state_var_NS = while_C_0;
        end
        else begin
          state_var_NS = while_for_1_for_C_0;
        end
      end
      while_for_1_for_C_0 : begin
        fsm_output = 9'b001000000;
        state_var_NS = while_for_1_for_C_1;
      end
      while_for_1_for_C_1 : begin
        fsm_output = 9'b010000000;
        if ( while_for_1_for_C_1_tr0 ) begin
          state_var_NS = while_for_1_C_0;
        end
        else begin
          state_var_NS = while_for_1_for_C_0;
        end
      end
      while_for_1_C_0 : begin
        fsm_output = 9'b100000000;
        if ( while_for_1_C_0_tr0 ) begin
          state_var_NS = while_C_0;
        end
        else begin
          state_var_NS = while_for_1_for_C_0;
        end
      end
      // while_C_0
      default : begin
        fsm_output = 9'b000000001;
        state_var_NS = while_C_1;
      end
    endcase
  end

  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      state_var <= while_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_staller
// ------------------------------------------------------------------


module InputBuffer_run_staller (
  run_wen, sync1_Pop_mioi_wen_comp, dma_read_ctrl_Push_mioi_wen_comp, dma_read_chnl_Pop_mioi_wen_comp,
      rotate_in_Push_mioi_wen_comp
);
  output run_wen;
  input sync1_Pop_mioi_wen_comp;
  input dma_read_ctrl_Push_mioi_wen_comp;
  input dma_read_chnl_Pop_mioi_wen_comp;
  input rotate_in_Push_mioi_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = sync1_Pop_mioi_wen_comp & dma_read_ctrl_Push_mioi_wen_comp & dma_read_chnl_Pop_mioi_wen_comp
      & rotate_in_Push_mioi_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_ctrl (
  rotate_in_Push_mioi_iswt0, rotate_in_Push_mioi_irdy_oreg, rotate_in_Push_mioi_biwt
);
  input rotate_in_Push_mioi_iswt0;
  input rotate_in_Push_mioi_irdy_oreg;
  output rotate_in_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign rotate_in_Push_mioi_biwt = rotate_in_Push_mioi_iswt0 & rotate_in_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl (
  dma_read_chnl_Pop_mioi_iswt0, dma_read_chnl_Pop_mioi_ivld_oreg, dma_read_chnl_Pop_mioi_biwt
);
  input dma_read_chnl_Pop_mioi_iswt0;
  input dma_read_chnl_Pop_mioi_ivld_oreg;
  output dma_read_chnl_Pop_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign dma_read_chnl_Pop_mioi_biwt = dma_read_chnl_Pop_mioi_iswt0 & dma_read_chnl_Pop_mioi_ivld_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl (
  dma_read_ctrl_Push_mioi_iswt0, dma_read_ctrl_Push_mioi_irdy_oreg, dma_read_ctrl_Push_mioi_biwt
);
  input dma_read_ctrl_Push_mioi_iswt0;
  input dma_read_ctrl_Push_mioi_irdy_oreg;
  output dma_read_ctrl_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign dma_read_ctrl_Push_mioi_biwt = dma_read_ctrl_Push_mioi_iswt0 & dma_read_ctrl_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl (
  sync1_Pop_mioi_iswt0, sync1_Pop_mioi_ivld_oreg, sync1_Pop_mioi_biwt
);
  input sync1_Pop_mioi_iswt0;
  input sync1_Pop_mioi_ivld_oreg;
  output sync1_Pop_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign sync1_Pop_mioi_biwt = sync1_Pop_mioi_iswt0 & sync1_Pop_mioi_ivld_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module Rotate_run_run_fsm (
  clk, rst, run_wen, fsm_output
);
  input clk;
  input rst;
  input run_wen;
  output [4:0] fsm_output;
  reg [4:0] fsm_output;


  // FSM State Type Declaration for Rotate_run_run_fsm_1
  parameter
    run_rlp_C_0 = 3'd0,
    while_C_0 = 3'd1,
    while_C_1 = 3'd2,
    while_C_2 = 3'd3,
    while_C_3 = 3'd4;

  reg [2:0] state_var;
  reg [2:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : Rotate_run_run_fsm_1
    case (state_var)
      while_C_0 : begin
        fsm_output = 5'b00010;
        state_var_NS = while_C_1;
      end
      while_C_1 : begin
        fsm_output = 5'b00100;
        state_var_NS = while_C_2;
      end
      while_C_2 : begin
        fsm_output = 5'b01000;
        state_var_NS = while_C_3;
      end
      while_C_3 : begin
        fsm_output = 5'b10000;
        state_var_NS = while_C_0;
      end
      // run_rlp_C_0
      default : begin
        fsm_output = 5'b00001;
        state_var_NS = while_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      state_var <= run_rlp_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_staller
// ------------------------------------------------------------------


module Rotate_run_staller (
  clk, rst, run_wen, run_wten, rotate_in_Pop_mioi_iden, rotate_in_Pop_mioi_iden_1,
      rotate_in_Pop_mioi_wen_comp, rotate_out_Push_mioi_iden, rotate_out_Push_mioi_wen_comp,
      while_mul_110_cmp_iden, while_mul_110_cmp_iden_1, while_mul_110_cmp_iden_2,
      while_mul_110_cmp_iden_3, while_mul_110_cmp_iden_4, while_mul_110_cmp_iden_5,
      while_mul_111_cmp_iden, while_mul_111_cmp_iden_1, while_mul_111_cmp_iden_2,
      while_mul_111_cmp_iden_3, while_mul_111_cmp_iden_4, while_mul_111_cmp_iden_5,
      while_mul_79_cmp_iden, while_mul_79_cmp_iden_1, while_mul_79_cmp_iden_2, while_mul_79_cmp_iden_3,
      while_mul_79_cmp_iden_4, while_mul_79_cmp_iden_5, while_mul_76_cmp_iden, while_mul_76_cmp_iden_1,
      while_mul_76_cmp_iden_2, while_mul_76_cmp_iden_3, while_mul_76_cmp_iden_4,
      while_mul_76_cmp_iden_5, while_mul_77_cmp_iden, while_mul_77_cmp_iden_1, while_mul_77_cmp_iden_2,
      while_mul_77_cmp_iden_3, while_while_mul_cmp_iden, while_while_mul_cmp_iden_1,
      while_while_mul_cmp_iden_2, while_while_mul_cmp_iden_3, while_mul_67_cmp_iden,
      while_mul_67_cmp_iden_1, while_mul_67_cmp_iden_2, while_mul_67_cmp_iden_3,
      while_mul_67_cmp_iden_4, while_mul_67_cmp_iden_5, while_mul_72_cmp_iden, while_mul_72_cmp_iden_1,
      while_mul_72_cmp_iden_2, while_mul_72_cmp_iden_3, while_mul_73_cmp_iden, while_mul_73_cmp_iden_1,
      while_mul_73_cmp_iden_2, while_mul_73_cmp_iden_3, while_mul_37_cmp_iden, while_mul_37_cmp_iden_1,
      while_mul_37_cmp_iden_2, while_mul_37_cmp_iden_3, while_mul_37_cmp_iden_4,
      while_mul_37_cmp_iden_5, while_mul_34_cmp_iden, while_mul_34_cmp_iden_1, while_mul_34_cmp_iden_2,
      while_mul_34_cmp_iden_3, while_mul_25_cmp_iden, while_mul_25_cmp_iden_1, while_mul_25_cmp_iden_2,
      while_mul_25_cmp_iden_3, while_mul_25_cmp_iden_4, while_mul_25_cmp_iden_5,
      run_flen_unreg
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  input rotate_in_Pop_mioi_iden;
  input rotate_in_Pop_mioi_iden_1;
  input rotate_in_Pop_mioi_wen_comp;
  input rotate_out_Push_mioi_iden;
  input rotate_out_Push_mioi_wen_comp;
  input while_mul_110_cmp_iden;
  input while_mul_110_cmp_iden_1;
  input while_mul_110_cmp_iden_2;
  input while_mul_110_cmp_iden_3;
  input while_mul_110_cmp_iden_4;
  input while_mul_110_cmp_iden_5;
  input while_mul_111_cmp_iden;
  input while_mul_111_cmp_iden_1;
  input while_mul_111_cmp_iden_2;
  input while_mul_111_cmp_iden_3;
  input while_mul_111_cmp_iden_4;
  input while_mul_111_cmp_iden_5;
  input while_mul_79_cmp_iden;
  input while_mul_79_cmp_iden_1;
  input while_mul_79_cmp_iden_2;
  input while_mul_79_cmp_iden_3;
  input while_mul_79_cmp_iden_4;
  input while_mul_79_cmp_iden_5;
  input while_mul_76_cmp_iden;
  input while_mul_76_cmp_iden_1;
  input while_mul_76_cmp_iden_2;
  input while_mul_76_cmp_iden_3;
  input while_mul_76_cmp_iden_4;
  input while_mul_76_cmp_iden_5;
  input while_mul_77_cmp_iden;
  input while_mul_77_cmp_iden_1;
  input while_mul_77_cmp_iden_2;
  input while_mul_77_cmp_iden_3;
  input while_while_mul_cmp_iden;
  input while_while_mul_cmp_iden_1;
  input while_while_mul_cmp_iden_2;
  input while_while_mul_cmp_iden_3;
  input while_mul_67_cmp_iden;
  input while_mul_67_cmp_iden_1;
  input while_mul_67_cmp_iden_2;
  input while_mul_67_cmp_iden_3;
  input while_mul_67_cmp_iden_4;
  input while_mul_67_cmp_iden_5;
  input while_mul_72_cmp_iden;
  input while_mul_72_cmp_iden_1;
  input while_mul_72_cmp_iden_2;
  input while_mul_72_cmp_iden_3;
  input while_mul_73_cmp_iden;
  input while_mul_73_cmp_iden_1;
  input while_mul_73_cmp_iden_2;
  input while_mul_73_cmp_iden_3;
  input while_mul_37_cmp_iden;
  input while_mul_37_cmp_iden_1;
  input while_mul_37_cmp_iden_2;
  input while_mul_37_cmp_iden_3;
  input while_mul_37_cmp_iden_4;
  input while_mul_37_cmp_iden_5;
  input while_mul_34_cmp_iden;
  input while_mul_34_cmp_iden_1;
  input while_mul_34_cmp_iden_2;
  input while_mul_34_cmp_iden_3;
  input while_mul_25_cmp_iden;
  input while_mul_25_cmp_iden_1;
  input while_mul_25_cmp_iden_2;
  input while_mul_25_cmp_iden_3;
  input while_mul_25_cmp_iden_4;
  input while_mul_25_cmp_iden_5;
  input run_flen_unreg;


  // Interconnect Declarations
  reg run_flen_shf_3;
  reg run_flen_shf_2;
  reg run_flen_shf_1;
  reg run_flen_shf_0;
  reg run_wten_reg;


  // Interconnect Declarations for Component Instantiations 
  assign run_wen = rotate_in_Pop_mioi_wen_comp & rotate_out_Push_mioi_wen_comp &
      (~(run_flen_shf_3 & run_flen_shf_2 & run_flen_shf_1 & run_flen_shf_0 & run_flen_unreg));
  assign run_wten = run_wten_reg;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_flen_shf_3 <= 1'b0;
      run_flen_shf_2 <= 1'b0;
      run_flen_shf_1 <= 1'b0;
      run_flen_shf_0 <= 1'b0;
      run_wten_reg <= 1'b0;
    end
    else begin
      run_flen_shf_3 <= run_flen_shf_2;
      run_flen_shf_2 <= run_flen_shf_1;
      run_flen_shf_1 <= run_flen_shf_0;
      run_flen_shf_0 <= run_flen_unreg & (~(rotate_in_Pop_mioi_iden | rotate_in_Pop_mioi_iden_1
          | rotate_out_Push_mioi_iden | while_mul_110_cmp_iden | while_mul_110_cmp_iden_1
          | while_mul_110_cmp_iden_2 | while_mul_110_cmp_iden_3 | while_mul_110_cmp_iden_4
          | while_mul_110_cmp_iden_5 | while_mul_111_cmp_iden | while_mul_111_cmp_iden_1
          | while_mul_111_cmp_iden_2 | while_mul_111_cmp_iden_3 | while_mul_111_cmp_iden_4
          | while_mul_111_cmp_iden_5 | while_mul_79_cmp_iden | while_mul_79_cmp_iden_1
          | while_mul_79_cmp_iden_2 | while_mul_79_cmp_iden_3 | while_mul_79_cmp_iden_4
          | while_mul_79_cmp_iden_5 | while_mul_76_cmp_iden | while_mul_76_cmp_iden_1
          | while_mul_76_cmp_iden_2 | while_mul_76_cmp_iden_3 | while_mul_76_cmp_iden_4
          | while_mul_76_cmp_iden_5 | while_mul_77_cmp_iden | while_mul_77_cmp_iden_1
          | while_mul_77_cmp_iden_2 | while_mul_77_cmp_iden_3 | while_while_mul_cmp_iden
          | while_while_mul_cmp_iden_1 | while_while_mul_cmp_iden_2 | while_while_mul_cmp_iden_3
          | while_mul_67_cmp_iden | while_mul_67_cmp_iden_1 | while_mul_67_cmp_iden_2
          | while_mul_67_cmp_iden_3 | while_mul_67_cmp_iden_4 | while_mul_67_cmp_iden_5
          | while_mul_72_cmp_iden | while_mul_72_cmp_iden_1 | while_mul_72_cmp_iden_2
          | while_mul_72_cmp_iden_3 | while_mul_73_cmp_iden | while_mul_73_cmp_iden_1
          | while_mul_73_cmp_iden_2 | while_mul_73_cmp_iden_3 | while_mul_37_cmp_iden
          | while_mul_37_cmp_iden_1 | while_mul_37_cmp_iden_2 | while_mul_37_cmp_iden_3
          | while_mul_37_cmp_iden_4 | while_mul_37_cmp_iden_5 | while_mul_34_cmp_iden
          | while_mul_34_cmp_iden_1 | while_mul_34_cmp_iden_2 | while_mul_34_cmp_iden_3
          | while_mul_25_cmp_iden | while_mul_25_cmp_iden_1 | while_mul_25_cmp_iden_2
          | while_mul_25_cmp_iden_3 | while_mul_25_cmp_iden_4 | while_mul_25_cmp_iden_5));
      run_wten_reg <= ~ run_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_25_cmp_mgc_mul_pipe_32_1_57_1_89_1_1_0_0_2_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_25_cmp_mgc_mul_pipe_32_1_57_1_89_1_1_0_0_2_1_wait_dp
    (
  clk, rst, while_mul_25_cmp_bawt, while_mul_25_cmp_iden, while_mul_25_cmp_iden_2,
      while_mul_25_cmp_iden_4, while_mul_25_cmp_z_mxwt, while_mul_25_cmp_z_mxwt_1,
      while_mul_25_cmp_z_mxwt_2, while_mul_25_cmp_biwt, while_mul_25_cmp_bdwt, while_mul_25_cmp_biwt_2,
      while_mul_25_cmp_bdwt_2, while_mul_25_cmp_biwt_4, while_mul_25_cmp_bdwt_4,
      while_mul_25_cmp_z
);
  input clk;
  input rst;
  output while_mul_25_cmp_bawt;
  output while_mul_25_cmp_iden;
  output while_mul_25_cmp_iden_2;
  output while_mul_25_cmp_iden_4;
  output [87:0] while_mul_25_cmp_z_mxwt;
  output [88:0] while_mul_25_cmp_z_mxwt_1;
  output [87:0] while_mul_25_cmp_z_mxwt_2;
  input while_mul_25_cmp_biwt;
  input while_mul_25_cmp_bdwt;
  input while_mul_25_cmp_biwt_2;
  input while_mul_25_cmp_bdwt_2;
  input while_mul_25_cmp_biwt_4;
  input while_mul_25_cmp_bdwt_4;
  input [88:0] while_mul_25_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_25_cmp_bcwt;
  wire [2:0] nl_while_mul_25_cmp_bcwt;
  reg [1:0] while_mul_25_cmp_bcwt_1;
  wire [2:0] nl_while_mul_25_cmp_bcwt_1;
  reg [1:0] while_mul_25_cmp_bcwt_2;
  wire [2:0] nl_while_mul_25_cmp_bcwt_2;
  reg [88:0] while_mul_25_cmp_z_bfwt_2;
  reg [88:0] while_mul_25_cmp_z_bfwt_3;
  reg [87:0] while_mul_25_cmp_z_bfwt_1_87_0;
  reg [87:0] while_mul_25_cmp_z_bfwt_5_87_0;
  reg [87:0] while_mul_25_cmp_z_bfwt_87_0;
  reg [87:0] while_mul_25_cmp_z_bfwt_4_87_0;

  wire[1:0] while_acc_61_nl;
  wire[2:0] nl_while_acc_61_nl;
  wire[1:0] while_acc_62_nl;
  wire[2:0] nl_while_acc_62_nl;
  wire[1:0] while_acc_64_nl;
  wire[2:0] nl_while_acc_64_nl;
  wire[1:0] while_acc_65_nl;
  wire[2:0] nl_while_acc_65_nl;
  wire[1:0] while_acc_67_nl;
  wire[2:0] nl_while_acc_67_nl;
  wire[1:0] while_acc_68_nl;
  wire[2:0] nl_while_acc_68_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_25_cmp_iden = while_mul_25_cmp_biwt | while_mul_25_cmp_bdwt;
  assign while_mul_25_cmp_bawt = while_mul_25_cmp_biwt | (while_mul_25_cmp_bcwt!=2'b00);
  assign while_mul_25_cmp_iden_2 = while_mul_25_cmp_biwt_2 | while_mul_25_cmp_bdwt_2;
  assign while_mul_25_cmp_iden_4 = while_mul_25_cmp_biwt_4 | while_mul_25_cmp_bdwt_4;
  assign while_mul_25_cmp_z_mxwt_1 = MUX_v_89_3_2(while_mul_25_cmp_z, while_mul_25_cmp_z_bfwt_2,
      while_mul_25_cmp_z_bfwt_3, while_mul_25_cmp_bcwt_1);
  assign while_mul_25_cmp_z_mxwt = MUX_v_88_3_2((while_mul_25_cmp_z[87:0]), while_mul_25_cmp_z_bfwt_87_0,
      while_mul_25_cmp_z_bfwt_1_87_0, while_mul_25_cmp_bcwt_2);
  assign while_mul_25_cmp_z_mxwt_2 = MUX_v_88_3_2((while_mul_25_cmp_z[87:0]), while_mul_25_cmp_z_bfwt_4_87_0,
      while_mul_25_cmp_z_bfwt_5_87_0, while_mul_25_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_25_cmp_bcwt <= 2'b00;
      while_mul_25_cmp_bcwt_1 <= 2'b00;
      while_mul_25_cmp_bcwt_2 <= 2'b00;
    end
    else begin
      while_mul_25_cmp_bcwt <= nl_while_mul_25_cmp_bcwt[1:0];
      while_mul_25_cmp_bcwt_1 <= nl_while_mul_25_cmp_bcwt_1[1:0];
      while_mul_25_cmp_bcwt_2 <= nl_while_mul_25_cmp_bcwt_2[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_25_cmp_z_bfwt_87_0 <= 88'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_25_cmp_z_bfwt_1_87_0 <= 88'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_25_cmp_biwt_4 ) begin
      while_mul_25_cmp_z_bfwt_87_0 <= while_mul_25_cmp_z[87:0];
      while_mul_25_cmp_z_bfwt_1_87_0 <= while_mul_25_cmp_z_bfwt_87_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_25_cmp_z_bfwt_2 <= 89'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_25_cmp_z_bfwt_3 <= 89'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_25_cmp_biwt_2 ) begin
      while_mul_25_cmp_z_bfwt_2 <= while_mul_25_cmp_z;
      while_mul_25_cmp_z_bfwt_3 <= while_mul_25_cmp_z_bfwt_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_25_cmp_z_bfwt_4_87_0 <= 88'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_25_cmp_z_bfwt_5_87_0 <= 88'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_25_cmp_biwt ) begin
      while_mul_25_cmp_z_bfwt_4_87_0 <= while_mul_25_cmp_z[87:0];
      while_mul_25_cmp_z_bfwt_5_87_0 <= while_mul_25_cmp_z_bfwt_4_87_0;
    end
  end
  assign nl_while_acc_61_nl = while_mul_25_cmp_bcwt + 2'b11;
  assign while_acc_61_nl = nl_while_acc_61_nl[1:0];
  assign nl_while_acc_62_nl = conv_u2u_1_2(~ while_mul_25_cmp_bdwt) + conv_u2u_1_2(while_mul_25_cmp_biwt);
  assign while_acc_62_nl = nl_while_acc_62_nl[1:0];
  assign nl_while_mul_25_cmp_bcwt  = while_acc_61_nl + while_acc_62_nl;
  assign nl_while_acc_64_nl = while_mul_25_cmp_bcwt_1 + 2'b11;
  assign while_acc_64_nl = nl_while_acc_64_nl[1:0];
  assign nl_while_acc_65_nl = conv_u2u_1_2(~ while_mul_25_cmp_bdwt_2) + conv_u2u_1_2(while_mul_25_cmp_biwt_2);
  assign while_acc_65_nl = nl_while_acc_65_nl[1:0];
  assign nl_while_mul_25_cmp_bcwt_1  = while_acc_64_nl + while_acc_65_nl;
  assign nl_while_acc_67_nl = while_mul_25_cmp_bcwt_2 + 2'b11;
  assign while_acc_67_nl = nl_while_acc_67_nl[1:0];
  assign nl_while_acc_68_nl = conv_u2u_1_2(~ while_mul_25_cmp_bdwt_4) + conv_u2u_1_2(while_mul_25_cmp_biwt_4);
  assign while_acc_68_nl = nl_while_acc_68_nl[1:0];
  assign nl_while_mul_25_cmp_bcwt_2  = while_acc_67_nl + while_acc_68_nl;

  function automatic [87:0] MUX_v_88_3_2;
    input [87:0] input_0;
    input [87:0] input_1;
    input [87:0] input_2;
    input [1:0] sel;
    reg [87:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      default : begin
        result = input_2;
      end
    endcase
    MUX_v_88_3_2 = result;
  end
  endfunction


  function automatic [88:0] MUX_v_89_3_2;
    input [88:0] input_0;
    input [88:0] input_1;
    input [88:0] input_2;
    input [1:0] sel;
    reg [88:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      default : begin
        result = input_2;
      end
    endcase
    MUX_v_89_3_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_25_cmp_mgc_mul_pipe_32_1_57_1_89_1_1_0_0_2_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_25_cmp_mgc_mul_pipe_32_1_57_1_89_1_1_0_0_2_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_25_cmp_oswt_unreg, while_mul_25_cmp_iswt1,
      while_mul_25_cmp_iden_1, while_mul_25_cmp_oswt_unreg_1, while_mul_25_cmp_iswt1_1,
      while_mul_25_cmp_iden_3, while_mul_25_cmp_oswt_unreg_2, while_mul_25_cmp_iswt1_2,
      while_mul_25_cmp_iden_5, run_cgwt_11, while_mul_25_cmp_bdwt, while_mul_25_cmp_bdwt_2,
      while_mul_25_cmp_bdwt_4, while_mul_25_cmp_iswt1_2_pff, while_mul_25_cmp_iswt1_1_pff,
      while_mul_25_cmp_iswt1_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_25_cmp_oswt_unreg;
  input while_mul_25_cmp_iswt1;
  output while_mul_25_cmp_iden_1;
  input while_mul_25_cmp_oswt_unreg_1;
  input while_mul_25_cmp_iswt1_1;
  output while_mul_25_cmp_iden_3;
  input while_mul_25_cmp_oswt_unreg_2;
  input while_mul_25_cmp_iswt1_2;
  output while_mul_25_cmp_iden_5;
  output run_cgwt_11;
  output while_mul_25_cmp_bdwt;
  output while_mul_25_cmp_bdwt_2;
  output while_mul_25_cmp_bdwt_4;
  input while_mul_25_cmp_iswt1_2_pff;
  input while_mul_25_cmp_iswt1_1_pff;
  input while_mul_25_cmp_iswt1_pff;


  // Interconnect Declarations
  wire while_mul_25_cmp_ogwt;
  wire while_mul_25_cmp_tiswt1;
  reg while_mul_25_cmp_hile_mul_25_cmp_pdswt0;
  reg [1:0] while_mul_25_cmp_icwt;
  wire [2:0] nl_while_mul_25_cmp_icwt;
  wire while_mul_25_cmp_ogwt_1;
  wire while_mul_25_cmp_tiswt1_1;
  reg while_mul_25_cmp_hile_mul_25_cmp_pdswt0_1;
  reg [1:0] while_mul_25_cmp_icwt_1;
  wire [2:0] nl_while_mul_25_cmp_icwt_1;
  wire while_mul_25_cmp_ogwt_2;
  wire while_mul_25_cmp_tiswt1_2;
  reg while_mul_25_cmp_hile_mul_25_cmp_pdswt0_2;
  reg [1:0] while_mul_25_cmp_icwt_2;
  wire [2:0] nl_while_mul_25_cmp_icwt_2;

  wire[1:0] while_acc_62_nl;
  wire[2:0] nl_while_acc_62_nl;
  wire[1:0] while_acc_63_nl;
  wire[2:0] nl_while_acc_63_nl;
  wire[1:0] while_acc_65_nl;
  wire[2:0] nl_while_acc_65_nl;
  wire[1:0] while_acc_66_nl;
  wire[2:0] nl_while_acc_66_nl;
  wire[1:0] while_acc_68_nl;
  wire[2:0] nl_while_acc_68_nl;
  wire[1:0] while_acc_69_nl;
  wire[2:0] nl_while_acc_69_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_25_cmp_bdwt = while_mul_25_cmp_oswt_unreg & run_wen;
  assign while_mul_25_cmp_tiswt1 = (~ run_wten) & while_mul_25_cmp_iswt1;
  assign while_mul_25_cmp_iden_1 = while_mul_25_cmp_ogwt;
  assign while_mul_25_cmp_ogwt = while_mul_25_cmp_hile_mul_25_cmp_pdswt0 | (while_mul_25_cmp_icwt!=2'b00);
  assign while_mul_25_cmp_bdwt_2 = while_mul_25_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_25_cmp_tiswt1_1 = (~ run_wten) & while_mul_25_cmp_iswt1_1;
  assign while_mul_25_cmp_iden_3 = while_mul_25_cmp_ogwt_1;
  assign while_mul_25_cmp_ogwt_1 = while_mul_25_cmp_hile_mul_25_cmp_pdswt0_1 | (while_mul_25_cmp_icwt_1!=2'b00);
  assign while_mul_25_cmp_bdwt_4 = while_mul_25_cmp_oswt_unreg_2 & run_wen;
  assign while_mul_25_cmp_tiswt1_2 = (~ run_wten) & while_mul_25_cmp_iswt1_2;
  assign while_mul_25_cmp_iden_5 = while_mul_25_cmp_ogwt_2;
  assign while_mul_25_cmp_ogwt_2 = while_mul_25_cmp_hile_mul_25_cmp_pdswt0_2 | (while_mul_25_cmp_icwt_2!=2'b00);
  assign run_cgwt_11 = while_mul_25_cmp_ogwt_2 | while_mul_25_cmp_tiswt1_2 | while_mul_25_cmp_ogwt_1
      | while_mul_25_cmp_tiswt1_1 | while_mul_25_cmp_ogwt | while_mul_25_cmp_tiswt1
      | (run_wen & while_mul_25_cmp_iswt1_2_pff) | (run_wen & while_mul_25_cmp_iswt1_1_pff)
      | (run_wen & while_mul_25_cmp_iswt1_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_25_cmp_hile_mul_25_cmp_pdswt0 <= 1'b0;
      while_mul_25_cmp_icwt <= 2'b00;
      while_mul_25_cmp_hile_mul_25_cmp_pdswt0_1 <= 1'b0;
      while_mul_25_cmp_icwt_1 <= 2'b00;
      while_mul_25_cmp_hile_mul_25_cmp_pdswt0_2 <= 1'b0;
      while_mul_25_cmp_icwt_2 <= 2'b00;
    end
    else begin
      while_mul_25_cmp_hile_mul_25_cmp_pdswt0 <= while_mul_25_cmp_tiswt1;
      while_mul_25_cmp_icwt <= nl_while_mul_25_cmp_icwt[1:0];
      while_mul_25_cmp_hile_mul_25_cmp_pdswt0_1 <= while_mul_25_cmp_tiswt1_1;
      while_mul_25_cmp_icwt_1 <= nl_while_mul_25_cmp_icwt_1[1:0];
      while_mul_25_cmp_hile_mul_25_cmp_pdswt0_2 <= while_mul_25_cmp_tiswt1_2;
      while_mul_25_cmp_icwt_2 <= nl_while_mul_25_cmp_icwt_2[1:0];
    end
  end
  assign nl_while_acc_62_nl = while_mul_25_cmp_icwt + 2'b11;
  assign while_acc_62_nl = nl_while_acc_62_nl[1:0];
  assign nl_while_acc_63_nl = conv_u2u_1_2(while_mul_25_cmp_hile_mul_25_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_25_cmp_ogwt);
  assign while_acc_63_nl = nl_while_acc_63_nl[1:0];
  assign nl_while_mul_25_cmp_icwt  = while_acc_62_nl + while_acc_63_nl;
  assign nl_while_acc_65_nl = while_mul_25_cmp_icwt_1 + 2'b11;
  assign while_acc_65_nl = nl_while_acc_65_nl[1:0];
  assign nl_while_acc_66_nl = conv_u2u_1_2(while_mul_25_cmp_hile_mul_25_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_25_cmp_ogwt_1);
  assign while_acc_66_nl = nl_while_acc_66_nl[1:0];
  assign nl_while_mul_25_cmp_icwt_1  = while_acc_65_nl + while_acc_66_nl;
  assign nl_while_acc_68_nl = while_mul_25_cmp_icwt_2 + 2'b11;
  assign while_acc_68_nl = nl_while_acc_68_nl[1:0];
  assign nl_while_acc_69_nl = conv_u2u_1_2(while_mul_25_cmp_hile_mul_25_cmp_pdswt0_2)
      + conv_u2u_1_2(~ while_mul_25_cmp_ogwt_2);
  assign while_acc_69_nl = nl_while_acc_69_nl[1:0];
  assign nl_while_mul_25_cmp_icwt_2  = while_acc_68_nl + while_acc_69_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_34_cmp_mgc_mul_pipe_32_1_90_1_106_1_1_0_0_3_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_34_cmp_mgc_mul_pipe_32_1_90_1_106_1_1_0_0_3_1_wait_dp
    (
  clk, rst, while_mul_34_cmp_bawt, while_mul_34_cmp_iden, while_mul_34_cmp_iden_2,
      while_mul_34_cmp_z_mxwt, while_mul_34_cmp_z_mxwt_1, while_mul_34_cmp_biwt,
      while_mul_34_cmp_bdwt, while_mul_34_cmp_biwt_2, while_mul_34_cmp_bdwt_2, while_mul_34_cmp_z
);
  input clk;
  input rst;
  output while_mul_34_cmp_bawt;
  output while_mul_34_cmp_iden;
  output while_mul_34_cmp_iden_2;
  output [103:0] while_mul_34_cmp_z_mxwt;
  output [103:0] while_mul_34_cmp_z_mxwt_1;
  input while_mul_34_cmp_biwt;
  input while_mul_34_cmp_bdwt;
  input while_mul_34_cmp_biwt_2;
  input while_mul_34_cmp_bdwt_2;
  input [105:0] while_mul_34_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_34_cmp_bcwt;
  wire [2:0] nl_while_mul_34_cmp_bcwt;
  reg [1:0] while_mul_34_cmp_bcwt_1;
  wire [2:0] nl_while_mul_34_cmp_bcwt_1;
  reg [103:0] while_mul_34_cmp_z_bfwt_2_105_2;
  reg [103:0] while_mul_34_cmp_z_bfwt_5_103_0;
  reg [103:0] while_mul_34_cmp_z_bfwt_1_105_2;
  reg [103:0] while_mul_34_cmp_z_bfwt_4_103_0;
  reg [103:0] while_mul_34_cmp_z_bfwt_105_2;
  reg [103:0] while_mul_34_cmp_z_bfwt_3_103_0;

  wire[1:0] while_acc_55_nl;
  wire[2:0] nl_while_acc_55_nl;
  wire[1:0] while_acc_56_nl;
  wire[2:0] nl_while_acc_56_nl;
  wire[1:0] while_acc_58_nl;
  wire[2:0] nl_while_acc_58_nl;
  wire[1:0] while_acc_59_nl;
  wire[2:0] nl_while_acc_59_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_34_cmp_iden = while_mul_34_cmp_biwt | while_mul_34_cmp_bdwt;
  assign while_mul_34_cmp_bawt = while_mul_34_cmp_biwt | (while_mul_34_cmp_bcwt!=2'b00);
  assign while_mul_34_cmp_iden_2 = while_mul_34_cmp_biwt_2 | while_mul_34_cmp_bdwt_2;
  assign while_mul_34_cmp_z_mxwt = MUX_v_104_4_2((while_mul_34_cmp_z[105:2]), while_mul_34_cmp_z_bfwt_105_2,
      while_mul_34_cmp_z_bfwt_1_105_2, while_mul_34_cmp_z_bfwt_2_105_2, while_mul_34_cmp_bcwt_1);
  assign while_mul_34_cmp_z_mxwt_1 = MUX_v_104_4_2((while_mul_34_cmp_z[103:0]), while_mul_34_cmp_z_bfwt_3_103_0,
      while_mul_34_cmp_z_bfwt_4_103_0, while_mul_34_cmp_z_bfwt_5_103_0, while_mul_34_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_34_cmp_bcwt <= 2'b00;
      while_mul_34_cmp_bcwt_1 <= 2'b00;
    end
    else begin
      while_mul_34_cmp_bcwt <= nl_while_mul_34_cmp_bcwt[1:0];
      while_mul_34_cmp_bcwt_1 <= nl_while_mul_34_cmp_bcwt_1[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_34_cmp_z_bfwt_105_2 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_34_cmp_z_bfwt_1_105_2 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_34_cmp_z_bfwt_2_105_2 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_34_cmp_biwt_2 ) begin
      while_mul_34_cmp_z_bfwt_105_2 <= while_mul_34_cmp_z[105:2];
      while_mul_34_cmp_z_bfwt_1_105_2 <= while_mul_34_cmp_z_bfwt_105_2;
      while_mul_34_cmp_z_bfwt_2_105_2 <= while_mul_34_cmp_z_bfwt_1_105_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_34_cmp_z_bfwt_3_103_0 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_34_cmp_z_bfwt_4_103_0 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_34_cmp_z_bfwt_5_103_0 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_34_cmp_biwt ) begin
      while_mul_34_cmp_z_bfwt_3_103_0 <= while_mul_34_cmp_z[103:0];
      while_mul_34_cmp_z_bfwt_4_103_0 <= while_mul_34_cmp_z_bfwt_3_103_0;
      while_mul_34_cmp_z_bfwt_5_103_0 <= while_mul_34_cmp_z_bfwt_4_103_0;
    end
  end
  assign nl_while_acc_55_nl = while_mul_34_cmp_bcwt + 2'b11;
  assign while_acc_55_nl = nl_while_acc_55_nl[1:0];
  assign nl_while_acc_56_nl = conv_u2u_1_2(~ while_mul_34_cmp_bdwt) + conv_u2u_1_2(while_mul_34_cmp_biwt);
  assign while_acc_56_nl = nl_while_acc_56_nl[1:0];
  assign nl_while_mul_34_cmp_bcwt  = while_acc_55_nl + while_acc_56_nl;
  assign nl_while_acc_58_nl = while_mul_34_cmp_bcwt_1 + 2'b11;
  assign while_acc_58_nl = nl_while_acc_58_nl[1:0];
  assign nl_while_acc_59_nl = conv_u2u_1_2(~ while_mul_34_cmp_bdwt_2) + conv_u2u_1_2(while_mul_34_cmp_biwt_2);
  assign while_acc_59_nl = nl_while_acc_59_nl[1:0];
  assign nl_while_mul_34_cmp_bcwt_1  = while_acc_58_nl + while_acc_59_nl;

  function automatic [103:0] MUX_v_104_4_2;
    input [103:0] input_0;
    input [103:0] input_1;
    input [103:0] input_2;
    input [103:0] input_3;
    input [1:0] sel;
    reg [103:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_104_4_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_34_cmp_mgc_mul_pipe_32_1_90_1_106_1_1_0_0_3_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_34_cmp_mgc_mul_pipe_32_1_90_1_106_1_1_0_0_3_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_34_cmp_oswt_unreg, while_mul_34_cmp_iswt2,
      while_mul_34_cmp_iden_1, while_mul_34_cmp_oswt_unreg_1, while_mul_34_cmp_iswt2_1,
      while_mul_34_cmp_iden_3, run_cgwt_10, while_mul_34_cmp_bdwt, while_mul_34_cmp_bdwt_2,
      while_mul_34_cmp_iswt2_1_pff, while_mul_34_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_34_cmp_oswt_unreg;
  input while_mul_34_cmp_iswt2;
  output while_mul_34_cmp_iden_1;
  input while_mul_34_cmp_oswt_unreg_1;
  input while_mul_34_cmp_iswt2_1;
  output while_mul_34_cmp_iden_3;
  output run_cgwt_10;
  output while_mul_34_cmp_bdwt;
  output while_mul_34_cmp_bdwt_2;
  input while_mul_34_cmp_iswt2_1_pff;
  input while_mul_34_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_34_cmp_ogwt;
  wire while_mul_34_cmp_tiswt2;
  reg while_mul_34_cmp_hile_mul_34_cmp_pdswt1;
  reg while_mul_34_cmp_hile_mul_34_cmp_pdswt0;
  reg [1:0] while_mul_34_cmp_icwt;
  wire [2:0] nl_while_mul_34_cmp_icwt;
  wire while_mul_34_cmp_ogwt_1;
  wire while_mul_34_cmp_tiswt2_1;
  reg while_mul_34_cmp_hile_mul_34_cmp_pdswt1_1;
  reg while_mul_34_cmp_hile_mul_34_cmp_pdswt0_1;
  reg [1:0] while_mul_34_cmp_icwt_1;
  wire [2:0] nl_while_mul_34_cmp_icwt_1;

  wire[1:0] while_acc_56_nl;
  wire[2:0] nl_while_acc_56_nl;
  wire[1:0] while_acc_57_nl;
  wire[2:0] nl_while_acc_57_nl;
  wire[1:0] while_acc_59_nl;
  wire[2:0] nl_while_acc_59_nl;
  wire[1:0] while_acc_60_nl;
  wire[2:0] nl_while_acc_60_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_34_cmp_bdwt = while_mul_34_cmp_oswt_unreg & run_wen;
  assign while_mul_34_cmp_tiswt2 = (~ run_wten) & while_mul_34_cmp_iswt2;
  assign while_mul_34_cmp_iden_1 = while_mul_34_cmp_ogwt;
  assign while_mul_34_cmp_ogwt = while_mul_34_cmp_hile_mul_34_cmp_pdswt0 | (while_mul_34_cmp_icwt!=2'b00);
  assign while_mul_34_cmp_bdwt_2 = while_mul_34_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_34_cmp_tiswt2_1 = (~ run_wten) & while_mul_34_cmp_iswt2_1;
  assign while_mul_34_cmp_iden_3 = while_mul_34_cmp_ogwt_1;
  assign while_mul_34_cmp_ogwt_1 = while_mul_34_cmp_hile_mul_34_cmp_pdswt0_1 | (while_mul_34_cmp_icwt_1!=2'b00);
  assign run_cgwt_10 = while_mul_34_cmp_ogwt_1 | while_mul_34_cmp_tiswt2_1 | while_mul_34_cmp_hile_mul_34_cmp_pdswt1_1
      | while_mul_34_cmp_ogwt | while_mul_34_cmp_tiswt2 | while_mul_34_cmp_hile_mul_34_cmp_pdswt1
      | (run_wen & while_mul_34_cmp_iswt2_1_pff) | (run_wen & while_mul_34_cmp_iswt2_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_34_cmp_hile_mul_34_cmp_pdswt1 <= 1'b0;
      while_mul_34_cmp_hile_mul_34_cmp_pdswt0 <= 1'b0;
      while_mul_34_cmp_icwt <= 2'b00;
      while_mul_34_cmp_hile_mul_34_cmp_pdswt1_1 <= 1'b0;
      while_mul_34_cmp_hile_mul_34_cmp_pdswt0_1 <= 1'b0;
      while_mul_34_cmp_icwt_1 <= 2'b00;
    end
    else begin
      while_mul_34_cmp_hile_mul_34_cmp_pdswt1 <= while_mul_34_cmp_tiswt2;
      while_mul_34_cmp_hile_mul_34_cmp_pdswt0 <= while_mul_34_cmp_hile_mul_34_cmp_pdswt1;
      while_mul_34_cmp_icwt <= nl_while_mul_34_cmp_icwt[1:0];
      while_mul_34_cmp_hile_mul_34_cmp_pdswt1_1 <= while_mul_34_cmp_tiswt2_1;
      while_mul_34_cmp_hile_mul_34_cmp_pdswt0_1 <= while_mul_34_cmp_hile_mul_34_cmp_pdswt1_1;
      while_mul_34_cmp_icwt_1 <= nl_while_mul_34_cmp_icwt_1[1:0];
    end
  end
  assign nl_while_acc_56_nl = while_mul_34_cmp_icwt + 2'b11;
  assign while_acc_56_nl = nl_while_acc_56_nl[1:0];
  assign nl_while_acc_57_nl = conv_u2u_1_2(while_mul_34_cmp_hile_mul_34_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_34_cmp_ogwt);
  assign while_acc_57_nl = nl_while_acc_57_nl[1:0];
  assign nl_while_mul_34_cmp_icwt  = while_acc_56_nl + while_acc_57_nl;
  assign nl_while_acc_59_nl = while_mul_34_cmp_icwt_1 + 2'b11;
  assign while_acc_59_nl = nl_while_acc_59_nl[1:0];
  assign nl_while_acc_60_nl = conv_u2u_1_2(while_mul_34_cmp_hile_mul_34_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_34_cmp_ogwt_1);
  assign while_acc_60_nl = nl_while_acc_60_nl[1:0];
  assign nl_while_mul_34_cmp_icwt_1  = while_acc_59_nl + while_acc_60_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_37_cmp_mgc_mul_pipe_36_1_64_1_82_1_1_0_0_3_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_37_cmp_mgc_mul_pipe_36_1_64_1_82_1_1_0_0_3_1_wait_dp
    (
  clk, rst, while_mul_37_cmp_bawt, while_mul_37_cmp_iden, while_mul_37_cmp_iden_2,
      while_mul_37_cmp_iden_4, while_mul_37_cmp_z_mxwt, while_mul_37_cmp_z_mxwt_1,
      while_mul_37_cmp_z_mxwt_2, while_mul_37_cmp_biwt, while_mul_37_cmp_bdwt, while_mul_37_cmp_biwt_2,
      while_mul_37_cmp_bdwt_2, while_mul_37_cmp_biwt_4, while_mul_37_cmp_bdwt_4,
      while_mul_37_cmp_z
);
  input clk;
  input rst;
  output while_mul_37_cmp_bawt;
  output while_mul_37_cmp_iden;
  output while_mul_37_cmp_iden_2;
  output while_mul_37_cmp_iden_4;
  output [81:0] while_mul_37_cmp_z_mxwt;
  output [77:0] while_mul_37_cmp_z_mxwt_1;
  output [79:0] while_mul_37_cmp_z_mxwt_2;
  input while_mul_37_cmp_biwt;
  input while_mul_37_cmp_bdwt;
  input while_mul_37_cmp_biwt_2;
  input while_mul_37_cmp_bdwt_2;
  input while_mul_37_cmp_biwt_4;
  input while_mul_37_cmp_bdwt_4;
  input [81:0] while_mul_37_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_37_cmp_bcwt;
  wire [2:0] nl_while_mul_37_cmp_bcwt;
  reg [1:0] while_mul_37_cmp_bcwt_1;
  wire [2:0] nl_while_mul_37_cmp_bcwt_1;
  reg [1:0] while_mul_37_cmp_bcwt_2;
  wire [2:0] nl_while_mul_37_cmp_bcwt_2;
  reg [81:0] while_mul_37_cmp_z_bfwt;
  reg [81:0] while_mul_37_cmp_z_bfwt_1;
  reg [81:0] while_mul_37_cmp_z_bfwt_2;
  reg [77:0] while_mul_37_cmp_z_bfwt_5_77_0;
  reg [79:0] while_mul_37_cmp_z_bfwt_8_79_0;
  reg [77:0] while_mul_37_cmp_z_bfwt_4_77_0;
  reg [79:0] while_mul_37_cmp_z_bfwt_7_79_0;
  reg [77:0] while_mul_37_cmp_z_bfwt_3_77_0;
  reg [79:0] while_mul_37_cmp_z_bfwt_6_79_0;

  wire[1:0] while_acc_51_nl;
  wire[2:0] nl_while_acc_51_nl;
  wire[1:0] while_acc_52_nl;
  wire[2:0] nl_while_acc_52_nl;
  wire[1:0] while_acc_54_nl;
  wire[2:0] nl_while_acc_54_nl;
  wire[1:0] while_acc_55_nl;
  wire[2:0] nl_while_acc_55_nl;
  wire[1:0] while_acc_57_nl;
  wire[2:0] nl_while_acc_57_nl;
  wire[1:0] while_acc_58_nl;
  wire[2:0] nl_while_acc_58_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_37_cmp_iden = while_mul_37_cmp_biwt | while_mul_37_cmp_bdwt;
  assign while_mul_37_cmp_bawt = while_mul_37_cmp_biwt | (while_mul_37_cmp_bcwt!=2'b00);
  assign while_mul_37_cmp_iden_2 = while_mul_37_cmp_biwt_2 | while_mul_37_cmp_bdwt_2;
  assign while_mul_37_cmp_iden_4 = while_mul_37_cmp_biwt_4 | while_mul_37_cmp_bdwt_4;
  assign while_mul_37_cmp_z_mxwt = MUX_v_82_4_2(while_mul_37_cmp_z, while_mul_37_cmp_z_bfwt,
      while_mul_37_cmp_z_bfwt_1, while_mul_37_cmp_z_bfwt_2, while_mul_37_cmp_bcwt_2);
  assign while_mul_37_cmp_z_mxwt_1 = MUX_v_78_4_2((while_mul_37_cmp_z[77:0]), while_mul_37_cmp_z_bfwt_3_77_0,
      while_mul_37_cmp_z_bfwt_4_77_0, while_mul_37_cmp_z_bfwt_5_77_0, while_mul_37_cmp_bcwt_1);
  assign while_mul_37_cmp_z_mxwt_2 = MUX_v_80_4_2((while_mul_37_cmp_z[79:0]), while_mul_37_cmp_z_bfwt_6_79_0,
      while_mul_37_cmp_z_bfwt_7_79_0, while_mul_37_cmp_z_bfwt_8_79_0, while_mul_37_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_37_cmp_bcwt <= 2'b00;
      while_mul_37_cmp_bcwt_1 <= 2'b00;
      while_mul_37_cmp_bcwt_2 <= 2'b00;
    end
    else begin
      while_mul_37_cmp_bcwt <= nl_while_mul_37_cmp_bcwt[1:0];
      while_mul_37_cmp_bcwt_1 <= nl_while_mul_37_cmp_bcwt_1[1:0];
      while_mul_37_cmp_bcwt_2 <= nl_while_mul_37_cmp_bcwt_2[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_37_cmp_z_bfwt <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_37_cmp_z_bfwt_1 <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_37_cmp_z_bfwt_2 <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_37_cmp_biwt_4 ) begin
      while_mul_37_cmp_z_bfwt <= while_mul_37_cmp_z;
      while_mul_37_cmp_z_bfwt_1 <= while_mul_37_cmp_z_bfwt;
      while_mul_37_cmp_z_bfwt_2 <= while_mul_37_cmp_z_bfwt_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_37_cmp_z_bfwt_3_77_0 <= 78'b000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_37_cmp_z_bfwt_4_77_0 <= 78'b000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_37_cmp_z_bfwt_5_77_0 <= 78'b000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_37_cmp_biwt_2 ) begin
      while_mul_37_cmp_z_bfwt_3_77_0 <= while_mul_37_cmp_z[77:0];
      while_mul_37_cmp_z_bfwt_4_77_0 <= while_mul_37_cmp_z_bfwt_3_77_0;
      while_mul_37_cmp_z_bfwt_5_77_0 <= while_mul_37_cmp_z_bfwt_4_77_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_37_cmp_z_bfwt_6_79_0 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_37_cmp_z_bfwt_7_79_0 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_37_cmp_z_bfwt_8_79_0 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_37_cmp_biwt ) begin
      while_mul_37_cmp_z_bfwt_6_79_0 <= while_mul_37_cmp_z[79:0];
      while_mul_37_cmp_z_bfwt_7_79_0 <= while_mul_37_cmp_z_bfwt_6_79_0;
      while_mul_37_cmp_z_bfwt_8_79_0 <= while_mul_37_cmp_z_bfwt_7_79_0;
    end
  end
  assign nl_while_acc_51_nl = while_mul_37_cmp_bcwt + 2'b11;
  assign while_acc_51_nl = nl_while_acc_51_nl[1:0];
  assign nl_while_acc_52_nl = conv_u2u_1_2(~ while_mul_37_cmp_bdwt) + conv_u2u_1_2(while_mul_37_cmp_biwt);
  assign while_acc_52_nl = nl_while_acc_52_nl[1:0];
  assign nl_while_mul_37_cmp_bcwt  = while_acc_51_nl + while_acc_52_nl;
  assign nl_while_acc_54_nl = while_mul_37_cmp_bcwt_1 + 2'b11;
  assign while_acc_54_nl = nl_while_acc_54_nl[1:0];
  assign nl_while_acc_55_nl = conv_u2u_1_2(~ while_mul_37_cmp_bdwt_2) + conv_u2u_1_2(while_mul_37_cmp_biwt_2);
  assign while_acc_55_nl = nl_while_acc_55_nl[1:0];
  assign nl_while_mul_37_cmp_bcwt_1  = while_acc_54_nl + while_acc_55_nl;
  assign nl_while_acc_57_nl = while_mul_37_cmp_bcwt_2 + 2'b11;
  assign while_acc_57_nl = nl_while_acc_57_nl[1:0];
  assign nl_while_acc_58_nl = conv_u2u_1_2(~ while_mul_37_cmp_bdwt_4) + conv_u2u_1_2(while_mul_37_cmp_biwt_4);
  assign while_acc_58_nl = nl_while_acc_58_nl[1:0];
  assign nl_while_mul_37_cmp_bcwt_2  = while_acc_57_nl + while_acc_58_nl;

  function automatic [77:0] MUX_v_78_4_2;
    input [77:0] input_0;
    input [77:0] input_1;
    input [77:0] input_2;
    input [77:0] input_3;
    input [1:0] sel;
    reg [77:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_78_4_2 = result;
  end
  endfunction


  function automatic [79:0] MUX_v_80_4_2;
    input [79:0] input_0;
    input [79:0] input_1;
    input [79:0] input_2;
    input [79:0] input_3;
    input [1:0] sel;
    reg [79:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_80_4_2 = result;
  end
  endfunction


  function automatic [81:0] MUX_v_82_4_2;
    input [81:0] input_0;
    input [81:0] input_1;
    input [81:0] input_2;
    input [81:0] input_3;
    input [1:0] sel;
    reg [81:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_82_4_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_37_cmp_mgc_mul_pipe_36_1_64_1_82_1_1_0_0_3_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_37_cmp_mgc_mul_pipe_36_1_64_1_82_1_1_0_0_3_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_37_cmp_oswt_unreg, while_mul_37_cmp_iswt2,
      while_mul_37_cmp_iden_1, while_mul_37_cmp_oswt_unreg_1, while_mul_37_cmp_iswt2_1,
      while_mul_37_cmp_iden_3, while_mul_37_cmp_oswt_unreg_2, while_mul_37_cmp_iswt2_2,
      while_mul_37_cmp_iden_5, run_cgwt_9, while_mul_37_cmp_bdwt, while_mul_37_cmp_bdwt_2,
      while_mul_37_cmp_bdwt_4, while_mul_37_cmp_iswt2_2_pff, while_mul_37_cmp_iswt2_1_pff,
      while_mul_37_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_37_cmp_oswt_unreg;
  input while_mul_37_cmp_iswt2;
  output while_mul_37_cmp_iden_1;
  input while_mul_37_cmp_oswt_unreg_1;
  input while_mul_37_cmp_iswt2_1;
  output while_mul_37_cmp_iden_3;
  input while_mul_37_cmp_oswt_unreg_2;
  input while_mul_37_cmp_iswt2_2;
  output while_mul_37_cmp_iden_5;
  output run_cgwt_9;
  output while_mul_37_cmp_bdwt;
  output while_mul_37_cmp_bdwt_2;
  output while_mul_37_cmp_bdwt_4;
  input while_mul_37_cmp_iswt2_2_pff;
  input while_mul_37_cmp_iswt2_1_pff;
  input while_mul_37_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_37_cmp_ogwt;
  wire while_mul_37_cmp_tiswt2;
  reg while_mul_37_cmp_hile_mul_37_cmp_pdswt1;
  reg while_mul_37_cmp_hile_mul_37_cmp_pdswt0;
  reg [1:0] while_mul_37_cmp_icwt;
  wire [2:0] nl_while_mul_37_cmp_icwt;
  wire while_mul_37_cmp_ogwt_1;
  wire while_mul_37_cmp_tiswt2_1;
  reg while_mul_37_cmp_hile_mul_37_cmp_pdswt1_1;
  reg while_mul_37_cmp_hile_mul_37_cmp_pdswt0_1;
  reg [1:0] while_mul_37_cmp_icwt_1;
  wire [2:0] nl_while_mul_37_cmp_icwt_1;
  wire while_mul_37_cmp_ogwt_2;
  wire while_mul_37_cmp_tiswt2_2;
  reg while_mul_37_cmp_hile_mul_37_cmp_pdswt1_2;
  reg while_mul_37_cmp_hile_mul_37_cmp_pdswt0_2;
  reg [1:0] while_mul_37_cmp_icwt_2;
  wire [2:0] nl_while_mul_37_cmp_icwt_2;

  wire[1:0] while_acc_52_nl;
  wire[2:0] nl_while_acc_52_nl;
  wire[1:0] while_acc_53_nl;
  wire[2:0] nl_while_acc_53_nl;
  wire[1:0] while_acc_55_nl;
  wire[2:0] nl_while_acc_55_nl;
  wire[1:0] while_acc_56_nl;
  wire[2:0] nl_while_acc_56_nl;
  wire[1:0] while_acc_58_nl;
  wire[2:0] nl_while_acc_58_nl;
  wire[1:0] while_acc_59_nl;
  wire[2:0] nl_while_acc_59_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_37_cmp_bdwt = while_mul_37_cmp_oswt_unreg & run_wen;
  assign while_mul_37_cmp_tiswt2 = (~ run_wten) & while_mul_37_cmp_iswt2;
  assign while_mul_37_cmp_iden_1 = while_mul_37_cmp_ogwt;
  assign while_mul_37_cmp_ogwt = while_mul_37_cmp_hile_mul_37_cmp_pdswt0 | (while_mul_37_cmp_icwt!=2'b00);
  assign while_mul_37_cmp_bdwt_2 = while_mul_37_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_37_cmp_tiswt2_1 = (~ run_wten) & while_mul_37_cmp_iswt2_1;
  assign while_mul_37_cmp_iden_3 = while_mul_37_cmp_ogwt_1;
  assign while_mul_37_cmp_ogwt_1 = while_mul_37_cmp_hile_mul_37_cmp_pdswt0_1 | (while_mul_37_cmp_icwt_1!=2'b00);
  assign while_mul_37_cmp_bdwt_4 = while_mul_37_cmp_oswt_unreg_2 & run_wen;
  assign while_mul_37_cmp_tiswt2_2 = (~ run_wten) & while_mul_37_cmp_iswt2_2;
  assign while_mul_37_cmp_iden_5 = while_mul_37_cmp_ogwt_2;
  assign while_mul_37_cmp_ogwt_2 = while_mul_37_cmp_hile_mul_37_cmp_pdswt0_2 | (while_mul_37_cmp_icwt_2!=2'b00);
  assign run_cgwt_9 = while_mul_37_cmp_ogwt_2 | while_mul_37_cmp_tiswt2_2 | while_mul_37_cmp_hile_mul_37_cmp_pdswt1_2
      | while_mul_37_cmp_ogwt_1 | while_mul_37_cmp_tiswt2_1 | while_mul_37_cmp_hile_mul_37_cmp_pdswt1_1
      | while_mul_37_cmp_ogwt | while_mul_37_cmp_tiswt2 | while_mul_37_cmp_hile_mul_37_cmp_pdswt1
      | (run_wen & while_mul_37_cmp_iswt2_2_pff) | (run_wen & while_mul_37_cmp_iswt2_1_pff)
      | (run_wen & while_mul_37_cmp_iswt2_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_37_cmp_hile_mul_37_cmp_pdswt1 <= 1'b0;
      while_mul_37_cmp_hile_mul_37_cmp_pdswt0 <= 1'b0;
      while_mul_37_cmp_icwt <= 2'b00;
      while_mul_37_cmp_hile_mul_37_cmp_pdswt1_1 <= 1'b0;
      while_mul_37_cmp_hile_mul_37_cmp_pdswt0_1 <= 1'b0;
      while_mul_37_cmp_icwt_1 <= 2'b00;
      while_mul_37_cmp_hile_mul_37_cmp_pdswt1_2 <= 1'b0;
      while_mul_37_cmp_hile_mul_37_cmp_pdswt0_2 <= 1'b0;
      while_mul_37_cmp_icwt_2 <= 2'b00;
    end
    else begin
      while_mul_37_cmp_hile_mul_37_cmp_pdswt1 <= while_mul_37_cmp_tiswt2;
      while_mul_37_cmp_hile_mul_37_cmp_pdswt0 <= while_mul_37_cmp_hile_mul_37_cmp_pdswt1;
      while_mul_37_cmp_icwt <= nl_while_mul_37_cmp_icwt[1:0];
      while_mul_37_cmp_hile_mul_37_cmp_pdswt1_1 <= while_mul_37_cmp_tiswt2_1;
      while_mul_37_cmp_hile_mul_37_cmp_pdswt0_1 <= while_mul_37_cmp_hile_mul_37_cmp_pdswt1_1;
      while_mul_37_cmp_icwt_1 <= nl_while_mul_37_cmp_icwt_1[1:0];
      while_mul_37_cmp_hile_mul_37_cmp_pdswt1_2 <= while_mul_37_cmp_tiswt2_2;
      while_mul_37_cmp_hile_mul_37_cmp_pdswt0_2 <= while_mul_37_cmp_hile_mul_37_cmp_pdswt1_2;
      while_mul_37_cmp_icwt_2 <= nl_while_mul_37_cmp_icwt_2[1:0];
    end
  end
  assign nl_while_acc_52_nl = while_mul_37_cmp_icwt + 2'b11;
  assign while_acc_52_nl = nl_while_acc_52_nl[1:0];
  assign nl_while_acc_53_nl = conv_u2u_1_2(while_mul_37_cmp_hile_mul_37_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_37_cmp_ogwt);
  assign while_acc_53_nl = nl_while_acc_53_nl[1:0];
  assign nl_while_mul_37_cmp_icwt  = while_acc_52_nl + while_acc_53_nl;
  assign nl_while_acc_55_nl = while_mul_37_cmp_icwt_1 + 2'b11;
  assign while_acc_55_nl = nl_while_acc_55_nl[1:0];
  assign nl_while_acc_56_nl = conv_u2u_1_2(while_mul_37_cmp_hile_mul_37_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_37_cmp_ogwt_1);
  assign while_acc_56_nl = nl_while_acc_56_nl[1:0];
  assign nl_while_mul_37_cmp_icwt_1  = while_acc_55_nl + while_acc_56_nl;
  assign nl_while_acc_58_nl = while_mul_37_cmp_icwt_2 + 2'b11;
  assign while_acc_58_nl = nl_while_acc_58_nl[1:0];
  assign nl_while_acc_59_nl = conv_u2u_1_2(while_mul_37_cmp_hile_mul_37_cmp_pdswt0_2)
      + conv_u2u_1_2(~ while_mul_37_cmp_ogwt_2);
  assign while_acc_59_nl = nl_while_acc_59_nl[1:0];
  assign nl_while_mul_37_cmp_icwt_2  = while_acc_58_nl + while_acc_59_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_73_cmp_mgc_mul_pipe_33_1_52_1_85_1_1_0_0_2_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_73_cmp_mgc_mul_pipe_33_1_52_1_85_1_1_0_0_2_1_wait_dp
    (
  clk, rst, while_mul_73_cmp_bawt, while_mul_73_cmp_iden, while_mul_73_cmp_iden_2,
      while_mul_73_cmp_z_mxwt, while_mul_73_cmp_z_mxwt_1, while_mul_73_cmp_biwt,
      while_mul_73_cmp_bdwt, while_mul_73_cmp_biwt_2, while_mul_73_cmp_bdwt_2, while_mul_73_cmp_z
);
  input clk;
  input rst;
  output while_mul_73_cmp_bawt;
  output while_mul_73_cmp_iden;
  output while_mul_73_cmp_iden_2;
  output [84:0] while_mul_73_cmp_z_mxwt;
  output [84:0] while_mul_73_cmp_z_mxwt_1;
  input while_mul_73_cmp_biwt;
  input while_mul_73_cmp_bdwt;
  input while_mul_73_cmp_biwt_2;
  input while_mul_73_cmp_bdwt_2;
  input [84:0] while_mul_73_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_73_cmp_bcwt;
  wire [2:0] nl_while_mul_73_cmp_bcwt;
  reg [1:0] while_mul_73_cmp_bcwt_1;
  wire [2:0] nl_while_mul_73_cmp_bcwt_1;
  reg [84:0] while_mul_73_cmp_z_bfwt;
  reg [84:0] while_mul_73_cmp_z_bfwt_1;
  reg [84:0] while_mul_73_cmp_z_bfwt_2;
  reg [84:0] while_mul_73_cmp_z_bfwt_3;

  wire[1:0] while_acc_45_nl;
  wire[2:0] nl_while_acc_45_nl;
  wire[1:0] while_acc_46_nl;
  wire[2:0] nl_while_acc_46_nl;
  wire[1:0] while_acc_48_nl;
  wire[2:0] nl_while_acc_48_nl;
  wire[1:0] while_acc_49_nl;
  wire[2:0] nl_while_acc_49_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_73_cmp_iden = while_mul_73_cmp_biwt | while_mul_73_cmp_bdwt;
  assign while_mul_73_cmp_bawt = while_mul_73_cmp_biwt | (while_mul_73_cmp_bcwt!=2'b00);
  assign while_mul_73_cmp_iden_2 = while_mul_73_cmp_biwt_2 | while_mul_73_cmp_bdwt_2;
  assign while_mul_73_cmp_z_mxwt = MUX_v_85_3_2(while_mul_73_cmp_z, while_mul_73_cmp_z_bfwt,
      while_mul_73_cmp_z_bfwt_1, while_mul_73_cmp_bcwt_1);
  assign while_mul_73_cmp_z_mxwt_1 = MUX_v_85_3_2(while_mul_73_cmp_z, while_mul_73_cmp_z_bfwt_2,
      while_mul_73_cmp_z_bfwt_3, while_mul_73_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_73_cmp_bcwt <= 2'b00;
      while_mul_73_cmp_bcwt_1 <= 2'b00;
    end
    else begin
      while_mul_73_cmp_bcwt <= nl_while_mul_73_cmp_bcwt[1:0];
      while_mul_73_cmp_bcwt_1 <= nl_while_mul_73_cmp_bcwt_1[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_73_cmp_z_bfwt <= 85'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_73_cmp_z_bfwt_1 <= 85'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_73_cmp_biwt_2 ) begin
      while_mul_73_cmp_z_bfwt <= while_mul_73_cmp_z;
      while_mul_73_cmp_z_bfwt_1 <= while_mul_73_cmp_z_bfwt;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_73_cmp_z_bfwt_2 <= 85'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_73_cmp_z_bfwt_3 <= 85'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_73_cmp_biwt ) begin
      while_mul_73_cmp_z_bfwt_2 <= while_mul_73_cmp_z;
      while_mul_73_cmp_z_bfwt_3 <= while_mul_73_cmp_z_bfwt_2;
    end
  end
  assign nl_while_acc_45_nl = while_mul_73_cmp_bcwt + 2'b11;
  assign while_acc_45_nl = nl_while_acc_45_nl[1:0];
  assign nl_while_acc_46_nl = conv_u2u_1_2(~ while_mul_73_cmp_bdwt) + conv_u2u_1_2(while_mul_73_cmp_biwt);
  assign while_acc_46_nl = nl_while_acc_46_nl[1:0];
  assign nl_while_mul_73_cmp_bcwt  = while_acc_45_nl + while_acc_46_nl;
  assign nl_while_acc_48_nl = while_mul_73_cmp_bcwt_1 + 2'b11;
  assign while_acc_48_nl = nl_while_acc_48_nl[1:0];
  assign nl_while_acc_49_nl = conv_u2u_1_2(~ while_mul_73_cmp_bdwt_2) + conv_u2u_1_2(while_mul_73_cmp_biwt_2);
  assign while_acc_49_nl = nl_while_acc_49_nl[1:0];
  assign nl_while_mul_73_cmp_bcwt_1  = while_acc_48_nl + while_acc_49_nl;

  function automatic [84:0] MUX_v_85_3_2;
    input [84:0] input_0;
    input [84:0] input_1;
    input [84:0] input_2;
    input [1:0] sel;
    reg [84:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      default : begin
        result = input_2;
      end
    endcase
    MUX_v_85_3_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_73_cmp_mgc_mul_pipe_33_1_52_1_85_1_1_0_0_2_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_73_cmp_mgc_mul_pipe_33_1_52_1_85_1_1_0_0_2_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_73_cmp_oswt_unreg, while_mul_73_cmp_iswt1,
      while_mul_73_cmp_iden_1, while_mul_73_cmp_oswt_unreg_1, while_mul_73_cmp_iswt1_1,
      while_mul_73_cmp_iden_3, run_cgwt_8, while_mul_73_cmp_bdwt, while_mul_73_cmp_bdwt_2,
      while_mul_73_cmp_iswt1_1_pff, while_mul_73_cmp_iswt1_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_73_cmp_oswt_unreg;
  input while_mul_73_cmp_iswt1;
  output while_mul_73_cmp_iden_1;
  input while_mul_73_cmp_oswt_unreg_1;
  input while_mul_73_cmp_iswt1_1;
  output while_mul_73_cmp_iden_3;
  output run_cgwt_8;
  output while_mul_73_cmp_bdwt;
  output while_mul_73_cmp_bdwt_2;
  input while_mul_73_cmp_iswt1_1_pff;
  input while_mul_73_cmp_iswt1_pff;


  // Interconnect Declarations
  wire while_mul_73_cmp_ogwt;
  wire while_mul_73_cmp_tiswt1;
  reg while_mul_73_cmp_hile_mul_73_cmp_pdswt0;
  reg [1:0] while_mul_73_cmp_icwt;
  wire [2:0] nl_while_mul_73_cmp_icwt;
  wire while_mul_73_cmp_ogwt_1;
  wire while_mul_73_cmp_tiswt1_1;
  reg while_mul_73_cmp_hile_mul_73_cmp_pdswt0_1;
  reg [1:0] while_mul_73_cmp_icwt_1;
  wire [2:0] nl_while_mul_73_cmp_icwt_1;

  wire[1:0] while_acc_46_nl;
  wire[2:0] nl_while_acc_46_nl;
  wire[1:0] while_acc_47_nl;
  wire[2:0] nl_while_acc_47_nl;
  wire[1:0] while_acc_49_nl;
  wire[2:0] nl_while_acc_49_nl;
  wire[1:0] while_acc_50_nl;
  wire[2:0] nl_while_acc_50_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_73_cmp_bdwt = while_mul_73_cmp_oswt_unreg & run_wen;
  assign while_mul_73_cmp_tiswt1 = (~ run_wten) & while_mul_73_cmp_iswt1;
  assign while_mul_73_cmp_iden_1 = while_mul_73_cmp_ogwt;
  assign while_mul_73_cmp_ogwt = while_mul_73_cmp_hile_mul_73_cmp_pdswt0 | (while_mul_73_cmp_icwt!=2'b00);
  assign while_mul_73_cmp_bdwt_2 = while_mul_73_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_73_cmp_tiswt1_1 = (~ run_wten) & while_mul_73_cmp_iswt1_1;
  assign while_mul_73_cmp_iden_3 = while_mul_73_cmp_ogwt_1;
  assign while_mul_73_cmp_ogwt_1 = while_mul_73_cmp_hile_mul_73_cmp_pdswt0_1 | (while_mul_73_cmp_icwt_1!=2'b00);
  assign run_cgwt_8 = while_mul_73_cmp_ogwt_1 | while_mul_73_cmp_tiswt1_1 | while_mul_73_cmp_ogwt
      | while_mul_73_cmp_tiswt1 | (run_wen & while_mul_73_cmp_iswt1_1_pff) | (run_wen
      & while_mul_73_cmp_iswt1_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_73_cmp_hile_mul_73_cmp_pdswt0 <= 1'b0;
      while_mul_73_cmp_icwt <= 2'b00;
      while_mul_73_cmp_hile_mul_73_cmp_pdswt0_1 <= 1'b0;
      while_mul_73_cmp_icwt_1 <= 2'b00;
    end
    else begin
      while_mul_73_cmp_hile_mul_73_cmp_pdswt0 <= while_mul_73_cmp_tiswt1;
      while_mul_73_cmp_icwt <= nl_while_mul_73_cmp_icwt[1:0];
      while_mul_73_cmp_hile_mul_73_cmp_pdswt0_1 <= while_mul_73_cmp_tiswt1_1;
      while_mul_73_cmp_icwt_1 <= nl_while_mul_73_cmp_icwt_1[1:0];
    end
  end
  assign nl_while_acc_46_nl = while_mul_73_cmp_icwt + 2'b11;
  assign while_acc_46_nl = nl_while_acc_46_nl[1:0];
  assign nl_while_acc_47_nl = conv_u2u_1_2(while_mul_73_cmp_hile_mul_73_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_73_cmp_ogwt);
  assign while_acc_47_nl = nl_while_acc_47_nl[1:0];
  assign nl_while_mul_73_cmp_icwt  = while_acc_46_nl + while_acc_47_nl;
  assign nl_while_acc_49_nl = while_mul_73_cmp_icwt_1 + 2'b11;
  assign while_acc_49_nl = nl_while_acc_49_nl[1:0];
  assign nl_while_acc_50_nl = conv_u2u_1_2(while_mul_73_cmp_hile_mul_73_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_73_cmp_ogwt_1);
  assign while_acc_50_nl = nl_while_acc_50_nl[1:0];
  assign nl_while_mul_73_cmp_icwt_1  = while_acc_49_nl + while_acc_50_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_72_cmp_mgc_mul_pipe_32_1_88_1_103_1_1_0_0_3_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_72_cmp_mgc_mul_pipe_32_1_88_1_103_1_1_0_0_3_1_wait_dp
    (
  clk, rst, while_mul_72_cmp_bawt, while_mul_72_cmp_iden, while_mul_72_cmp_iden_2,
      while_mul_72_cmp_z_mxwt, while_mul_72_cmp_z_mxwt_1, while_mul_72_cmp_biwt,
      while_mul_72_cmp_bdwt, while_mul_72_cmp_biwt_2, while_mul_72_cmp_bdwt_2, while_mul_72_cmp_z
);
  input clk;
  input rst;
  output while_mul_72_cmp_bawt;
  output while_mul_72_cmp_iden;
  output while_mul_72_cmp_iden_2;
  output [102:0] while_mul_72_cmp_z_mxwt;
  output [100:0] while_mul_72_cmp_z_mxwt_1;
  input while_mul_72_cmp_biwt;
  input while_mul_72_cmp_bdwt;
  input while_mul_72_cmp_biwt_2;
  input while_mul_72_cmp_bdwt_2;
  input [102:0] while_mul_72_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_72_cmp_bcwt;
  wire [2:0] nl_while_mul_72_cmp_bcwt;
  reg [1:0] while_mul_72_cmp_bcwt_1;
  wire [2:0] nl_while_mul_72_cmp_bcwt_1;
  reg [102:0] while_mul_72_cmp_z_bfwt;
  reg [102:0] while_mul_72_cmp_z_bfwt_1;
  reg [102:0] while_mul_72_cmp_z_bfwt_2;
  reg [100:0] while_mul_72_cmp_z_bfwt_5_100_0;
  reg [100:0] while_mul_72_cmp_z_bfwt_4_100_0;
  reg [100:0] while_mul_72_cmp_z_bfwt_3_100_0;

  wire[1:0] while_acc_41_nl;
  wire[2:0] nl_while_acc_41_nl;
  wire[1:0] while_acc_42_nl;
  wire[2:0] nl_while_acc_42_nl;
  wire[1:0] while_acc_44_nl;
  wire[2:0] nl_while_acc_44_nl;
  wire[1:0] while_acc_45_nl;
  wire[2:0] nl_while_acc_45_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_72_cmp_iden = while_mul_72_cmp_biwt | while_mul_72_cmp_bdwt;
  assign while_mul_72_cmp_bawt = while_mul_72_cmp_biwt | (while_mul_72_cmp_bcwt!=2'b00);
  assign while_mul_72_cmp_iden_2 = while_mul_72_cmp_biwt_2 | while_mul_72_cmp_bdwt_2;
  assign while_mul_72_cmp_z_mxwt = MUX_v_103_4_2(while_mul_72_cmp_z, while_mul_72_cmp_z_bfwt,
      while_mul_72_cmp_z_bfwt_1, while_mul_72_cmp_z_bfwt_2, while_mul_72_cmp_bcwt_1);
  assign while_mul_72_cmp_z_mxwt_1 = MUX_v_101_4_2((while_mul_72_cmp_z[100:0]), while_mul_72_cmp_z_bfwt_3_100_0,
      while_mul_72_cmp_z_bfwt_4_100_0, while_mul_72_cmp_z_bfwt_5_100_0, while_mul_72_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_72_cmp_bcwt <= 2'b00;
      while_mul_72_cmp_bcwt_1 <= 2'b00;
    end
    else begin
      while_mul_72_cmp_bcwt <= nl_while_mul_72_cmp_bcwt[1:0];
      while_mul_72_cmp_bcwt_1 <= nl_while_mul_72_cmp_bcwt_1[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_72_cmp_z_bfwt <= 103'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_72_cmp_z_bfwt_1 <= 103'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_72_cmp_z_bfwt_2 <= 103'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_72_cmp_biwt_2 ) begin
      while_mul_72_cmp_z_bfwt <= while_mul_72_cmp_z;
      while_mul_72_cmp_z_bfwt_1 <= while_mul_72_cmp_z_bfwt;
      while_mul_72_cmp_z_bfwt_2 <= while_mul_72_cmp_z_bfwt_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_72_cmp_z_bfwt_3_100_0 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_72_cmp_z_bfwt_4_100_0 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_72_cmp_z_bfwt_5_100_0 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_72_cmp_biwt ) begin
      while_mul_72_cmp_z_bfwt_3_100_0 <= while_mul_72_cmp_z[100:0];
      while_mul_72_cmp_z_bfwt_4_100_0 <= while_mul_72_cmp_z_bfwt_3_100_0;
      while_mul_72_cmp_z_bfwt_5_100_0 <= while_mul_72_cmp_z_bfwt_4_100_0;
    end
  end
  assign nl_while_acc_41_nl = while_mul_72_cmp_bcwt + 2'b11;
  assign while_acc_41_nl = nl_while_acc_41_nl[1:0];
  assign nl_while_acc_42_nl = conv_u2u_1_2(~ while_mul_72_cmp_bdwt) + conv_u2u_1_2(while_mul_72_cmp_biwt);
  assign while_acc_42_nl = nl_while_acc_42_nl[1:0];
  assign nl_while_mul_72_cmp_bcwt  = while_acc_41_nl + while_acc_42_nl;
  assign nl_while_acc_44_nl = while_mul_72_cmp_bcwt_1 + 2'b11;
  assign while_acc_44_nl = nl_while_acc_44_nl[1:0];
  assign nl_while_acc_45_nl = conv_u2u_1_2(~ while_mul_72_cmp_bdwt_2) + conv_u2u_1_2(while_mul_72_cmp_biwt_2);
  assign while_acc_45_nl = nl_while_acc_45_nl[1:0];
  assign nl_while_mul_72_cmp_bcwt_1  = while_acc_44_nl + while_acc_45_nl;

  function automatic [100:0] MUX_v_101_4_2;
    input [100:0] input_0;
    input [100:0] input_1;
    input [100:0] input_2;
    input [100:0] input_3;
    input [1:0] sel;
    reg [100:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_101_4_2 = result;
  end
  endfunction


  function automatic [102:0] MUX_v_103_4_2;
    input [102:0] input_0;
    input [102:0] input_1;
    input [102:0] input_2;
    input [102:0] input_3;
    input [1:0] sel;
    reg [102:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_103_4_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_72_cmp_mgc_mul_pipe_32_1_88_1_103_1_1_0_0_3_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_72_cmp_mgc_mul_pipe_32_1_88_1_103_1_1_0_0_3_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_72_cmp_oswt_unreg, while_mul_72_cmp_iswt2,
      while_mul_72_cmp_iden_1, while_mul_72_cmp_oswt_unreg_1, while_mul_72_cmp_iswt2_1,
      while_mul_72_cmp_iden_3, run_cgwt_7, while_mul_72_cmp_bdwt, while_mul_72_cmp_bdwt_2,
      while_mul_72_cmp_iswt2_1_pff, while_mul_72_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_72_cmp_oswt_unreg;
  input while_mul_72_cmp_iswt2;
  output while_mul_72_cmp_iden_1;
  input while_mul_72_cmp_oswt_unreg_1;
  input while_mul_72_cmp_iswt2_1;
  output while_mul_72_cmp_iden_3;
  output run_cgwt_7;
  output while_mul_72_cmp_bdwt;
  output while_mul_72_cmp_bdwt_2;
  input while_mul_72_cmp_iswt2_1_pff;
  input while_mul_72_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_72_cmp_ogwt;
  wire while_mul_72_cmp_tiswt2;
  reg while_mul_72_cmp_hile_mul_72_cmp_pdswt1;
  reg while_mul_72_cmp_hile_mul_72_cmp_pdswt0;
  reg [1:0] while_mul_72_cmp_icwt;
  wire [2:0] nl_while_mul_72_cmp_icwt;
  wire while_mul_72_cmp_ogwt_1;
  wire while_mul_72_cmp_tiswt2_1;
  reg while_mul_72_cmp_hile_mul_72_cmp_pdswt1_1;
  reg while_mul_72_cmp_hile_mul_72_cmp_pdswt0_1;
  reg [1:0] while_mul_72_cmp_icwt_1;
  wire [2:0] nl_while_mul_72_cmp_icwt_1;

  wire[1:0] while_acc_42_nl;
  wire[2:0] nl_while_acc_42_nl;
  wire[1:0] while_acc_43_nl;
  wire[2:0] nl_while_acc_43_nl;
  wire[1:0] while_acc_45_nl;
  wire[2:0] nl_while_acc_45_nl;
  wire[1:0] while_acc_46_nl;
  wire[2:0] nl_while_acc_46_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_72_cmp_bdwt = while_mul_72_cmp_oswt_unreg & run_wen;
  assign while_mul_72_cmp_tiswt2 = (~ run_wten) & while_mul_72_cmp_iswt2;
  assign while_mul_72_cmp_iden_1 = while_mul_72_cmp_ogwt;
  assign while_mul_72_cmp_ogwt = while_mul_72_cmp_hile_mul_72_cmp_pdswt0 | (while_mul_72_cmp_icwt!=2'b00);
  assign while_mul_72_cmp_bdwt_2 = while_mul_72_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_72_cmp_tiswt2_1 = (~ run_wten) & while_mul_72_cmp_iswt2_1;
  assign while_mul_72_cmp_iden_3 = while_mul_72_cmp_ogwt_1;
  assign while_mul_72_cmp_ogwt_1 = while_mul_72_cmp_hile_mul_72_cmp_pdswt0_1 | (while_mul_72_cmp_icwt_1!=2'b00);
  assign run_cgwt_7 = while_mul_72_cmp_ogwt_1 | while_mul_72_cmp_tiswt2_1 | while_mul_72_cmp_hile_mul_72_cmp_pdswt1_1
      | while_mul_72_cmp_ogwt | while_mul_72_cmp_tiswt2 | while_mul_72_cmp_hile_mul_72_cmp_pdswt1
      | (run_wen & while_mul_72_cmp_iswt2_1_pff) | (run_wen & while_mul_72_cmp_iswt2_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_72_cmp_hile_mul_72_cmp_pdswt1 <= 1'b0;
      while_mul_72_cmp_hile_mul_72_cmp_pdswt0 <= 1'b0;
      while_mul_72_cmp_icwt <= 2'b00;
      while_mul_72_cmp_hile_mul_72_cmp_pdswt1_1 <= 1'b0;
      while_mul_72_cmp_hile_mul_72_cmp_pdswt0_1 <= 1'b0;
      while_mul_72_cmp_icwt_1 <= 2'b00;
    end
    else begin
      while_mul_72_cmp_hile_mul_72_cmp_pdswt1 <= while_mul_72_cmp_tiswt2;
      while_mul_72_cmp_hile_mul_72_cmp_pdswt0 <= while_mul_72_cmp_hile_mul_72_cmp_pdswt1;
      while_mul_72_cmp_icwt <= nl_while_mul_72_cmp_icwt[1:0];
      while_mul_72_cmp_hile_mul_72_cmp_pdswt1_1 <= while_mul_72_cmp_tiswt2_1;
      while_mul_72_cmp_hile_mul_72_cmp_pdswt0_1 <= while_mul_72_cmp_hile_mul_72_cmp_pdswt1_1;
      while_mul_72_cmp_icwt_1 <= nl_while_mul_72_cmp_icwt_1[1:0];
    end
  end
  assign nl_while_acc_42_nl = while_mul_72_cmp_icwt + 2'b11;
  assign while_acc_42_nl = nl_while_acc_42_nl[1:0];
  assign nl_while_acc_43_nl = conv_u2u_1_2(while_mul_72_cmp_hile_mul_72_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_72_cmp_ogwt);
  assign while_acc_43_nl = nl_while_acc_43_nl[1:0];
  assign nl_while_mul_72_cmp_icwt  = while_acc_42_nl + while_acc_43_nl;
  assign nl_while_acc_45_nl = while_mul_72_cmp_icwt_1 + 2'b11;
  assign while_acc_45_nl = nl_while_acc_45_nl[1:0];
  assign nl_while_acc_46_nl = conv_u2u_1_2(while_mul_72_cmp_hile_mul_72_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_72_cmp_ogwt_1);
  assign while_acc_46_nl = nl_while_acc_46_nl[1:0];
  assign nl_while_mul_72_cmp_icwt_1  = while_acc_45_nl + while_acc_46_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_67_cmp_mgc_mul_pipe_32_1_58_1_90_1_1_0_0_2_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_67_cmp_mgc_mul_pipe_32_1_58_1_90_1_1_0_0_2_1_wait_dp
    (
  clk, rst, while_mul_67_cmp_bawt, while_mul_67_cmp_iden, while_mul_67_cmp_iden_2,
      while_mul_67_cmp_iden_4, while_mul_67_cmp_z_mxwt, while_mul_67_cmp_z_mxwt_1,
      while_mul_67_cmp_z_mxwt_2, while_mul_67_cmp_biwt, while_mul_67_cmp_bdwt, while_mul_67_cmp_biwt_2,
      while_mul_67_cmp_bdwt_2, while_mul_67_cmp_biwt_4, while_mul_67_cmp_bdwt_4,
      while_mul_67_cmp_z
);
  input clk;
  input rst;
  output while_mul_67_cmp_bawt;
  output while_mul_67_cmp_iden;
  output while_mul_67_cmp_iden_2;
  output while_mul_67_cmp_iden_4;
  output [89:0] while_mul_67_cmp_z_mxwt;
  output [89:0] while_mul_67_cmp_z_mxwt_1;
  output [88:0] while_mul_67_cmp_z_mxwt_2;
  input while_mul_67_cmp_biwt;
  input while_mul_67_cmp_bdwt;
  input while_mul_67_cmp_biwt_2;
  input while_mul_67_cmp_bdwt_2;
  input while_mul_67_cmp_biwt_4;
  input while_mul_67_cmp_bdwt_4;
  input [89:0] while_mul_67_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_67_cmp_bcwt;
  wire [2:0] nl_while_mul_67_cmp_bcwt;
  reg [1:0] while_mul_67_cmp_bcwt_1;
  wire [2:0] nl_while_mul_67_cmp_bcwt_1;
  reg [1:0] while_mul_67_cmp_bcwt_2;
  wire [2:0] nl_while_mul_67_cmp_bcwt_2;
  reg [89:0] while_mul_67_cmp_z_bfwt;
  reg [89:0] while_mul_67_cmp_z_bfwt_1;
  reg [89:0] while_mul_67_cmp_z_bfwt_2;
  reg [89:0] while_mul_67_cmp_z_bfwt_3;
  reg [88:0] while_mul_67_cmp_z_bfwt_5_88_0;
  reg [88:0] while_mul_67_cmp_z_bfwt_4_88_0;

  wire[1:0] while_acc_37_nl;
  wire[2:0] nl_while_acc_37_nl;
  wire[1:0] while_acc_38_nl;
  wire[2:0] nl_while_acc_38_nl;
  wire[1:0] while_acc_40_nl;
  wire[2:0] nl_while_acc_40_nl;
  wire[1:0] while_acc_41_nl;
  wire[2:0] nl_while_acc_41_nl;
  wire[1:0] while_acc_43_nl;
  wire[2:0] nl_while_acc_43_nl;
  wire[1:0] while_acc_44_nl;
  wire[2:0] nl_while_acc_44_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_67_cmp_iden = while_mul_67_cmp_biwt | while_mul_67_cmp_bdwt;
  assign while_mul_67_cmp_bawt = while_mul_67_cmp_biwt | (while_mul_67_cmp_bcwt!=2'b00);
  assign while_mul_67_cmp_iden_2 = while_mul_67_cmp_biwt_2 | while_mul_67_cmp_bdwt_2;
  assign while_mul_67_cmp_iden_4 = while_mul_67_cmp_biwt_4 | while_mul_67_cmp_bdwt_4;
  assign while_mul_67_cmp_z_mxwt = MUX_v_90_3_2(while_mul_67_cmp_z, while_mul_67_cmp_z_bfwt,
      while_mul_67_cmp_z_bfwt_1, while_mul_67_cmp_bcwt_2);
  assign while_mul_67_cmp_z_mxwt_1 = MUX_v_90_3_2(while_mul_67_cmp_z, while_mul_67_cmp_z_bfwt_2,
      while_mul_67_cmp_z_bfwt_3, while_mul_67_cmp_bcwt_1);
  assign while_mul_67_cmp_z_mxwt_2 = MUX_v_89_3_2((while_mul_67_cmp_z[88:0]), while_mul_67_cmp_z_bfwt_4_88_0,
      while_mul_67_cmp_z_bfwt_5_88_0, while_mul_67_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_67_cmp_bcwt <= 2'b00;
      while_mul_67_cmp_bcwt_1 <= 2'b00;
      while_mul_67_cmp_bcwt_2 <= 2'b00;
    end
    else begin
      while_mul_67_cmp_bcwt <= nl_while_mul_67_cmp_bcwt[1:0];
      while_mul_67_cmp_bcwt_1 <= nl_while_mul_67_cmp_bcwt_1[1:0];
      while_mul_67_cmp_bcwt_2 <= nl_while_mul_67_cmp_bcwt_2[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_67_cmp_z_bfwt <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_67_cmp_z_bfwt_1 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_67_cmp_biwt_4 ) begin
      while_mul_67_cmp_z_bfwt <= while_mul_67_cmp_z;
      while_mul_67_cmp_z_bfwt_1 <= while_mul_67_cmp_z_bfwt;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_67_cmp_z_bfwt_2 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_67_cmp_z_bfwt_3 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_67_cmp_biwt_2 ) begin
      while_mul_67_cmp_z_bfwt_2 <= while_mul_67_cmp_z;
      while_mul_67_cmp_z_bfwt_3 <= while_mul_67_cmp_z_bfwt_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_67_cmp_z_bfwt_4_88_0 <= 89'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_67_cmp_z_bfwt_5_88_0 <= 89'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_67_cmp_biwt ) begin
      while_mul_67_cmp_z_bfwt_4_88_0 <= while_mul_67_cmp_z[88:0];
      while_mul_67_cmp_z_bfwt_5_88_0 <= while_mul_67_cmp_z_bfwt_4_88_0;
    end
  end
  assign nl_while_acc_37_nl = while_mul_67_cmp_bcwt + 2'b11;
  assign while_acc_37_nl = nl_while_acc_37_nl[1:0];
  assign nl_while_acc_38_nl = conv_u2u_1_2(~ while_mul_67_cmp_bdwt) + conv_u2u_1_2(while_mul_67_cmp_biwt);
  assign while_acc_38_nl = nl_while_acc_38_nl[1:0];
  assign nl_while_mul_67_cmp_bcwt  = while_acc_37_nl + while_acc_38_nl;
  assign nl_while_acc_40_nl = while_mul_67_cmp_bcwt_1 + 2'b11;
  assign while_acc_40_nl = nl_while_acc_40_nl[1:0];
  assign nl_while_acc_41_nl = conv_u2u_1_2(~ while_mul_67_cmp_bdwt_2) + conv_u2u_1_2(while_mul_67_cmp_biwt_2);
  assign while_acc_41_nl = nl_while_acc_41_nl[1:0];
  assign nl_while_mul_67_cmp_bcwt_1  = while_acc_40_nl + while_acc_41_nl;
  assign nl_while_acc_43_nl = while_mul_67_cmp_bcwt_2 + 2'b11;
  assign while_acc_43_nl = nl_while_acc_43_nl[1:0];
  assign nl_while_acc_44_nl = conv_u2u_1_2(~ while_mul_67_cmp_bdwt_4) + conv_u2u_1_2(while_mul_67_cmp_biwt_4);
  assign while_acc_44_nl = nl_while_acc_44_nl[1:0];
  assign nl_while_mul_67_cmp_bcwt_2  = while_acc_43_nl + while_acc_44_nl;

  function automatic [88:0] MUX_v_89_3_2;
    input [88:0] input_0;
    input [88:0] input_1;
    input [88:0] input_2;
    input [1:0] sel;
    reg [88:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      default : begin
        result = input_2;
      end
    endcase
    MUX_v_89_3_2 = result;
  end
  endfunction


  function automatic [89:0] MUX_v_90_3_2;
    input [89:0] input_0;
    input [89:0] input_1;
    input [89:0] input_2;
    input [1:0] sel;
    reg [89:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      default : begin
        result = input_2;
      end
    endcase
    MUX_v_90_3_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_67_cmp_mgc_mul_pipe_32_1_58_1_90_1_1_0_0_2_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_67_cmp_mgc_mul_pipe_32_1_58_1_90_1_1_0_0_2_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_67_cmp_oswt_unreg, while_mul_67_cmp_iswt1,
      while_mul_67_cmp_iden_1, while_mul_67_cmp_oswt_unreg_1, while_mul_67_cmp_iswt1_1,
      while_mul_67_cmp_iden_3, while_mul_67_cmp_oswt_unreg_2, while_mul_67_cmp_iswt1_2,
      while_mul_67_cmp_iden_5, run_cgwt_6, while_mul_67_cmp_bdwt, while_mul_67_cmp_bdwt_2,
      while_mul_67_cmp_bdwt_4, while_mul_67_cmp_iswt1_2_pff, while_mul_67_cmp_iswt1_1_pff,
      while_mul_67_cmp_iswt1_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_67_cmp_oswt_unreg;
  input while_mul_67_cmp_iswt1;
  output while_mul_67_cmp_iden_1;
  input while_mul_67_cmp_oswt_unreg_1;
  input while_mul_67_cmp_iswt1_1;
  output while_mul_67_cmp_iden_3;
  input while_mul_67_cmp_oswt_unreg_2;
  input while_mul_67_cmp_iswt1_2;
  output while_mul_67_cmp_iden_5;
  output run_cgwt_6;
  output while_mul_67_cmp_bdwt;
  output while_mul_67_cmp_bdwt_2;
  output while_mul_67_cmp_bdwt_4;
  input while_mul_67_cmp_iswt1_2_pff;
  input while_mul_67_cmp_iswt1_1_pff;
  input while_mul_67_cmp_iswt1_pff;


  // Interconnect Declarations
  wire while_mul_67_cmp_ogwt;
  wire while_mul_67_cmp_tiswt1;
  reg while_mul_67_cmp_hile_mul_67_cmp_pdswt0;
  reg [1:0] while_mul_67_cmp_icwt;
  wire [2:0] nl_while_mul_67_cmp_icwt;
  wire while_mul_67_cmp_ogwt_1;
  wire while_mul_67_cmp_tiswt1_1;
  reg while_mul_67_cmp_hile_mul_67_cmp_pdswt0_1;
  reg [1:0] while_mul_67_cmp_icwt_1;
  wire [2:0] nl_while_mul_67_cmp_icwt_1;
  wire while_mul_67_cmp_ogwt_2;
  wire while_mul_67_cmp_tiswt1_2;
  reg while_mul_67_cmp_hile_mul_67_cmp_pdswt0_2;
  reg [1:0] while_mul_67_cmp_icwt_2;
  wire [2:0] nl_while_mul_67_cmp_icwt_2;

  wire[1:0] while_acc_38_nl;
  wire[2:0] nl_while_acc_38_nl;
  wire[1:0] while_acc_39_nl;
  wire[2:0] nl_while_acc_39_nl;
  wire[1:0] while_acc_41_nl;
  wire[2:0] nl_while_acc_41_nl;
  wire[1:0] while_acc_42_nl;
  wire[2:0] nl_while_acc_42_nl;
  wire[1:0] while_acc_44_nl;
  wire[2:0] nl_while_acc_44_nl;
  wire[1:0] while_acc_45_nl;
  wire[2:0] nl_while_acc_45_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_67_cmp_bdwt = while_mul_67_cmp_oswt_unreg & run_wen;
  assign while_mul_67_cmp_tiswt1 = (~ run_wten) & while_mul_67_cmp_iswt1;
  assign while_mul_67_cmp_iden_1 = while_mul_67_cmp_ogwt;
  assign while_mul_67_cmp_ogwt = while_mul_67_cmp_hile_mul_67_cmp_pdswt0 | (while_mul_67_cmp_icwt!=2'b00);
  assign while_mul_67_cmp_bdwt_2 = while_mul_67_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_67_cmp_tiswt1_1 = (~ run_wten) & while_mul_67_cmp_iswt1_1;
  assign while_mul_67_cmp_iden_3 = while_mul_67_cmp_ogwt_1;
  assign while_mul_67_cmp_ogwt_1 = while_mul_67_cmp_hile_mul_67_cmp_pdswt0_1 | (while_mul_67_cmp_icwt_1!=2'b00);
  assign while_mul_67_cmp_bdwt_4 = while_mul_67_cmp_oswt_unreg_2 & run_wen;
  assign while_mul_67_cmp_tiswt1_2 = (~ run_wten) & while_mul_67_cmp_iswt1_2;
  assign while_mul_67_cmp_iden_5 = while_mul_67_cmp_ogwt_2;
  assign while_mul_67_cmp_ogwt_2 = while_mul_67_cmp_hile_mul_67_cmp_pdswt0_2 | (while_mul_67_cmp_icwt_2!=2'b00);
  assign run_cgwt_6 = while_mul_67_cmp_ogwt_2 | while_mul_67_cmp_tiswt1_2 | while_mul_67_cmp_ogwt_1
      | while_mul_67_cmp_tiswt1_1 | while_mul_67_cmp_ogwt | while_mul_67_cmp_tiswt1
      | (run_wen & while_mul_67_cmp_iswt1_2_pff) | (run_wen & while_mul_67_cmp_iswt1_1_pff)
      | (run_wen & while_mul_67_cmp_iswt1_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_67_cmp_hile_mul_67_cmp_pdswt0 <= 1'b0;
      while_mul_67_cmp_icwt <= 2'b00;
      while_mul_67_cmp_hile_mul_67_cmp_pdswt0_1 <= 1'b0;
      while_mul_67_cmp_icwt_1 <= 2'b00;
      while_mul_67_cmp_hile_mul_67_cmp_pdswt0_2 <= 1'b0;
      while_mul_67_cmp_icwt_2 <= 2'b00;
    end
    else begin
      while_mul_67_cmp_hile_mul_67_cmp_pdswt0 <= while_mul_67_cmp_tiswt1;
      while_mul_67_cmp_icwt <= nl_while_mul_67_cmp_icwt[1:0];
      while_mul_67_cmp_hile_mul_67_cmp_pdswt0_1 <= while_mul_67_cmp_tiswt1_1;
      while_mul_67_cmp_icwt_1 <= nl_while_mul_67_cmp_icwt_1[1:0];
      while_mul_67_cmp_hile_mul_67_cmp_pdswt0_2 <= while_mul_67_cmp_tiswt1_2;
      while_mul_67_cmp_icwt_2 <= nl_while_mul_67_cmp_icwt_2[1:0];
    end
  end
  assign nl_while_acc_38_nl = while_mul_67_cmp_icwt + 2'b11;
  assign while_acc_38_nl = nl_while_acc_38_nl[1:0];
  assign nl_while_acc_39_nl = conv_u2u_1_2(while_mul_67_cmp_hile_mul_67_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_67_cmp_ogwt);
  assign while_acc_39_nl = nl_while_acc_39_nl[1:0];
  assign nl_while_mul_67_cmp_icwt  = while_acc_38_nl + while_acc_39_nl;
  assign nl_while_acc_41_nl = while_mul_67_cmp_icwt_1 + 2'b11;
  assign while_acc_41_nl = nl_while_acc_41_nl[1:0];
  assign nl_while_acc_42_nl = conv_u2u_1_2(while_mul_67_cmp_hile_mul_67_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_67_cmp_ogwt_1);
  assign while_acc_42_nl = nl_while_acc_42_nl[1:0];
  assign nl_while_mul_67_cmp_icwt_1  = while_acc_41_nl + while_acc_42_nl;
  assign nl_while_acc_44_nl = while_mul_67_cmp_icwt_2 + 2'b11;
  assign while_acc_44_nl = nl_while_acc_44_nl[1:0];
  assign nl_while_acc_45_nl = conv_u2u_1_2(while_mul_67_cmp_hile_mul_67_cmp_pdswt0_2)
      + conv_u2u_1_2(~ while_mul_67_cmp_ogwt_2);
  assign while_acc_45_nl = nl_while_acc_45_nl[1:0];
  assign nl_while_mul_67_cmp_icwt_2  = while_acc_44_nl + while_acc_45_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_while_mul_cmp_mgc_mul_pipe_32_1_121_1_129_1_1_0_0_4_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_while_mul_cmp_mgc_mul_pipe_32_1_121_1_129_1_1_0_0_4_1_wait_dp
    (
  clk, rst, while_while_mul_cmp_bawt, while_while_mul_cmp_iden, while_while_mul_cmp_iden_2,
      while_while_mul_cmp_z_mxwt, while_while_mul_cmp_z_mxwt_1, while_while_mul_cmp_biwt,
      while_while_mul_cmp_bdwt, while_while_mul_cmp_biwt_2, while_while_mul_cmp_bdwt_2,
      while_while_mul_cmp_z
);
  input clk;
  input rst;
  output while_while_mul_cmp_bawt;
  output while_while_mul_cmp_iden;
  output while_while_mul_cmp_iden_2;
  output [128:0] while_while_mul_cmp_z_mxwt;
  output [128:0] while_while_mul_cmp_z_mxwt_1;
  input while_while_mul_cmp_biwt;
  input while_while_mul_cmp_bdwt;
  input while_while_mul_cmp_biwt_2;
  input while_while_mul_cmp_bdwt_2;
  input [128:0] while_while_mul_cmp_z;


  // Interconnect Declarations
  reg [2:0] while_while_mul_cmp_bcwt;
  wire [3:0] nl_while_while_mul_cmp_bcwt;
  reg [2:0] while_while_mul_cmp_bcwt_1;
  wire [3:0] nl_while_while_mul_cmp_bcwt_1;
  reg [128:0] while_while_mul_cmp_z_bfwt;
  reg [128:0] while_while_mul_cmp_z_bfwt_1;
  reg [128:0] while_while_mul_cmp_z_bfwt_2;
  reg [128:0] while_while_mul_cmp_z_bfwt_3;
  reg [128:0] while_while_mul_cmp_z_bfwt_4;
  reg [128:0] while_while_mul_cmp_z_bfwt_5;
  reg [128:0] while_while_mul_cmp_z_bfwt_6;
  reg [128:0] while_while_mul_cmp_z_bfwt_7;

  wire[2:0] while_acc_31_nl;
  wire[3:0] nl_while_acc_31_nl;
  wire[1:0] while_acc_32_nl;
  wire[2:0] nl_while_acc_32_nl;
  wire[2:0] while_acc_34_nl;
  wire[3:0] nl_while_acc_34_nl;
  wire[1:0] while_acc_35_nl;
  wire[2:0] nl_while_acc_35_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_while_mul_cmp_iden = while_while_mul_cmp_biwt | while_while_mul_cmp_bdwt;
  assign while_while_mul_cmp_bawt = while_while_mul_cmp_biwt | (while_while_mul_cmp_bcwt!=3'b000);
  assign while_while_mul_cmp_iden_2 = while_while_mul_cmp_biwt_2 | while_while_mul_cmp_bdwt_2;
  assign while_while_mul_cmp_z_mxwt = MUX_v_129_5_2(while_while_mul_cmp_z, while_while_mul_cmp_z_bfwt,
      while_while_mul_cmp_z_bfwt_1, while_while_mul_cmp_z_bfwt_2, while_while_mul_cmp_z_bfwt_3,
      while_while_mul_cmp_bcwt_1);
  assign while_while_mul_cmp_z_mxwt_1 = MUX_v_129_5_2(while_while_mul_cmp_z, while_while_mul_cmp_z_bfwt_4,
      while_while_mul_cmp_z_bfwt_5, while_while_mul_cmp_z_bfwt_6, while_while_mul_cmp_z_bfwt_7,
      while_while_mul_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_while_mul_cmp_bcwt <= 3'b000;
      while_while_mul_cmp_bcwt_1 <= 3'b000;
    end
    else begin
      while_while_mul_cmp_bcwt <= nl_while_while_mul_cmp_bcwt[2:0];
      while_while_mul_cmp_bcwt_1 <= nl_while_while_mul_cmp_bcwt_1[2:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_while_mul_cmp_z_bfwt <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_while_mul_cmp_z_bfwt_1 <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_while_mul_cmp_z_bfwt_2 <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_while_mul_cmp_z_bfwt_3 <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_while_mul_cmp_biwt_2 ) begin
      while_while_mul_cmp_z_bfwt <= while_while_mul_cmp_z;
      while_while_mul_cmp_z_bfwt_1 <= while_while_mul_cmp_z_bfwt;
      while_while_mul_cmp_z_bfwt_2 <= while_while_mul_cmp_z_bfwt_1;
      while_while_mul_cmp_z_bfwt_3 <= while_while_mul_cmp_z_bfwt_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_while_mul_cmp_z_bfwt_4 <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_while_mul_cmp_z_bfwt_5 <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_while_mul_cmp_z_bfwt_6 <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_while_mul_cmp_z_bfwt_7 <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_while_mul_cmp_biwt ) begin
      while_while_mul_cmp_z_bfwt_4 <= while_while_mul_cmp_z;
      while_while_mul_cmp_z_bfwt_5 <= while_while_mul_cmp_z_bfwt_4;
      while_while_mul_cmp_z_bfwt_6 <= while_while_mul_cmp_z_bfwt_5;
      while_while_mul_cmp_z_bfwt_7 <= while_while_mul_cmp_z_bfwt_6;
    end
  end
  assign nl_while_acc_31_nl = while_while_mul_cmp_bcwt + 3'b111;
  assign while_acc_31_nl = nl_while_acc_31_nl[2:0];
  assign nl_while_acc_32_nl = conv_u2u_1_2(~ while_while_mul_cmp_bdwt) + conv_u2u_1_2(while_while_mul_cmp_biwt);
  assign while_acc_32_nl = nl_while_acc_32_nl[1:0];
  assign nl_while_while_mul_cmp_bcwt  = while_acc_31_nl + conv_u2u_2_3(while_acc_32_nl);
  assign nl_while_acc_34_nl = while_while_mul_cmp_bcwt_1 + 3'b111;
  assign while_acc_34_nl = nl_while_acc_34_nl[2:0];
  assign nl_while_acc_35_nl = conv_u2u_1_2(~ while_while_mul_cmp_bdwt_2) + conv_u2u_1_2(while_while_mul_cmp_biwt_2);
  assign while_acc_35_nl = nl_while_acc_35_nl[1:0];
  assign nl_while_while_mul_cmp_bcwt_1  = while_acc_34_nl + conv_u2u_2_3(while_acc_35_nl);

  function automatic [128:0] MUX_v_129_5_2;
    input [128:0] input_0;
    input [128:0] input_1;
    input [128:0] input_2;
    input [128:0] input_3;
    input [128:0] input_4;
    input [2:0] sel;
    reg [128:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      default : begin
        result = input_4;
      end
    endcase
    MUX_v_129_5_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_while_mul_cmp_mgc_mul_pipe_32_1_121_1_129_1_1_0_0_4_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_while_mul_cmp_mgc_mul_pipe_32_1_121_1_129_1_1_0_0_4_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_while_mul_cmp_oswt_unreg, while_while_mul_cmp_iswt3,
      while_while_mul_cmp_iden_1, while_while_mul_cmp_oswt_unreg_1, while_while_mul_cmp_iswt3_1,
      while_while_mul_cmp_iden_3, run_cgwt_5, while_while_mul_cmp_bdwt, while_while_mul_cmp_bdwt_2,
      while_while_mul_cmp_iswt3_1_pff, while_while_mul_cmp_iswt3_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_while_mul_cmp_oswt_unreg;
  input while_while_mul_cmp_iswt3;
  output while_while_mul_cmp_iden_1;
  input while_while_mul_cmp_oswt_unreg_1;
  input while_while_mul_cmp_iswt3_1;
  output while_while_mul_cmp_iden_3;
  output run_cgwt_5;
  output while_while_mul_cmp_bdwt;
  output while_while_mul_cmp_bdwt_2;
  input while_while_mul_cmp_iswt3_1_pff;
  input while_while_mul_cmp_iswt3_pff;


  // Interconnect Declarations
  wire while_while_mul_cmp_ogwt;
  wire while_while_mul_cmp_tiswt3;
  reg while_while_mul_cmp_hile_while_mul_cmp_pdswt2;
  reg while_while_mul_cmp_hile_while_mul_cmp_pdswt1;
  reg while_while_mul_cmp_hile_while_mul_cmp_pdswt0;
  reg [2:0] while_while_mul_cmp_icwt;
  wire [3:0] nl_while_while_mul_cmp_icwt;
  wire while_while_mul_cmp_ogwt_1;
  wire while_while_mul_cmp_tiswt3_1;
  reg while_while_mul_cmp_hile_while_mul_cmp_pdswt2_1;
  reg while_while_mul_cmp_hile_while_mul_cmp_pdswt1_1;
  reg while_while_mul_cmp_hile_while_mul_cmp_pdswt0_1;
  reg [2:0] while_while_mul_cmp_icwt_1;
  wire [3:0] nl_while_while_mul_cmp_icwt_1;

  wire[2:0] while_acc_32_nl;
  wire[3:0] nl_while_acc_32_nl;
  wire[1:0] while_acc_33_nl;
  wire[2:0] nl_while_acc_33_nl;
  wire[2:0] while_acc_35_nl;
  wire[3:0] nl_while_acc_35_nl;
  wire[1:0] while_acc_36_nl;
  wire[2:0] nl_while_acc_36_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_while_mul_cmp_bdwt = while_while_mul_cmp_oswt_unreg & run_wen;
  assign while_while_mul_cmp_tiswt3 = (~ run_wten) & while_while_mul_cmp_iswt3;
  assign while_while_mul_cmp_iden_1 = while_while_mul_cmp_ogwt;
  assign while_while_mul_cmp_ogwt = while_while_mul_cmp_hile_while_mul_cmp_pdswt0
      | (while_while_mul_cmp_icwt!=3'b000);
  assign while_while_mul_cmp_bdwt_2 = while_while_mul_cmp_oswt_unreg_1 & run_wen;
  assign while_while_mul_cmp_tiswt3_1 = (~ run_wten) & while_while_mul_cmp_iswt3_1;
  assign while_while_mul_cmp_iden_3 = while_while_mul_cmp_ogwt_1;
  assign while_while_mul_cmp_ogwt_1 = while_while_mul_cmp_hile_while_mul_cmp_pdswt0_1
      | (while_while_mul_cmp_icwt_1!=3'b000);
  assign run_cgwt_5 = while_while_mul_cmp_ogwt_1 | while_while_mul_cmp_tiswt3_1 |
      while_while_mul_cmp_hile_while_mul_cmp_pdswt2_1 | while_while_mul_cmp_hile_while_mul_cmp_pdswt1_1
      | while_while_mul_cmp_ogwt | while_while_mul_cmp_tiswt3 | while_while_mul_cmp_hile_while_mul_cmp_pdswt2
      | while_while_mul_cmp_hile_while_mul_cmp_pdswt1 | (run_wen & while_while_mul_cmp_iswt3_1_pff)
      | (run_wen & while_while_mul_cmp_iswt3_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_while_mul_cmp_hile_while_mul_cmp_pdswt2 <= 1'b0;
      while_while_mul_cmp_hile_while_mul_cmp_pdswt1 <= 1'b0;
      while_while_mul_cmp_hile_while_mul_cmp_pdswt0 <= 1'b0;
      while_while_mul_cmp_icwt <= 3'b000;
      while_while_mul_cmp_hile_while_mul_cmp_pdswt2_1 <= 1'b0;
      while_while_mul_cmp_hile_while_mul_cmp_pdswt1_1 <= 1'b0;
      while_while_mul_cmp_hile_while_mul_cmp_pdswt0_1 <= 1'b0;
      while_while_mul_cmp_icwt_1 <= 3'b000;
    end
    else begin
      while_while_mul_cmp_hile_while_mul_cmp_pdswt2 <= while_while_mul_cmp_tiswt3;
      while_while_mul_cmp_hile_while_mul_cmp_pdswt1 <= while_while_mul_cmp_hile_while_mul_cmp_pdswt2;
      while_while_mul_cmp_hile_while_mul_cmp_pdswt0 <= while_while_mul_cmp_hile_while_mul_cmp_pdswt1;
      while_while_mul_cmp_icwt <= nl_while_while_mul_cmp_icwt[2:0];
      while_while_mul_cmp_hile_while_mul_cmp_pdswt2_1 <= while_while_mul_cmp_tiswt3_1;
      while_while_mul_cmp_hile_while_mul_cmp_pdswt1_1 <= while_while_mul_cmp_hile_while_mul_cmp_pdswt2_1;
      while_while_mul_cmp_hile_while_mul_cmp_pdswt0_1 <= while_while_mul_cmp_hile_while_mul_cmp_pdswt1_1;
      while_while_mul_cmp_icwt_1 <= nl_while_while_mul_cmp_icwt_1[2:0];
    end
  end
  assign nl_while_acc_32_nl = while_while_mul_cmp_icwt + 3'b111;
  assign while_acc_32_nl = nl_while_acc_32_nl[2:0];
  assign nl_while_acc_33_nl = conv_u2u_1_2(while_while_mul_cmp_hile_while_mul_cmp_pdswt0)
      + conv_u2u_1_2(~ while_while_mul_cmp_ogwt);
  assign while_acc_33_nl = nl_while_acc_33_nl[1:0];
  assign nl_while_while_mul_cmp_icwt  = while_acc_32_nl + conv_u2u_2_3(while_acc_33_nl);
  assign nl_while_acc_35_nl = while_while_mul_cmp_icwt_1 + 3'b111;
  assign while_acc_35_nl = nl_while_acc_35_nl[2:0];
  assign nl_while_acc_36_nl = conv_u2u_1_2(while_while_mul_cmp_hile_while_mul_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_while_mul_cmp_ogwt_1);
  assign while_acc_36_nl = nl_while_acc_36_nl[1:0];
  assign nl_while_while_mul_cmp_icwt_1  = while_acc_35_nl + conv_u2u_2_3(while_acc_36_nl);

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_77_cmp_mgc_mul_pipe_34_1_57_1_91_1_1_0_0_2_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_77_cmp_mgc_mul_pipe_34_1_57_1_91_1_1_0_0_2_1_wait_dp
    (
  clk, rst, while_mul_77_cmp_bawt, while_mul_77_cmp_iden, while_mul_77_cmp_iden_2,
      while_mul_77_cmp_z_mxwt, while_mul_77_cmp_z_mxwt_1, while_mul_77_cmp_biwt,
      while_mul_77_cmp_bdwt, while_mul_77_cmp_biwt_2, while_mul_77_cmp_bdwt_2, while_mul_77_cmp_z
);
  input clk;
  input rst;
  output while_mul_77_cmp_bawt;
  output while_mul_77_cmp_iden;
  output while_mul_77_cmp_iden_2;
  output [82:0] while_mul_77_cmp_z_mxwt;
  output [90:0] while_mul_77_cmp_z_mxwt_1;
  input while_mul_77_cmp_biwt;
  input while_mul_77_cmp_bdwt;
  input while_mul_77_cmp_biwt_2;
  input while_mul_77_cmp_bdwt_2;
  input [90:0] while_mul_77_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_77_cmp_bcwt;
  wire [2:0] nl_while_mul_77_cmp_bcwt;
  reg [1:0] while_mul_77_cmp_bcwt_1;
  wire [2:0] nl_while_mul_77_cmp_bcwt_1;
  reg [90:0] while_mul_77_cmp_z_bfwt_2;
  reg [90:0] while_mul_77_cmp_z_bfwt_3;
  reg [82:0] while_mul_77_cmp_z_bfwt_1_82_0;
  reg [82:0] while_mul_77_cmp_z_bfwt_82_0;

  wire[1:0] while_acc_27_nl;
  wire[2:0] nl_while_acc_27_nl;
  wire[1:0] while_acc_28_nl;
  wire[2:0] nl_while_acc_28_nl;
  wire[1:0] while_acc_30_nl;
  wire[2:0] nl_while_acc_30_nl;
  wire[1:0] while_acc_31_nl;
  wire[2:0] nl_while_acc_31_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_77_cmp_iden = while_mul_77_cmp_biwt | while_mul_77_cmp_bdwt;
  assign while_mul_77_cmp_bawt = while_mul_77_cmp_biwt | (while_mul_77_cmp_bcwt!=2'b00);
  assign while_mul_77_cmp_iden_2 = while_mul_77_cmp_biwt_2 | while_mul_77_cmp_bdwt_2;
  assign while_mul_77_cmp_z_mxwt_1 = MUX_v_91_3_2(while_mul_77_cmp_z, while_mul_77_cmp_z_bfwt_2,
      while_mul_77_cmp_z_bfwt_3, while_mul_77_cmp_bcwt);
  assign while_mul_77_cmp_z_mxwt = MUX_v_83_3_2((while_mul_77_cmp_z[82:0]), while_mul_77_cmp_z_bfwt_82_0,
      while_mul_77_cmp_z_bfwt_1_82_0, while_mul_77_cmp_bcwt_1);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_77_cmp_bcwt <= 2'b00;
      while_mul_77_cmp_bcwt_1 <= 2'b00;
    end
    else begin
      while_mul_77_cmp_bcwt <= nl_while_mul_77_cmp_bcwt[1:0];
      while_mul_77_cmp_bcwt_1 <= nl_while_mul_77_cmp_bcwt_1[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_77_cmp_z_bfwt_82_0 <= 83'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_77_cmp_z_bfwt_1_82_0 <= 83'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_77_cmp_biwt_2 ) begin
      while_mul_77_cmp_z_bfwt_82_0 <= while_mul_77_cmp_z[82:0];
      while_mul_77_cmp_z_bfwt_1_82_0 <= while_mul_77_cmp_z_bfwt_82_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_77_cmp_z_bfwt_2 <= 91'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_77_cmp_z_bfwt_3 <= 91'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_77_cmp_biwt ) begin
      while_mul_77_cmp_z_bfwt_2 <= while_mul_77_cmp_z;
      while_mul_77_cmp_z_bfwt_3 <= while_mul_77_cmp_z_bfwt_2;
    end
  end
  assign nl_while_acc_27_nl = while_mul_77_cmp_bcwt + 2'b11;
  assign while_acc_27_nl = nl_while_acc_27_nl[1:0];
  assign nl_while_acc_28_nl = conv_u2u_1_2(~ while_mul_77_cmp_bdwt) + conv_u2u_1_2(while_mul_77_cmp_biwt);
  assign while_acc_28_nl = nl_while_acc_28_nl[1:0];
  assign nl_while_mul_77_cmp_bcwt  = while_acc_27_nl + while_acc_28_nl;
  assign nl_while_acc_30_nl = while_mul_77_cmp_bcwt_1 + 2'b11;
  assign while_acc_30_nl = nl_while_acc_30_nl[1:0];
  assign nl_while_acc_31_nl = conv_u2u_1_2(~ while_mul_77_cmp_bdwt_2) + conv_u2u_1_2(while_mul_77_cmp_biwt_2);
  assign while_acc_31_nl = nl_while_acc_31_nl[1:0];
  assign nl_while_mul_77_cmp_bcwt_1  = while_acc_30_nl + while_acc_31_nl;

  function automatic [82:0] MUX_v_83_3_2;
    input [82:0] input_0;
    input [82:0] input_1;
    input [82:0] input_2;
    input [1:0] sel;
    reg [82:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      default : begin
        result = input_2;
      end
    endcase
    MUX_v_83_3_2 = result;
  end
  endfunction


  function automatic [90:0] MUX_v_91_3_2;
    input [90:0] input_0;
    input [90:0] input_1;
    input [90:0] input_2;
    input [1:0] sel;
    reg [90:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      default : begin
        result = input_2;
      end
    endcase
    MUX_v_91_3_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_77_cmp_mgc_mul_pipe_34_1_57_1_91_1_1_0_0_2_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_77_cmp_mgc_mul_pipe_34_1_57_1_91_1_1_0_0_2_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_77_cmp_oswt_unreg, while_mul_77_cmp_iswt1,
      while_mul_77_cmp_iden_1, while_mul_77_cmp_oswt_unreg_1, while_mul_77_cmp_iswt1_1,
      while_mul_77_cmp_iden_3, run_cgwt_4, while_mul_77_cmp_bdwt, while_mul_77_cmp_bdwt_2,
      while_mul_77_cmp_iswt1_1_pff, while_mul_77_cmp_iswt1_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_77_cmp_oswt_unreg;
  input while_mul_77_cmp_iswt1;
  output while_mul_77_cmp_iden_1;
  input while_mul_77_cmp_oswt_unreg_1;
  input while_mul_77_cmp_iswt1_1;
  output while_mul_77_cmp_iden_3;
  output run_cgwt_4;
  output while_mul_77_cmp_bdwt;
  output while_mul_77_cmp_bdwt_2;
  input while_mul_77_cmp_iswt1_1_pff;
  input while_mul_77_cmp_iswt1_pff;


  // Interconnect Declarations
  wire while_mul_77_cmp_ogwt;
  wire while_mul_77_cmp_tiswt1;
  reg while_mul_77_cmp_hile_mul_77_cmp_pdswt0;
  reg [1:0] while_mul_77_cmp_icwt;
  wire [2:0] nl_while_mul_77_cmp_icwt;
  wire while_mul_77_cmp_ogwt_1;
  wire while_mul_77_cmp_tiswt1_1;
  reg while_mul_77_cmp_hile_mul_77_cmp_pdswt0_1;
  reg [1:0] while_mul_77_cmp_icwt_1;
  wire [2:0] nl_while_mul_77_cmp_icwt_1;

  wire[1:0] while_acc_28_nl;
  wire[2:0] nl_while_acc_28_nl;
  wire[1:0] while_acc_29_nl;
  wire[2:0] nl_while_acc_29_nl;
  wire[1:0] while_acc_31_nl;
  wire[2:0] nl_while_acc_31_nl;
  wire[1:0] while_acc_32_nl;
  wire[2:0] nl_while_acc_32_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_77_cmp_bdwt = while_mul_77_cmp_oswt_unreg & run_wen;
  assign while_mul_77_cmp_tiswt1 = (~ run_wten) & while_mul_77_cmp_iswt1;
  assign while_mul_77_cmp_iden_1 = while_mul_77_cmp_ogwt;
  assign while_mul_77_cmp_ogwt = while_mul_77_cmp_hile_mul_77_cmp_pdswt0 | (while_mul_77_cmp_icwt!=2'b00);
  assign while_mul_77_cmp_bdwt_2 = while_mul_77_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_77_cmp_tiswt1_1 = (~ run_wten) & while_mul_77_cmp_iswt1_1;
  assign while_mul_77_cmp_iden_3 = while_mul_77_cmp_ogwt_1;
  assign while_mul_77_cmp_ogwt_1 = while_mul_77_cmp_hile_mul_77_cmp_pdswt0_1 | (while_mul_77_cmp_icwt_1!=2'b00);
  assign run_cgwt_4 = while_mul_77_cmp_ogwt_1 | while_mul_77_cmp_tiswt1_1 | while_mul_77_cmp_ogwt
      | while_mul_77_cmp_tiswt1 | (run_wen & while_mul_77_cmp_iswt1_1_pff) | (run_wen
      & while_mul_77_cmp_iswt1_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_77_cmp_hile_mul_77_cmp_pdswt0 <= 1'b0;
      while_mul_77_cmp_icwt <= 2'b00;
      while_mul_77_cmp_hile_mul_77_cmp_pdswt0_1 <= 1'b0;
      while_mul_77_cmp_icwt_1 <= 2'b00;
    end
    else begin
      while_mul_77_cmp_hile_mul_77_cmp_pdswt0 <= while_mul_77_cmp_tiswt1;
      while_mul_77_cmp_icwt <= nl_while_mul_77_cmp_icwt[1:0];
      while_mul_77_cmp_hile_mul_77_cmp_pdswt0_1 <= while_mul_77_cmp_tiswt1_1;
      while_mul_77_cmp_icwt_1 <= nl_while_mul_77_cmp_icwt_1[1:0];
    end
  end
  assign nl_while_acc_28_nl = while_mul_77_cmp_icwt + 2'b11;
  assign while_acc_28_nl = nl_while_acc_28_nl[1:0];
  assign nl_while_acc_29_nl = conv_u2u_1_2(while_mul_77_cmp_hile_mul_77_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_77_cmp_ogwt);
  assign while_acc_29_nl = nl_while_acc_29_nl[1:0];
  assign nl_while_mul_77_cmp_icwt  = while_acc_28_nl + while_acc_29_nl;
  assign nl_while_acc_31_nl = while_mul_77_cmp_icwt_1 + 2'b11;
  assign while_acc_31_nl = nl_while_acc_31_nl[1:0];
  assign nl_while_acc_32_nl = conv_u2u_1_2(while_mul_77_cmp_hile_mul_77_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_77_cmp_ogwt_1);
  assign while_acc_32_nl = nl_while_acc_32_nl[1:0];
  assign nl_while_mul_77_cmp_icwt_1  = while_acc_31_nl + while_acc_32_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_76_cmp_mgc_mul_pipe_32_1_89_1_121_1_1_0_0_3_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_76_cmp_mgc_mul_pipe_32_1_89_1_121_1_1_0_0_3_1_wait_dp
    (
  clk, rst, while_mul_76_cmp_bawt, while_mul_76_cmp_iden, while_mul_76_cmp_iden_2,
      while_mul_76_cmp_iden_4, while_mul_76_cmp_z_mxwt, while_mul_76_cmp_z_mxwt_1,
      while_mul_76_cmp_z_mxwt_2, while_mul_76_cmp_biwt, while_mul_76_cmp_bdwt, while_mul_76_cmp_biwt_2,
      while_mul_76_cmp_bdwt_2, while_mul_76_cmp_biwt_4, while_mul_76_cmp_bdwt_4,
      while_mul_76_cmp_z
);
  input clk;
  input rst;
  output while_mul_76_cmp_bawt;
  output while_mul_76_cmp_iden;
  output while_mul_76_cmp_iden_2;
  output while_mul_76_cmp_iden_4;
  output [120:0] while_mul_76_cmp_z_mxwt;
  output [103:0] while_mul_76_cmp_z_mxwt_1;
  output [120:0] while_mul_76_cmp_z_mxwt_2;
  input while_mul_76_cmp_biwt;
  input while_mul_76_cmp_bdwt;
  input while_mul_76_cmp_biwt_2;
  input while_mul_76_cmp_bdwt_2;
  input while_mul_76_cmp_biwt_4;
  input while_mul_76_cmp_bdwt_4;
  input [120:0] while_mul_76_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_76_cmp_bcwt;
  wire [2:0] nl_while_mul_76_cmp_bcwt;
  reg [1:0] while_mul_76_cmp_bcwt_1;
  wire [2:0] nl_while_mul_76_cmp_bcwt_1;
  reg [1:0] while_mul_76_cmp_bcwt_2;
  wire [2:0] nl_while_mul_76_cmp_bcwt_2;
  reg [120:0] while_mul_76_cmp_z_bfwt;
  reg [120:0] while_mul_76_cmp_z_bfwt_1;
  reg [120:0] while_mul_76_cmp_z_bfwt_2;
  reg [120:0] while_mul_76_cmp_z_bfwt_6;
  reg [120:0] while_mul_76_cmp_z_bfwt_7;
  reg [120:0] while_mul_76_cmp_z_bfwt_8;
  reg [103:0] while_mul_76_cmp_z_bfwt_5_103_0;
  reg [103:0] while_mul_76_cmp_z_bfwt_4_103_0;
  reg [103:0] while_mul_76_cmp_z_bfwt_3_103_0;

  wire[1:0] while_acc_23_nl;
  wire[2:0] nl_while_acc_23_nl;
  wire[1:0] while_acc_24_nl;
  wire[2:0] nl_while_acc_24_nl;
  wire[1:0] while_acc_26_nl;
  wire[2:0] nl_while_acc_26_nl;
  wire[1:0] while_acc_27_nl;
  wire[2:0] nl_while_acc_27_nl;
  wire[1:0] while_acc_29_nl;
  wire[2:0] nl_while_acc_29_nl;
  wire[1:0] while_acc_30_nl;
  wire[2:0] nl_while_acc_30_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_76_cmp_iden = while_mul_76_cmp_biwt | while_mul_76_cmp_bdwt;
  assign while_mul_76_cmp_bawt = while_mul_76_cmp_biwt | (while_mul_76_cmp_bcwt!=2'b00);
  assign while_mul_76_cmp_iden_2 = while_mul_76_cmp_biwt_2 | while_mul_76_cmp_bdwt_2;
  assign while_mul_76_cmp_iden_4 = while_mul_76_cmp_biwt_4 | while_mul_76_cmp_bdwt_4;
  assign while_mul_76_cmp_z_mxwt = MUX_v_121_4_2(while_mul_76_cmp_z, while_mul_76_cmp_z_bfwt,
      while_mul_76_cmp_z_bfwt_1, while_mul_76_cmp_z_bfwt_2, while_mul_76_cmp_bcwt_2);
  assign while_mul_76_cmp_z_mxwt_2 = MUX_v_121_4_2(while_mul_76_cmp_z, while_mul_76_cmp_z_bfwt_6,
      while_mul_76_cmp_z_bfwt_7, while_mul_76_cmp_z_bfwt_8, while_mul_76_cmp_bcwt);
  assign while_mul_76_cmp_z_mxwt_1 = MUX_v_104_4_2((while_mul_76_cmp_z[103:0]), while_mul_76_cmp_z_bfwt_3_103_0,
      while_mul_76_cmp_z_bfwt_4_103_0, while_mul_76_cmp_z_bfwt_5_103_0, while_mul_76_cmp_bcwt_1);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_76_cmp_bcwt <= 2'b00;
      while_mul_76_cmp_bcwt_1 <= 2'b00;
      while_mul_76_cmp_bcwt_2 <= 2'b00;
    end
    else begin
      while_mul_76_cmp_bcwt <= nl_while_mul_76_cmp_bcwt[1:0];
      while_mul_76_cmp_bcwt_1 <= nl_while_mul_76_cmp_bcwt_1[1:0];
      while_mul_76_cmp_bcwt_2 <= nl_while_mul_76_cmp_bcwt_2[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_76_cmp_z_bfwt <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_76_cmp_z_bfwt_1 <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_76_cmp_z_bfwt_2 <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_76_cmp_biwt_4 ) begin
      while_mul_76_cmp_z_bfwt <= while_mul_76_cmp_z;
      while_mul_76_cmp_z_bfwt_1 <= while_mul_76_cmp_z_bfwt;
      while_mul_76_cmp_z_bfwt_2 <= while_mul_76_cmp_z_bfwt_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_76_cmp_z_bfwt_3_103_0 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_76_cmp_z_bfwt_4_103_0 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_76_cmp_z_bfwt_5_103_0 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_76_cmp_biwt_2 ) begin
      while_mul_76_cmp_z_bfwt_3_103_0 <= while_mul_76_cmp_z[103:0];
      while_mul_76_cmp_z_bfwt_4_103_0 <= while_mul_76_cmp_z_bfwt_3_103_0;
      while_mul_76_cmp_z_bfwt_5_103_0 <= while_mul_76_cmp_z_bfwt_4_103_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_76_cmp_z_bfwt_6 <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_76_cmp_z_bfwt_7 <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_76_cmp_z_bfwt_8 <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_76_cmp_biwt ) begin
      while_mul_76_cmp_z_bfwt_6 <= while_mul_76_cmp_z;
      while_mul_76_cmp_z_bfwt_7 <= while_mul_76_cmp_z_bfwt_6;
      while_mul_76_cmp_z_bfwt_8 <= while_mul_76_cmp_z_bfwt_7;
    end
  end
  assign nl_while_acc_23_nl = while_mul_76_cmp_bcwt + 2'b11;
  assign while_acc_23_nl = nl_while_acc_23_nl[1:0];
  assign nl_while_acc_24_nl = conv_u2u_1_2(~ while_mul_76_cmp_bdwt) + conv_u2u_1_2(while_mul_76_cmp_biwt);
  assign while_acc_24_nl = nl_while_acc_24_nl[1:0];
  assign nl_while_mul_76_cmp_bcwt  = while_acc_23_nl + while_acc_24_nl;
  assign nl_while_acc_26_nl = while_mul_76_cmp_bcwt_1 + 2'b11;
  assign while_acc_26_nl = nl_while_acc_26_nl[1:0];
  assign nl_while_acc_27_nl = conv_u2u_1_2(~ while_mul_76_cmp_bdwt_2) + conv_u2u_1_2(while_mul_76_cmp_biwt_2);
  assign while_acc_27_nl = nl_while_acc_27_nl[1:0];
  assign nl_while_mul_76_cmp_bcwt_1  = while_acc_26_nl + while_acc_27_nl;
  assign nl_while_acc_29_nl = while_mul_76_cmp_bcwt_2 + 2'b11;
  assign while_acc_29_nl = nl_while_acc_29_nl[1:0];
  assign nl_while_acc_30_nl = conv_u2u_1_2(~ while_mul_76_cmp_bdwt_4) + conv_u2u_1_2(while_mul_76_cmp_biwt_4);
  assign while_acc_30_nl = nl_while_acc_30_nl[1:0];
  assign nl_while_mul_76_cmp_bcwt_2  = while_acc_29_nl + while_acc_30_nl;

  function automatic [103:0] MUX_v_104_4_2;
    input [103:0] input_0;
    input [103:0] input_1;
    input [103:0] input_2;
    input [103:0] input_3;
    input [1:0] sel;
    reg [103:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_104_4_2 = result;
  end
  endfunction


  function automatic [120:0] MUX_v_121_4_2;
    input [120:0] input_0;
    input [120:0] input_1;
    input [120:0] input_2;
    input [120:0] input_3;
    input [1:0] sel;
    reg [120:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_121_4_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_76_cmp_mgc_mul_pipe_32_1_89_1_121_1_1_0_0_3_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_76_cmp_mgc_mul_pipe_32_1_89_1_121_1_1_0_0_3_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_76_cmp_oswt_unreg, while_mul_76_cmp_iswt2,
      while_mul_76_cmp_iden_1, while_mul_76_cmp_oswt_unreg_1, while_mul_76_cmp_iswt2_1,
      while_mul_76_cmp_iden_3, while_mul_76_cmp_oswt_unreg_2, while_mul_76_cmp_iswt2_2,
      while_mul_76_cmp_iden_5, run_cgwt_3, while_mul_76_cmp_bdwt, while_mul_76_cmp_bdwt_2,
      while_mul_76_cmp_bdwt_4, while_mul_76_cmp_iswt2_2_pff, while_mul_76_cmp_iswt2_1_pff,
      while_mul_76_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_76_cmp_oswt_unreg;
  input while_mul_76_cmp_iswt2;
  output while_mul_76_cmp_iden_1;
  input while_mul_76_cmp_oswt_unreg_1;
  input while_mul_76_cmp_iswt2_1;
  output while_mul_76_cmp_iden_3;
  input while_mul_76_cmp_oswt_unreg_2;
  input while_mul_76_cmp_iswt2_2;
  output while_mul_76_cmp_iden_5;
  output run_cgwt_3;
  output while_mul_76_cmp_bdwt;
  output while_mul_76_cmp_bdwt_2;
  output while_mul_76_cmp_bdwt_4;
  input while_mul_76_cmp_iswt2_2_pff;
  input while_mul_76_cmp_iswt2_1_pff;
  input while_mul_76_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_76_cmp_ogwt;
  wire while_mul_76_cmp_tiswt2;
  reg while_mul_76_cmp_hile_mul_76_cmp_pdswt1;
  reg while_mul_76_cmp_hile_mul_76_cmp_pdswt0;
  reg [1:0] while_mul_76_cmp_icwt;
  wire [2:0] nl_while_mul_76_cmp_icwt;
  wire while_mul_76_cmp_ogwt_1;
  wire while_mul_76_cmp_tiswt2_1;
  reg while_mul_76_cmp_hile_mul_76_cmp_pdswt1_1;
  reg while_mul_76_cmp_hile_mul_76_cmp_pdswt0_1;
  reg [1:0] while_mul_76_cmp_icwt_1;
  wire [2:0] nl_while_mul_76_cmp_icwt_1;
  wire while_mul_76_cmp_ogwt_2;
  wire while_mul_76_cmp_tiswt2_2;
  reg while_mul_76_cmp_hile_mul_76_cmp_pdswt1_2;
  reg while_mul_76_cmp_hile_mul_76_cmp_pdswt0_2;
  reg [1:0] while_mul_76_cmp_icwt_2;
  wire [2:0] nl_while_mul_76_cmp_icwt_2;

  wire[1:0] while_acc_24_nl;
  wire[2:0] nl_while_acc_24_nl;
  wire[1:0] while_acc_25_nl;
  wire[2:0] nl_while_acc_25_nl;
  wire[1:0] while_acc_27_nl;
  wire[2:0] nl_while_acc_27_nl;
  wire[1:0] while_acc_28_nl;
  wire[2:0] nl_while_acc_28_nl;
  wire[1:0] while_acc_30_nl;
  wire[2:0] nl_while_acc_30_nl;
  wire[1:0] while_acc_31_nl;
  wire[2:0] nl_while_acc_31_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_76_cmp_bdwt = while_mul_76_cmp_oswt_unreg & run_wen;
  assign while_mul_76_cmp_tiswt2 = (~ run_wten) & while_mul_76_cmp_iswt2;
  assign while_mul_76_cmp_iden_1 = while_mul_76_cmp_ogwt;
  assign while_mul_76_cmp_ogwt = while_mul_76_cmp_hile_mul_76_cmp_pdswt0 | (while_mul_76_cmp_icwt!=2'b00);
  assign while_mul_76_cmp_bdwt_2 = while_mul_76_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_76_cmp_tiswt2_1 = (~ run_wten) & while_mul_76_cmp_iswt2_1;
  assign while_mul_76_cmp_iden_3 = while_mul_76_cmp_ogwt_1;
  assign while_mul_76_cmp_ogwt_1 = while_mul_76_cmp_hile_mul_76_cmp_pdswt0_1 | (while_mul_76_cmp_icwt_1!=2'b00);
  assign while_mul_76_cmp_bdwt_4 = while_mul_76_cmp_oswt_unreg_2 & run_wen;
  assign while_mul_76_cmp_tiswt2_2 = (~ run_wten) & while_mul_76_cmp_iswt2_2;
  assign while_mul_76_cmp_iden_5 = while_mul_76_cmp_ogwt_2;
  assign while_mul_76_cmp_ogwt_2 = while_mul_76_cmp_hile_mul_76_cmp_pdswt0_2 | (while_mul_76_cmp_icwt_2!=2'b00);
  assign run_cgwt_3 = while_mul_76_cmp_ogwt_2 | while_mul_76_cmp_tiswt2_2 | while_mul_76_cmp_hile_mul_76_cmp_pdswt1_2
      | while_mul_76_cmp_ogwt_1 | while_mul_76_cmp_tiswt2_1 | while_mul_76_cmp_hile_mul_76_cmp_pdswt1_1
      | while_mul_76_cmp_ogwt | while_mul_76_cmp_tiswt2 | while_mul_76_cmp_hile_mul_76_cmp_pdswt1
      | (run_wen & while_mul_76_cmp_iswt2_2_pff) | (run_wen & while_mul_76_cmp_iswt2_1_pff)
      | (run_wen & while_mul_76_cmp_iswt2_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_76_cmp_hile_mul_76_cmp_pdswt1 <= 1'b0;
      while_mul_76_cmp_hile_mul_76_cmp_pdswt0 <= 1'b0;
      while_mul_76_cmp_icwt <= 2'b00;
      while_mul_76_cmp_hile_mul_76_cmp_pdswt1_1 <= 1'b0;
      while_mul_76_cmp_hile_mul_76_cmp_pdswt0_1 <= 1'b0;
      while_mul_76_cmp_icwt_1 <= 2'b00;
      while_mul_76_cmp_hile_mul_76_cmp_pdswt1_2 <= 1'b0;
      while_mul_76_cmp_hile_mul_76_cmp_pdswt0_2 <= 1'b0;
      while_mul_76_cmp_icwt_2 <= 2'b00;
    end
    else begin
      while_mul_76_cmp_hile_mul_76_cmp_pdswt1 <= while_mul_76_cmp_tiswt2;
      while_mul_76_cmp_hile_mul_76_cmp_pdswt0 <= while_mul_76_cmp_hile_mul_76_cmp_pdswt1;
      while_mul_76_cmp_icwt <= nl_while_mul_76_cmp_icwt[1:0];
      while_mul_76_cmp_hile_mul_76_cmp_pdswt1_1 <= while_mul_76_cmp_tiswt2_1;
      while_mul_76_cmp_hile_mul_76_cmp_pdswt0_1 <= while_mul_76_cmp_hile_mul_76_cmp_pdswt1_1;
      while_mul_76_cmp_icwt_1 <= nl_while_mul_76_cmp_icwt_1[1:0];
      while_mul_76_cmp_hile_mul_76_cmp_pdswt1_2 <= while_mul_76_cmp_tiswt2_2;
      while_mul_76_cmp_hile_mul_76_cmp_pdswt0_2 <= while_mul_76_cmp_hile_mul_76_cmp_pdswt1_2;
      while_mul_76_cmp_icwt_2 <= nl_while_mul_76_cmp_icwt_2[1:0];
    end
  end
  assign nl_while_acc_24_nl = while_mul_76_cmp_icwt + 2'b11;
  assign while_acc_24_nl = nl_while_acc_24_nl[1:0];
  assign nl_while_acc_25_nl = conv_u2u_1_2(while_mul_76_cmp_hile_mul_76_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_76_cmp_ogwt);
  assign while_acc_25_nl = nl_while_acc_25_nl[1:0];
  assign nl_while_mul_76_cmp_icwt  = while_acc_24_nl + while_acc_25_nl;
  assign nl_while_acc_27_nl = while_mul_76_cmp_icwt_1 + 2'b11;
  assign while_acc_27_nl = nl_while_acc_27_nl[1:0];
  assign nl_while_acc_28_nl = conv_u2u_1_2(while_mul_76_cmp_hile_mul_76_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_76_cmp_ogwt_1);
  assign while_acc_28_nl = nl_while_acc_28_nl[1:0];
  assign nl_while_mul_76_cmp_icwt_1  = while_acc_27_nl + while_acc_28_nl;
  assign nl_while_acc_30_nl = while_mul_76_cmp_icwt_2 + 2'b11;
  assign while_acc_30_nl = nl_while_acc_30_nl[1:0];
  assign nl_while_acc_31_nl = conv_u2u_1_2(while_mul_76_cmp_hile_mul_76_cmp_pdswt0_2)
      + conv_u2u_1_2(~ while_mul_76_cmp_ogwt_2);
  assign while_acc_31_nl = nl_while_acc_31_nl[1:0];
  assign nl_while_mul_76_cmp_icwt_2  = while_acc_30_nl + while_acc_31_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_79_cmp_mgc_mul_pipe_32_1_84_1_99_1_1_0_0_3_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_79_cmp_mgc_mul_pipe_32_1_84_1_99_1_1_0_0_3_1_wait_dp
    (
  clk, rst, while_mul_79_cmp_bawt, while_mul_79_cmp_iden, while_mul_79_cmp_iden_2,
      while_mul_79_cmp_iden_4, while_mul_79_cmp_z_mxwt, while_mul_79_cmp_z_mxwt_1,
      while_mul_79_cmp_z_mxwt_2, while_mul_79_cmp_biwt, while_mul_79_cmp_bdwt, while_mul_79_cmp_biwt_2,
      while_mul_79_cmp_bdwt_2, while_mul_79_cmp_biwt_4, while_mul_79_cmp_bdwt_4,
      while_mul_79_cmp_z
);
  input clk;
  input rst;
  output while_mul_79_cmp_bawt;
  output while_mul_79_cmp_iden;
  output while_mul_79_cmp_iden_2;
  output while_mul_79_cmp_iden_4;
  output [98:0] while_mul_79_cmp_z_mxwt;
  output [89:0] while_mul_79_cmp_z_mxwt_1;
  output [89:0] while_mul_79_cmp_z_mxwt_2;
  input while_mul_79_cmp_biwt;
  input while_mul_79_cmp_bdwt;
  input while_mul_79_cmp_biwt_2;
  input while_mul_79_cmp_bdwt_2;
  input while_mul_79_cmp_biwt_4;
  input while_mul_79_cmp_bdwt_4;
  input [98:0] while_mul_79_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_79_cmp_bcwt;
  wire [2:0] nl_while_mul_79_cmp_bcwt;
  reg [1:0] while_mul_79_cmp_bcwt_1;
  wire [2:0] nl_while_mul_79_cmp_bcwt_1;
  reg [1:0] while_mul_79_cmp_bcwt_2;
  wire [2:0] nl_while_mul_79_cmp_bcwt_2;
  reg [98:0] while_mul_79_cmp_z_bfwt;
  reg [98:0] while_mul_79_cmp_z_bfwt_1;
  reg [98:0] while_mul_79_cmp_z_bfwt_2;
  reg [89:0] while_mul_79_cmp_z_bfwt_5_89_0;
  reg [89:0] while_mul_79_cmp_z_bfwt_8_89_0;
  reg [89:0] while_mul_79_cmp_z_bfwt_4_89_0;
  reg [89:0] while_mul_79_cmp_z_bfwt_7_89_0;
  reg [89:0] while_mul_79_cmp_z_bfwt_3_89_0;
  reg [89:0] while_mul_79_cmp_z_bfwt_6_89_0;

  wire[1:0] while_acc_17_nl;
  wire[2:0] nl_while_acc_17_nl;
  wire[1:0] while_acc_18_nl;
  wire[2:0] nl_while_acc_18_nl;
  wire[1:0] while_acc_20_nl;
  wire[2:0] nl_while_acc_20_nl;
  wire[1:0] while_acc_21_nl;
  wire[2:0] nl_while_acc_21_nl;
  wire[1:0] while_acc_23_nl;
  wire[2:0] nl_while_acc_23_nl;
  wire[1:0] while_acc_24_nl;
  wire[2:0] nl_while_acc_24_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_79_cmp_iden = while_mul_79_cmp_biwt | while_mul_79_cmp_bdwt;
  assign while_mul_79_cmp_bawt = while_mul_79_cmp_biwt | (while_mul_79_cmp_bcwt!=2'b00);
  assign while_mul_79_cmp_iden_2 = while_mul_79_cmp_biwt_2 | while_mul_79_cmp_bdwt_2;
  assign while_mul_79_cmp_iden_4 = while_mul_79_cmp_biwt_4 | while_mul_79_cmp_bdwt_4;
  assign while_mul_79_cmp_z_mxwt = MUX_v_99_4_2(while_mul_79_cmp_z, while_mul_79_cmp_z_bfwt,
      while_mul_79_cmp_z_bfwt_1, while_mul_79_cmp_z_bfwt_2, while_mul_79_cmp_bcwt_2);
  assign while_mul_79_cmp_z_mxwt_1 = MUX_v_90_4_2((while_mul_79_cmp_z[89:0]), while_mul_79_cmp_z_bfwt_3_89_0,
      while_mul_79_cmp_z_bfwt_4_89_0, while_mul_79_cmp_z_bfwt_5_89_0, while_mul_79_cmp_bcwt_1);
  assign while_mul_79_cmp_z_mxwt_2 = MUX_v_90_4_2((while_mul_79_cmp_z[89:0]), while_mul_79_cmp_z_bfwt_6_89_0,
      while_mul_79_cmp_z_bfwt_7_89_0, while_mul_79_cmp_z_bfwt_8_89_0, while_mul_79_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_79_cmp_bcwt <= 2'b00;
      while_mul_79_cmp_bcwt_1 <= 2'b00;
      while_mul_79_cmp_bcwt_2 <= 2'b00;
    end
    else begin
      while_mul_79_cmp_bcwt <= nl_while_mul_79_cmp_bcwt[1:0];
      while_mul_79_cmp_bcwt_1 <= nl_while_mul_79_cmp_bcwt_1[1:0];
      while_mul_79_cmp_bcwt_2 <= nl_while_mul_79_cmp_bcwt_2[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_79_cmp_z_bfwt <= 99'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_79_cmp_z_bfwt_1 <= 99'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_79_cmp_z_bfwt_2 <= 99'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_79_cmp_biwt_4 ) begin
      while_mul_79_cmp_z_bfwt <= while_mul_79_cmp_z;
      while_mul_79_cmp_z_bfwt_1 <= while_mul_79_cmp_z_bfwt;
      while_mul_79_cmp_z_bfwt_2 <= while_mul_79_cmp_z_bfwt_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_79_cmp_z_bfwt_3_89_0 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_79_cmp_z_bfwt_4_89_0 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_79_cmp_z_bfwt_5_89_0 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_79_cmp_biwt_2 ) begin
      while_mul_79_cmp_z_bfwt_3_89_0 <= while_mul_79_cmp_z[89:0];
      while_mul_79_cmp_z_bfwt_4_89_0 <= while_mul_79_cmp_z_bfwt_3_89_0;
      while_mul_79_cmp_z_bfwt_5_89_0 <= while_mul_79_cmp_z_bfwt_4_89_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_79_cmp_z_bfwt_6_89_0 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_79_cmp_z_bfwt_7_89_0 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_79_cmp_z_bfwt_8_89_0 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_79_cmp_biwt ) begin
      while_mul_79_cmp_z_bfwt_6_89_0 <= while_mul_79_cmp_z[89:0];
      while_mul_79_cmp_z_bfwt_7_89_0 <= while_mul_79_cmp_z_bfwt_6_89_0;
      while_mul_79_cmp_z_bfwt_8_89_0 <= while_mul_79_cmp_z_bfwt_7_89_0;
    end
  end
  assign nl_while_acc_17_nl = while_mul_79_cmp_bcwt + 2'b11;
  assign while_acc_17_nl = nl_while_acc_17_nl[1:0];
  assign nl_while_acc_18_nl = conv_u2u_1_2(~ while_mul_79_cmp_bdwt) + conv_u2u_1_2(while_mul_79_cmp_biwt);
  assign while_acc_18_nl = nl_while_acc_18_nl[1:0];
  assign nl_while_mul_79_cmp_bcwt  = while_acc_17_nl + while_acc_18_nl;
  assign nl_while_acc_20_nl = while_mul_79_cmp_bcwt_1 + 2'b11;
  assign while_acc_20_nl = nl_while_acc_20_nl[1:0];
  assign nl_while_acc_21_nl = conv_u2u_1_2(~ while_mul_79_cmp_bdwt_2) + conv_u2u_1_2(while_mul_79_cmp_biwt_2);
  assign while_acc_21_nl = nl_while_acc_21_nl[1:0];
  assign nl_while_mul_79_cmp_bcwt_1  = while_acc_20_nl + while_acc_21_nl;
  assign nl_while_acc_23_nl = while_mul_79_cmp_bcwt_2 + 2'b11;
  assign while_acc_23_nl = nl_while_acc_23_nl[1:0];
  assign nl_while_acc_24_nl = conv_u2u_1_2(~ while_mul_79_cmp_bdwt_4) + conv_u2u_1_2(while_mul_79_cmp_biwt_4);
  assign while_acc_24_nl = nl_while_acc_24_nl[1:0];
  assign nl_while_mul_79_cmp_bcwt_2  = while_acc_23_nl + while_acc_24_nl;

  function automatic [89:0] MUX_v_90_4_2;
    input [89:0] input_0;
    input [89:0] input_1;
    input [89:0] input_2;
    input [89:0] input_3;
    input [1:0] sel;
    reg [89:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_90_4_2 = result;
  end
  endfunction


  function automatic [98:0] MUX_v_99_4_2;
    input [98:0] input_0;
    input [98:0] input_1;
    input [98:0] input_2;
    input [98:0] input_3;
    input [1:0] sel;
    reg [98:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_99_4_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_79_cmp_mgc_mul_pipe_32_1_84_1_99_1_1_0_0_3_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_79_cmp_mgc_mul_pipe_32_1_84_1_99_1_1_0_0_3_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_79_cmp_oswt_unreg, while_mul_79_cmp_iswt2,
      while_mul_79_cmp_iden_1, while_mul_79_cmp_oswt_unreg_1, while_mul_79_cmp_iswt2_1,
      while_mul_79_cmp_iden_3, while_mul_79_cmp_oswt_unreg_2, while_mul_79_cmp_iswt2_2,
      while_mul_79_cmp_iden_5, run_cgwt_2, while_mul_79_cmp_bdwt, while_mul_79_cmp_bdwt_2,
      while_mul_79_cmp_bdwt_4, while_mul_79_cmp_iswt2_2_pff, while_mul_79_cmp_iswt2_1_pff,
      while_mul_79_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_79_cmp_oswt_unreg;
  input while_mul_79_cmp_iswt2;
  output while_mul_79_cmp_iden_1;
  input while_mul_79_cmp_oswt_unreg_1;
  input while_mul_79_cmp_iswt2_1;
  output while_mul_79_cmp_iden_3;
  input while_mul_79_cmp_oswt_unreg_2;
  input while_mul_79_cmp_iswt2_2;
  output while_mul_79_cmp_iden_5;
  output run_cgwt_2;
  output while_mul_79_cmp_bdwt;
  output while_mul_79_cmp_bdwt_2;
  output while_mul_79_cmp_bdwt_4;
  input while_mul_79_cmp_iswt2_2_pff;
  input while_mul_79_cmp_iswt2_1_pff;
  input while_mul_79_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_79_cmp_ogwt;
  wire while_mul_79_cmp_tiswt2;
  reg while_mul_79_cmp_hile_mul_79_cmp_pdswt1;
  reg while_mul_79_cmp_hile_mul_79_cmp_pdswt0;
  reg [1:0] while_mul_79_cmp_icwt;
  wire [2:0] nl_while_mul_79_cmp_icwt;
  wire while_mul_79_cmp_ogwt_1;
  wire while_mul_79_cmp_tiswt2_1;
  reg while_mul_79_cmp_hile_mul_79_cmp_pdswt1_1;
  reg while_mul_79_cmp_hile_mul_79_cmp_pdswt0_1;
  reg [1:0] while_mul_79_cmp_icwt_1;
  wire [2:0] nl_while_mul_79_cmp_icwt_1;
  wire while_mul_79_cmp_ogwt_2;
  wire while_mul_79_cmp_tiswt2_2;
  reg while_mul_79_cmp_hile_mul_79_cmp_pdswt1_2;
  reg while_mul_79_cmp_hile_mul_79_cmp_pdswt0_2;
  reg [1:0] while_mul_79_cmp_icwt_2;
  wire [2:0] nl_while_mul_79_cmp_icwt_2;

  wire[1:0] while_acc_18_nl;
  wire[2:0] nl_while_acc_18_nl;
  wire[1:0] while_acc_19_nl;
  wire[2:0] nl_while_acc_19_nl;
  wire[1:0] while_acc_21_nl;
  wire[2:0] nl_while_acc_21_nl;
  wire[1:0] while_acc_22_nl;
  wire[2:0] nl_while_acc_22_nl;
  wire[1:0] while_acc_24_nl;
  wire[2:0] nl_while_acc_24_nl;
  wire[1:0] while_acc_25_nl;
  wire[2:0] nl_while_acc_25_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_79_cmp_bdwt = while_mul_79_cmp_oswt_unreg & run_wen;
  assign while_mul_79_cmp_tiswt2 = (~ run_wten) & while_mul_79_cmp_iswt2;
  assign while_mul_79_cmp_iden_1 = while_mul_79_cmp_ogwt;
  assign while_mul_79_cmp_ogwt = while_mul_79_cmp_hile_mul_79_cmp_pdswt0 | (while_mul_79_cmp_icwt!=2'b00);
  assign while_mul_79_cmp_bdwt_2 = while_mul_79_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_79_cmp_tiswt2_1 = (~ run_wten) & while_mul_79_cmp_iswt2_1;
  assign while_mul_79_cmp_iden_3 = while_mul_79_cmp_ogwt_1;
  assign while_mul_79_cmp_ogwt_1 = while_mul_79_cmp_hile_mul_79_cmp_pdswt0_1 | (while_mul_79_cmp_icwt_1!=2'b00);
  assign while_mul_79_cmp_bdwt_4 = while_mul_79_cmp_oswt_unreg_2 & run_wen;
  assign while_mul_79_cmp_tiswt2_2 = (~ run_wten) & while_mul_79_cmp_iswt2_2;
  assign while_mul_79_cmp_iden_5 = while_mul_79_cmp_ogwt_2;
  assign while_mul_79_cmp_ogwt_2 = while_mul_79_cmp_hile_mul_79_cmp_pdswt0_2 | (while_mul_79_cmp_icwt_2!=2'b00);
  assign run_cgwt_2 = while_mul_79_cmp_ogwt_2 | while_mul_79_cmp_tiswt2_2 | while_mul_79_cmp_hile_mul_79_cmp_pdswt1_2
      | while_mul_79_cmp_ogwt_1 | while_mul_79_cmp_tiswt2_1 | while_mul_79_cmp_hile_mul_79_cmp_pdswt1_1
      | while_mul_79_cmp_ogwt | while_mul_79_cmp_tiswt2 | while_mul_79_cmp_hile_mul_79_cmp_pdswt1
      | (run_wen & while_mul_79_cmp_iswt2_2_pff) | (run_wen & while_mul_79_cmp_iswt2_1_pff)
      | (run_wen & while_mul_79_cmp_iswt2_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_79_cmp_hile_mul_79_cmp_pdswt1 <= 1'b0;
      while_mul_79_cmp_hile_mul_79_cmp_pdswt0 <= 1'b0;
      while_mul_79_cmp_icwt <= 2'b00;
      while_mul_79_cmp_hile_mul_79_cmp_pdswt1_1 <= 1'b0;
      while_mul_79_cmp_hile_mul_79_cmp_pdswt0_1 <= 1'b0;
      while_mul_79_cmp_icwt_1 <= 2'b00;
      while_mul_79_cmp_hile_mul_79_cmp_pdswt1_2 <= 1'b0;
      while_mul_79_cmp_hile_mul_79_cmp_pdswt0_2 <= 1'b0;
      while_mul_79_cmp_icwt_2 <= 2'b00;
    end
    else begin
      while_mul_79_cmp_hile_mul_79_cmp_pdswt1 <= while_mul_79_cmp_tiswt2;
      while_mul_79_cmp_hile_mul_79_cmp_pdswt0 <= while_mul_79_cmp_hile_mul_79_cmp_pdswt1;
      while_mul_79_cmp_icwt <= nl_while_mul_79_cmp_icwt[1:0];
      while_mul_79_cmp_hile_mul_79_cmp_pdswt1_1 <= while_mul_79_cmp_tiswt2_1;
      while_mul_79_cmp_hile_mul_79_cmp_pdswt0_1 <= while_mul_79_cmp_hile_mul_79_cmp_pdswt1_1;
      while_mul_79_cmp_icwt_1 <= nl_while_mul_79_cmp_icwt_1[1:0];
      while_mul_79_cmp_hile_mul_79_cmp_pdswt1_2 <= while_mul_79_cmp_tiswt2_2;
      while_mul_79_cmp_hile_mul_79_cmp_pdswt0_2 <= while_mul_79_cmp_hile_mul_79_cmp_pdswt1_2;
      while_mul_79_cmp_icwt_2 <= nl_while_mul_79_cmp_icwt_2[1:0];
    end
  end
  assign nl_while_acc_18_nl = while_mul_79_cmp_icwt + 2'b11;
  assign while_acc_18_nl = nl_while_acc_18_nl[1:0];
  assign nl_while_acc_19_nl = conv_u2u_1_2(while_mul_79_cmp_hile_mul_79_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_79_cmp_ogwt);
  assign while_acc_19_nl = nl_while_acc_19_nl[1:0];
  assign nl_while_mul_79_cmp_icwt  = while_acc_18_nl + while_acc_19_nl;
  assign nl_while_acc_21_nl = while_mul_79_cmp_icwt_1 + 2'b11;
  assign while_acc_21_nl = nl_while_acc_21_nl[1:0];
  assign nl_while_acc_22_nl = conv_u2u_1_2(while_mul_79_cmp_hile_mul_79_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_79_cmp_ogwt_1);
  assign while_acc_22_nl = nl_while_acc_22_nl[1:0];
  assign nl_while_mul_79_cmp_icwt_1  = while_acc_21_nl + while_acc_22_nl;
  assign nl_while_acc_24_nl = while_mul_79_cmp_icwt_2 + 2'b11;
  assign while_acc_24_nl = nl_while_acc_24_nl[1:0];
  assign nl_while_acc_25_nl = conv_u2u_1_2(while_mul_79_cmp_hile_mul_79_cmp_pdswt0_2)
      + conv_u2u_1_2(~ while_mul_79_cmp_ogwt_2);
  assign while_acc_25_nl = nl_while_acc_25_nl[1:0];
  assign nl_while_mul_79_cmp_icwt_2  = while_acc_24_nl + while_acc_25_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_111_cmp_mgc_mul_pipe_32_1_90_1_122_1_1_0_0_3_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_111_cmp_mgc_mul_pipe_32_1_90_1_122_1_1_0_0_3_1_wait_dp
    (
  clk, rst, while_mul_111_cmp_bawt, while_mul_111_cmp_iden, while_mul_111_cmp_iden_2,
      while_mul_111_cmp_iden_4, while_mul_111_cmp_z_mxwt, while_mul_111_cmp_z_mxwt_1,
      while_mul_111_cmp_z_mxwt_2, while_mul_111_cmp_biwt, while_mul_111_cmp_bdwt,
      while_mul_111_cmp_biwt_2, while_mul_111_cmp_bdwt_2, while_mul_111_cmp_biwt_4,
      while_mul_111_cmp_bdwt_4, while_mul_111_cmp_z
);
  input clk;
  input rst;
  output while_mul_111_cmp_bawt;
  output while_mul_111_cmp_iden;
  output while_mul_111_cmp_iden_2;
  output while_mul_111_cmp_iden_4;
  output [121:0] while_mul_111_cmp_z_mxwt;
  output [121:0] while_mul_111_cmp_z_mxwt_1;
  output [121:0] while_mul_111_cmp_z_mxwt_2;
  input while_mul_111_cmp_biwt;
  input while_mul_111_cmp_bdwt;
  input while_mul_111_cmp_biwt_2;
  input while_mul_111_cmp_bdwt_2;
  input while_mul_111_cmp_biwt_4;
  input while_mul_111_cmp_bdwt_4;
  input [121:0] while_mul_111_cmp_z;


  // Interconnect Declarations
  reg [1:0] while_mul_111_cmp_bcwt;
  wire [2:0] nl_while_mul_111_cmp_bcwt;
  reg [1:0] while_mul_111_cmp_bcwt_1;
  wire [2:0] nl_while_mul_111_cmp_bcwt_1;
  reg [1:0] while_mul_111_cmp_bcwt_2;
  wire [2:0] nl_while_mul_111_cmp_bcwt_2;
  reg [121:0] while_mul_111_cmp_z_bfwt;
  reg [121:0] while_mul_111_cmp_z_bfwt_1;
  reg [121:0] while_mul_111_cmp_z_bfwt_2;
  reg [121:0] while_mul_111_cmp_z_bfwt_3;
  reg [121:0] while_mul_111_cmp_z_bfwt_4;
  reg [121:0] while_mul_111_cmp_z_bfwt_5;
  reg [121:0] while_mul_111_cmp_z_bfwt_6;
  reg [121:0] while_mul_111_cmp_z_bfwt_7;
  reg [121:0] while_mul_111_cmp_z_bfwt_8;

  wire[1:0] while_acc_11_nl;
  wire[2:0] nl_while_acc_11_nl;
  wire[1:0] while_acc_12_nl;
  wire[2:0] nl_while_acc_12_nl;
  wire[1:0] while_acc_14_nl;
  wire[2:0] nl_while_acc_14_nl;
  wire[1:0] while_acc_15_nl;
  wire[2:0] nl_while_acc_15_nl;
  wire[1:0] while_acc_17_nl;
  wire[2:0] nl_while_acc_17_nl;
  wire[1:0] while_acc_18_nl;
  wire[2:0] nl_while_acc_18_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_111_cmp_iden = while_mul_111_cmp_biwt | while_mul_111_cmp_bdwt;
  assign while_mul_111_cmp_bawt = while_mul_111_cmp_biwt | (while_mul_111_cmp_bcwt!=2'b00);
  assign while_mul_111_cmp_iden_2 = while_mul_111_cmp_biwt_2 | while_mul_111_cmp_bdwt_2;
  assign while_mul_111_cmp_iden_4 = while_mul_111_cmp_biwt_4 | while_mul_111_cmp_bdwt_4;
  assign while_mul_111_cmp_z_mxwt = MUX_v_122_4_2(while_mul_111_cmp_z, while_mul_111_cmp_z_bfwt,
      while_mul_111_cmp_z_bfwt_1, while_mul_111_cmp_z_bfwt_2, while_mul_111_cmp_bcwt_2);
  assign while_mul_111_cmp_z_mxwt_1 = MUX_v_122_4_2(while_mul_111_cmp_z, while_mul_111_cmp_z_bfwt_3,
      while_mul_111_cmp_z_bfwt_4, while_mul_111_cmp_z_bfwt_5, while_mul_111_cmp_bcwt_1);
  assign while_mul_111_cmp_z_mxwt_2 = MUX_v_122_4_2(while_mul_111_cmp_z, while_mul_111_cmp_z_bfwt_6,
      while_mul_111_cmp_z_bfwt_7, while_mul_111_cmp_z_bfwt_8, while_mul_111_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_111_cmp_bcwt <= 2'b00;
      while_mul_111_cmp_bcwt_1 <= 2'b00;
      while_mul_111_cmp_bcwt_2 <= 2'b00;
    end
    else begin
      while_mul_111_cmp_bcwt <= nl_while_mul_111_cmp_bcwt[1:0];
      while_mul_111_cmp_bcwt_1 <= nl_while_mul_111_cmp_bcwt_1[1:0];
      while_mul_111_cmp_bcwt_2 <= nl_while_mul_111_cmp_bcwt_2[1:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_111_cmp_z_bfwt <= 122'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_111_cmp_z_bfwt_1 <= 122'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_111_cmp_z_bfwt_2 <= 122'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_111_cmp_biwt_4 ) begin
      while_mul_111_cmp_z_bfwt <= while_mul_111_cmp_z;
      while_mul_111_cmp_z_bfwt_1 <= while_mul_111_cmp_z_bfwt;
      while_mul_111_cmp_z_bfwt_2 <= while_mul_111_cmp_z_bfwt_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_111_cmp_z_bfwt_3 <= 122'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_111_cmp_z_bfwt_4 <= 122'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_111_cmp_z_bfwt_5 <= 122'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_111_cmp_biwt_2 ) begin
      while_mul_111_cmp_z_bfwt_3 <= while_mul_111_cmp_z;
      while_mul_111_cmp_z_bfwt_4 <= while_mul_111_cmp_z_bfwt_3;
      while_mul_111_cmp_z_bfwt_5 <= while_mul_111_cmp_z_bfwt_4;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_111_cmp_z_bfwt_6 <= 122'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_111_cmp_z_bfwt_7 <= 122'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_111_cmp_z_bfwt_8 <= 122'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_111_cmp_biwt ) begin
      while_mul_111_cmp_z_bfwt_6 <= while_mul_111_cmp_z;
      while_mul_111_cmp_z_bfwt_7 <= while_mul_111_cmp_z_bfwt_6;
      while_mul_111_cmp_z_bfwt_8 <= while_mul_111_cmp_z_bfwt_7;
    end
  end
  assign nl_while_acc_11_nl = while_mul_111_cmp_bcwt + 2'b11;
  assign while_acc_11_nl = nl_while_acc_11_nl[1:0];
  assign nl_while_acc_12_nl = conv_u2u_1_2(~ while_mul_111_cmp_bdwt) + conv_u2u_1_2(while_mul_111_cmp_biwt);
  assign while_acc_12_nl = nl_while_acc_12_nl[1:0];
  assign nl_while_mul_111_cmp_bcwt  = while_acc_11_nl + while_acc_12_nl;
  assign nl_while_acc_14_nl = while_mul_111_cmp_bcwt_1 + 2'b11;
  assign while_acc_14_nl = nl_while_acc_14_nl[1:0];
  assign nl_while_acc_15_nl = conv_u2u_1_2(~ while_mul_111_cmp_bdwt_2) + conv_u2u_1_2(while_mul_111_cmp_biwt_2);
  assign while_acc_15_nl = nl_while_acc_15_nl[1:0];
  assign nl_while_mul_111_cmp_bcwt_1  = while_acc_14_nl + while_acc_15_nl;
  assign nl_while_acc_17_nl = while_mul_111_cmp_bcwt_2 + 2'b11;
  assign while_acc_17_nl = nl_while_acc_17_nl[1:0];
  assign nl_while_acc_18_nl = conv_u2u_1_2(~ while_mul_111_cmp_bdwt_4) + conv_u2u_1_2(while_mul_111_cmp_biwt_4);
  assign while_acc_18_nl = nl_while_acc_18_nl[1:0];
  assign nl_while_mul_111_cmp_bcwt_2  = while_acc_17_nl + while_acc_18_nl;

  function automatic [121:0] MUX_v_122_4_2;
    input [121:0] input_0;
    input [121:0] input_1;
    input [121:0] input_2;
    input [121:0] input_3;
    input [1:0] sel;
    reg [121:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_122_4_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_111_cmp_mgc_mul_pipe_32_1_90_1_122_1_1_0_0_3_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_111_cmp_mgc_mul_pipe_32_1_90_1_122_1_1_0_0_3_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_111_cmp_oswt_unreg, while_mul_111_cmp_iswt2,
      while_mul_111_cmp_iden_1, while_mul_111_cmp_oswt_unreg_1, while_mul_111_cmp_iswt2_1,
      while_mul_111_cmp_iden_3, while_mul_111_cmp_oswt_unreg_2, while_mul_111_cmp_iswt2_2,
      while_mul_111_cmp_iden_5, run_cgwt_1, while_mul_111_cmp_bdwt, while_mul_111_cmp_bdwt_2,
      while_mul_111_cmp_bdwt_4, while_mul_111_cmp_iswt2_2_pff, while_mul_111_cmp_iswt2_1_pff,
      while_mul_111_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_111_cmp_oswt_unreg;
  input while_mul_111_cmp_iswt2;
  output while_mul_111_cmp_iden_1;
  input while_mul_111_cmp_oswt_unreg_1;
  input while_mul_111_cmp_iswt2_1;
  output while_mul_111_cmp_iden_3;
  input while_mul_111_cmp_oswt_unreg_2;
  input while_mul_111_cmp_iswt2_2;
  output while_mul_111_cmp_iden_5;
  output run_cgwt_1;
  output while_mul_111_cmp_bdwt;
  output while_mul_111_cmp_bdwt_2;
  output while_mul_111_cmp_bdwt_4;
  input while_mul_111_cmp_iswt2_2_pff;
  input while_mul_111_cmp_iswt2_1_pff;
  input while_mul_111_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_111_cmp_ogwt;
  wire while_mul_111_cmp_tiswt2;
  reg while_mul_111_cmp_hile_mul_111_cmp_pdswt1;
  reg while_mul_111_cmp_hile_mul_111_cmp_pdswt0;
  reg [1:0] while_mul_111_cmp_icwt;
  wire [2:0] nl_while_mul_111_cmp_icwt;
  wire while_mul_111_cmp_ogwt_1;
  wire while_mul_111_cmp_tiswt2_1;
  reg while_mul_111_cmp_hile_mul_111_cmp_pdswt1_1;
  reg while_mul_111_cmp_hile_mul_111_cmp_pdswt0_1;
  reg [1:0] while_mul_111_cmp_icwt_1;
  wire [2:0] nl_while_mul_111_cmp_icwt_1;
  wire while_mul_111_cmp_ogwt_2;
  wire while_mul_111_cmp_tiswt2_2;
  reg while_mul_111_cmp_hile_mul_111_cmp_pdswt1_2;
  reg while_mul_111_cmp_hile_mul_111_cmp_pdswt0_2;
  reg [1:0] while_mul_111_cmp_icwt_2;
  wire [2:0] nl_while_mul_111_cmp_icwt_2;

  wire[1:0] while_acc_12_nl;
  wire[2:0] nl_while_acc_12_nl;
  wire[1:0] while_acc_13_nl;
  wire[2:0] nl_while_acc_13_nl;
  wire[1:0] while_acc_15_nl;
  wire[2:0] nl_while_acc_15_nl;
  wire[1:0] while_acc_16_nl;
  wire[2:0] nl_while_acc_16_nl;
  wire[1:0] while_acc_18_nl;
  wire[2:0] nl_while_acc_18_nl;
  wire[1:0] while_acc_19_nl;
  wire[2:0] nl_while_acc_19_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_111_cmp_bdwt = while_mul_111_cmp_oswt_unreg & run_wen;
  assign while_mul_111_cmp_tiswt2 = (~ run_wten) & while_mul_111_cmp_iswt2;
  assign while_mul_111_cmp_iden_1 = while_mul_111_cmp_ogwt;
  assign while_mul_111_cmp_ogwt = while_mul_111_cmp_hile_mul_111_cmp_pdswt0 | (while_mul_111_cmp_icwt!=2'b00);
  assign while_mul_111_cmp_bdwt_2 = while_mul_111_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_111_cmp_tiswt2_1 = (~ run_wten) & while_mul_111_cmp_iswt2_1;
  assign while_mul_111_cmp_iden_3 = while_mul_111_cmp_ogwt_1;
  assign while_mul_111_cmp_ogwt_1 = while_mul_111_cmp_hile_mul_111_cmp_pdswt0_1 |
      (while_mul_111_cmp_icwt_1!=2'b00);
  assign while_mul_111_cmp_bdwt_4 = while_mul_111_cmp_oswt_unreg_2 & run_wen;
  assign while_mul_111_cmp_tiswt2_2 = (~ run_wten) & while_mul_111_cmp_iswt2_2;
  assign while_mul_111_cmp_iden_5 = while_mul_111_cmp_ogwt_2;
  assign while_mul_111_cmp_ogwt_2 = while_mul_111_cmp_hile_mul_111_cmp_pdswt0_2 |
      (while_mul_111_cmp_icwt_2!=2'b00);
  assign run_cgwt_1 = while_mul_111_cmp_ogwt_2 | while_mul_111_cmp_tiswt2_2 | while_mul_111_cmp_hile_mul_111_cmp_pdswt1_2
      | while_mul_111_cmp_ogwt_1 | while_mul_111_cmp_tiswt2_1 | while_mul_111_cmp_hile_mul_111_cmp_pdswt1_1
      | while_mul_111_cmp_ogwt | while_mul_111_cmp_tiswt2 | while_mul_111_cmp_hile_mul_111_cmp_pdswt1
      | (run_wen & while_mul_111_cmp_iswt2_2_pff) | (run_wen & while_mul_111_cmp_iswt2_1_pff)
      | (run_wen & while_mul_111_cmp_iswt2_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_111_cmp_hile_mul_111_cmp_pdswt1 <= 1'b0;
      while_mul_111_cmp_hile_mul_111_cmp_pdswt0 <= 1'b0;
      while_mul_111_cmp_icwt <= 2'b00;
      while_mul_111_cmp_hile_mul_111_cmp_pdswt1_1 <= 1'b0;
      while_mul_111_cmp_hile_mul_111_cmp_pdswt0_1 <= 1'b0;
      while_mul_111_cmp_icwt_1 <= 2'b00;
      while_mul_111_cmp_hile_mul_111_cmp_pdswt1_2 <= 1'b0;
      while_mul_111_cmp_hile_mul_111_cmp_pdswt0_2 <= 1'b0;
      while_mul_111_cmp_icwt_2 <= 2'b00;
    end
    else begin
      while_mul_111_cmp_hile_mul_111_cmp_pdswt1 <= while_mul_111_cmp_tiswt2;
      while_mul_111_cmp_hile_mul_111_cmp_pdswt0 <= while_mul_111_cmp_hile_mul_111_cmp_pdswt1;
      while_mul_111_cmp_icwt <= nl_while_mul_111_cmp_icwt[1:0];
      while_mul_111_cmp_hile_mul_111_cmp_pdswt1_1 <= while_mul_111_cmp_tiswt2_1;
      while_mul_111_cmp_hile_mul_111_cmp_pdswt0_1 <= while_mul_111_cmp_hile_mul_111_cmp_pdswt1_1;
      while_mul_111_cmp_icwt_1 <= nl_while_mul_111_cmp_icwt_1[1:0];
      while_mul_111_cmp_hile_mul_111_cmp_pdswt1_2 <= while_mul_111_cmp_tiswt2_2;
      while_mul_111_cmp_hile_mul_111_cmp_pdswt0_2 <= while_mul_111_cmp_hile_mul_111_cmp_pdswt1_2;
      while_mul_111_cmp_icwt_2 <= nl_while_mul_111_cmp_icwt_2[1:0];
    end
  end
  assign nl_while_acc_12_nl = while_mul_111_cmp_icwt + 2'b11;
  assign while_acc_12_nl = nl_while_acc_12_nl[1:0];
  assign nl_while_acc_13_nl = conv_u2u_1_2(while_mul_111_cmp_hile_mul_111_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_111_cmp_ogwt);
  assign while_acc_13_nl = nl_while_acc_13_nl[1:0];
  assign nl_while_mul_111_cmp_icwt  = while_acc_12_nl + while_acc_13_nl;
  assign nl_while_acc_15_nl = while_mul_111_cmp_icwt_1 + 2'b11;
  assign while_acc_15_nl = nl_while_acc_15_nl[1:0];
  assign nl_while_acc_16_nl = conv_u2u_1_2(while_mul_111_cmp_hile_mul_111_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_111_cmp_ogwt_1);
  assign while_acc_16_nl = nl_while_acc_16_nl[1:0];
  assign nl_while_mul_111_cmp_icwt_1  = while_acc_15_nl + while_acc_16_nl;
  assign nl_while_acc_18_nl = while_mul_111_cmp_icwt_2 + 2'b11;
  assign while_acc_18_nl = nl_while_acc_18_nl[1:0];
  assign nl_while_acc_19_nl = conv_u2u_1_2(while_mul_111_cmp_hile_mul_111_cmp_pdswt0_2)
      + conv_u2u_1_2(~ while_mul_111_cmp_ogwt_2);
  assign while_acc_19_nl = nl_while_acc_19_nl[1:0];
  assign nl_while_mul_111_cmp_icwt_2  = while_acc_18_nl + while_acc_19_nl;

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_110_cmp_mgc_mul_pipe_32_1_122_1_130_1_1_0_0_4_1_wait_dp
// ------------------------------------------------------------------


module Rotate_run_while_mul_110_cmp_mgc_mul_pipe_32_1_122_1_130_1_1_0_0_4_1_wait_dp
    (
  clk, rst, while_mul_110_cmp_bawt, while_mul_110_cmp_iden, while_mul_110_cmp_iden_2,
      while_mul_110_cmp_iden_4, while_mul_110_cmp_z_mxwt, while_mul_110_cmp_z_mxwt_1,
      while_mul_110_cmp_z_mxwt_2, while_mul_110_cmp_biwt, while_mul_110_cmp_bdwt,
      while_mul_110_cmp_biwt_2, while_mul_110_cmp_bdwt_2, while_mul_110_cmp_biwt_4,
      while_mul_110_cmp_bdwt_4, while_mul_110_cmp_z
);
  input clk;
  input rst;
  output while_mul_110_cmp_bawt;
  output while_mul_110_cmp_iden;
  output while_mul_110_cmp_iden_2;
  output while_mul_110_cmp_iden_4;
  output [129:0] while_mul_110_cmp_z_mxwt;
  output [105:0] while_mul_110_cmp_z_mxwt_1;
  output [100:0] while_mul_110_cmp_z_mxwt_2;
  input while_mul_110_cmp_biwt;
  input while_mul_110_cmp_bdwt;
  input while_mul_110_cmp_biwt_2;
  input while_mul_110_cmp_bdwt_2;
  input while_mul_110_cmp_biwt_4;
  input while_mul_110_cmp_bdwt_4;
  input [129:0] while_mul_110_cmp_z;


  // Interconnect Declarations
  reg [2:0] while_mul_110_cmp_bcwt;
  wire [3:0] nl_while_mul_110_cmp_bcwt;
  reg [2:0] while_mul_110_cmp_bcwt_1;
  wire [3:0] nl_while_mul_110_cmp_bcwt_1;
  reg [2:0] while_mul_110_cmp_bcwt_2;
  wire [3:0] nl_while_mul_110_cmp_bcwt_2;
  reg [129:0] while_mul_110_cmp_z_bfwt;
  reg [129:0] while_mul_110_cmp_z_bfwt_1;
  reg [129:0] while_mul_110_cmp_z_bfwt_2;
  reg [129:0] while_mul_110_cmp_z_bfwt_3;
  reg [105:0] while_mul_110_cmp_z_bfwt_7_129_24;
  reg [100:0] while_mul_110_cmp_z_bfwt_11_128_28;
  reg [105:0] while_mul_110_cmp_z_bfwt_6_129_24;
  reg [100:0] while_mul_110_cmp_z_bfwt_10_128_28;
  reg [105:0] while_mul_110_cmp_z_bfwt_5_129_24;
  reg [100:0] while_mul_110_cmp_z_bfwt_9_128_28;
  reg [105:0] while_mul_110_cmp_z_bfwt_4_129_24;
  reg [100:0] while_mul_110_cmp_z_bfwt_8_128_28;

  wire[2:0] while_acc_5_nl;
  wire[3:0] nl_while_acc_5_nl;
  wire[1:0] while_acc_6_nl;
  wire[2:0] nl_while_acc_6_nl;
  wire[2:0] while_acc_8_nl;
  wire[3:0] nl_while_acc_8_nl;
  wire[1:0] while_acc_9_nl;
  wire[2:0] nl_while_acc_9_nl;
  wire[2:0] while_acc_11_nl;
  wire[3:0] nl_while_acc_11_nl;
  wire[1:0] while_acc_12_nl;
  wire[2:0] nl_while_acc_12_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_110_cmp_iden = while_mul_110_cmp_biwt | while_mul_110_cmp_bdwt;
  assign while_mul_110_cmp_bawt = while_mul_110_cmp_biwt | (while_mul_110_cmp_bcwt!=3'b000);
  assign while_mul_110_cmp_iden_2 = while_mul_110_cmp_biwt_2 | while_mul_110_cmp_bdwt_2;
  assign while_mul_110_cmp_iden_4 = while_mul_110_cmp_biwt_4 | while_mul_110_cmp_bdwt_4;
  assign while_mul_110_cmp_z_mxwt = MUX_v_130_5_2(while_mul_110_cmp_z, while_mul_110_cmp_z_bfwt,
      while_mul_110_cmp_z_bfwt_1, while_mul_110_cmp_z_bfwt_2, while_mul_110_cmp_z_bfwt_3,
      while_mul_110_cmp_bcwt_2);
  assign while_mul_110_cmp_z_mxwt_1 = MUX_v_106_5_2((while_mul_110_cmp_z[129:24]),
      while_mul_110_cmp_z_bfwt_4_129_24, while_mul_110_cmp_z_bfwt_5_129_24, while_mul_110_cmp_z_bfwt_6_129_24,
      while_mul_110_cmp_z_bfwt_7_129_24, while_mul_110_cmp_bcwt_1);
  assign while_mul_110_cmp_z_mxwt_2 = MUX_v_101_5_2((while_mul_110_cmp_z[128:28]),
      while_mul_110_cmp_z_bfwt_8_128_28, while_mul_110_cmp_z_bfwt_9_128_28, while_mul_110_cmp_z_bfwt_10_128_28,
      while_mul_110_cmp_z_bfwt_11_128_28, while_mul_110_cmp_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_110_cmp_bcwt <= 3'b000;
      while_mul_110_cmp_bcwt_1 <= 3'b000;
      while_mul_110_cmp_bcwt_2 <= 3'b000;
    end
    else begin
      while_mul_110_cmp_bcwt <= nl_while_mul_110_cmp_bcwt[2:0];
      while_mul_110_cmp_bcwt_1 <= nl_while_mul_110_cmp_bcwt_1[2:0];
      while_mul_110_cmp_bcwt_2 <= nl_while_mul_110_cmp_bcwt_2[2:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_110_cmp_z_bfwt <= 130'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_110_cmp_z_bfwt_1 <= 130'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_110_cmp_z_bfwt_2 <= 130'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_110_cmp_z_bfwt_3 <= 130'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_110_cmp_biwt_4 ) begin
      while_mul_110_cmp_z_bfwt <= while_mul_110_cmp_z;
      while_mul_110_cmp_z_bfwt_1 <= while_mul_110_cmp_z_bfwt;
      while_mul_110_cmp_z_bfwt_2 <= while_mul_110_cmp_z_bfwt_1;
      while_mul_110_cmp_z_bfwt_3 <= while_mul_110_cmp_z_bfwt_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_110_cmp_z_bfwt_4_129_24 <= 106'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_110_cmp_z_bfwt_5_129_24 <= 106'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_110_cmp_z_bfwt_6_129_24 <= 106'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_110_cmp_z_bfwt_7_129_24 <= 106'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_110_cmp_biwt_2 ) begin
      while_mul_110_cmp_z_bfwt_4_129_24 <= while_mul_110_cmp_z[129:24];
      while_mul_110_cmp_z_bfwt_5_129_24 <= while_mul_110_cmp_z_bfwt_4_129_24;
      while_mul_110_cmp_z_bfwt_6_129_24 <= while_mul_110_cmp_z_bfwt_5_129_24;
      while_mul_110_cmp_z_bfwt_7_129_24 <= while_mul_110_cmp_z_bfwt_6_129_24;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_110_cmp_z_bfwt_8_128_28 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_110_cmp_z_bfwt_9_128_28 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_110_cmp_z_bfwt_10_128_28 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_110_cmp_z_bfwt_11_128_28 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_mul_110_cmp_biwt ) begin
      while_mul_110_cmp_z_bfwt_8_128_28 <= while_mul_110_cmp_z[128:28];
      while_mul_110_cmp_z_bfwt_9_128_28 <= while_mul_110_cmp_z_bfwt_8_128_28;
      while_mul_110_cmp_z_bfwt_10_128_28 <= while_mul_110_cmp_z_bfwt_9_128_28;
      while_mul_110_cmp_z_bfwt_11_128_28 <= while_mul_110_cmp_z_bfwt_10_128_28;
    end
  end
  assign nl_while_acc_5_nl = while_mul_110_cmp_bcwt + 3'b111;
  assign while_acc_5_nl = nl_while_acc_5_nl[2:0];
  assign nl_while_acc_6_nl = conv_u2u_1_2(~ while_mul_110_cmp_bdwt) + conv_u2u_1_2(while_mul_110_cmp_biwt);
  assign while_acc_6_nl = nl_while_acc_6_nl[1:0];
  assign nl_while_mul_110_cmp_bcwt  = while_acc_5_nl + conv_u2u_2_3(while_acc_6_nl);
  assign nl_while_acc_8_nl = while_mul_110_cmp_bcwt_1 + 3'b111;
  assign while_acc_8_nl = nl_while_acc_8_nl[2:0];
  assign nl_while_acc_9_nl = conv_u2u_1_2(~ while_mul_110_cmp_bdwt_2) + conv_u2u_1_2(while_mul_110_cmp_biwt_2);
  assign while_acc_9_nl = nl_while_acc_9_nl[1:0];
  assign nl_while_mul_110_cmp_bcwt_1  = while_acc_8_nl + conv_u2u_2_3(while_acc_9_nl);
  assign nl_while_acc_11_nl = while_mul_110_cmp_bcwt_2 + 3'b111;
  assign while_acc_11_nl = nl_while_acc_11_nl[2:0];
  assign nl_while_acc_12_nl = conv_u2u_1_2(~ while_mul_110_cmp_bdwt_4) + conv_u2u_1_2(while_mul_110_cmp_biwt_4);
  assign while_acc_12_nl = nl_while_acc_12_nl[1:0];
  assign nl_while_mul_110_cmp_bcwt_2  = while_acc_11_nl + conv_u2u_2_3(while_acc_12_nl);

  function automatic [100:0] MUX_v_101_5_2;
    input [100:0] input_0;
    input [100:0] input_1;
    input [100:0] input_2;
    input [100:0] input_3;
    input [100:0] input_4;
    input [2:0] sel;
    reg [100:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      default : begin
        result = input_4;
      end
    endcase
    MUX_v_101_5_2 = result;
  end
  endfunction


  function automatic [105:0] MUX_v_106_5_2;
    input [105:0] input_0;
    input [105:0] input_1;
    input [105:0] input_2;
    input [105:0] input_3;
    input [105:0] input_4;
    input [2:0] sel;
    reg [105:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      default : begin
        result = input_4;
      end
    endcase
    MUX_v_106_5_2 = result;
  end
  endfunction


  function automatic [129:0] MUX_v_130_5_2;
    input [129:0] input_0;
    input [129:0] input_1;
    input [129:0] input_2;
    input [129:0] input_3;
    input [129:0] input_4;
    input [2:0] sel;
    reg [129:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      default : begin
        result = input_4;
      end
    endcase
    MUX_v_130_5_2 = result;
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_110_cmp_mgc_mul_pipe_32_1_122_1_130_1_1_0_0_4_1_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_while_mul_110_cmp_mgc_mul_pipe_32_1_122_1_130_1_1_0_0_4_1_wait_ctrl
    (
  clk, rst, run_wen, run_wten, while_mul_110_cmp_oswt_unreg, while_mul_110_cmp_iswt3,
      while_mul_110_cmp_iden_1, while_mul_110_cmp_oswt_unreg_1, while_mul_110_cmp_iswt3_1,
      while_mul_110_cmp_iden_3, while_mul_110_cmp_oswt_unreg_2, while_mul_110_cmp_iswt3_2,
      while_mul_110_cmp_iden_5, run_cgwt, while_mul_110_cmp_bdwt, while_mul_110_cmp_bdwt_2,
      while_mul_110_cmp_bdwt_4, while_mul_110_cmp_iswt3_2_pff, while_mul_110_cmp_iswt3_1_pff,
      while_mul_110_cmp_iswt3_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_110_cmp_oswt_unreg;
  input while_mul_110_cmp_iswt3;
  output while_mul_110_cmp_iden_1;
  input while_mul_110_cmp_oswt_unreg_1;
  input while_mul_110_cmp_iswt3_1;
  output while_mul_110_cmp_iden_3;
  input while_mul_110_cmp_oswt_unreg_2;
  input while_mul_110_cmp_iswt3_2;
  output while_mul_110_cmp_iden_5;
  output run_cgwt;
  output while_mul_110_cmp_bdwt;
  output while_mul_110_cmp_bdwt_2;
  output while_mul_110_cmp_bdwt_4;
  input while_mul_110_cmp_iswt3_2_pff;
  input while_mul_110_cmp_iswt3_1_pff;
  input while_mul_110_cmp_iswt3_pff;


  // Interconnect Declarations
  wire while_mul_110_cmp_ogwt;
  wire while_mul_110_cmp_tiswt3;
  reg while_mul_110_cmp_hile_mul_110_cmp_pdswt2;
  reg while_mul_110_cmp_hile_mul_110_cmp_pdswt1;
  reg while_mul_110_cmp_hile_mul_110_cmp_pdswt0;
  reg [2:0] while_mul_110_cmp_icwt;
  wire [3:0] nl_while_mul_110_cmp_icwt;
  wire while_mul_110_cmp_ogwt_1;
  wire while_mul_110_cmp_tiswt3_1;
  reg while_mul_110_cmp_hile_mul_110_cmp_pdswt2_1;
  reg while_mul_110_cmp_hile_mul_110_cmp_pdswt1_1;
  reg while_mul_110_cmp_hile_mul_110_cmp_pdswt0_1;
  reg [2:0] while_mul_110_cmp_icwt_1;
  wire [3:0] nl_while_mul_110_cmp_icwt_1;
  wire while_mul_110_cmp_ogwt_2;
  wire while_mul_110_cmp_tiswt3_2;
  reg while_mul_110_cmp_hile_mul_110_cmp_pdswt2_2;
  reg while_mul_110_cmp_hile_mul_110_cmp_pdswt1_2;
  reg while_mul_110_cmp_hile_mul_110_cmp_pdswt0_2;
  reg [2:0] while_mul_110_cmp_icwt_2;
  wire [3:0] nl_while_mul_110_cmp_icwt_2;

  wire[2:0] while_acc_6_nl;
  wire[3:0] nl_while_acc_6_nl;
  wire[1:0] while_acc_7_nl;
  wire[2:0] nl_while_acc_7_nl;
  wire[2:0] while_acc_9_nl;
  wire[3:0] nl_while_acc_9_nl;
  wire[1:0] while_acc_10_nl;
  wire[2:0] nl_while_acc_10_nl;
  wire[2:0] while_acc_12_nl;
  wire[3:0] nl_while_acc_12_nl;
  wire[1:0] while_acc_13_nl;
  wire[2:0] nl_while_acc_13_nl;

  // Interconnect Declarations for Component Instantiations 
  assign while_mul_110_cmp_bdwt = while_mul_110_cmp_oswt_unreg & run_wen;
  assign while_mul_110_cmp_tiswt3 = (~ run_wten) & while_mul_110_cmp_iswt3;
  assign while_mul_110_cmp_iden_1 = while_mul_110_cmp_ogwt;
  assign while_mul_110_cmp_ogwt = while_mul_110_cmp_hile_mul_110_cmp_pdswt0 | (while_mul_110_cmp_icwt!=3'b000);
  assign while_mul_110_cmp_bdwt_2 = while_mul_110_cmp_oswt_unreg_1 & run_wen;
  assign while_mul_110_cmp_tiswt3_1 = (~ run_wten) & while_mul_110_cmp_iswt3_1;
  assign while_mul_110_cmp_iden_3 = while_mul_110_cmp_ogwt_1;
  assign while_mul_110_cmp_ogwt_1 = while_mul_110_cmp_hile_mul_110_cmp_pdswt0_1 |
      (while_mul_110_cmp_icwt_1!=3'b000);
  assign while_mul_110_cmp_bdwt_4 = while_mul_110_cmp_oswt_unreg_2 & run_wen;
  assign while_mul_110_cmp_tiswt3_2 = (~ run_wten) & while_mul_110_cmp_iswt3_2;
  assign while_mul_110_cmp_iden_5 = while_mul_110_cmp_ogwt_2;
  assign while_mul_110_cmp_ogwt_2 = while_mul_110_cmp_hile_mul_110_cmp_pdswt0_2 |
      (while_mul_110_cmp_icwt_2!=3'b000);
  assign run_cgwt = while_mul_110_cmp_ogwt_2 | while_mul_110_cmp_tiswt3_2 | while_mul_110_cmp_hile_mul_110_cmp_pdswt2_2
      | while_mul_110_cmp_hile_mul_110_cmp_pdswt1_2 | while_mul_110_cmp_ogwt_1 |
      while_mul_110_cmp_tiswt3_1 | while_mul_110_cmp_hile_mul_110_cmp_pdswt2_1 |
      while_mul_110_cmp_hile_mul_110_cmp_pdswt1_1 | while_mul_110_cmp_ogwt | while_mul_110_cmp_tiswt3
      | while_mul_110_cmp_hile_mul_110_cmp_pdswt2 | while_mul_110_cmp_hile_mul_110_cmp_pdswt1
      | (run_wen & while_mul_110_cmp_iswt3_2_pff) | (run_wen & while_mul_110_cmp_iswt3_1_pff)
      | (run_wen & while_mul_110_cmp_iswt3_pff);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_110_cmp_hile_mul_110_cmp_pdswt2 <= 1'b0;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt1 <= 1'b0;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt0 <= 1'b0;
      while_mul_110_cmp_icwt <= 3'b000;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt2_1 <= 1'b0;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt1_1 <= 1'b0;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt0_1 <= 1'b0;
      while_mul_110_cmp_icwt_1 <= 3'b000;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt2_2 <= 1'b0;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt1_2 <= 1'b0;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt0_2 <= 1'b0;
      while_mul_110_cmp_icwt_2 <= 3'b000;
    end
    else begin
      while_mul_110_cmp_hile_mul_110_cmp_pdswt2 <= while_mul_110_cmp_tiswt3;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt1 <= while_mul_110_cmp_hile_mul_110_cmp_pdswt2;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt0 <= while_mul_110_cmp_hile_mul_110_cmp_pdswt1;
      while_mul_110_cmp_icwt <= nl_while_mul_110_cmp_icwt[2:0];
      while_mul_110_cmp_hile_mul_110_cmp_pdswt2_1 <= while_mul_110_cmp_tiswt3_1;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt1_1 <= while_mul_110_cmp_hile_mul_110_cmp_pdswt2_1;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt0_1 <= while_mul_110_cmp_hile_mul_110_cmp_pdswt1_1;
      while_mul_110_cmp_icwt_1 <= nl_while_mul_110_cmp_icwt_1[2:0];
      while_mul_110_cmp_hile_mul_110_cmp_pdswt2_2 <= while_mul_110_cmp_tiswt3_2;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt1_2 <= while_mul_110_cmp_hile_mul_110_cmp_pdswt2_2;
      while_mul_110_cmp_hile_mul_110_cmp_pdswt0_2 <= while_mul_110_cmp_hile_mul_110_cmp_pdswt1_2;
      while_mul_110_cmp_icwt_2 <= nl_while_mul_110_cmp_icwt_2[2:0];
    end
  end
  assign nl_while_acc_6_nl = while_mul_110_cmp_icwt + 3'b111;
  assign while_acc_6_nl = nl_while_acc_6_nl[2:0];
  assign nl_while_acc_7_nl = conv_u2u_1_2(while_mul_110_cmp_hile_mul_110_cmp_pdswt0)
      + conv_u2u_1_2(~ while_mul_110_cmp_ogwt);
  assign while_acc_7_nl = nl_while_acc_7_nl[1:0];
  assign nl_while_mul_110_cmp_icwt  = while_acc_6_nl + conv_u2u_2_3(while_acc_7_nl);
  assign nl_while_acc_9_nl = while_mul_110_cmp_icwt_1 + 3'b111;
  assign while_acc_9_nl = nl_while_acc_9_nl[2:0];
  assign nl_while_acc_10_nl = conv_u2u_1_2(while_mul_110_cmp_hile_mul_110_cmp_pdswt0_1)
      + conv_u2u_1_2(~ while_mul_110_cmp_ogwt_1);
  assign while_acc_10_nl = nl_while_acc_10_nl[1:0];
  assign nl_while_mul_110_cmp_icwt_1  = while_acc_9_nl + conv_u2u_2_3(while_acc_10_nl);
  assign nl_while_acc_12_nl = while_mul_110_cmp_icwt_2 + 3'b111;
  assign while_acc_12_nl = nl_while_acc_12_nl[2:0];
  assign nl_while_acc_13_nl = conv_u2u_1_2(while_mul_110_cmp_hile_mul_110_cmp_pdswt0_2)
      + conv_u2u_1_2(~ while_mul_110_cmp_ogwt_2);
  assign while_acc_13_nl = nl_while_acc_13_nl[1:0];
  assign nl_while_mul_110_cmp_icwt_2  = while_acc_12_nl + conv_u2u_2_3(while_acc_13_nl);

  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_dp
// ------------------------------------------------------------------


module Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_dp (
  clk, rst, rotate_out_Push_mioi_oswt_unreg, rotate_out_Push_mioi_bawt, rotate_out_Push_mioi_iden,
      rotate_out_Push_mioi_wen_comp, rotate_out_Push_mioi_biwt, rotate_out_Push_mioi_bdwt,
      rotate_out_Push_mioi_bcwt
);
  input clk;
  input rst;
  input rotate_out_Push_mioi_oswt_unreg;
  output rotate_out_Push_mioi_bawt;
  output rotate_out_Push_mioi_iden;
  output rotate_out_Push_mioi_wen_comp;
  input rotate_out_Push_mioi_biwt;
  input rotate_out_Push_mioi_bdwt;
  output rotate_out_Push_mioi_bcwt;
  reg rotate_out_Push_mioi_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign rotate_out_Push_mioi_iden = rotate_out_Push_mioi_biwt | rotate_out_Push_mioi_bdwt;
  assign rotate_out_Push_mioi_bawt = rotate_out_Push_mioi_biwt | rotate_out_Push_mioi_bcwt;
  assign rotate_out_Push_mioi_wen_comp = (~ rotate_out_Push_mioi_oswt_unreg) | rotate_out_Push_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_out_Push_mioi_bcwt <= 1'b0;
    end
    else begin
      rotate_out_Push_mioi_bcwt <= ~((~(rotate_out_Push_mioi_bcwt | rotate_out_Push_mioi_biwt))
          | rotate_out_Push_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_ctrl (
  run_wen, rotate_out_Push_mioi_oswt_unreg, rotate_out_Push_mioi_iswt0, rotate_out_Push_mioi_irdy_oreg,
      rotate_out_Push_mioi_biwt, rotate_out_Push_mioi_bdwt, rotate_out_Push_mioi_bcwt,
      rotate_out_Push_mioi_ivld_run_sct
);
  input run_wen;
  input rotate_out_Push_mioi_oswt_unreg;
  input rotate_out_Push_mioi_iswt0;
  input rotate_out_Push_mioi_irdy_oreg;
  output rotate_out_Push_mioi_biwt;
  output rotate_out_Push_mioi_bdwt;
  input rotate_out_Push_mioi_bcwt;
  output rotate_out_Push_mioi_ivld_run_sct;


  // Interconnect Declarations
  wire rotate_out_Push_mioi_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_out_Push_mioi_bdwt = rotate_out_Push_mioi_oswt_unreg & run_wen;
  assign rotate_out_Push_mioi_biwt = rotate_out_Push_mioi_ogwt & rotate_out_Push_mioi_irdy_oreg;
  assign rotate_out_Push_mioi_ogwt = rotate_out_Push_mioi_iswt0 & (~ rotate_out_Push_mioi_bcwt);
  assign rotate_out_Push_mioi_ivld_run_sct = rotate_out_Push_mioi_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_wait_dp
// ------------------------------------------------------------------


module Rotate_run_wait_dp (
  clk, rst, rotate_in_Pop_mioi_ivld, rotate_in_Pop_mioi_ivld_oreg, rotate_out_Push_mioi_irdy,
      rotate_out_Push_mioi_irdy_oreg
);
  input clk;
  input rst;
  input rotate_in_Pop_mioi_ivld;
  output rotate_in_Pop_mioi_ivld_oreg;
  input rotate_out_Push_mioi_irdy;
  output rotate_out_Push_mioi_irdy_oreg;


  // Interconnect Declarations
  reg rotate_in_Pop_mioi_ivld_oreg_rneg;
  reg rotate_out_Push_mioi_irdy_oreg_rneg;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_in_Pop_mioi_ivld_oreg = ~ rotate_in_Pop_mioi_ivld_oreg_rneg;
  assign rotate_out_Push_mioi_irdy_oreg = ~ rotate_out_Push_mioi_irdy_oreg_rneg;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Pop_mioi_ivld_oreg_rneg <= 1'b0;
      rotate_out_Push_mioi_irdy_oreg_rneg <= 1'b0;
    end
    else begin
      rotate_in_Pop_mioi_ivld_oreg_rneg <= ~ rotate_in_Pop_mioi_ivld;
      rotate_out_Push_mioi_irdy_oreg_rneg <= ~ rotate_out_Push_mioi_irdy;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_dp
// ------------------------------------------------------------------


module Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_dp (
  clk, rst, rotate_in_Pop_mioi_oswt_unreg, rotate_in_Pop_mioi_bawt, rotate_in_Pop_mioi_iden,
      rotate_in_Pop_mioi_wen_comp, rotate_in_Pop_mioi_idat_mxwt, rotate_in_Pop_mioi_biwt,
      rotate_in_Pop_mioi_bdwt, rotate_in_Pop_mioi_idat
);
  input clk;
  input rst;
  input rotate_in_Pop_mioi_oswt_unreg;
  output rotate_in_Pop_mioi_bawt;
  output rotate_in_Pop_mioi_iden;
  output rotate_in_Pop_mioi_wen_comp;
  output [479:0] rotate_in_Pop_mioi_idat_mxwt;
  input rotate_in_Pop_mioi_biwt;
  input rotate_in_Pop_mioi_bdwt;
  input [511:0] rotate_in_Pop_mioi_idat;


  // Interconnect Declarations
  reg rotate_in_Pop_mioi_bcwt;
  reg [479:0] rotate_in_Pop_mioi_idat_bfwt_511_32;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_in_Pop_mioi_iden = rotate_in_Pop_mioi_biwt | rotate_in_Pop_mioi_bdwt;
  assign rotate_in_Pop_mioi_bawt = rotate_in_Pop_mioi_biwt | rotate_in_Pop_mioi_bcwt;
  assign rotate_in_Pop_mioi_wen_comp = (~ rotate_in_Pop_mioi_oswt_unreg) | rotate_in_Pop_mioi_bawt;
  assign rotate_in_Pop_mioi_idat_mxwt = MUX_v_480_2_2((rotate_in_Pop_mioi_idat[511:32]),
      rotate_in_Pop_mioi_idat_bfwt_511_32, rotate_in_Pop_mioi_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      rotate_in_Pop_mioi_bcwt <= ~((~(rotate_in_Pop_mioi_bcwt | rotate_in_Pop_mioi_biwt))
          | rotate_in_Pop_mioi_bdwt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Pop_mioi_idat_bfwt_511_32 <= 480'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( rotate_in_Pop_mioi_biwt ) begin
      rotate_in_Pop_mioi_idat_bfwt_511_32 <= rotate_in_Pop_mioi_idat[511:32];
    end
  end

  function automatic [479:0] MUX_v_480_2_2;
    input [479:0] input_0;
    input [479:0] input_1;
    input  sel;
    reg [479:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_480_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, rotate_in_Pop_mioi_oswt_unreg, rotate_in_Pop_mioi_iswt0,
      rotate_in_Pop_mioi_iden_1, rotate_in_Pop_mioi_ivld_oreg, rotate_in_Pop_mioi_biwt,
      rotate_in_Pop_mioi_bdwt
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input rotate_in_Pop_mioi_oswt_unreg;
  input rotate_in_Pop_mioi_iswt0;
  output rotate_in_Pop_mioi_iden_1;
  input rotate_in_Pop_mioi_ivld_oreg;
  output rotate_in_Pop_mioi_biwt;
  output rotate_in_Pop_mioi_bdwt;


  // Interconnect Declarations
  wire rotate_in_Pop_mioi_ogwt;
  reg rotate_in_Pop_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_in_Pop_mioi_bdwt = rotate_in_Pop_mioi_oswt_unreg & run_wen;
  assign rotate_in_Pop_mioi_biwt = rotate_in_Pop_mioi_ogwt & rotate_in_Pop_mioi_ivld_oreg;
  assign rotate_in_Pop_mioi_ogwt = ((~ run_wten) & rotate_in_Pop_mioi_iswt0) | rotate_in_Pop_mioi_icwt;
  assign rotate_in_Pop_mioi_iden_1 = rotate_in_Pop_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      rotate_in_Pop_mioi_icwt <= rotate_in_Pop_mioi_ogwt & (~ rotate_in_Pop_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
// ------------------------------------------------------------------


module OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [13:0] radr;
  output we;
  output [63:0] d;
  output [13:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [13:0] radr_d;
  input [13:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module OutputBuffer_run_run_fsm (
  clk, rst, run_wen, fsm_output, while_C_1_tr0, while_for_for_C_1_tr0, while_for_C_1_tr0,
      while_C_2_tr0, while_for_1_C_2_tr0
);
  input clk;
  input rst;
  input run_wen;
  output [10:0] fsm_output;
  reg [10:0] fsm_output;
  input while_C_1_tr0;
  input while_for_for_C_1_tr0;
  input while_for_C_1_tr0;
  input while_C_2_tr0;
  input while_for_1_C_2_tr0;


  // FSM State Type Declaration for OutputBuffer_run_run_fsm_1
  parameter
    while_C_0 = 4'd0,
    while_C_1 = 4'd1,
    while_for_C_0 = 4'd2,
    while_for_for_C_0 = 4'd3,
    while_for_for_C_1 = 4'd4,
    while_for_C_1 = 4'd5,
    while_C_2 = 4'd6,
    while_for_1_C_0 = 4'd7,
    while_for_1_C_1 = 4'd8,
    while_for_1_C_2 = 4'd9,
    while_C_3 = 4'd10;

  reg [3:0] state_var;
  reg [3:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : OutputBuffer_run_run_fsm_1
    case (state_var)
      while_C_1 : begin
        fsm_output = 11'b00000000010;
        if ( while_C_1_tr0 ) begin
          state_var_NS = while_C_2;
        end
        else begin
          state_var_NS = while_for_C_0;
        end
      end
      while_for_C_0 : begin
        fsm_output = 11'b00000000100;
        state_var_NS = while_for_for_C_0;
      end
      while_for_for_C_0 : begin
        fsm_output = 11'b00000001000;
        state_var_NS = while_for_for_C_1;
      end
      while_for_for_C_1 : begin
        fsm_output = 11'b00000010000;
        if ( while_for_for_C_1_tr0 ) begin
          state_var_NS = while_for_C_1;
        end
        else begin
          state_var_NS = while_for_for_C_0;
        end
      end
      while_for_C_1 : begin
        fsm_output = 11'b00000100000;
        if ( while_for_C_1_tr0 ) begin
          state_var_NS = while_C_2;
        end
        else begin
          state_var_NS = while_for_C_0;
        end
      end
      while_C_2 : begin
        fsm_output = 11'b00001000000;
        if ( while_C_2_tr0 ) begin
          state_var_NS = while_C_3;
        end
        else begin
          state_var_NS = while_for_1_C_0;
        end
      end
      while_for_1_C_0 : begin
        fsm_output = 11'b00010000000;
        state_var_NS = while_for_1_C_1;
      end
      while_for_1_C_1 : begin
        fsm_output = 11'b00100000000;
        state_var_NS = while_for_1_C_2;
      end
      while_for_1_C_2 : begin
        fsm_output = 11'b01000000000;
        if ( while_for_1_C_2_tr0 ) begin
          state_var_NS = while_C_3;
        end
        else begin
          state_var_NS = while_for_1_C_0;
        end
      end
      while_C_3 : begin
        fsm_output = 11'b10000000000;
        state_var_NS = while_C_0;
      end
      // while_C_0
      default : begin
        fsm_output = 11'b00000000001;
        state_var_NS = while_C_1;
      end
    endcase
  end

  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      state_var <= while_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_staller
// ------------------------------------------------------------------


module OutputBuffer_run_staller (
  run_wen, sync2_Pop_mioi_wen_comp, rotate_out_Pop_mioi_wen_comp, dma_write_ctrl_Push_mioi_wen_comp,
      dma_write_chnl_Push_mioi_wen_comp, sync3_Push_mioi_wen_comp
);
  output run_wen;
  input sync2_Pop_mioi_wen_comp;
  input rotate_out_Pop_mioi_wen_comp;
  input dma_write_ctrl_Push_mioi_wen_comp;
  input dma_write_chnl_Push_mioi_wen_comp;
  input sync3_Push_mioi_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = sync2_Pop_mioi_wen_comp & rotate_out_Pop_mioi_wen_comp & dma_write_ctrl_Push_mioi_wen_comp
      & dma_write_chnl_Push_mioi_wen_comp & sync3_Push_mioi_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl (
  sync3_Push_mioi_iswt0, sync3_Push_mioi_irdy_oreg, sync3_Push_mioi_biwt
);
  input sync3_Push_mioi_iswt0;
  input sync3_Push_mioi_irdy_oreg;
  output sync3_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign sync3_Push_mioi_biwt = sync3_Push_mioi_iswt0 & sync3_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl
    (
  dma_write_chnl_Push_mioi_iswt0, dma_write_chnl_Push_mioi_irdy_oreg, dma_write_chnl_Push_mioi_biwt
);
  input dma_write_chnl_Push_mioi_iswt0;
  input dma_write_chnl_Push_mioi_irdy_oreg;
  output dma_write_chnl_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign dma_write_chnl_Push_mioi_biwt = dma_write_chnl_Push_mioi_iswt0 & dma_write_chnl_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl
    (
  dma_write_ctrl_Push_mioi_iswt0, dma_write_ctrl_Push_mioi_irdy_oreg, dma_write_ctrl_Push_mioi_biwt
);
  input dma_write_ctrl_Push_mioi_iswt0;
  input dma_write_ctrl_Push_mioi_irdy_oreg;
  output dma_write_ctrl_Push_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign dma_write_ctrl_Push_mioi_biwt = dma_write_ctrl_Push_mioi_iswt0 & dma_write_ctrl_Push_mioi_irdy_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_ctrl (
  rotate_out_Pop_mioi_iswt0, rotate_out_Pop_mioi_ivld_oreg, rotate_out_Pop_mioi_biwt
);
  input rotate_out_Pop_mioi_iswt0;
  input rotate_out_Pop_mioi_ivld_oreg;
  output rotate_out_Pop_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign rotate_out_Pop_mioi_biwt = rotate_out_Pop_mioi_iswt0 & rotate_out_Pop_mioi_ivld_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl (
  sync2_Pop_mioi_iswt0, sync2_Pop_mioi_ivld_oreg, sync2_Pop_mioi_biwt
);
  input sync2_Pop_mioi_iswt0;
  input sync2_Pop_mioi_ivld_oreg;
  output sync2_Pop_mioi_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign sync2_Pop_mioi_biwt = sync2_Pop_mioi_iswt0 & sync2_Pop_mioi_ivld_oreg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi (
  clk, rst, sync3_val, sync3_rdy, sync3_msg, run_wen, run_wten, sync3_Pop_mioi_oswt_unreg,
      sync3_Pop_mioi_bawt, sync3_Pop_mioi_iswt0, sync3_Pop_mioi_wen_comp, sync3_Pop_mioi_ivld,
      sync3_Pop_mioi_ivld_oreg, sync3_Pop_mioi_bawt_pff, run_wten_pff, sync3_Pop_mioi_iswt0_pff,
      sync3_Pop_mioi_ivld_oreg_pff, sync3_Pop_mioi_wen_comp_pff, sync3_Pop_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;
  input run_wen;
  input run_wten;
  input sync3_Pop_mioi_oswt_unreg;
  output sync3_Pop_mioi_bawt;
  input sync3_Pop_mioi_iswt0;
  output sync3_Pop_mioi_wen_comp;
  output sync3_Pop_mioi_ivld;
  input sync3_Pop_mioi_ivld_oreg;
  output sync3_Pop_mioi_bawt_pff;
  input run_wten_pff;
  input sync3_Pop_mioi_iswt0_pff;
  input sync3_Pop_mioi_ivld_oreg_pff;
  output sync3_Pop_mioi_wen_comp_pff;
  input sync3_Pop_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire sync3_Pop_mioi_biwt;
  wire sync3_Pop_mioi_bdwt;
  wire sync3_Pop_mioi_idat;
  wire sync3_Pop_mioi_irdy_run_sct;
  wire sync3_Pop_mioi_bawt_reg;
  wire sync3_Pop_mioi_bawt_iff;
  wire sync3_Pop_mioi_biwt_iff;
  wire sync3_Pop_mioi_wen_comp_reg;
  wire sync3_Pop_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd5),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync3_Pop_mioi (
      .vld(sync3_val),
      .rdy(sync3_rdy),
      .dat(sync3_msg),
      .idat(sync3_Pop_mioi_idat),
      .irdy(sync3_Pop_mioi_irdy_run_sct),
      .ivld(sync3_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Pop_mioi_oswt_unreg(sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_iswt0(sync3_Pop_mioi_iswt0),
      .sync3_Pop_mioi_ivld_oreg(sync3_Pop_mioi_ivld_oreg),
      .sync3_Pop_mioi_biwt(sync3_Pop_mioi_biwt),
      .sync3_Pop_mioi_bdwt(sync3_Pop_mioi_bdwt),
      .sync3_Pop_mioi_irdy_run_sct(sync3_Pop_mioi_irdy_run_sct),
      .sync3_Pop_mioi_biwt_pff(sync3_Pop_mioi_biwt_iff),
      .run_wten_pff(run_wten_pff),
      .sync3_Pop_mioi_iswt0_pff(sync3_Pop_mioi_iswt0_pff),
      .sync3_Pop_mioi_ivld_oreg_pff(sync3_Pop_mioi_ivld_oreg_pff)
    );
  Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync3_Pop_mioi_oswt_unreg(sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_bawt(sync3_Pop_mioi_bawt_reg),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp_reg),
      .sync3_Pop_mioi_biwt(sync3_Pop_mioi_biwt),
      .sync3_Pop_mioi_bdwt(sync3_Pop_mioi_bdwt),
      .sync3_Pop_mioi_bawt_pff(sync3_Pop_mioi_bawt_iff),
      .sync3_Pop_mioi_biwt_pff(sync3_Pop_mioi_biwt_iff),
      .sync3_Pop_mioi_wen_comp_pff(sync3_Pop_mioi_wen_comp_iff),
      .sync3_Pop_mioi_oswt_unreg_pff(sync3_Pop_mioi_oswt_unreg_pff)
    );
  assign sync3_Pop_mioi_bawt = sync3_Pop_mioi_bawt_reg;
  assign sync3_Pop_mioi_bawt_pff = sync3_Pop_mioi_bawt_iff;
  assign sync3_Pop_mioi_wen_comp = sync3_Pop_mioi_wen_comp_reg;
  assign sync3_Pop_mioi_wen_comp_pff = sync3_Pop_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi (
  clk, rst, sync2_val, sync2_rdy, sync2_msg, run_wen, sync2_Push_mioi_oswt_unreg,
      sync2_Push_mioi_bawt, sync2_Push_mioi_iswt0, sync2_Push_mioi_wen_comp, sync2_Push_mioi_irdy,
      sync2_Push_mioi_irdy_oreg, sync2_Push_mioi_bawt_pff, sync2_Push_mioi_iswt0_pff,
      sync2_Push_mioi_irdy_oreg_pff, sync2_Push_mioi_wen_comp_pff, sync2_Push_mioi_oswt_unreg_pff
);
  input clk;
  input rst;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input run_wen;
  input sync2_Push_mioi_oswt_unreg;
  output sync2_Push_mioi_bawt;
  input sync2_Push_mioi_iswt0;
  output sync2_Push_mioi_wen_comp;
  output sync2_Push_mioi_irdy;
  input sync2_Push_mioi_irdy_oreg;
  output sync2_Push_mioi_bawt_pff;
  input sync2_Push_mioi_iswt0_pff;
  input sync2_Push_mioi_irdy_oreg_pff;
  output sync2_Push_mioi_wen_comp_pff;
  input sync2_Push_mioi_oswt_unreg_pff;


  // Interconnect Declarations
  wire sync2_Push_mioi_biwt;
  wire sync2_Push_mioi_bdwt;
  wire sync2_Push_mioi_bcwt;
  wire sync2_Push_mioi_ivld_run_sct;
  wire sync2_Push_mioi_bawt_reg;
  wire sync2_Push_mioi_bawt_iff;
  wire sync2_Push_mioi_biwt_iff;
  wire sync2_Push_mioi_bcwt_iff;
  wire sync2_Push_mioi_wen_comp_reg;
  wire sync2_Push_mioi_wen_comp_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd4),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync2_Push_mioi (
      .vld(sync2_val),
      .rdy(sync2_rdy),
      .dat(sync2_msg),
      .idat(1'b1),
      .irdy(sync2_Push_mioi_irdy),
      .ivld(sync2_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .sync2_Push_mioi_oswt_unreg(sync2_Push_mioi_oswt_unreg),
      .sync2_Push_mioi_iswt0(sync2_Push_mioi_iswt0),
      .sync2_Push_mioi_irdy_oreg(sync2_Push_mioi_irdy_oreg),
      .sync2_Push_mioi_biwt(sync2_Push_mioi_biwt),
      .sync2_Push_mioi_bdwt(sync2_Push_mioi_bdwt),
      .sync2_Push_mioi_bcwt(sync2_Push_mioi_bcwt),
      .sync2_Push_mioi_ivld_run_sct(sync2_Push_mioi_ivld_run_sct),
      .sync2_Push_mioi_biwt_pff(sync2_Push_mioi_biwt_iff),
      .sync2_Push_mioi_iswt0_pff(sync2_Push_mioi_iswt0_pff),
      .sync2_Push_mioi_bcwt_pff(sync2_Push_mioi_bcwt_iff),
      .sync2_Push_mioi_irdy_oreg_pff(sync2_Push_mioi_irdy_oreg_pff)
    );
  Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync2_Push_mioi_oswt_unreg(sync2_Push_mioi_oswt_unreg),
      .sync2_Push_mioi_bawt(sync2_Push_mioi_bawt_reg),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp_reg),
      .sync2_Push_mioi_biwt(sync2_Push_mioi_biwt),
      .sync2_Push_mioi_bdwt(sync2_Push_mioi_bdwt),
      .sync2_Push_mioi_bcwt(sync2_Push_mioi_bcwt),
      .sync2_Push_mioi_bawt_pff(sync2_Push_mioi_bawt_iff),
      .sync2_Push_mioi_biwt_pff(sync2_Push_mioi_biwt_iff),
      .sync2_Push_mioi_bcwt_pff(sync2_Push_mioi_bcwt_iff),
      .sync2_Push_mioi_wen_comp_pff(sync2_Push_mioi_wen_comp_iff),
      .sync2_Push_mioi_oswt_unreg_pff(sync2_Push_mioi_oswt_unreg_pff)
    );
  assign sync2_Push_mioi_bawt = sync2_Push_mioi_bawt_reg;
  assign sync2_Push_mioi_bawt_pff = sync2_Push_mioi_bawt_iff;
  assign sync2_Push_mioi_wen_comp = sync2_Push_mioi_wen_comp_reg;
  assign sync2_Push_mioi_wen_comp_pff = sync2_Push_mioi_wen_comp_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi (
  clk, rst, sync1_val, sync1_rdy, sync1_msg, run_wen, sync1_Push_mioi_oswt_unreg,
      sync1_Push_mioi_bawt, sync1_Push_mioi_iswt0, sync1_Push_mioi_wen_comp, sync1_Push_mioi_irdy,
      sync1_Push_mioi_irdy_oreg, sync1_Push_mioi_wen_comp_pff, sync1_Push_mioi_oswt_unreg_pff,
      sync1_Push_mioi_bawt_pff, sync1_Push_mioi_iswt0_pff, sync1_Push_mioi_irdy_oreg_pff
);
  input clk;
  input rst;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  input run_wen;
  input sync1_Push_mioi_oswt_unreg;
  output sync1_Push_mioi_bawt;
  input sync1_Push_mioi_iswt0;
  output sync1_Push_mioi_wen_comp;
  output sync1_Push_mioi_irdy;
  input sync1_Push_mioi_irdy_oreg;
  output sync1_Push_mioi_wen_comp_pff;
  input sync1_Push_mioi_oswt_unreg_pff;
  output sync1_Push_mioi_bawt_pff;
  input sync1_Push_mioi_iswt0_pff;
  input sync1_Push_mioi_irdy_oreg_pff;


  // Interconnect Declarations
  wire sync1_Push_mioi_biwt;
  wire sync1_Push_mioi_bdwt;
  wire sync1_Push_mioi_bcwt;
  wire sync1_Push_mioi_ivld_run_sct;
  wire sync1_Push_mioi_wen_comp_reg;
  wire sync1_Push_mioi_wen_comp_iff;
  wire sync1_Push_mioi_bawt_reg;
  wire sync1_Push_mioi_bawt_iff;
  wire sync1_Push_mioi_biwt_iff;
  wire sync1_Push_mioi_bcwt_iff;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd3),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync1_Push_mioi (
      .vld(sync1_val),
      .rdy(sync1_rdy),
      .dat(sync1_msg),
      .idat(1'b1),
      .irdy(sync1_Push_mioi_irdy),
      .ivld(sync1_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .sync1_Push_mioi_oswt_unreg(sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_iswt0(sync1_Push_mioi_iswt0),
      .sync1_Push_mioi_irdy_oreg(sync1_Push_mioi_irdy_oreg),
      .sync1_Push_mioi_biwt(sync1_Push_mioi_biwt),
      .sync1_Push_mioi_bdwt(sync1_Push_mioi_bdwt),
      .sync1_Push_mioi_bcwt(sync1_Push_mioi_bcwt),
      .sync1_Push_mioi_ivld_run_sct(sync1_Push_mioi_ivld_run_sct),
      .sync1_Push_mioi_biwt_pff(sync1_Push_mioi_biwt_iff),
      .sync1_Push_mioi_iswt0_pff(sync1_Push_mioi_iswt0_pff),
      .sync1_Push_mioi_bcwt_pff(sync1_Push_mioi_bcwt_iff),
      .sync1_Push_mioi_irdy_oreg_pff(sync1_Push_mioi_irdy_oreg_pff)
    );
  Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync1_Push_mioi_oswt_unreg(sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_bawt(sync1_Push_mioi_bawt_reg),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp_reg),
      .sync1_Push_mioi_biwt(sync1_Push_mioi_biwt),
      .sync1_Push_mioi_bdwt(sync1_Push_mioi_bdwt),
      .sync1_Push_mioi_bcwt(sync1_Push_mioi_bcwt),
      .sync1_Push_mioi_wen_comp_pff(sync1_Push_mioi_wen_comp_iff),
      .sync1_Push_mioi_oswt_unreg_pff(sync1_Push_mioi_oswt_unreg_pff),
      .sync1_Push_mioi_bawt_pff(sync1_Push_mioi_bawt_iff),
      .sync1_Push_mioi_biwt_pff(sync1_Push_mioi_biwt_iff),
      .sync1_Push_mioi_bcwt_pff(sync1_Push_mioi_bcwt_iff)
    );
  assign sync1_Push_mioi_wen_comp = sync1_Push_mioi_wen_comp_reg;
  assign sync1_Push_mioi_wen_comp_pff = sync1_Push_mioi_wen_comp_iff;
  assign sync1_Push_mioi_bawt = sync1_Push_mioi_bawt_reg;
  assign sync1_Push_mioi_bawt_pff = sync1_Push_mioi_bawt_iff;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_rotate_in_Push_mioi
// ------------------------------------------------------------------


module InputBuffer_run_rotate_in_Push_mioi (
  clk, rst, rotate_in_val, rotate_in_rdy, rotate_in_msg, rotate_in_Push_mioi_oswt,
      rotate_in_Push_mioi_wen_comp, rotate_in_Push_mioi_idat, rotate_in_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output rotate_in_val;
  input rotate_in_rdy;
  output [511:0] rotate_in_msg;
  input rotate_in_Push_mioi_oswt;
  output rotate_in_Push_mioi_wen_comp;
  input [511:0] rotate_in_Push_mioi_idat;
  input rotate_in_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire rotate_in_Push_mioi_biwt;
  wire rotate_in_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd15),
  .width(32'sd512),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) rotate_in_Push_mioi (
      .vld(rotate_in_val),
      .rdy(rotate_in_rdy),
      .dat(rotate_in_msg),
      .idat(rotate_in_Push_mioi_idat),
      .irdy(rotate_in_Push_mioi_irdy),
      .ivld(rotate_in_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_ctrl InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_ctrl_inst
      (
      .rotate_in_Push_mioi_iswt0(rotate_in_Push_mioi_oswt_pff),
      .rotate_in_Push_mioi_irdy_oreg(rotate_in_Push_mioi_irdy),
      .rotate_in_Push_mioi_biwt(rotate_in_Push_mioi_biwt)
    );
  assign rotate_in_Push_mioi_wen_comp = (~ rotate_in_Push_mioi_oswt_pff) | rotate_in_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi (
  clk, rst, dma_read_chnl_val, dma_read_chnl_rdy, dma_read_chnl_msg, dma_read_chnl_Pop_mioi_oswt,
      dma_read_chnl_Pop_mioi_wen_comp, dma_read_chnl_Pop_mioi_idat_mxwt, dma_read_chnl_Pop_mioi_oswt_pff
);
  input clk;
  input rst;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  input dma_read_chnl_Pop_mioi_oswt;
  output dma_read_chnl_Pop_mioi_wen_comp;
  output [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;
  input dma_read_chnl_Pop_mioi_oswt_pff;


  // Interconnect Declarations
  wire dma_read_chnl_Pop_mioi_biwt;
  wire [63:0] dma_read_chnl_Pop_mioi_idat;
  wire dma_read_chnl_Pop_mioi_ivld;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd14),
  .width(32'sd64),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_read_chnl_Pop_mioi (
      .vld(dma_read_chnl_val),
      .rdy(dma_read_chnl_rdy),
      .dat(dma_read_chnl_msg),
      .idat(dma_read_chnl_Pop_mioi_idat),
      .irdy(dma_read_chnl_Pop_mioi_oswt),
      .ivld(dma_read_chnl_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl_inst
      (
      .dma_read_chnl_Pop_mioi_iswt0(dma_read_chnl_Pop_mioi_oswt_pff),
      .dma_read_chnl_Pop_mioi_ivld_oreg(dma_read_chnl_Pop_mioi_ivld),
      .dma_read_chnl_Pop_mioi_biwt(dma_read_chnl_Pop_mioi_biwt)
    );
  assign dma_read_chnl_Pop_mioi_idat_mxwt = dma_read_chnl_Pop_mioi_idat;
  assign dma_read_chnl_Pop_mioi_wen_comp = (~ dma_read_chnl_Pop_mioi_oswt_pff) |
      dma_read_chnl_Pop_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi (
  clk, rst, dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_ctrl_Push_mioi_oswt,
      dma_read_ctrl_Push_mioi_wen_comp, dma_read_ctrl_Push_mioi_idat, dma_read_ctrl_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_ctrl_Push_mioi_oswt;
  output dma_read_ctrl_Push_mioi_wen_comp;
  input [66:0] dma_read_ctrl_Push_mioi_idat;
  input dma_read_ctrl_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire dma_read_ctrl_Push_mioi_biwt;
  wire dma_read_ctrl_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_dma_read_ctrl_Push_mioi_idat;
  assign nl_dma_read_ctrl_Push_mioi_idat = {3'b011 , (dma_read_ctrl_Push_mioi_idat[63:36])
      , 4'b0000 , (dma_read_ctrl_Push_mioi_idat[31:0])};
  ccs_out_buf_wait_v5 #(.rscid(32'sd13),
  .width(32'sd67),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_read_ctrl_Push_mioi (
      .vld(dma_read_ctrl_val),
      .rdy(dma_read_ctrl_rdy),
      .dat(dma_read_ctrl_msg),
      .idat(nl_dma_read_ctrl_Push_mioi_idat[66:0]),
      .irdy(dma_read_ctrl_Push_mioi_irdy),
      .ivld(dma_read_ctrl_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl_inst
      (
      .dma_read_ctrl_Push_mioi_iswt0(dma_read_ctrl_Push_mioi_oswt_pff),
      .dma_read_ctrl_Push_mioi_irdy_oreg(dma_read_ctrl_Push_mioi_irdy),
      .dma_read_ctrl_Push_mioi_biwt(dma_read_ctrl_Push_mioi_biwt)
    );
  assign dma_read_ctrl_Push_mioi_wen_comp = (~ dma_read_ctrl_Push_mioi_oswt_pff)
      | dma_read_ctrl_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi (
  clk, rst, sync1_val, sync1_rdy, sync1_msg, sync1_Pop_mioi_oswt, sync1_Pop_mioi_wen_comp,
      sync1_Pop_mioi_oswt_pff
);
  input clk;
  input rst;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  input sync1_Pop_mioi_oswt;
  output sync1_Pop_mioi_wen_comp;
  input sync1_Pop_mioi_oswt_pff;


  // Interconnect Declarations
  wire sync1_Pop_mioi_biwt;
  wire sync1_Pop_mioi_idat;
  wire sync1_Pop_mioi_ivld;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd12),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync1_Pop_mioi (
      .vld(sync1_val),
      .rdy(sync1_rdy),
      .dat(sync1_msg),
      .idat(sync1_Pop_mioi_idat),
      .irdy(sync1_Pop_mioi_oswt),
      .ivld(sync1_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl_inst
      (
      .sync1_Pop_mioi_iswt0(sync1_Pop_mioi_oswt_pff),
      .sync1_Pop_mioi_ivld_oreg(sync1_Pop_mioi_ivld),
      .sync1_Pop_mioi_biwt(sync1_Pop_mioi_biwt)
    );
  assign sync1_Pop_mioi_wen_comp = (~ sync1_Pop_mioi_oswt_pff) | sync1_Pop_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_25_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_25_cmp (
  clk, rst, run_wen, run_wten, while_mul_25_cmp_oswt_unreg, while_mul_25_cmp_bawt,
      while_mul_25_cmp_iden, while_mul_25_cmp_iswt1, while_mul_25_cmp_iden_1, while_mul_25_cmp_oswt_unreg_1,
      while_mul_25_cmp_iden_2, while_mul_25_cmp_iswt1_1, while_mul_25_cmp_iden_3,
      while_mul_25_cmp_oswt_unreg_2, while_mul_25_cmp_iden_4, while_mul_25_cmp_iswt1_2,
      while_mul_25_cmp_iden_5, while_mul_25_cmp_a_run, while_mul_25_cmp_b_run, while_mul_25_cmp_z_mxwt,
      while_mul_25_cmp_z_mxwt_1, while_mul_25_cmp_z_mxwt_2, while_mul_25_cmp_iswt1_2_pff,
      while_mul_25_cmp_iswt1_1_pff, while_mul_25_cmp_iswt1_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_25_cmp_oswt_unreg;
  output while_mul_25_cmp_bawt;
  output while_mul_25_cmp_iden;
  input while_mul_25_cmp_iswt1;
  output while_mul_25_cmp_iden_1;
  input while_mul_25_cmp_oswt_unreg_1;
  output while_mul_25_cmp_iden_2;
  input while_mul_25_cmp_iswt1_1;
  output while_mul_25_cmp_iden_3;
  input while_mul_25_cmp_oswt_unreg_2;
  output while_mul_25_cmp_iden_4;
  input while_mul_25_cmp_iswt1_2;
  output while_mul_25_cmp_iden_5;
  input [31:0] while_mul_25_cmp_a_run;
  input [56:0] while_mul_25_cmp_b_run;
  output [87:0] while_mul_25_cmp_z_mxwt;
  output [88:0] while_mul_25_cmp_z_mxwt_1;
  output [87:0] while_mul_25_cmp_z_mxwt_2;
  input while_mul_25_cmp_iswt1_2_pff;
  input while_mul_25_cmp_iswt1_1_pff;
  input while_mul_25_cmp_iswt1_pff;


  // Interconnect Declarations
  wire while_mul_25_cmp_bdwt;
  wire while_mul_25_cmp_bdwt_2;
  wire while_mul_25_cmp_bdwt_4;
  wire [88:0] while_mul_25_cmp_z;
  wire [87:0] while_mul_25_cmp_z_mxwt_pconst;
  wire [87:0] while_mul_25_cmp_z_mxwt_2_pconst;
  wire run_cgwt_11;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd57),
  .signd_b(32'sd1),
  .width_z(32'sd89),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_mul_25_cmp (
      .a(while_mul_25_cmp_a_run),
      .b(while_mul_25_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_11),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_25_cmp_z)
    );
  Rotate_run_while_mul_25_cmp_mgc_mul_pipe_32_1_57_1_89_1_1_0_0_2_1_wait_ctrl Rotate_run_while_mul_25_cmp_mgc_mul_pipe_32_1_57_1_89_1_1_0_0_2_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_25_cmp_oswt_unreg(while_mul_25_cmp_oswt_unreg),
      .while_mul_25_cmp_iswt1(while_mul_25_cmp_iswt1),
      .while_mul_25_cmp_iden_1(while_mul_25_cmp_iden_1),
      .while_mul_25_cmp_oswt_unreg_1(while_mul_25_cmp_oswt_unreg_1),
      .while_mul_25_cmp_iswt1_1(while_mul_25_cmp_iswt1_1),
      .while_mul_25_cmp_iden_3(while_mul_25_cmp_iden_3),
      .while_mul_25_cmp_oswt_unreg_2(while_mul_25_cmp_oswt_unreg_2),
      .while_mul_25_cmp_iswt1_2(while_mul_25_cmp_iswt1_2),
      .while_mul_25_cmp_iden_5(while_mul_25_cmp_iden_5),
      .run_cgwt_11(run_cgwt_11),
      .while_mul_25_cmp_bdwt(while_mul_25_cmp_bdwt),
      .while_mul_25_cmp_bdwt_2(while_mul_25_cmp_bdwt_2),
      .while_mul_25_cmp_bdwt_4(while_mul_25_cmp_bdwt_4),
      .while_mul_25_cmp_iswt1_2_pff(while_mul_25_cmp_iswt1_2_pff),
      .while_mul_25_cmp_iswt1_1_pff(while_mul_25_cmp_iswt1_1_pff),
      .while_mul_25_cmp_iswt1_pff(while_mul_25_cmp_iswt1_pff)
    );
  Rotate_run_while_mul_25_cmp_mgc_mul_pipe_32_1_57_1_89_1_1_0_0_2_1_wait_dp Rotate_run_while_mul_25_cmp_mgc_mul_pipe_32_1_57_1_89_1_1_0_0_2_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_25_cmp_bawt(while_mul_25_cmp_bawt),
      .while_mul_25_cmp_iden(while_mul_25_cmp_iden),
      .while_mul_25_cmp_iden_2(while_mul_25_cmp_iden_2),
      .while_mul_25_cmp_iden_4(while_mul_25_cmp_iden_4),
      .while_mul_25_cmp_z_mxwt(while_mul_25_cmp_z_mxwt_pconst),
      .while_mul_25_cmp_z_mxwt_1(while_mul_25_cmp_z_mxwt_1),
      .while_mul_25_cmp_z_mxwt_2(while_mul_25_cmp_z_mxwt_2_pconst),
      .while_mul_25_cmp_biwt(while_mul_25_cmp_iden_1),
      .while_mul_25_cmp_bdwt(while_mul_25_cmp_bdwt),
      .while_mul_25_cmp_biwt_2(while_mul_25_cmp_iden_3),
      .while_mul_25_cmp_bdwt_2(while_mul_25_cmp_bdwt_2),
      .while_mul_25_cmp_biwt_4(while_mul_25_cmp_iden_5),
      .while_mul_25_cmp_bdwt_4(while_mul_25_cmp_bdwt_4),
      .while_mul_25_cmp_z(while_mul_25_cmp_z)
    );
  assign while_mul_25_cmp_z_mxwt = while_mul_25_cmp_z_mxwt_pconst;
  assign while_mul_25_cmp_z_mxwt_2 = while_mul_25_cmp_z_mxwt_2_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_34_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_34_cmp (
  clk, rst, run_wen, run_wten, while_mul_34_cmp_oswt_unreg, while_mul_34_cmp_bawt,
      while_mul_34_cmp_iden, while_mul_34_cmp_iswt2, while_mul_34_cmp_iden_1, while_mul_34_cmp_oswt_unreg_1,
      while_mul_34_cmp_iden_2, while_mul_34_cmp_iswt2_1, while_mul_34_cmp_iden_3,
      while_mul_34_cmp_a_run, while_mul_34_cmp_b_run, while_mul_34_cmp_z_mxwt, while_mul_34_cmp_z_mxwt_1,
      while_mul_34_cmp_iswt2_1_pff, while_mul_34_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_34_cmp_oswt_unreg;
  output while_mul_34_cmp_bawt;
  output while_mul_34_cmp_iden;
  input while_mul_34_cmp_iswt2;
  output while_mul_34_cmp_iden_1;
  input while_mul_34_cmp_oswt_unreg_1;
  output while_mul_34_cmp_iden_2;
  input while_mul_34_cmp_iswt2_1;
  output while_mul_34_cmp_iden_3;
  input [31:0] while_mul_34_cmp_a_run;
  input [89:0] while_mul_34_cmp_b_run;
  output [103:0] while_mul_34_cmp_z_mxwt;
  output [103:0] while_mul_34_cmp_z_mxwt_1;
  input while_mul_34_cmp_iswt2_1_pff;
  input while_mul_34_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_34_cmp_bdwt;
  wire while_mul_34_cmp_bdwt_2;
  wire [105:0] while_mul_34_cmp_z;
  wire [103:0] while_mul_34_cmp_z_mxwt_pconst;
  wire [103:0] while_mul_34_cmp_z_mxwt_1_pconst;
  wire run_cgwt_10;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd90),
  .signd_b(32'sd1),
  .width_z(32'sd106),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd3),
  .n_inreg(32'sd1)) while_mul_34_cmp (
      .a(while_mul_34_cmp_a_run),
      .b(while_mul_34_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_10),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_34_cmp_z)
    );
  Rotate_run_while_mul_34_cmp_mgc_mul_pipe_32_1_90_1_106_1_1_0_0_3_1_wait_ctrl Rotate_run_while_mul_34_cmp_mgc_mul_pipe_32_1_90_1_106_1_1_0_0_3_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_34_cmp_oswt_unreg(while_mul_34_cmp_oswt_unreg),
      .while_mul_34_cmp_iswt2(while_mul_34_cmp_iswt2),
      .while_mul_34_cmp_iden_1(while_mul_34_cmp_iden_1),
      .while_mul_34_cmp_oswt_unreg_1(while_mul_34_cmp_oswt_unreg_1),
      .while_mul_34_cmp_iswt2_1(while_mul_34_cmp_iswt2_1),
      .while_mul_34_cmp_iden_3(while_mul_34_cmp_iden_3),
      .run_cgwt_10(run_cgwt_10),
      .while_mul_34_cmp_bdwt(while_mul_34_cmp_bdwt),
      .while_mul_34_cmp_bdwt_2(while_mul_34_cmp_bdwt_2),
      .while_mul_34_cmp_iswt2_1_pff(while_mul_34_cmp_iswt2_1_pff),
      .while_mul_34_cmp_iswt2_pff(while_mul_34_cmp_iswt2_pff)
    );
  Rotate_run_while_mul_34_cmp_mgc_mul_pipe_32_1_90_1_106_1_1_0_0_3_1_wait_dp Rotate_run_while_mul_34_cmp_mgc_mul_pipe_32_1_90_1_106_1_1_0_0_3_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_34_cmp_bawt(while_mul_34_cmp_bawt),
      .while_mul_34_cmp_iden(while_mul_34_cmp_iden),
      .while_mul_34_cmp_iden_2(while_mul_34_cmp_iden_2),
      .while_mul_34_cmp_z_mxwt(while_mul_34_cmp_z_mxwt_pconst),
      .while_mul_34_cmp_z_mxwt_1(while_mul_34_cmp_z_mxwt_1_pconst),
      .while_mul_34_cmp_biwt(while_mul_34_cmp_iden_1),
      .while_mul_34_cmp_bdwt(while_mul_34_cmp_bdwt),
      .while_mul_34_cmp_biwt_2(while_mul_34_cmp_iden_3),
      .while_mul_34_cmp_bdwt_2(while_mul_34_cmp_bdwt_2),
      .while_mul_34_cmp_z(while_mul_34_cmp_z)
    );
  assign while_mul_34_cmp_z_mxwt = while_mul_34_cmp_z_mxwt_pconst;
  assign while_mul_34_cmp_z_mxwt_1 = while_mul_34_cmp_z_mxwt_1_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_37_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_37_cmp (
  clk, rst, run_wen, run_wten, while_mul_37_cmp_oswt_unreg, while_mul_37_cmp_bawt,
      while_mul_37_cmp_iden, while_mul_37_cmp_iswt2, while_mul_37_cmp_iden_1, while_mul_37_cmp_oswt_unreg_1,
      while_mul_37_cmp_iden_2, while_mul_37_cmp_iswt2_1, while_mul_37_cmp_iden_3,
      while_mul_37_cmp_oswt_unreg_2, while_mul_37_cmp_iden_4, while_mul_37_cmp_iswt2_2,
      while_mul_37_cmp_iden_5, while_mul_37_cmp_a_run, while_mul_37_cmp_b_run, while_mul_37_cmp_z_mxwt,
      while_mul_37_cmp_z_mxwt_1, while_mul_37_cmp_z_mxwt_2, while_mul_37_cmp_iswt2_2_pff,
      while_mul_37_cmp_iswt2_1_pff, while_mul_37_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_37_cmp_oswt_unreg;
  output while_mul_37_cmp_bawt;
  output while_mul_37_cmp_iden;
  input while_mul_37_cmp_iswt2;
  output while_mul_37_cmp_iden_1;
  input while_mul_37_cmp_oswt_unreg_1;
  output while_mul_37_cmp_iden_2;
  input while_mul_37_cmp_iswt2_1;
  output while_mul_37_cmp_iden_3;
  input while_mul_37_cmp_oswt_unreg_2;
  output while_mul_37_cmp_iden_4;
  input while_mul_37_cmp_iswt2_2;
  output while_mul_37_cmp_iden_5;
  input [35:0] while_mul_37_cmp_a_run;
  input [63:0] while_mul_37_cmp_b_run;
  output [81:0] while_mul_37_cmp_z_mxwt;
  output [77:0] while_mul_37_cmp_z_mxwt_1;
  output [79:0] while_mul_37_cmp_z_mxwt_2;
  input while_mul_37_cmp_iswt2_2_pff;
  input while_mul_37_cmp_iswt2_1_pff;
  input while_mul_37_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_37_cmp_bdwt;
  wire while_mul_37_cmp_bdwt_2;
  wire while_mul_37_cmp_bdwt_4;
  wire [81:0] while_mul_37_cmp_z;
  wire [77:0] while_mul_37_cmp_z_mxwt_1_pconst;
  wire [79:0] while_mul_37_cmp_z_mxwt_2_pconst;
  wire run_cgwt_9;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd36),
  .signd_a(32'sd1),
  .width_b(32'sd64),
  .signd_b(32'sd1),
  .width_z(32'sd82),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd3),
  .n_inreg(32'sd1)) while_mul_37_cmp (
      .a(while_mul_37_cmp_a_run),
      .b(while_mul_37_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_9),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_37_cmp_z)
    );
  Rotate_run_while_mul_37_cmp_mgc_mul_pipe_36_1_64_1_82_1_1_0_0_3_1_wait_ctrl Rotate_run_while_mul_37_cmp_mgc_mul_pipe_36_1_64_1_82_1_1_0_0_3_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_37_cmp_oswt_unreg(while_mul_37_cmp_oswt_unreg),
      .while_mul_37_cmp_iswt2(while_mul_37_cmp_iswt2),
      .while_mul_37_cmp_iden_1(while_mul_37_cmp_iden_1),
      .while_mul_37_cmp_oswt_unreg_1(while_mul_37_cmp_oswt_unreg_1),
      .while_mul_37_cmp_iswt2_1(while_mul_37_cmp_iswt2_1),
      .while_mul_37_cmp_iden_3(while_mul_37_cmp_iden_3),
      .while_mul_37_cmp_oswt_unreg_2(while_mul_37_cmp_oswt_unreg_2),
      .while_mul_37_cmp_iswt2_2(while_mul_37_cmp_iswt2_2),
      .while_mul_37_cmp_iden_5(while_mul_37_cmp_iden_5),
      .run_cgwt_9(run_cgwt_9),
      .while_mul_37_cmp_bdwt(while_mul_37_cmp_bdwt),
      .while_mul_37_cmp_bdwt_2(while_mul_37_cmp_bdwt_2),
      .while_mul_37_cmp_bdwt_4(while_mul_37_cmp_bdwt_4),
      .while_mul_37_cmp_iswt2_2_pff(while_mul_37_cmp_iswt2_2_pff),
      .while_mul_37_cmp_iswt2_1_pff(while_mul_37_cmp_iswt2_1_pff),
      .while_mul_37_cmp_iswt2_pff(while_mul_37_cmp_iswt2_pff)
    );
  Rotate_run_while_mul_37_cmp_mgc_mul_pipe_36_1_64_1_82_1_1_0_0_3_1_wait_dp Rotate_run_while_mul_37_cmp_mgc_mul_pipe_36_1_64_1_82_1_1_0_0_3_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_37_cmp_bawt(while_mul_37_cmp_bawt),
      .while_mul_37_cmp_iden(while_mul_37_cmp_iden),
      .while_mul_37_cmp_iden_2(while_mul_37_cmp_iden_2),
      .while_mul_37_cmp_iden_4(while_mul_37_cmp_iden_4),
      .while_mul_37_cmp_z_mxwt(while_mul_37_cmp_z_mxwt),
      .while_mul_37_cmp_z_mxwt_1(while_mul_37_cmp_z_mxwt_1_pconst),
      .while_mul_37_cmp_z_mxwt_2(while_mul_37_cmp_z_mxwt_2_pconst),
      .while_mul_37_cmp_biwt(while_mul_37_cmp_iden_1),
      .while_mul_37_cmp_bdwt(while_mul_37_cmp_bdwt),
      .while_mul_37_cmp_biwt_2(while_mul_37_cmp_iden_3),
      .while_mul_37_cmp_bdwt_2(while_mul_37_cmp_bdwt_2),
      .while_mul_37_cmp_biwt_4(while_mul_37_cmp_iden_5),
      .while_mul_37_cmp_bdwt_4(while_mul_37_cmp_bdwt_4),
      .while_mul_37_cmp_z(while_mul_37_cmp_z)
    );
  assign while_mul_37_cmp_z_mxwt_1 = while_mul_37_cmp_z_mxwt_1_pconst;
  assign while_mul_37_cmp_z_mxwt_2 = while_mul_37_cmp_z_mxwt_2_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_73_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_73_cmp (
  clk, rst, run_wen, run_wten, while_mul_73_cmp_oswt_unreg, while_mul_73_cmp_bawt,
      while_mul_73_cmp_iden, while_mul_73_cmp_iswt1, while_mul_73_cmp_iden_1, while_mul_73_cmp_oswt_unreg_1,
      while_mul_73_cmp_iden_2, while_mul_73_cmp_iswt1_1, while_mul_73_cmp_iden_3,
      while_mul_73_cmp_a_run, while_mul_73_cmp_b_run, while_mul_73_cmp_z_mxwt, while_mul_73_cmp_z_mxwt_1,
      while_mul_73_cmp_iswt1_1_pff, while_mul_73_cmp_iswt1_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_73_cmp_oswt_unreg;
  output while_mul_73_cmp_bawt;
  output while_mul_73_cmp_iden;
  input while_mul_73_cmp_iswt1;
  output while_mul_73_cmp_iden_1;
  input while_mul_73_cmp_oswt_unreg_1;
  output while_mul_73_cmp_iden_2;
  input while_mul_73_cmp_iswt1_1;
  output while_mul_73_cmp_iden_3;
  input [32:0] while_mul_73_cmp_a_run;
  input [51:0] while_mul_73_cmp_b_run;
  output [84:0] while_mul_73_cmp_z_mxwt;
  output [84:0] while_mul_73_cmp_z_mxwt_1;
  input while_mul_73_cmp_iswt1_1_pff;
  input while_mul_73_cmp_iswt1_pff;


  // Interconnect Declarations
  wire while_mul_73_cmp_bdwt;
  wire while_mul_73_cmp_bdwt_2;
  wire [84:0] while_mul_73_cmp_z;
  wire run_cgwt_8;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd33),
  .signd_a(32'sd1),
  .width_b(32'sd52),
  .signd_b(32'sd1),
  .width_z(32'sd85),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_mul_73_cmp (
      .a(while_mul_73_cmp_a_run),
      .b(while_mul_73_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_8),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_73_cmp_z)
    );
  Rotate_run_while_mul_73_cmp_mgc_mul_pipe_33_1_52_1_85_1_1_0_0_2_1_wait_ctrl Rotate_run_while_mul_73_cmp_mgc_mul_pipe_33_1_52_1_85_1_1_0_0_2_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_73_cmp_oswt_unreg(while_mul_73_cmp_oswt_unreg),
      .while_mul_73_cmp_iswt1(while_mul_73_cmp_iswt1),
      .while_mul_73_cmp_iden_1(while_mul_73_cmp_iden_1),
      .while_mul_73_cmp_oswt_unreg_1(while_mul_73_cmp_oswt_unreg_1),
      .while_mul_73_cmp_iswt1_1(while_mul_73_cmp_iswt1_1),
      .while_mul_73_cmp_iden_3(while_mul_73_cmp_iden_3),
      .run_cgwt_8(run_cgwt_8),
      .while_mul_73_cmp_bdwt(while_mul_73_cmp_bdwt),
      .while_mul_73_cmp_bdwt_2(while_mul_73_cmp_bdwt_2),
      .while_mul_73_cmp_iswt1_1_pff(while_mul_73_cmp_iswt1_1_pff),
      .while_mul_73_cmp_iswt1_pff(while_mul_73_cmp_iswt1_pff)
    );
  Rotate_run_while_mul_73_cmp_mgc_mul_pipe_33_1_52_1_85_1_1_0_0_2_1_wait_dp Rotate_run_while_mul_73_cmp_mgc_mul_pipe_33_1_52_1_85_1_1_0_0_2_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_73_cmp_bawt(while_mul_73_cmp_bawt),
      .while_mul_73_cmp_iden(while_mul_73_cmp_iden),
      .while_mul_73_cmp_iden_2(while_mul_73_cmp_iden_2),
      .while_mul_73_cmp_z_mxwt(while_mul_73_cmp_z_mxwt),
      .while_mul_73_cmp_z_mxwt_1(while_mul_73_cmp_z_mxwt_1),
      .while_mul_73_cmp_biwt(while_mul_73_cmp_iden_1),
      .while_mul_73_cmp_bdwt(while_mul_73_cmp_bdwt),
      .while_mul_73_cmp_biwt_2(while_mul_73_cmp_iden_3),
      .while_mul_73_cmp_bdwt_2(while_mul_73_cmp_bdwt_2),
      .while_mul_73_cmp_z(while_mul_73_cmp_z)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_72_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_72_cmp (
  clk, rst, run_wen, run_wten, while_mul_72_cmp_oswt_unreg, while_mul_72_cmp_bawt,
      while_mul_72_cmp_iden, while_mul_72_cmp_iswt2, while_mul_72_cmp_iden_1, while_mul_72_cmp_oswt_unreg_1,
      while_mul_72_cmp_iden_2, while_mul_72_cmp_iswt2_1, while_mul_72_cmp_iden_3,
      while_mul_72_cmp_a_run, while_mul_72_cmp_b_run, while_mul_72_cmp_z_mxwt, while_mul_72_cmp_z_mxwt_1,
      while_mul_72_cmp_iswt2_1_pff, while_mul_72_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_72_cmp_oswt_unreg;
  output while_mul_72_cmp_bawt;
  output while_mul_72_cmp_iden;
  input while_mul_72_cmp_iswt2;
  output while_mul_72_cmp_iden_1;
  input while_mul_72_cmp_oswt_unreg_1;
  output while_mul_72_cmp_iden_2;
  input while_mul_72_cmp_iswt2_1;
  output while_mul_72_cmp_iden_3;
  input [31:0] while_mul_72_cmp_a_run;
  input [87:0] while_mul_72_cmp_b_run;
  output [102:0] while_mul_72_cmp_z_mxwt;
  output [100:0] while_mul_72_cmp_z_mxwt_1;
  input while_mul_72_cmp_iswt2_1_pff;
  input while_mul_72_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_72_cmp_bdwt;
  wire while_mul_72_cmp_bdwt_2;
  wire [102:0] while_mul_72_cmp_z;
  wire [100:0] while_mul_72_cmp_z_mxwt_1_pconst;
  wire run_cgwt_7;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd88),
  .signd_b(32'sd1),
  .width_z(32'sd103),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd3),
  .n_inreg(32'sd1)) while_mul_72_cmp (
      .a(while_mul_72_cmp_a_run),
      .b(while_mul_72_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_7),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_72_cmp_z)
    );
  Rotate_run_while_mul_72_cmp_mgc_mul_pipe_32_1_88_1_103_1_1_0_0_3_1_wait_ctrl Rotate_run_while_mul_72_cmp_mgc_mul_pipe_32_1_88_1_103_1_1_0_0_3_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_72_cmp_oswt_unreg(while_mul_72_cmp_oswt_unreg),
      .while_mul_72_cmp_iswt2(while_mul_72_cmp_iswt2),
      .while_mul_72_cmp_iden_1(while_mul_72_cmp_iden_1),
      .while_mul_72_cmp_oswt_unreg_1(while_mul_72_cmp_oswt_unreg_1),
      .while_mul_72_cmp_iswt2_1(while_mul_72_cmp_iswt2_1),
      .while_mul_72_cmp_iden_3(while_mul_72_cmp_iden_3),
      .run_cgwt_7(run_cgwt_7),
      .while_mul_72_cmp_bdwt(while_mul_72_cmp_bdwt),
      .while_mul_72_cmp_bdwt_2(while_mul_72_cmp_bdwt_2),
      .while_mul_72_cmp_iswt2_1_pff(while_mul_72_cmp_iswt2_1_pff),
      .while_mul_72_cmp_iswt2_pff(while_mul_72_cmp_iswt2_pff)
    );
  Rotate_run_while_mul_72_cmp_mgc_mul_pipe_32_1_88_1_103_1_1_0_0_3_1_wait_dp Rotate_run_while_mul_72_cmp_mgc_mul_pipe_32_1_88_1_103_1_1_0_0_3_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_72_cmp_bawt(while_mul_72_cmp_bawt),
      .while_mul_72_cmp_iden(while_mul_72_cmp_iden),
      .while_mul_72_cmp_iden_2(while_mul_72_cmp_iden_2),
      .while_mul_72_cmp_z_mxwt(while_mul_72_cmp_z_mxwt),
      .while_mul_72_cmp_z_mxwt_1(while_mul_72_cmp_z_mxwt_1_pconst),
      .while_mul_72_cmp_biwt(while_mul_72_cmp_iden_1),
      .while_mul_72_cmp_bdwt(while_mul_72_cmp_bdwt),
      .while_mul_72_cmp_biwt_2(while_mul_72_cmp_iden_3),
      .while_mul_72_cmp_bdwt_2(while_mul_72_cmp_bdwt_2),
      .while_mul_72_cmp_z(while_mul_72_cmp_z)
    );
  assign while_mul_72_cmp_z_mxwt_1 = while_mul_72_cmp_z_mxwt_1_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_67_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_67_cmp (
  clk, rst, run_wen, run_wten, while_mul_67_cmp_oswt_unreg, while_mul_67_cmp_bawt,
      while_mul_67_cmp_iden, while_mul_67_cmp_iswt1, while_mul_67_cmp_iden_1, while_mul_67_cmp_oswt_unreg_1,
      while_mul_67_cmp_iden_2, while_mul_67_cmp_iswt1_1, while_mul_67_cmp_iden_3,
      while_mul_67_cmp_oswt_unreg_2, while_mul_67_cmp_iden_4, while_mul_67_cmp_iswt1_2,
      while_mul_67_cmp_iden_5, while_mul_67_cmp_a_run, while_mul_67_cmp_b_run, while_mul_67_cmp_z_mxwt,
      while_mul_67_cmp_z_mxwt_1, while_mul_67_cmp_z_mxwt_2, while_mul_67_cmp_iswt1_2_pff,
      while_mul_67_cmp_iswt1_1_pff, while_mul_67_cmp_iswt1_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_67_cmp_oswt_unreg;
  output while_mul_67_cmp_bawt;
  output while_mul_67_cmp_iden;
  input while_mul_67_cmp_iswt1;
  output while_mul_67_cmp_iden_1;
  input while_mul_67_cmp_oswt_unreg_1;
  output while_mul_67_cmp_iden_2;
  input while_mul_67_cmp_iswt1_1;
  output while_mul_67_cmp_iden_3;
  input while_mul_67_cmp_oswt_unreg_2;
  output while_mul_67_cmp_iden_4;
  input while_mul_67_cmp_iswt1_2;
  output while_mul_67_cmp_iden_5;
  input [31:0] while_mul_67_cmp_a_run;
  input [57:0] while_mul_67_cmp_b_run;
  output [89:0] while_mul_67_cmp_z_mxwt;
  output [89:0] while_mul_67_cmp_z_mxwt_1;
  output [88:0] while_mul_67_cmp_z_mxwt_2;
  input while_mul_67_cmp_iswt1_2_pff;
  input while_mul_67_cmp_iswt1_1_pff;
  input while_mul_67_cmp_iswt1_pff;


  // Interconnect Declarations
  wire while_mul_67_cmp_bdwt;
  wire while_mul_67_cmp_bdwt_2;
  wire while_mul_67_cmp_bdwt_4;
  wire [89:0] while_mul_67_cmp_z;
  wire [88:0] while_mul_67_cmp_z_mxwt_2_pconst;
  wire run_cgwt_6;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd58),
  .signd_b(32'sd1),
  .width_z(32'sd90),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_mul_67_cmp (
      .a(while_mul_67_cmp_a_run),
      .b(while_mul_67_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_6),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_67_cmp_z)
    );
  Rotate_run_while_mul_67_cmp_mgc_mul_pipe_32_1_58_1_90_1_1_0_0_2_1_wait_ctrl Rotate_run_while_mul_67_cmp_mgc_mul_pipe_32_1_58_1_90_1_1_0_0_2_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_67_cmp_oswt_unreg(while_mul_67_cmp_oswt_unreg),
      .while_mul_67_cmp_iswt1(while_mul_67_cmp_iswt1),
      .while_mul_67_cmp_iden_1(while_mul_67_cmp_iden_1),
      .while_mul_67_cmp_oswt_unreg_1(while_mul_67_cmp_oswt_unreg_1),
      .while_mul_67_cmp_iswt1_1(while_mul_67_cmp_iswt1_1),
      .while_mul_67_cmp_iden_3(while_mul_67_cmp_iden_3),
      .while_mul_67_cmp_oswt_unreg_2(while_mul_67_cmp_oswt_unreg_2),
      .while_mul_67_cmp_iswt1_2(while_mul_67_cmp_iswt1_2),
      .while_mul_67_cmp_iden_5(while_mul_67_cmp_iden_5),
      .run_cgwt_6(run_cgwt_6),
      .while_mul_67_cmp_bdwt(while_mul_67_cmp_bdwt),
      .while_mul_67_cmp_bdwt_2(while_mul_67_cmp_bdwt_2),
      .while_mul_67_cmp_bdwt_4(while_mul_67_cmp_bdwt_4),
      .while_mul_67_cmp_iswt1_2_pff(while_mul_67_cmp_iswt1_2_pff),
      .while_mul_67_cmp_iswt1_1_pff(while_mul_67_cmp_iswt1_1_pff),
      .while_mul_67_cmp_iswt1_pff(while_mul_67_cmp_iswt1_pff)
    );
  Rotate_run_while_mul_67_cmp_mgc_mul_pipe_32_1_58_1_90_1_1_0_0_2_1_wait_dp Rotate_run_while_mul_67_cmp_mgc_mul_pipe_32_1_58_1_90_1_1_0_0_2_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_67_cmp_bawt(while_mul_67_cmp_bawt),
      .while_mul_67_cmp_iden(while_mul_67_cmp_iden),
      .while_mul_67_cmp_iden_2(while_mul_67_cmp_iden_2),
      .while_mul_67_cmp_iden_4(while_mul_67_cmp_iden_4),
      .while_mul_67_cmp_z_mxwt(while_mul_67_cmp_z_mxwt),
      .while_mul_67_cmp_z_mxwt_1(while_mul_67_cmp_z_mxwt_1),
      .while_mul_67_cmp_z_mxwt_2(while_mul_67_cmp_z_mxwt_2_pconst),
      .while_mul_67_cmp_biwt(while_mul_67_cmp_iden_1),
      .while_mul_67_cmp_bdwt(while_mul_67_cmp_bdwt),
      .while_mul_67_cmp_biwt_2(while_mul_67_cmp_iden_3),
      .while_mul_67_cmp_bdwt_2(while_mul_67_cmp_bdwt_2),
      .while_mul_67_cmp_biwt_4(while_mul_67_cmp_iden_5),
      .while_mul_67_cmp_bdwt_4(while_mul_67_cmp_bdwt_4),
      .while_mul_67_cmp_z(while_mul_67_cmp_z)
    );
  assign while_mul_67_cmp_z_mxwt_2 = while_mul_67_cmp_z_mxwt_2_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_while_mul_cmp
// ------------------------------------------------------------------


module Rotate_run_while_while_mul_cmp (
  clk, rst, run_wen, run_wten, while_while_mul_cmp_oswt_unreg, while_while_mul_cmp_bawt,
      while_while_mul_cmp_iden, while_while_mul_cmp_iswt3, while_while_mul_cmp_iden_1,
      while_while_mul_cmp_oswt_unreg_1, while_while_mul_cmp_iden_2, while_while_mul_cmp_iswt3_1,
      while_while_mul_cmp_iden_3, while_while_mul_cmp_a_run, while_while_mul_cmp_b_run,
      while_while_mul_cmp_z_mxwt, while_while_mul_cmp_z_mxwt_1, while_while_mul_cmp_iswt3_1_pff,
      while_while_mul_cmp_iswt3_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_while_mul_cmp_oswt_unreg;
  output while_while_mul_cmp_bawt;
  output while_while_mul_cmp_iden;
  input while_while_mul_cmp_iswt3;
  output while_while_mul_cmp_iden_1;
  input while_while_mul_cmp_oswt_unreg_1;
  output while_while_mul_cmp_iden_2;
  input while_while_mul_cmp_iswt3_1;
  output while_while_mul_cmp_iden_3;
  input [31:0] while_while_mul_cmp_a_run;
  input [120:0] while_while_mul_cmp_b_run;
  output [128:0] while_while_mul_cmp_z_mxwt;
  output [128:0] while_while_mul_cmp_z_mxwt_1;
  input while_while_mul_cmp_iswt3_1_pff;
  input while_while_mul_cmp_iswt3_pff;


  // Interconnect Declarations
  wire while_while_mul_cmp_bdwt;
  wire while_while_mul_cmp_bdwt_2;
  wire [128:0] while_while_mul_cmp_z;
  wire run_cgwt_5;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd121),
  .signd_b(32'sd1),
  .width_z(32'sd129),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd4),
  .n_inreg(32'sd1)) while_while_mul_cmp (
      .a(while_while_mul_cmp_a_run),
      .b(while_while_mul_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_5),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_while_mul_cmp_z)
    );
  Rotate_run_while_while_mul_cmp_mgc_mul_pipe_32_1_121_1_129_1_1_0_0_4_1_wait_ctrl
      Rotate_run_while_while_mul_cmp_mgc_mul_pipe_32_1_121_1_129_1_1_0_0_4_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_while_mul_cmp_oswt_unreg(while_while_mul_cmp_oswt_unreg),
      .while_while_mul_cmp_iswt3(while_while_mul_cmp_iswt3),
      .while_while_mul_cmp_iden_1(while_while_mul_cmp_iden_1),
      .while_while_mul_cmp_oswt_unreg_1(while_while_mul_cmp_oswt_unreg_1),
      .while_while_mul_cmp_iswt3_1(while_while_mul_cmp_iswt3_1),
      .while_while_mul_cmp_iden_3(while_while_mul_cmp_iden_3),
      .run_cgwt_5(run_cgwt_5),
      .while_while_mul_cmp_bdwt(while_while_mul_cmp_bdwt),
      .while_while_mul_cmp_bdwt_2(while_while_mul_cmp_bdwt_2),
      .while_while_mul_cmp_iswt3_1_pff(while_while_mul_cmp_iswt3_1_pff),
      .while_while_mul_cmp_iswt3_pff(while_while_mul_cmp_iswt3_pff)
    );
  Rotate_run_while_while_mul_cmp_mgc_mul_pipe_32_1_121_1_129_1_1_0_0_4_1_wait_dp
      Rotate_run_while_while_mul_cmp_mgc_mul_pipe_32_1_121_1_129_1_1_0_0_4_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_while_mul_cmp_bawt(while_while_mul_cmp_bawt),
      .while_while_mul_cmp_iden(while_while_mul_cmp_iden),
      .while_while_mul_cmp_iden_2(while_while_mul_cmp_iden_2),
      .while_while_mul_cmp_z_mxwt(while_while_mul_cmp_z_mxwt),
      .while_while_mul_cmp_z_mxwt_1(while_while_mul_cmp_z_mxwt_1),
      .while_while_mul_cmp_biwt(while_while_mul_cmp_iden_1),
      .while_while_mul_cmp_bdwt(while_while_mul_cmp_bdwt),
      .while_while_mul_cmp_biwt_2(while_while_mul_cmp_iden_3),
      .while_while_mul_cmp_bdwt_2(while_while_mul_cmp_bdwt_2),
      .while_while_mul_cmp_z(while_while_mul_cmp_z)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_77_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_77_cmp (
  clk, rst, run_wen, run_wten, while_mul_77_cmp_oswt_unreg, while_mul_77_cmp_bawt,
      while_mul_77_cmp_iden, while_mul_77_cmp_iswt1, while_mul_77_cmp_iden_1, while_mul_77_cmp_oswt_unreg_1,
      while_mul_77_cmp_iden_2, while_mul_77_cmp_iswt1_1, while_mul_77_cmp_iden_3,
      while_mul_77_cmp_a_run, while_mul_77_cmp_b_run, while_mul_77_cmp_z_mxwt, while_mul_77_cmp_z_mxwt_1,
      while_mul_77_cmp_iswt1_1_pff, while_mul_77_cmp_iswt1_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_77_cmp_oswt_unreg;
  output while_mul_77_cmp_bawt;
  output while_mul_77_cmp_iden;
  input while_mul_77_cmp_iswt1;
  output while_mul_77_cmp_iden_1;
  input while_mul_77_cmp_oswt_unreg_1;
  output while_mul_77_cmp_iden_2;
  input while_mul_77_cmp_iswt1_1;
  output while_mul_77_cmp_iden_3;
  input [33:0] while_mul_77_cmp_a_run;
  input [56:0] while_mul_77_cmp_b_run;
  output [82:0] while_mul_77_cmp_z_mxwt;
  output [90:0] while_mul_77_cmp_z_mxwt_1;
  input while_mul_77_cmp_iswt1_1_pff;
  input while_mul_77_cmp_iswt1_pff;


  // Interconnect Declarations
  wire while_mul_77_cmp_bdwt;
  wire while_mul_77_cmp_bdwt_2;
  wire [90:0] while_mul_77_cmp_z;
  wire [82:0] while_mul_77_cmp_z_mxwt_pconst;
  wire run_cgwt_4;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd34),
  .signd_a(32'sd1),
  .width_b(32'sd57),
  .signd_b(32'sd1),
  .width_z(32'sd91),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_mul_77_cmp (
      .a(while_mul_77_cmp_a_run),
      .b(while_mul_77_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_4),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_77_cmp_z)
    );
  Rotate_run_while_mul_77_cmp_mgc_mul_pipe_34_1_57_1_91_1_1_0_0_2_1_wait_ctrl Rotate_run_while_mul_77_cmp_mgc_mul_pipe_34_1_57_1_91_1_1_0_0_2_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_77_cmp_oswt_unreg(while_mul_77_cmp_oswt_unreg),
      .while_mul_77_cmp_iswt1(while_mul_77_cmp_iswt1),
      .while_mul_77_cmp_iden_1(while_mul_77_cmp_iden_1),
      .while_mul_77_cmp_oswt_unreg_1(while_mul_77_cmp_oswt_unreg_1),
      .while_mul_77_cmp_iswt1_1(while_mul_77_cmp_iswt1_1),
      .while_mul_77_cmp_iden_3(while_mul_77_cmp_iden_3),
      .run_cgwt_4(run_cgwt_4),
      .while_mul_77_cmp_bdwt(while_mul_77_cmp_bdwt),
      .while_mul_77_cmp_bdwt_2(while_mul_77_cmp_bdwt_2),
      .while_mul_77_cmp_iswt1_1_pff(while_mul_77_cmp_iswt1_1_pff),
      .while_mul_77_cmp_iswt1_pff(while_mul_77_cmp_iswt1_pff)
    );
  Rotate_run_while_mul_77_cmp_mgc_mul_pipe_34_1_57_1_91_1_1_0_0_2_1_wait_dp Rotate_run_while_mul_77_cmp_mgc_mul_pipe_34_1_57_1_91_1_1_0_0_2_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_77_cmp_bawt(while_mul_77_cmp_bawt),
      .while_mul_77_cmp_iden(while_mul_77_cmp_iden),
      .while_mul_77_cmp_iden_2(while_mul_77_cmp_iden_2),
      .while_mul_77_cmp_z_mxwt(while_mul_77_cmp_z_mxwt_pconst),
      .while_mul_77_cmp_z_mxwt_1(while_mul_77_cmp_z_mxwt_1),
      .while_mul_77_cmp_biwt(while_mul_77_cmp_iden_1),
      .while_mul_77_cmp_bdwt(while_mul_77_cmp_bdwt),
      .while_mul_77_cmp_biwt_2(while_mul_77_cmp_iden_3),
      .while_mul_77_cmp_bdwt_2(while_mul_77_cmp_bdwt_2),
      .while_mul_77_cmp_z(while_mul_77_cmp_z)
    );
  assign while_mul_77_cmp_z_mxwt = while_mul_77_cmp_z_mxwt_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_76_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_76_cmp (
  clk, rst, run_wen, run_wten, while_mul_76_cmp_oswt_unreg, while_mul_76_cmp_bawt,
      while_mul_76_cmp_iden, while_mul_76_cmp_iswt2, while_mul_76_cmp_iden_1, while_mul_76_cmp_oswt_unreg_1,
      while_mul_76_cmp_iden_2, while_mul_76_cmp_iswt2_1, while_mul_76_cmp_iden_3,
      while_mul_76_cmp_oswt_unreg_2, while_mul_76_cmp_iden_4, while_mul_76_cmp_iswt2_2,
      while_mul_76_cmp_iden_5, while_mul_76_cmp_a_run, while_mul_76_cmp_b_run, while_mul_76_cmp_z_mxwt,
      while_mul_76_cmp_z_mxwt_1, while_mul_76_cmp_z_mxwt_2, while_mul_76_cmp_iswt2_2_pff,
      while_mul_76_cmp_iswt2_1_pff, while_mul_76_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_76_cmp_oswt_unreg;
  output while_mul_76_cmp_bawt;
  output while_mul_76_cmp_iden;
  input while_mul_76_cmp_iswt2;
  output while_mul_76_cmp_iden_1;
  input while_mul_76_cmp_oswt_unreg_1;
  output while_mul_76_cmp_iden_2;
  input while_mul_76_cmp_iswt2_1;
  output while_mul_76_cmp_iden_3;
  input while_mul_76_cmp_oswt_unreg_2;
  output while_mul_76_cmp_iden_4;
  input while_mul_76_cmp_iswt2_2;
  output while_mul_76_cmp_iden_5;
  input [31:0] while_mul_76_cmp_a_run;
  input [88:0] while_mul_76_cmp_b_run;
  output [120:0] while_mul_76_cmp_z_mxwt;
  output [103:0] while_mul_76_cmp_z_mxwt_1;
  output [120:0] while_mul_76_cmp_z_mxwt_2;
  input while_mul_76_cmp_iswt2_2_pff;
  input while_mul_76_cmp_iswt2_1_pff;
  input while_mul_76_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_76_cmp_bdwt;
  wire while_mul_76_cmp_bdwt_2;
  wire while_mul_76_cmp_bdwt_4;
  wire [120:0] while_mul_76_cmp_z;
  wire [103:0] while_mul_76_cmp_z_mxwt_1_pconst;
  wire run_cgwt_3;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd89),
  .signd_b(32'sd1),
  .width_z(32'sd121),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd3),
  .n_inreg(32'sd1)) while_mul_76_cmp (
      .a(while_mul_76_cmp_a_run),
      .b(while_mul_76_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_3),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_76_cmp_z)
    );
  Rotate_run_while_mul_76_cmp_mgc_mul_pipe_32_1_89_1_121_1_1_0_0_3_1_wait_ctrl Rotate_run_while_mul_76_cmp_mgc_mul_pipe_32_1_89_1_121_1_1_0_0_3_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_76_cmp_oswt_unreg(while_mul_76_cmp_oswt_unreg),
      .while_mul_76_cmp_iswt2(while_mul_76_cmp_iswt2),
      .while_mul_76_cmp_iden_1(while_mul_76_cmp_iden_1),
      .while_mul_76_cmp_oswt_unreg_1(while_mul_76_cmp_oswt_unreg_1),
      .while_mul_76_cmp_iswt2_1(while_mul_76_cmp_iswt2_1),
      .while_mul_76_cmp_iden_3(while_mul_76_cmp_iden_3),
      .while_mul_76_cmp_oswt_unreg_2(while_mul_76_cmp_oswt_unreg_2),
      .while_mul_76_cmp_iswt2_2(while_mul_76_cmp_iswt2_2),
      .while_mul_76_cmp_iden_5(while_mul_76_cmp_iden_5),
      .run_cgwt_3(run_cgwt_3),
      .while_mul_76_cmp_bdwt(while_mul_76_cmp_bdwt),
      .while_mul_76_cmp_bdwt_2(while_mul_76_cmp_bdwt_2),
      .while_mul_76_cmp_bdwt_4(while_mul_76_cmp_bdwt_4),
      .while_mul_76_cmp_iswt2_2_pff(while_mul_76_cmp_iswt2_2_pff),
      .while_mul_76_cmp_iswt2_1_pff(while_mul_76_cmp_iswt2_1_pff),
      .while_mul_76_cmp_iswt2_pff(while_mul_76_cmp_iswt2_pff)
    );
  Rotate_run_while_mul_76_cmp_mgc_mul_pipe_32_1_89_1_121_1_1_0_0_3_1_wait_dp Rotate_run_while_mul_76_cmp_mgc_mul_pipe_32_1_89_1_121_1_1_0_0_3_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_76_cmp_bawt(while_mul_76_cmp_bawt),
      .while_mul_76_cmp_iden(while_mul_76_cmp_iden),
      .while_mul_76_cmp_iden_2(while_mul_76_cmp_iden_2),
      .while_mul_76_cmp_iden_4(while_mul_76_cmp_iden_4),
      .while_mul_76_cmp_z_mxwt(while_mul_76_cmp_z_mxwt),
      .while_mul_76_cmp_z_mxwt_1(while_mul_76_cmp_z_mxwt_1_pconst),
      .while_mul_76_cmp_z_mxwt_2(while_mul_76_cmp_z_mxwt_2),
      .while_mul_76_cmp_biwt(while_mul_76_cmp_iden_1),
      .while_mul_76_cmp_bdwt(while_mul_76_cmp_bdwt),
      .while_mul_76_cmp_biwt_2(while_mul_76_cmp_iden_3),
      .while_mul_76_cmp_bdwt_2(while_mul_76_cmp_bdwt_2),
      .while_mul_76_cmp_biwt_4(while_mul_76_cmp_iden_5),
      .while_mul_76_cmp_bdwt_4(while_mul_76_cmp_bdwt_4),
      .while_mul_76_cmp_z(while_mul_76_cmp_z)
    );
  assign while_mul_76_cmp_z_mxwt_1 = while_mul_76_cmp_z_mxwt_1_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_79_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_79_cmp (
  clk, rst, run_wen, run_wten, while_mul_79_cmp_oswt_unreg, while_mul_79_cmp_bawt,
      while_mul_79_cmp_iden, while_mul_79_cmp_iswt2, while_mul_79_cmp_iden_1, while_mul_79_cmp_oswt_unreg_1,
      while_mul_79_cmp_iden_2, while_mul_79_cmp_iswt2_1, while_mul_79_cmp_iden_3,
      while_mul_79_cmp_oswt_unreg_2, while_mul_79_cmp_iden_4, while_mul_79_cmp_iswt2_2,
      while_mul_79_cmp_iden_5, while_mul_79_cmp_a_run, while_mul_79_cmp_b_run, while_mul_79_cmp_z_mxwt,
      while_mul_79_cmp_z_mxwt_1, while_mul_79_cmp_z_mxwt_2, while_mul_79_cmp_iswt2_2_pff,
      while_mul_79_cmp_iswt2_1_pff, while_mul_79_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_79_cmp_oswt_unreg;
  output while_mul_79_cmp_bawt;
  output while_mul_79_cmp_iden;
  input while_mul_79_cmp_iswt2;
  output while_mul_79_cmp_iden_1;
  input while_mul_79_cmp_oswt_unreg_1;
  output while_mul_79_cmp_iden_2;
  input while_mul_79_cmp_iswt2_1;
  output while_mul_79_cmp_iden_3;
  input while_mul_79_cmp_oswt_unreg_2;
  output while_mul_79_cmp_iden_4;
  input while_mul_79_cmp_iswt2_2;
  output while_mul_79_cmp_iden_5;
  input [31:0] while_mul_79_cmp_a_run;
  input [83:0] while_mul_79_cmp_b_run;
  output [98:0] while_mul_79_cmp_z_mxwt;
  output [89:0] while_mul_79_cmp_z_mxwt_1;
  output [89:0] while_mul_79_cmp_z_mxwt_2;
  input while_mul_79_cmp_iswt2_2_pff;
  input while_mul_79_cmp_iswt2_1_pff;
  input while_mul_79_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_79_cmp_bdwt;
  wire while_mul_79_cmp_bdwt_2;
  wire while_mul_79_cmp_bdwt_4;
  wire [98:0] while_mul_79_cmp_z;
  wire [89:0] while_mul_79_cmp_z_mxwt_1_pconst;
  wire [89:0] while_mul_79_cmp_z_mxwt_2_pconst;
  wire run_cgwt_2;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd84),
  .signd_b(32'sd1),
  .width_z(32'sd99),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd3),
  .n_inreg(32'sd1)) while_mul_79_cmp (
      .a(while_mul_79_cmp_a_run),
      .b(while_mul_79_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_2),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_79_cmp_z)
    );
  Rotate_run_while_mul_79_cmp_mgc_mul_pipe_32_1_84_1_99_1_1_0_0_3_1_wait_ctrl Rotate_run_while_mul_79_cmp_mgc_mul_pipe_32_1_84_1_99_1_1_0_0_3_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_79_cmp_oswt_unreg(while_mul_79_cmp_oswt_unreg),
      .while_mul_79_cmp_iswt2(while_mul_79_cmp_iswt2),
      .while_mul_79_cmp_iden_1(while_mul_79_cmp_iden_1),
      .while_mul_79_cmp_oswt_unreg_1(while_mul_79_cmp_oswt_unreg_1),
      .while_mul_79_cmp_iswt2_1(while_mul_79_cmp_iswt2_1),
      .while_mul_79_cmp_iden_3(while_mul_79_cmp_iden_3),
      .while_mul_79_cmp_oswt_unreg_2(while_mul_79_cmp_oswt_unreg_2),
      .while_mul_79_cmp_iswt2_2(while_mul_79_cmp_iswt2_2),
      .while_mul_79_cmp_iden_5(while_mul_79_cmp_iden_5),
      .run_cgwt_2(run_cgwt_2),
      .while_mul_79_cmp_bdwt(while_mul_79_cmp_bdwt),
      .while_mul_79_cmp_bdwt_2(while_mul_79_cmp_bdwt_2),
      .while_mul_79_cmp_bdwt_4(while_mul_79_cmp_bdwt_4),
      .while_mul_79_cmp_iswt2_2_pff(while_mul_79_cmp_iswt2_2_pff),
      .while_mul_79_cmp_iswt2_1_pff(while_mul_79_cmp_iswt2_1_pff),
      .while_mul_79_cmp_iswt2_pff(while_mul_79_cmp_iswt2_pff)
    );
  Rotate_run_while_mul_79_cmp_mgc_mul_pipe_32_1_84_1_99_1_1_0_0_3_1_wait_dp Rotate_run_while_mul_79_cmp_mgc_mul_pipe_32_1_84_1_99_1_1_0_0_3_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_79_cmp_bawt(while_mul_79_cmp_bawt),
      .while_mul_79_cmp_iden(while_mul_79_cmp_iden),
      .while_mul_79_cmp_iden_2(while_mul_79_cmp_iden_2),
      .while_mul_79_cmp_iden_4(while_mul_79_cmp_iden_4),
      .while_mul_79_cmp_z_mxwt(while_mul_79_cmp_z_mxwt),
      .while_mul_79_cmp_z_mxwt_1(while_mul_79_cmp_z_mxwt_1_pconst),
      .while_mul_79_cmp_z_mxwt_2(while_mul_79_cmp_z_mxwt_2_pconst),
      .while_mul_79_cmp_biwt(while_mul_79_cmp_iden_1),
      .while_mul_79_cmp_bdwt(while_mul_79_cmp_bdwt),
      .while_mul_79_cmp_biwt_2(while_mul_79_cmp_iden_3),
      .while_mul_79_cmp_bdwt_2(while_mul_79_cmp_bdwt_2),
      .while_mul_79_cmp_biwt_4(while_mul_79_cmp_iden_5),
      .while_mul_79_cmp_bdwt_4(while_mul_79_cmp_bdwt_4),
      .while_mul_79_cmp_z(while_mul_79_cmp_z)
    );
  assign while_mul_79_cmp_z_mxwt_1 = while_mul_79_cmp_z_mxwt_1_pconst;
  assign while_mul_79_cmp_z_mxwt_2 = while_mul_79_cmp_z_mxwt_2_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_111_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_111_cmp (
  clk, rst, run_wen, run_wten, while_mul_111_cmp_oswt_unreg, while_mul_111_cmp_bawt,
      while_mul_111_cmp_iden, while_mul_111_cmp_iswt2, while_mul_111_cmp_iden_1,
      while_mul_111_cmp_oswt_unreg_1, while_mul_111_cmp_iden_2, while_mul_111_cmp_iswt2_1,
      while_mul_111_cmp_iden_3, while_mul_111_cmp_oswt_unreg_2, while_mul_111_cmp_iden_4,
      while_mul_111_cmp_iswt2_2, while_mul_111_cmp_iden_5, while_mul_111_cmp_a_run,
      while_mul_111_cmp_b_run, while_mul_111_cmp_z_mxwt, while_mul_111_cmp_z_mxwt_1,
      while_mul_111_cmp_z_mxwt_2, while_mul_111_cmp_iswt2_2_pff, while_mul_111_cmp_iswt2_1_pff,
      while_mul_111_cmp_iswt2_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_111_cmp_oswt_unreg;
  output while_mul_111_cmp_bawt;
  output while_mul_111_cmp_iden;
  input while_mul_111_cmp_iswt2;
  output while_mul_111_cmp_iden_1;
  input while_mul_111_cmp_oswt_unreg_1;
  output while_mul_111_cmp_iden_2;
  input while_mul_111_cmp_iswt2_1;
  output while_mul_111_cmp_iden_3;
  input while_mul_111_cmp_oswt_unreg_2;
  output while_mul_111_cmp_iden_4;
  input while_mul_111_cmp_iswt2_2;
  output while_mul_111_cmp_iden_5;
  input [31:0] while_mul_111_cmp_a_run;
  input [89:0] while_mul_111_cmp_b_run;
  output [121:0] while_mul_111_cmp_z_mxwt;
  output [121:0] while_mul_111_cmp_z_mxwt_1;
  output [121:0] while_mul_111_cmp_z_mxwt_2;
  input while_mul_111_cmp_iswt2_2_pff;
  input while_mul_111_cmp_iswt2_1_pff;
  input while_mul_111_cmp_iswt2_pff;


  // Interconnect Declarations
  wire while_mul_111_cmp_bdwt;
  wire while_mul_111_cmp_bdwt_2;
  wire while_mul_111_cmp_bdwt_4;
  wire [121:0] while_mul_111_cmp_z;
  wire run_cgwt_1;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd90),
  .signd_b(32'sd1),
  .width_z(32'sd122),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd3),
  .n_inreg(32'sd1)) while_mul_111_cmp (
      .a(while_mul_111_cmp_a_run),
      .b(while_mul_111_cmp_b_run),
      .clk(clk),
      .en(run_cgwt_1),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_111_cmp_z)
    );
  Rotate_run_while_mul_111_cmp_mgc_mul_pipe_32_1_90_1_122_1_1_0_0_3_1_wait_ctrl Rotate_run_while_mul_111_cmp_mgc_mul_pipe_32_1_90_1_122_1_1_0_0_3_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_111_cmp_oswt_unreg(while_mul_111_cmp_oswt_unreg),
      .while_mul_111_cmp_iswt2(while_mul_111_cmp_iswt2),
      .while_mul_111_cmp_iden_1(while_mul_111_cmp_iden_1),
      .while_mul_111_cmp_oswt_unreg_1(while_mul_111_cmp_oswt_unreg_1),
      .while_mul_111_cmp_iswt2_1(while_mul_111_cmp_iswt2_1),
      .while_mul_111_cmp_iden_3(while_mul_111_cmp_iden_3),
      .while_mul_111_cmp_oswt_unreg_2(while_mul_111_cmp_oswt_unreg_2),
      .while_mul_111_cmp_iswt2_2(while_mul_111_cmp_iswt2_2),
      .while_mul_111_cmp_iden_5(while_mul_111_cmp_iden_5),
      .run_cgwt_1(run_cgwt_1),
      .while_mul_111_cmp_bdwt(while_mul_111_cmp_bdwt),
      .while_mul_111_cmp_bdwt_2(while_mul_111_cmp_bdwt_2),
      .while_mul_111_cmp_bdwt_4(while_mul_111_cmp_bdwt_4),
      .while_mul_111_cmp_iswt2_2_pff(while_mul_111_cmp_iswt2_2_pff),
      .while_mul_111_cmp_iswt2_1_pff(while_mul_111_cmp_iswt2_1_pff),
      .while_mul_111_cmp_iswt2_pff(while_mul_111_cmp_iswt2_pff)
    );
  Rotate_run_while_mul_111_cmp_mgc_mul_pipe_32_1_90_1_122_1_1_0_0_3_1_wait_dp Rotate_run_while_mul_111_cmp_mgc_mul_pipe_32_1_90_1_122_1_1_0_0_3_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_111_cmp_bawt(while_mul_111_cmp_bawt),
      .while_mul_111_cmp_iden(while_mul_111_cmp_iden),
      .while_mul_111_cmp_iden_2(while_mul_111_cmp_iden_2),
      .while_mul_111_cmp_iden_4(while_mul_111_cmp_iden_4),
      .while_mul_111_cmp_z_mxwt(while_mul_111_cmp_z_mxwt),
      .while_mul_111_cmp_z_mxwt_1(while_mul_111_cmp_z_mxwt_1),
      .while_mul_111_cmp_z_mxwt_2(while_mul_111_cmp_z_mxwt_2),
      .while_mul_111_cmp_biwt(while_mul_111_cmp_iden_1),
      .while_mul_111_cmp_bdwt(while_mul_111_cmp_bdwt),
      .while_mul_111_cmp_biwt_2(while_mul_111_cmp_iden_3),
      .while_mul_111_cmp_bdwt_2(while_mul_111_cmp_bdwt_2),
      .while_mul_111_cmp_biwt_4(while_mul_111_cmp_iden_5),
      .while_mul_111_cmp_bdwt_4(while_mul_111_cmp_bdwt_4),
      .while_mul_111_cmp_z(while_mul_111_cmp_z)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_while_mul_110_cmp
// ------------------------------------------------------------------


module Rotate_run_while_mul_110_cmp (
  clk, rst, run_wen, run_wten, while_mul_110_cmp_oswt_unreg, while_mul_110_cmp_bawt,
      while_mul_110_cmp_iden, while_mul_110_cmp_iswt3, while_mul_110_cmp_iden_1,
      while_mul_110_cmp_oswt_unreg_1, while_mul_110_cmp_iden_2, while_mul_110_cmp_iswt3_1,
      while_mul_110_cmp_iden_3, while_mul_110_cmp_oswt_unreg_2, while_mul_110_cmp_iden_4,
      while_mul_110_cmp_iswt3_2, while_mul_110_cmp_iden_5, while_mul_110_cmp_a_run,
      while_mul_110_cmp_b_run, while_mul_110_cmp_z_mxwt, while_mul_110_cmp_z_mxwt_1,
      while_mul_110_cmp_z_mxwt_2, while_mul_110_cmp_iswt3_2_pff, while_mul_110_cmp_iswt3_1_pff,
      while_mul_110_cmp_iswt3_pff
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input while_mul_110_cmp_oswt_unreg;
  output while_mul_110_cmp_bawt;
  output while_mul_110_cmp_iden;
  input while_mul_110_cmp_iswt3;
  output while_mul_110_cmp_iden_1;
  input while_mul_110_cmp_oswt_unreg_1;
  output while_mul_110_cmp_iden_2;
  input while_mul_110_cmp_iswt3_1;
  output while_mul_110_cmp_iden_3;
  input while_mul_110_cmp_oswt_unreg_2;
  output while_mul_110_cmp_iden_4;
  input while_mul_110_cmp_iswt3_2;
  output while_mul_110_cmp_iden_5;
  input [31:0] while_mul_110_cmp_a_run;
  input [121:0] while_mul_110_cmp_b_run;
  output [129:0] while_mul_110_cmp_z_mxwt;
  output [105:0] while_mul_110_cmp_z_mxwt_1;
  output [100:0] while_mul_110_cmp_z_mxwt_2;
  input while_mul_110_cmp_iswt3_2_pff;
  input while_mul_110_cmp_iswt3_1_pff;
  input while_mul_110_cmp_iswt3_pff;


  // Interconnect Declarations
  wire while_mul_110_cmp_bdwt;
  wire while_mul_110_cmp_bdwt_2;
  wire while_mul_110_cmp_bdwt_4;
  wire [129:0] while_mul_110_cmp_z;
  wire [105:0] while_mul_110_cmp_z_mxwt_1_pconst;
  wire [100:0] while_mul_110_cmp_z_mxwt_2_pconst;
  wire run_cgwt;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd122),
  .signd_b(32'sd1),
  .width_z(32'sd130),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd4),
  .n_inreg(32'sd1)) while_mul_110_cmp (
      .a(while_mul_110_cmp_a_run),
      .b(while_mul_110_cmp_b_run),
      .clk(clk),
      .en(run_cgwt),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_110_cmp_z)
    );
  Rotate_run_while_mul_110_cmp_mgc_mul_pipe_32_1_122_1_130_1_1_0_0_4_1_wait_ctrl
      Rotate_run_while_mul_110_cmp_mgc_mul_pipe_32_1_122_1_130_1_1_0_0_4_1_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_110_cmp_oswt_unreg(while_mul_110_cmp_oswt_unreg),
      .while_mul_110_cmp_iswt3(while_mul_110_cmp_iswt3),
      .while_mul_110_cmp_iden_1(while_mul_110_cmp_iden_1),
      .while_mul_110_cmp_oswt_unreg_1(while_mul_110_cmp_oswt_unreg_1),
      .while_mul_110_cmp_iswt3_1(while_mul_110_cmp_iswt3_1),
      .while_mul_110_cmp_iden_3(while_mul_110_cmp_iden_3),
      .while_mul_110_cmp_oswt_unreg_2(while_mul_110_cmp_oswt_unreg_2),
      .while_mul_110_cmp_iswt3_2(while_mul_110_cmp_iswt3_2),
      .while_mul_110_cmp_iden_5(while_mul_110_cmp_iden_5),
      .run_cgwt(run_cgwt),
      .while_mul_110_cmp_bdwt(while_mul_110_cmp_bdwt),
      .while_mul_110_cmp_bdwt_2(while_mul_110_cmp_bdwt_2),
      .while_mul_110_cmp_bdwt_4(while_mul_110_cmp_bdwt_4),
      .while_mul_110_cmp_iswt3_2_pff(while_mul_110_cmp_iswt3_2_pff),
      .while_mul_110_cmp_iswt3_1_pff(while_mul_110_cmp_iswt3_1_pff),
      .while_mul_110_cmp_iswt3_pff(while_mul_110_cmp_iswt3_pff)
    );
  Rotate_run_while_mul_110_cmp_mgc_mul_pipe_32_1_122_1_130_1_1_0_0_4_1_wait_dp Rotate_run_while_mul_110_cmp_mgc_mul_pipe_32_1_122_1_130_1_1_0_0_4_1_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .while_mul_110_cmp_bawt(while_mul_110_cmp_bawt),
      .while_mul_110_cmp_iden(while_mul_110_cmp_iden),
      .while_mul_110_cmp_iden_2(while_mul_110_cmp_iden_2),
      .while_mul_110_cmp_iden_4(while_mul_110_cmp_iden_4),
      .while_mul_110_cmp_z_mxwt(while_mul_110_cmp_z_mxwt),
      .while_mul_110_cmp_z_mxwt_1(while_mul_110_cmp_z_mxwt_1_pconst),
      .while_mul_110_cmp_z_mxwt_2(while_mul_110_cmp_z_mxwt_2_pconst),
      .while_mul_110_cmp_biwt(while_mul_110_cmp_iden_1),
      .while_mul_110_cmp_bdwt(while_mul_110_cmp_bdwt),
      .while_mul_110_cmp_biwt_2(while_mul_110_cmp_iden_3),
      .while_mul_110_cmp_bdwt_2(while_mul_110_cmp_bdwt_2),
      .while_mul_110_cmp_biwt_4(while_mul_110_cmp_iden_5),
      .while_mul_110_cmp_bdwt_4(while_mul_110_cmp_bdwt_4),
      .while_mul_110_cmp_z(while_mul_110_cmp_z)
    );
  assign while_mul_110_cmp_z_mxwt_1 = while_mul_110_cmp_z_mxwt_1_pconst;
  assign while_mul_110_cmp_z_mxwt_2 = while_mul_110_cmp_z_mxwt_2_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_out_Push_mioi
// ------------------------------------------------------------------


module Rotate_run_rotate_out_Push_mioi (
  clk, rst, rotate_out_val, rotate_out_rdy, rotate_out_msg, run_wen, rotate_out_Push_mioi_oswt_unreg,
      rotate_out_Push_mioi_bawt, rotate_out_Push_mioi_iden, rotate_out_Push_mioi_iswt0,
      rotate_out_Push_mioi_wen_comp, rotate_out_Push_mioi_idat, rotate_out_Push_mioi_irdy,
      rotate_out_Push_mioi_irdy_oreg
);
  input clk;
  input rst;
  output rotate_out_val;
  input rotate_out_rdy;
  output [511:0] rotate_out_msg;
  input run_wen;
  input rotate_out_Push_mioi_oswt_unreg;
  output rotate_out_Push_mioi_bawt;
  output rotate_out_Push_mioi_iden;
  input rotate_out_Push_mioi_iswt0;
  output rotate_out_Push_mioi_wen_comp;
  input [511:0] rotate_out_Push_mioi_idat;
  output rotate_out_Push_mioi_irdy;
  input rotate_out_Push_mioi_irdy_oreg;


  // Interconnect Declarations
  wire rotate_out_Push_mioi_biwt;
  wire rotate_out_Push_mioi_bdwt;
  wire rotate_out_Push_mioi_bcwt;
  wire rotate_out_Push_mioi_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  wire [511:0] nl_rotate_out_Push_mioi_idat;
  assign nl_rotate_out_Push_mioi_idat = {(rotate_out_Push_mioi_idat[511:32]) , 32'b00000000000000000000000000000000};
  ccs_out_buf_wait_v5 #(.rscid(32'sd22),
  .width(32'sd512),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) rotate_out_Push_mioi (
      .vld(rotate_out_val),
      .rdy(rotate_out_rdy),
      .dat(rotate_out_msg),
      .idat(nl_rotate_out_Push_mioi_idat[511:0]),
      .irdy(rotate_out_Push_mioi_irdy),
      .ivld(rotate_out_Push_mioi_ivld_run_sct),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_ctrl Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .rotate_out_Push_mioi_oswt_unreg(rotate_out_Push_mioi_oswt_unreg),
      .rotate_out_Push_mioi_iswt0(rotate_out_Push_mioi_iswt0),
      .rotate_out_Push_mioi_irdy_oreg(rotate_out_Push_mioi_irdy_oreg),
      .rotate_out_Push_mioi_biwt(rotate_out_Push_mioi_biwt),
      .rotate_out_Push_mioi_bdwt(rotate_out_Push_mioi_bdwt),
      .rotate_out_Push_mioi_bcwt(rotate_out_Push_mioi_bcwt),
      .rotate_out_Push_mioi_ivld_run_sct(rotate_out_Push_mioi_ivld_run_sct)
    );
  Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_dp Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .rotate_out_Push_mioi_oswt_unreg(rotate_out_Push_mioi_oswt_unreg),
      .rotate_out_Push_mioi_bawt(rotate_out_Push_mioi_bawt),
      .rotate_out_Push_mioi_iden(rotate_out_Push_mioi_iden),
      .rotate_out_Push_mioi_wen_comp(rotate_out_Push_mioi_wen_comp),
      .rotate_out_Push_mioi_biwt(rotate_out_Push_mioi_biwt),
      .rotate_out_Push_mioi_bdwt(rotate_out_Push_mioi_bdwt),
      .rotate_out_Push_mioi_bcwt(rotate_out_Push_mioi_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_in_Pop_mioi
// ------------------------------------------------------------------


module Rotate_run_rotate_in_Pop_mioi (
  clk, rst, rotate_in_val, rotate_in_rdy, rotate_in_msg, run_wen, run_wten, rotate_in_Pop_mioi_oswt_unreg,
      rotate_in_Pop_mioi_bawt, rotate_in_Pop_mioi_iden, rotate_in_Pop_mioi_iswt0,
      rotate_in_Pop_mioi_iden_1, rotate_in_Pop_mioi_wen_comp, rotate_in_Pop_mioi_idat_mxwt,
      rotate_in_Pop_mioi_ivld, rotate_in_Pop_mioi_ivld_oreg
);
  input clk;
  input rst;
  input rotate_in_val;
  output rotate_in_rdy;
  input [511:0] rotate_in_msg;
  input run_wen;
  input run_wten;
  input rotate_in_Pop_mioi_oswt_unreg;
  output rotate_in_Pop_mioi_bawt;
  output rotate_in_Pop_mioi_iden;
  input rotate_in_Pop_mioi_iswt0;
  output rotate_in_Pop_mioi_iden_1;
  output rotate_in_Pop_mioi_wen_comp;
  output [479:0] rotate_in_Pop_mioi_idat_mxwt;
  output rotate_in_Pop_mioi_ivld;
  input rotate_in_Pop_mioi_ivld_oreg;


  // Interconnect Declarations
  wire rotate_in_Pop_mioi_biwt;
  wire rotate_in_Pop_mioi_bdwt;
  wire [511:0] rotate_in_Pop_mioi_idat;
  wire [479:0] rotate_in_Pop_mioi_idat_mxwt_pconst;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd21),
  .width(32'sd512),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) rotate_in_Pop_mioi (
      .vld(rotate_in_val),
      .rdy(rotate_in_rdy),
      .dat(rotate_in_msg),
      .idat(rotate_in_Pop_mioi_idat),
      .irdy(rotate_in_Pop_mioi_iden_1),
      .ivld(rotate_in_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_ctrl Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_in_Pop_mioi_oswt_unreg(rotate_in_Pop_mioi_oswt_unreg),
      .rotate_in_Pop_mioi_iswt0(rotate_in_Pop_mioi_iswt0),
      .rotate_in_Pop_mioi_iden_1(rotate_in_Pop_mioi_iden_1),
      .rotate_in_Pop_mioi_ivld_oreg(rotate_in_Pop_mioi_ivld_oreg),
      .rotate_in_Pop_mioi_biwt(rotate_in_Pop_mioi_biwt),
      .rotate_in_Pop_mioi_bdwt(rotate_in_Pop_mioi_bdwt)
    );
  Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_dp Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .rotate_in_Pop_mioi_oswt_unreg(rotate_in_Pop_mioi_oswt_unreg),
      .rotate_in_Pop_mioi_bawt(rotate_in_Pop_mioi_bawt),
      .rotate_in_Pop_mioi_iden(rotate_in_Pop_mioi_iden),
      .rotate_in_Pop_mioi_wen_comp(rotate_in_Pop_mioi_wen_comp),
      .rotate_in_Pop_mioi_idat_mxwt(rotate_in_Pop_mioi_idat_mxwt_pconst),
      .rotate_in_Pop_mioi_biwt(rotate_in_Pop_mioi_biwt),
      .rotate_in_Pop_mioi_bdwt(rotate_in_Pop_mioi_bdwt),
      .rotate_in_Pop_mioi_idat(rotate_in_Pop_mioi_idat)
    );
  assign rotate_in_Pop_mioi_idat_mxwt = rotate_in_Pop_mioi_idat_mxwt_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi (
  clk, rst, sync3_val, sync3_rdy, sync3_msg, sync3_Push_mioi_oswt, sync3_Push_mioi_wen_comp,
      sync3_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  input sync3_Push_mioi_oswt;
  output sync3_Push_mioi_wen_comp;
  input sync3_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire sync3_Push_mioi_biwt;
  wire sync3_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd31),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync3_Push_mioi (
      .vld(sync3_val),
      .rdy(sync3_rdy),
      .dat(sync3_msg),
      .idat(1'b1),
      .irdy(sync3_Push_mioi_irdy),
      .ivld(sync3_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl_inst
      (
      .sync3_Push_mioi_iswt0(sync3_Push_mioi_oswt_pff),
      .sync3_Push_mioi_irdy_oreg(sync3_Push_mioi_irdy),
      .sync3_Push_mioi_biwt(sync3_Push_mioi_biwt)
    );
  assign sync3_Push_mioi_wen_comp = (~ sync3_Push_mioi_oswt_pff) | sync3_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi (
  clk, rst, dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, dma_write_chnl_Push_mioi_oswt,
      dma_write_chnl_Push_mioi_wen_comp, dma_write_chnl_Push_mioi_idat, dma_write_chnl_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input dma_write_chnl_Push_mioi_oswt;
  output dma_write_chnl_Push_mioi_wen_comp;
  input [63:0] dma_write_chnl_Push_mioi_idat;
  input dma_write_chnl_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire dma_write_chnl_Push_mioi_biwt;
  wire dma_write_chnl_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_buf_wait_v5 #(.rscid(32'sd30),
  .width(32'sd64),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_write_chnl_Push_mioi (
      .vld(dma_write_chnl_val),
      .rdy(dma_write_chnl_rdy),
      .dat(dma_write_chnl_msg),
      .idat(dma_write_chnl_Push_mioi_idat),
      .irdy(dma_write_chnl_Push_mioi_irdy),
      .ivld(dma_write_chnl_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl_inst
      (
      .dma_write_chnl_Push_mioi_iswt0(dma_write_chnl_Push_mioi_oswt_pff),
      .dma_write_chnl_Push_mioi_irdy_oreg(dma_write_chnl_Push_mioi_irdy),
      .dma_write_chnl_Push_mioi_biwt(dma_write_chnl_Push_mioi_biwt)
    );
  assign dma_write_chnl_Push_mioi_wen_comp = (~ dma_write_chnl_Push_mioi_oswt_pff)
      | dma_write_chnl_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi (
  clk, rst, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg, dma_write_ctrl_Push_mioi_oswt,
      dma_write_ctrl_Push_mioi_wen_comp, dma_write_ctrl_Push_mioi_idat, dma_write_ctrl_Push_mioi_oswt_pff
);
  input clk;
  input rst;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  input dma_write_ctrl_Push_mioi_oswt;
  output dma_write_ctrl_Push_mioi_wen_comp;
  input [66:0] dma_write_ctrl_Push_mioi_idat;
  input dma_write_ctrl_Push_mioi_oswt_pff;


  // Interconnect Declarations
  wire dma_write_ctrl_Push_mioi_biwt;
  wire dma_write_ctrl_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_dma_write_ctrl_Push_mioi_idat;
  assign nl_dma_write_ctrl_Push_mioi_idat = {3'b011 , (dma_write_ctrl_Push_mioi_idat[63:36])
      , 4'b0000 , (dma_write_ctrl_Push_mioi_idat[31:0])};
  ccs_out_buf_wait_v5 #(.rscid(32'sd29),
  .width(32'sd67),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) dma_write_ctrl_Push_mioi (
      .vld(dma_write_ctrl_val),
      .rdy(dma_write_ctrl_rdy),
      .dat(dma_write_ctrl_msg),
      .idat(nl_dma_write_ctrl_Push_mioi_idat[66:0]),
      .irdy(dma_write_ctrl_Push_mioi_irdy),
      .ivld(dma_write_ctrl_Push_mioi_oswt),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl_inst
      (
      .dma_write_ctrl_Push_mioi_iswt0(dma_write_ctrl_Push_mioi_oswt_pff),
      .dma_write_ctrl_Push_mioi_irdy_oreg(dma_write_ctrl_Push_mioi_irdy),
      .dma_write_ctrl_Push_mioi_biwt(dma_write_ctrl_Push_mioi_biwt)
    );
  assign dma_write_ctrl_Push_mioi_wen_comp = (~ dma_write_ctrl_Push_mioi_oswt_pff)
      | dma_write_ctrl_Push_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_rotate_out_Pop_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_rotate_out_Pop_mioi (
  clk, rst, rotate_out_val, rotate_out_rdy, rotate_out_msg, rotate_out_Pop_mioi_oswt,
      rotate_out_Pop_mioi_wen_comp, rotate_out_Pop_mioi_idat_mxwt, rotate_out_Pop_mioi_oswt_pff
);
  input clk;
  input rst;
  input rotate_out_val;
  output rotate_out_rdy;
  input [511:0] rotate_out_msg;
  input rotate_out_Pop_mioi_oswt;
  output rotate_out_Pop_mioi_wen_comp;
  output [511:0] rotate_out_Pop_mioi_idat_mxwt;
  input rotate_out_Pop_mioi_oswt_pff;


  // Interconnect Declarations
  wire rotate_out_Pop_mioi_biwt;
  wire [511:0] rotate_out_Pop_mioi_idat;
  wire rotate_out_Pop_mioi_ivld;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd28),
  .width(32'sd512),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) rotate_out_Pop_mioi (
      .vld(rotate_out_val),
      .rdy(rotate_out_rdy),
      .dat(rotate_out_msg),
      .idat(rotate_out_Pop_mioi_idat),
      .irdy(rotate_out_Pop_mioi_oswt),
      .ivld(rotate_out_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_ctrl OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_ctrl_inst
      (
      .rotate_out_Pop_mioi_iswt0(rotate_out_Pop_mioi_oswt_pff),
      .rotate_out_Pop_mioi_ivld_oreg(rotate_out_Pop_mioi_ivld),
      .rotate_out_Pop_mioi_biwt(rotate_out_Pop_mioi_biwt)
    );
  assign rotate_out_Pop_mioi_idat_mxwt = rotate_out_Pop_mioi_idat;
  assign rotate_out_Pop_mioi_wen_comp = (~ rotate_out_Pop_mioi_oswt_pff) | rotate_out_Pop_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi (
  clk, rst, sync2_val, sync2_rdy, sync2_msg, sync2_Pop_mioi_oswt, sync2_Pop_mioi_wen_comp,
      sync2_Pop_mioi_oswt_pff
);
  input clk;
  input rst;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  input sync2_Pop_mioi_oswt;
  output sync2_Pop_mioi_wen_comp;
  input sync2_Pop_mioi_oswt_pff;


  // Interconnect Declarations
  wire sync2_Pop_mioi_biwt;
  wire sync2_Pop_mioi_idat;
  wire sync2_Pop_mioi_ivld;


  // Interconnect Declarations for Component Instantiations 
  ccs_ctrl_in_buf_wait_v4 #(.rscid(32'sd27),
  .width(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd0)) sync2_Pop_mioi (
      .vld(sync2_val),
      .rdy(sync2_rdy),
      .dat(sync2_msg),
      .idat(sync2_Pop_mioi_idat),
      .irdy(sync2_Pop_mioi_oswt),
      .ivld(sync2_Pop_mioi_ivld),
      .clk(clk),
      .en(1'b0),
      .arst(rst),
      .srst(1'b1)
    );
  OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl_inst
      (
      .sync2_Pop_mioi_iswt0(sync2_Pop_mioi_oswt_pff),
      .sync2_Pop_mioi_ivld_oreg(sync2_Pop_mioi_ivld),
      .sync2_Pop_mioi_biwt(sync2_Pop_mioi_biwt)
    );
  assign sync2_Pop_mioi_wen_comp = (~ sync2_Pop_mioi_oswt_pff) | sync2_Pop_mioi_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run
// ------------------------------------------------------------------


module Control_run (
  clk, rst, acc_start, acc_done, sync1_val, sync1_rdy, sync1_msg, sync2_val, sync2_rdy,
      sync2_msg, sync3_val, sync3_rdy, sync3_msg
);
  input clk;
  input rst;
  input acc_start;
  output acc_done;
  reg acc_done;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;


  // Interconnect Declarations
  reg run_wen;
  wire run_wten;
  wire sync1_Push_mioi_bawt;
  wire sync1_Push_mioi_wen_comp;
  wire sync1_Push_mioi_irdy;
  wire sync1_Push_mioi_irdy_oreg;
  wire sync2_Push_mioi_bawt;
  wire sync2_Push_mioi_wen_comp;
  wire sync2_Push_mioi_irdy;
  wire sync2_Push_mioi_irdy_oreg;
  wire sync3_Pop_mioi_bawt;
  wire sync3_Pop_mioi_wen_comp;
  wire sync3_Pop_mioi_ivld;
  wire sync3_Pop_mioi_ivld_oreg;
  wire [1:0] while_for_2_mux_3_tmp;
  wire or_tmp_1;
  wire and_tmp;
  wire and_tmp_4;
  wire and_dcpl_2;
  wire and_dcpl_9;
  wire and_dcpl_11;
  wire and_dcpl_12;
  wire and_dcpl_17;
  wire nor_tmp;
  wire nor_tmp_1;
  wire and_tmp_12;
  wire mux_tmp_16;
  wire or_tmp_47;
  wire or_dcpl_12;
  wire and_dcpl_29;
  wire and_tmp_14;
  wire and_dcpl_30;
  wire or_tmp_60;
  wire or_tmp_66;
  wire mux_tmp_31;
  wire or_dcpl_13;
  wire and_tmp_22;
  wire or_dcpl_14;
  wire and_dcpl_37;
  wire while_while_or_3_cse_1;
  wire while_while_or_1_cse_1;
  wire while_while_or_cse_1;
  wire lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0;
  wire [1:0] lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0;
  reg exitL_exit_while_for_2_sva;
  reg while_for_2_equal_tmp_2_1;
  reg while_for_2_or_tmp_1;
  wire while_for_2_and_ssc_1;
  wire while_for_2_and_2_ssc_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_1;
  reg lfst_exit_while_for_2_lpi_1_dfm_5_2;
  reg while_for_slc_while_for_acc_3_svs_1;
  reg while_for_2_equal_tmp_1;
  wire lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2;
  reg [1:0] lfst_exit_while_for_2_lpi_1_dfm_5_1_0;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_3;
  wire [3:0] while_for_1_i_3_0_sva_2;
  wire [4:0] nl_while_for_1_i_3_0_sva_2;
  wire [3:0] while_for_2_i_3_0_sva_2;
  wire [4:0] nl_while_for_2_i_3_0_sva_2;
  wire exitL_exit_while_for_2_sva_mx0;
  wire [1:0] lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1;
  wire while_for_2_and_6_cse;
  wire while_and_16_cse;
  wire while_for_2_and_9_cse;
  wire while_for_i_and_cse;
  wire while_for_and_3_cse;
  wire or_7_cse;
  wire or_62_cse;
  wire while_for_2_or_tmp_mx0w0;
  wire while_for_2_equal_tmp_2_mx0w0;
  wire while_for_2_equal_tmp_mx0w0;
  wire while_for_2_or_5_tmp;
  wire or_72_cse;
  wire sync1_write_reset_check_reset_while_nor_1_rmff;
  wire run_wen_rtff;
  reg reg_while_stage_v_2_tmp;
  reg reg_while_for_slc_while_for_acc_3_svs_st_1_tmp;
  reg [1:0] reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp;
  reg reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp;
  reg reg_sync1_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_3_tmp;
  reg [1:0] reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp;
  reg reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp;
  reg reg_while_for_slc_while_for_acc_3_svs_st_2_tmp;
  reg reg_sync2_Push_mioi_iswt0_tmp;
  reg reg_while_stage_v_4_tmp;
  reg reg_sync3_Pop_mioi_iswt0_tmp;
  reg [1:0] reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp;
  reg reg_while_for_slc_while_for_acc_3_svs_st_3_tmp;
  reg reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp;
  reg reg_while_stage_v_1_tmp;
  wire sync1_Push_mioi_wen_comp_iff;
  wire while_mux_rmff;
  wire while_for_mux_rmff;
  wire [1:0] while_for_2_mux_16_rmff;
  wire while_for_2_mux_17_rmff;
  wire sync1_Push_mioi_bawt_iff;
  wire while_mux_1_rmff;
  wire and_tmp_pff;
  wire while_mux_2_rmff;
  wire [1:0] while_for_2_mux_18_rmff;
  wire while_for_2_mux_19_rmff;
  wire while_for_mux_4_rmff;
  wire sync2_Push_mioi_bawt_iff;
  wire while_mux_3_rmff;
  wire or_tmp_1_pff;
  wire while_mux_4_rmff;
  wire sync3_Pop_mioi_bawt_iff;
  wire run_wten_iff;
  wire while_mux_5_rmff;
  wire [1:0] while_for_2_mux_20_rmff;
  wire while_for_mux_5_rmff;
  wire while_for_2_mux_21_rmff;
  wire sync2_Push_mioi_wen_comp_iff;
  wire and_dcpl_11_pff;
  wire and_dcpl_9_pff;
  wire sync3_Pop_mioi_wen_comp_iff;
  wire while_mux_6_rmff;
  wire while_while_or_3_cse_1_pff;
  wire while_while_or_1_cse_1_pff;
  wire while_while_or_cse_1_pff;
  wire while_for_2_equal_tmp_1_mx1w1;
  reg [3:0] while_for_2_i_3_0_lpi_1;
  wire or_110_tmp;
  reg [3:0] while_for_i_3_0_lpi_1;
  reg [3:0] while_for_1_i_3_0_lpi_1;
  reg while_for_slc_while_for_acc_3_svs_st;
  reg [3:0] while_for_i_3_0_sva_1_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_2;
  wire acc_done_mx0c1;
  wire sync2_Push_mioi_iswt0_mx0c1;
  wire sync1_Push_mioi_iswt0_mx0c1;
  wire [3:0] while_for_i_3_0_lpi_1_mx0w0;
  wire [3:0] while_for_i_3_0_sva_2;
  wire [4:0] nl_while_for_i_3_0_sva_2;
  wire exitL_exit_while_for_2_sva_mx0w0;
  wire exitL_exit_while_for_2_sva_mx1c1;
  wire exitL_exit_while_for_2_sva_mx1c2;
  wire while_for_slc_while_for_acc_3_svs_st_1_mx0c1;
  wire while_stage_v_3_mx1c1;
  wire while_stage_v_4_mx1c1;
  wire while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1;
  wire while_for_acc_itm_3_1;
  wire while_for_2_acc_itm_3_1;
  wire while_for_1_acc_itm_3_1;

  wire while_and_nl;
  wire while_and_15_nl;
  wire while_for_while_for_mux_nl;
  wire while_for_and_nl;
  wire while_and_18_nl;
  wire while_and_19_nl;
  wire[3:0] while_for_while_for_and_nl;
  wire while_for_2_i_and_2_nl;
  wire mux_45_nl;
  wire nor_29_nl;
  wire nor_30_nl;
  wire mux_44_nl;
  wire or_94_nl;
  wire nor_35_nl;
  wire and_83_nl;
  wire[3:0] while_for_acc_nl;
  wire[4:0] nl_while_for_acc_nl;
  wire[3:0] while_for_i_mux_nl;
  wire while_for_2_while_for_2_nor_3_nl;
  wire while_for_2_and_16_nl;
  wire[1:0] while_for_2_and_4_nl;
  wire[1:0] while_for_2_mux_nl;
  wire while_for_2_not_9_nl;
  wire[3:0] while_for_2_acc_nl;
  wire[4:0] nl_while_for_2_acc_nl;
  wire while_for_2_mux_6_nl;
  wire[3:0] while_for_1_acc_nl;
  wire[4:0] nl_while_for_1_acc_nl;
  wire or_56_nl;
  wire or_54_nl;
  wire mux_30_nl;
  wire mux_29_nl;
  wire mux_14_nl;
  wire nor_26_nl;
  wire or_44_nl;
  wire mux_19_nl;
  wire mux_18_nl;
  wire mux_17_nl;
  wire nor_6_nl;
  wire mux_28_nl;
  wire or_75_nl;
  wire mux_27_nl;
  wire mux_26_nl;
  wire mux_34_nl;
  wire and_52_nl;
  wire mux_33_nl;
  wire mux_32_nl;
  wire mux_37_nl;
  wire and_55_nl;
  wire mux_36_nl;
  wire mux_35_nl;
  wire mux_38_nl;
  wire nor_28_nl;
  wire mux_41_nl;
  wire or_91_nl;
  wire and_66_nl;
  wire and_65_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg;
  assign nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg = ~((~ reg_while_stage_v_2_tmp)
      | reg_while_for_slc_while_for_acc_3_svs_st_1_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0])
      | (~(sync1_Push_mioi_bawt & and_tmp)));
  wire  nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg_pff;
  assign nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg_pff = ~((~
      while_mux_rmff) | while_for_mux_rmff | (~ (while_for_2_mux_16_rmff[1])) | while_for_2_mux_17_rmff
      | (while_for_2_mux_16_rmff[0]) | (~(sync1_Push_mioi_bawt_iff & and_tmp_pff)));
  wire  nl_Control_run_sync2_Push_mioi_inst_sync2_Push_mioi_oswt_unreg_pff;
  assign nl_Control_run_sync2_Push_mioi_inst_sync2_Push_mioi_oswt_unreg_pff = ~((and_dcpl_11_pff
      & and_dcpl_9_pff & while_mux_4_rmff) | while_for_2_mux_19_rmff | while_for_mux_4_rmff
      | (~ sync2_Push_mioi_bawt_iff) | (while_for_2_mux_18_rmff!=2'b10) | (~ while_mux_2_rmff));
  wire  nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg;
  assign nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg = ~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp!=2'b10) | reg_while_for_slc_while_for_acc_3_svs_st_3_tmp
      | (~ sync3_Pop_mioi_bawt) | (~ reg_while_stage_v_4_tmp));
  wire  nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg_pff;
  assign nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg_pff = ~(while_for_2_mux_21_rmff
      | (while_for_2_mux_20_rmff!=2'b10) | while_for_mux_5_rmff | (~ sync3_Pop_mioi_bawt_iff)
      | (~ while_mux_4_rmff));
  wire  nl_Control_run_staller_inst_run_flen_unreg;
  assign nl_Control_run_staller_inst_run_flen_unreg = ~(((~(reg_while_stage_v_1_tmp
      & or_dcpl_13)) & while_while_or_3_cse_1 & while_while_or_1_cse_1 & while_while_or_cse_1)
      | (reg_while_stage_v_1_tmp & (~(reg_while_stage_v_2_tmp & or_dcpl_12)) & while_while_or_3_cse_1
      & while_while_or_1_cse_1 & while_while_or_cse_1) | (reg_while_stage_v_2_tmp
      & (~(reg_while_stage_v_3_tmp & or_dcpl_14)) & while_while_or_3_cse_1 & while_while_or_1_cse_1
      & while_while_or_cse_1) | (reg_while_stage_v_3_tmp & (~(reg_while_stage_v_4_tmp
      & and_dcpl_37)) & while_while_or_1_cse_1 & while_while_or_cse_1) | (reg_while_stage_v_4_tmp
      & while_while_or_cse_1));
  wire  nl_Control_run_staller_inst_run_flen_unreg_pff;
  assign nl_Control_run_staller_inst_run_flen_unreg_pff = ~(((~(while_mux_6_rmff
      & (~(((~ while_mux_rmff) | while_for_mux_rmff | (~ (while_for_2_mux_16_rmff[1]))
      | while_for_2_mux_17_rmff | (while_for_2_mux_16_rmff[0]) | sync1_Push_mioi_bawt_iff)
      & and_tmp_pff)))) & while_while_or_3_cse_1_pff & while_while_or_1_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_6_rmff & (~(while_mux_rmff & (~((while_for_mux_rmff
      | (~ (while_for_2_mux_16_rmff[1])) | while_for_2_mux_17_rmff | (while_for_2_mux_16_rmff[0])
      | sync1_Push_mioi_bawt_iff) & and_tmp_pff)))) & while_while_or_3_cse_1_pff
      & while_while_or_1_cse_1_pff & while_while_or_cse_1_pff) | (while_mux_rmff
      & (~(while_mux_2_rmff & (~(((while_for_2_mux_18_rmff!=2'b10) | sync2_Push_mioi_bawt_iff
      | while_for_mux_4_rmff | while_for_2_mux_19_rmff) & or_tmp_1_pff)))) & while_while_or_3_cse_1_pff
      & while_while_or_1_cse_1_pff & while_while_or_cse_1_pff) | (while_mux_2_rmff
      & (~(while_mux_4_rmff & and_dcpl_11_pff & and_dcpl_9_pff)) & while_while_or_1_cse_1_pff
      & while_while_or_cse_1_pff) | (while_mux_4_rmff & while_while_or_cse_1_pff));
  Control_run_sync1_Push_mioi Control_run_sync1_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .run_wen(run_wen),
      .sync1_Push_mioi_oswt_unreg(nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_bawt(sync1_Push_mioi_bawt),
      .sync1_Push_mioi_iswt0(reg_sync1_Push_mioi_iswt0_tmp),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp),
      .sync1_Push_mioi_irdy(sync1_Push_mioi_irdy),
      .sync1_Push_mioi_irdy_oreg(sync1_Push_mioi_irdy_oreg),
      .sync1_Push_mioi_wen_comp_pff(sync1_Push_mioi_wen_comp_iff),
      .sync1_Push_mioi_oswt_unreg_pff(nl_Control_run_sync1_Push_mioi_inst_sync1_Push_mioi_oswt_unreg_pff),
      .sync1_Push_mioi_bawt_pff(sync1_Push_mioi_bawt_iff),
      .sync1_Push_mioi_iswt0_pff(while_mux_1_rmff),
      .sync1_Push_mioi_irdy_oreg_pff(sync1_Push_mioi_irdy)
    );
  Control_run_wait_dp Control_run_wait_dp_inst (
      .clk(clk),
      .rst(rst),
      .sync1_Push_mioi_irdy(sync1_Push_mioi_irdy),
      .sync1_Push_mioi_irdy_oreg(sync1_Push_mioi_irdy_oreg),
      .sync2_Push_mioi_irdy(sync2_Push_mioi_irdy),
      .sync2_Push_mioi_irdy_oreg(sync2_Push_mioi_irdy_oreg),
      .sync3_Pop_mioi_ivld(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_ivld_oreg(sync3_Pop_mioi_ivld_oreg)
    );
  Control_run_sync2_Push_mioi Control_run_sync2_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .run_wen(run_wen),
      .sync2_Push_mioi_oswt_unreg(sync1_write_reset_check_reset_while_nor_1_rmff),
      .sync2_Push_mioi_bawt(sync2_Push_mioi_bawt),
      .sync2_Push_mioi_iswt0(reg_sync2_Push_mioi_iswt0_tmp),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp),
      .sync2_Push_mioi_irdy(sync2_Push_mioi_irdy),
      .sync2_Push_mioi_irdy_oreg(sync2_Push_mioi_irdy_oreg),
      .sync2_Push_mioi_bawt_pff(sync2_Push_mioi_bawt_iff),
      .sync2_Push_mioi_iswt0_pff(while_mux_3_rmff),
      .sync2_Push_mioi_irdy_oreg_pff(sync2_Push_mioi_irdy),
      .sync2_Push_mioi_wen_comp_pff(sync2_Push_mioi_wen_comp_iff),
      .sync2_Push_mioi_oswt_unreg_pff(nl_Control_run_sync2_Push_mioi_inst_sync2_Push_mioi_oswt_unreg_pff)
    );
  Control_run_sync3_Pop_mioi Control_run_sync3_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Pop_mioi_oswt_unreg(nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_bawt(sync3_Pop_mioi_bawt),
      .sync3_Pop_mioi_iswt0(reg_sync3_Pop_mioi_iswt0_tmp),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp),
      .sync3_Pop_mioi_ivld(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_ivld_oreg(sync3_Pop_mioi_ivld_oreg),
      .sync3_Pop_mioi_bawt_pff(sync3_Pop_mioi_bawt_iff),
      .run_wten_pff(run_wten_iff),
      .sync3_Pop_mioi_iswt0_pff(while_mux_5_rmff),
      .sync3_Pop_mioi_ivld_oreg_pff(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_wen_comp_pff(sync3_Pop_mioi_wen_comp_iff),
      .sync3_Pop_mioi_oswt_unreg_pff(nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg_pff)
    );
  Control_run_staller Control_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen_rtff),
      .run_wten(run_wten),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp),
      .run_flen_unreg(nl_Control_run_staller_inst_run_flen_unreg),
      .sync1_Push_mioi_wen_comp_pff(sync1_Push_mioi_wen_comp_iff),
      .run_wten_pff(run_wten_iff),
      .sync2_Push_mioi_wen_comp_pff(sync2_Push_mioi_wen_comp_iff),
      .sync3_Pop_mioi_wen_comp_pff(sync3_Pop_mioi_wen_comp_iff),
      .run_flen_unreg_pff(nl_Control_run_staller_inst_run_flen_unreg_pff)
    );
  assign sync1_write_reset_check_reset_while_nor_1_rmff = ~(and_dcpl_12 | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp | (~ sync2_Push_mioi_bawt)
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10) | (~ reg_while_stage_v_3_tmp));
  assign while_mux_5_rmff = MUX_s_1_2_2(reg_sync3_Pop_mioi_iswt0_tmp, sync1_write_reset_check_reset_while_nor_1_rmff,
      run_wen);
  assign while_and_nl = run_wen & ((and_tmp & and_dcpl_17) | sync2_Push_mioi_iswt0_mx0c1);
  assign while_mux_3_rmff = MUX_s_1_2_2(reg_sync2_Push_mioi_iswt0_tmp, (~ sync2_Push_mioi_iswt0_mx0c1),
      while_and_nl);
  assign or_62_cse = nor_tmp_1 | (while_for_2_mux_3_tmp!=2'b10) | while_for_2_equal_tmp_2_1;
  assign while_and_15_nl = run_wen & (((~ mux_tmp_16) & reg_while_stage_v_1_tmp &
      (~ while_for_acc_itm_3_1)) | sync1_Push_mioi_iswt0_mx0c1);
  assign while_mux_1_rmff = MUX_s_1_2_2(reg_sync1_Push_mioi_iswt0_tmp, (~ sync1_Push_mioi_iswt0_mx0c1),
      while_and_15_nl);
  assign while_for_i_and_cse = run_wen & (~ or_dcpl_12);
  assign while_for_2_and_6_cse = run_wen & (and_dcpl_29 | and_dcpl_30);
  assign while_and_16_cse = run_wen & and_tmp_14;
  assign while_mux_6_rmff = reg_while_stage_v_1_tmp | while_and_16_cse;
  assign while_mux_rmff = MUX_s_1_2_2(reg_while_stage_v_2_tmp, (~ and_dcpl_29), while_for_2_and_6_cse);
  assign while_for_while_for_mux_nl = MUX_s_1_2_2(while_for_acc_itm_3_1, while_for_slc_while_for_acc_3_svs_st,
      while_for_slc_while_for_acc_3_svs_st_1_mx0c1);
  assign while_for_and_nl = run_wen & (((~ mux_tmp_16) & reg_while_stage_v_1_tmp)
      | while_for_slc_while_for_acc_3_svs_st_1_mx0c1);
  assign while_for_mux_rmff = MUX_s_1_2_2(reg_while_for_slc_while_for_acc_3_svs_st_1_tmp,
      while_for_while_for_mux_nl, while_for_and_nl);
  assign while_for_2_and_9_cse = run_wen & (~ or_dcpl_13);
  assign while_for_2_mux_17_rmff = MUX_s_1_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp,
      lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2, while_for_2_and_9_cse);
  assign while_for_2_mux_16_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp,
      lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1, while_for_2_and_9_cse);
  assign while_and_18_nl = run_wen & ((and_tmp_4 & reg_while_stage_v_2_tmp) | while_stage_v_3_mx1c1);
  assign while_mux_2_rmff = MUX_s_1_2_2(reg_while_stage_v_3_tmp, (~ while_stage_v_3_mx1c1),
      while_and_18_nl);
  assign while_for_mux_4_rmff = MUX_s_1_2_2(reg_while_for_slc_while_for_acc_3_svs_st_2_tmp,
      reg_while_for_slc_while_for_acc_3_svs_st_1_tmp, while_for_i_and_cse);
  assign while_for_2_mux_19_rmff = MUX_s_1_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp, while_for_i_and_cse);
  assign while_for_2_mux_18_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp, while_for_i_and_cse);
  assign while_and_19_nl = run_wen & ((reg_while_stage_v_3_tmp & and_tmp_22) | while_stage_v_4_mx1c1);
  assign while_mux_4_rmff = MUX_s_1_2_2(reg_while_stage_v_4_tmp, (~ while_stage_v_4_mx1c1),
      while_and_19_nl);
  assign while_for_and_3_cse = run_wen & (~ or_dcpl_14);
  assign while_for_mux_5_rmff = MUX_s_1_2_2(reg_while_for_slc_while_for_acc_3_svs_st_3_tmp,
      reg_while_for_slc_while_for_acc_3_svs_st_2_tmp, while_for_and_3_cse);
  assign while_for_2_mux_21_rmff = MUX_s_1_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp, while_for_and_3_cse);
  assign while_for_2_mux_20_rmff = MUX_v_2_2_2(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp,
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp, while_for_and_3_cse);
  assign or_7_cse = (~ while_for_2_equal_tmp_1) | while_for_slc_while_for_acc_3_svs_1;
  assign or_110_tmp = (while_for_2_or_tmp_1 & (~ acc_start)) | lfst_exit_while_for_2_lpi_1_dfm_5_2
      | while_for_2_equal_tmp_2_1;
  assign nor_35_nl = ~(while_for_2_equal_tmp_1 | or_110_tmp);
  assign and_83_nl = while_for_2_equal_tmp_1 & (~ or_110_tmp);
  assign while_for_i_3_0_lpi_1_mx0w0 = MUX1HOT_v_4_3_2((signext_4_1(~ acc_start)),
      while_for_i_3_0_sva_1_1, while_for_i_3_0_lpi_1, {nor_35_nl , and_83_nl , or_110_tmp});
  assign nl_while_for_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_i_3_0_sva_2[3:1]);
  assign while_for_acc_nl = nl_while_for_acc_nl[3:0];
  assign while_for_acc_itm_3_1 = readslicef_4_1_3(while_for_acc_nl);
  assign while_for_i_mux_nl = MUX_v_4_2_2(while_for_i_3_0_lpi_1, while_for_i_3_0_lpi_1_mx0w0,
      reg_while_stage_v_2_tmp);
  assign nl_while_for_i_3_0_sva_2 = while_for_i_mux_nl + 4'b0001;
  assign while_for_i_3_0_sva_2 = nl_while_for_i_3_0_sva_2[3:0];
  assign while_for_2_or_5_tmp = (while_for_slc_while_for_acc_3_svs_1 & while_for_2_equal_tmp_1)
      | (while_for_1_slc_while_for_1_acc_3_svs_1 & lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign while_for_2_while_for_2_nor_3_nl = ~(acc_start | while_for_2_or_5_tmp);
  assign while_for_2_and_16_nl = acc_start & (~ while_for_2_or_5_tmp);
  assign while_for_2_mux_3_tmp = MUX1HOT_v_2_3_2(2'b01, 2'b10, lfst_exit_while_for_2_lpi_1_dfm_5_1_0,
      {while_for_2_while_for_2_nor_3_nl , while_for_2_and_16_nl , while_for_2_or_5_tmp});
  assign while_for_2_and_4_nl = while_for_2_mux_3_tmp & (signext_2_1(~ while_for_2_equal_tmp_2_1))
      & (signext_2_1(~ while_for_2_and_2_ssc_1));
  assign lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0 = MUX_v_2_2_2(while_for_2_and_4_nl,
      2'b11, while_for_2_and_ssc_1);
  assign while_for_2_mux_nl = MUX_v_2_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_1_0,
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0, reg_while_stage_v_2_tmp);
  assign while_for_2_not_9_nl = ~ exitL_exit_while_for_2_sva_mx0;
  assign lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1 = MUX_v_2_2_2(2'b00, while_for_2_mux_nl,
      while_for_2_not_9_nl);
  assign exitL_exit_while_for_2_sva_mx0w0 = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0
      | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0!=2'b00));
  assign exitL_exit_while_for_2_sva_mx0 = MUX_s_1_2_2(exitL_exit_while_for_2_sva,
      exitL_exit_while_for_2_sva_mx0w0, reg_while_stage_v_2_tmp);
  assign nl_while_for_2_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_2_i_3_0_sva_2[3:1]);
  assign while_for_2_acc_nl = nl_while_for_2_acc_nl[3:0];
  assign while_for_2_acc_itm_3_1 = readslicef_4_1_3(while_for_2_acc_nl);
  assign while_for_2_mux_6_nl = MUX_s_1_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_2,
      lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0, reg_while_stage_v_2_tmp);
  assign lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 = while_for_2_mux_6_nl & (~ exitL_exit_while_for_2_sva_mx0);
  assign lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0 = (exitL_exit_while_for_2_sva
      & (~(while_for_2_or_tmp_1 | while_for_2_and_ssc_1))) | while_for_2_and_2_ssc_1;
  assign while_for_2_equal_tmp_1_mx1w1 = (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1==2'b11)
      & (~ lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2);
  assign while_for_2_or_tmp_mx0w0 = ((lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[0])
      & (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[1]))))
      | (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1!=2'b00)));
  assign while_for_2_equal_tmp_mx0w0 = (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[1])
      & (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[0])));
  assign while_for_2_equal_tmp_2_mx0w0 = lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2
      & (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1==2'b00);
  assign while_for_2_and_ssc_1 = (~ while_for_slc_while_for_acc_3_svs_1) & while_for_2_equal_tmp_1;
  assign while_for_2_and_2_ssc_1 = (~ while_for_1_slc_while_for_1_acc_3_svs_1) &
      lfst_exit_while_for_2_lpi_1_dfm_5_2;
  assign nl_while_for_1_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_1_i_3_0_sva_2[3:1]);
  assign while_for_1_acc_nl = nl_while_for_1_acc_nl[3:0];
  assign while_for_1_acc_itm_3_1 = readslicef_4_1_3(while_for_1_acc_nl);
  assign while_while_or_3_cse_1 = sync1_Push_mioi_bawt | (~((~ reg_while_for_slc_while_for_acc_3_svs_st_1_tmp)
      & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]) & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]))) & reg_while_stage_v_2_tmp));
  assign while_while_or_1_cse_1 = sync2_Push_mioi_bawt | (~((~ reg_while_for_slc_while_for_acc_3_svs_st_2_tmp)
      & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp[1]) & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp[0]))) & reg_while_stage_v_3_tmp));
  assign while_while_or_cse_1 = sync3_Pop_mioi_bawt | (~((~ reg_while_for_slc_while_for_acc_3_svs_st_3_tmp)
      & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]) & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]))) & reg_while_stage_v_4_tmp));
  assign nl_while_for_1_i_3_0_sva_2 = while_for_1_i_3_0_lpi_1 + 4'b0001;
  assign while_for_1_i_3_0_sva_2 = nl_while_for_1_i_3_0_sva_2[3:0];
  assign nl_while_for_2_i_3_0_sva_2 = while_for_2_i_3_0_lpi_1 + 4'b0001;
  assign while_for_2_i_3_0_sva_2 = nl_while_for_2_i_3_0_sva_2[3:0];
  assign or_tmp_1 = (~ reg_while_stage_v_4_tmp) | sync3_Pop_mioi_bawt | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0])
      | reg_while_for_slc_while_for_acc_3_svs_st_3_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp;
  assign and_tmp = ((~ reg_while_stage_v_3_tmp) | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10)
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp
      | sync2_Push_mioi_bawt) & or_tmp_1;
  assign and_tmp_4 = (reg_while_for_slc_while_for_acc_3_svs_st_1_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0])
      | sync1_Push_mioi_bawt) & and_tmp;
  assign and_dcpl_2 = (~ reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp) & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]);
  assign and_dcpl_9 = ~(reg_while_for_slc_while_for_acc_3_svs_st_3_tmp | sync3_Pop_mioi_bawt);
  assign and_dcpl_11 = and_dcpl_2 & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]));
  assign and_dcpl_12 = and_dcpl_11 & and_dcpl_9 & reg_while_stage_v_4_tmp;
  assign and_dcpl_17 = sync1_Push_mioi_bawt & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]))
      & (~ reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp) & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1])
      & (~ reg_while_for_slc_while_for_acc_3_svs_st_1_tmp) & reg_while_stage_v_2_tmp;
  assign nor_tmp = ~(while_for_1_slc_while_for_1_acc_3_svs_1 | (~ lfst_exit_while_for_2_lpi_1_dfm_5_2));
  assign nor_tmp_1 = ~(while_for_2_or_tmp_1 | (~ exitL_exit_while_for_2_sva));
  assign and_tmp_12 = or_7_cse & and_tmp_4;
  assign or_56_nl = lfst_exit_while_for_2_lpi_1_dfm_5_2 | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b10)
      | exitL_exit_while_for_2_sva | (~ and_tmp);
  assign or_54_nl = nor_tmp | nor_tmp_1 | (while_for_2_mux_3_tmp!=2'b10) | while_for_2_equal_tmp_2_1
      | (~ and_tmp_12);
  assign mux_tmp_16 = MUX_s_1_2_2(or_56_nl, or_54_nl, reg_while_stage_v_2_tmp);
  assign or_tmp_47 = or_7_cse | (~ and_tmp);
  assign or_dcpl_12 = ~(and_tmp_4 & reg_while_stage_v_2_tmp);
  assign and_dcpl_29 = and_tmp_4 & reg_while_stage_v_2_tmp & (~ reg_while_stage_v_1_tmp);
  assign and_tmp_14 = ((~ reg_while_stage_v_2_tmp) | reg_while_for_slc_while_for_acc_3_svs_st_1_tmp
      | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1])) | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]) | sync1_Push_mioi_bawt)
      & and_tmp;
  assign and_dcpl_30 = and_tmp_14 & reg_while_stage_v_1_tmp;
  assign or_72_cse = (~((while_for_2_mux_3_tmp!=2'b00))) | while_for_2_equal_tmp_2_1;
  assign or_tmp_60 = while_for_2_or_tmp_1 | (~(exitL_exit_while_for_2_sva & or_72_cse
      & and_tmp_12));
  assign or_tmp_66 = or_7_cse | (~ and_tmp_4);
  assign mux_29_nl = MUX_s_1_2_2(and_tmp_4, (~ or_tmp_66), or_72_cse);
  assign mux_30_nl = MUX_s_1_2_2(and_tmp_4, mux_29_nl, exitL_exit_while_for_2_sva);
  assign mux_tmp_31 = MUX_s_1_2_2(mux_30_nl, and_tmp_4, while_for_2_or_tmp_1);
  assign or_dcpl_13 = ~(and_tmp_14 & reg_while_stage_v_1_tmp);
  assign and_tmp_22 = ((reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10)
      | sync2_Push_mioi_bawt | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp)
      & or_tmp_1;
  assign or_dcpl_14 = ~(and_tmp_22 & reg_while_stage_v_3_tmp);
  assign and_dcpl_37 = and_dcpl_11 & and_dcpl_9;
  assign acc_done_mx0c1 = reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[1]))
      & (~ while_for_1_slc_while_for_1_acc_3_svs_st_3) & (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]))
      & reg_while_stage_v_4_tmp;
  assign nor_26_nl = ~(sync1_Push_mioi_bawt | and_dcpl_12);
  assign or_44_nl = (~ reg_while_stage_v_2_tmp) | reg_while_for_slc_while_for_acc_3_svs_st_1_tmp
      | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1])) | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp
      | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0]);
  assign mux_14_nl = MUX_s_1_2_2(nor_26_nl, or_tmp_1, or_44_nl);
  assign sync2_Push_mioi_iswt0_mx0c1 = mux_14_nl & (~(reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp)) & sync2_Push_mioi_bawt &
      (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp==2'b10) & reg_while_stage_v_3_tmp;
  assign mux_17_nl = MUX_s_1_2_2((~ or_tmp_47), and_tmp, or_62_cse);
  assign mux_18_nl = MUX_s_1_2_2(mux_17_nl, and_tmp, nor_tmp);
  assign nor_6_nl = ~(while_for_acc_itm_3_1 | (~ reg_while_stage_v_1_tmp));
  assign mux_19_nl = MUX_s_1_2_2(and_tmp, mux_18_nl, nor_6_nl);
  assign sync1_Push_mioi_iswt0_mx0c1 = mux_19_nl & and_dcpl_17;
  assign or_75_nl = (~ lfst_exit_while_for_2_lpi_1_dfm_5_2) | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b00)
      | exitL_exit_while_for_2_sva | (~ and_tmp);
  assign mux_26_nl = MUX_s_1_2_2(or_tmp_60, (~ and_tmp_12), lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign mux_27_nl = MUX_s_1_2_2(mux_26_nl, or_tmp_60, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign mux_28_nl = MUX_s_1_2_2(or_75_nl, mux_27_nl, reg_while_stage_v_2_tmp);
  assign exitL_exit_while_for_2_sva_mx1c1 = (~ mux_28_nl) & reg_while_stage_v_1_tmp;
  assign and_52_nl = ((~ lfst_exit_while_for_2_lpi_1_dfm_5_2) | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b00)
      | exitL_exit_while_for_2_sva) & and_tmp;
  assign mux_32_nl = MUX_s_1_2_2(mux_tmp_31, (~ or_tmp_66), lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign mux_33_nl = MUX_s_1_2_2(mux_32_nl, mux_tmp_31, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign mux_34_nl = MUX_s_1_2_2(and_52_nl, mux_33_nl, reg_while_stage_v_2_tmp);
  assign exitL_exit_while_for_2_sva_mx1c2 = mux_34_nl & reg_while_stage_v_1_tmp;
  assign and_55_nl = (lfst_exit_while_for_2_lpi_1_dfm_5_2 | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b10)
      | exitL_exit_while_for_2_sva) & and_tmp;
  assign mux_35_nl = MUX_s_1_2_2((~ or_tmp_66), and_tmp_4, or_62_cse);
  assign mux_36_nl = MUX_s_1_2_2(mux_35_nl, and_tmp_4, nor_tmp);
  assign mux_37_nl = MUX_s_1_2_2(and_55_nl, mux_36_nl, reg_while_stage_v_2_tmp);
  assign while_for_slc_while_for_acc_3_svs_st_1_mx0c1 = mux_37_nl & reg_while_stage_v_1_tmp;
  assign nor_28_nl = ~(reg_while_for_slc_while_for_acc_3_svs_st_1_tmp | (~ (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[1]))
      | reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp | (reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp[0])
      | sync1_Push_mioi_bawt | (~ and_tmp_22));
  assign mux_38_nl = MUX_s_1_2_2(and_tmp_22, nor_28_nl, reg_while_stage_v_2_tmp);
  assign while_stage_v_3_mx1c1 = mux_38_nl & reg_while_stage_v_3_tmp;
  assign or_91_nl = (reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp!=2'b10) | sync2_Push_mioi_bawt
      | reg_while_for_slc_while_for_acc_3_svs_st_2_tmp | reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp
      | and_dcpl_37;
  assign mux_41_nl = MUX_s_1_2_2(and_dcpl_37, or_91_nl, reg_while_stage_v_3_tmp);
  assign while_stage_v_4_mx1c1 = (~ mux_41_nl) & reg_while_stage_v_4_tmp;
  assign and_66_nl = lfst_exit_while_for_2_lpi_1_dfm_5_2 & and_tmp;
  assign and_65_nl = (nor_tmp | (~ (while_for_2_mux_3_tmp[0])) | while_for_2_equal_tmp_2_1)
      & or_7_cse & and_tmp;
  assign while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1 = MUX_s_1_2_2(and_66_nl,
      and_65_nl, reg_while_stage_v_2_tmp);
  assign or_tmp_1_pff = (~ while_mux_4_rmff) | sync3_Pop_mioi_bawt_iff | (while_for_2_mux_20_rmff[0])
      | while_for_mux_5_rmff | (~ (while_for_2_mux_20_rmff[1])) | while_for_2_mux_21_rmff;
  assign and_tmp_pff = ((~ while_mux_2_rmff) | (while_for_2_mux_18_rmff!=2'b10) |
      while_for_2_mux_19_rmff | while_for_mux_4_rmff | sync2_Push_mioi_bawt_iff)
      & or_tmp_1_pff;
  assign and_dcpl_11_pff = (~ while_for_2_mux_21_rmff) & (while_for_2_mux_20_rmff==2'b10);
  assign and_dcpl_9_pff = ~(while_for_mux_5_rmff | sync3_Pop_mioi_bawt_iff);
  assign while_while_or_3_cse_1_pff = sync1_Push_mioi_bawt_iff | (~((~ while_for_mux_rmff)
      & (while_for_2_mux_16_rmff[1]) & (~(while_for_2_mux_17_rmff | (while_for_2_mux_16_rmff[0])))
      & while_mux_rmff));
  assign while_while_or_1_cse_1_pff = sync2_Push_mioi_bawt_iff | (~((~ while_for_mux_4_rmff)
      & (while_for_2_mux_18_rmff[1]) & (~(while_for_2_mux_19_rmff | (while_for_2_mux_18_rmff[0])))
      & while_mux_2_rmff));
  assign while_while_or_cse_1_pff = sync3_Pop_mioi_bawt_iff | (~((~ while_for_mux_5_rmff)
      & (while_for_2_mux_20_rmff[1]) & (~(while_for_2_mux_21_rmff | (while_for_2_mux_20_rmff[0])))
      & while_mux_4_rmff));
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      acc_done <= 1'b0;
    end
    else if ( run_wen & ((and_dcpl_2 & (~ while_for_1_slc_while_for_1_acc_3_svs_st_3)
        & (reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp[0]) & reg_while_stage_v_4_tmp)
        | acc_done_mx0c1) ) begin
      acc_done <= ~ acc_done_mx0c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_sync3_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_sync2_Push_mioi_iswt0_tmp <= 1'b0;
      reg_sync1_Push_mioi_iswt0_tmp <= 1'b0;
      reg_while_stage_v_1_tmp <= 1'b0;
      reg_while_stage_v_2_tmp <= 1'b0;
      reg_while_for_slc_while_for_acc_3_svs_st_1_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp <= 2'b00;
      reg_while_stage_v_3_tmp <= 1'b0;
      reg_while_for_slc_while_for_acc_3_svs_st_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp <= 2'b00;
      reg_while_stage_v_4_tmp <= 1'b0;
      reg_while_for_slc_while_for_acc_3_svs_st_3_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp <= 1'b0;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp <= 2'b00;
      run_wen <= 1'b1;
    end
    else begin
      reg_sync3_Pop_mioi_iswt0_tmp <= while_mux_5_rmff;
      reg_sync2_Push_mioi_iswt0_tmp <= while_mux_3_rmff;
      reg_sync1_Push_mioi_iswt0_tmp <= while_mux_1_rmff;
      reg_while_stage_v_1_tmp <= while_mux_6_rmff;
      reg_while_stage_v_2_tmp <= while_mux_rmff;
      reg_while_for_slc_while_for_acc_3_svs_st_1_tmp <= while_for_mux_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_2_tmp <= while_for_2_mux_17_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0_tmp <= while_for_2_mux_16_rmff;
      reg_while_stage_v_3_tmp <= while_mux_2_rmff;
      reg_while_for_slc_while_for_acc_3_svs_st_2_tmp <= while_for_mux_4_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_2_tmp <= while_for_2_mux_19_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0_tmp <= while_for_2_mux_18_rmff;
      reg_while_stage_v_4_tmp <= while_mux_4_rmff;
      reg_while_for_slc_while_for_acc_3_svs_st_3_tmp <= while_for_mux_5_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_2_tmp <= while_for_2_mux_21_rmff;
      reg_lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0_tmp <= while_for_2_mux_20_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( while_for_i_and_cse ) begin
      while_for_i_3_0_lpi_1 <= while_for_i_3_0_lpi_1_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0 <= 2'b00;
      lfst_exit_while_for_2_lpi_1_dfm_5_2 <= 1'b0;
    end
    else if ( while_for_2_and_6_cse ) begin
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0 <= MUX_v_2_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0,
          lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1, and_dcpl_30);
      lfst_exit_while_for_2_lpi_1_dfm_5_2 <= MUX_s_1_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0,
          while_for_2_equal_tmp_1_mx1w1, and_dcpl_30);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exit_while_for_2_sva <= 1'b1;
    end
    else if ( run_wen & (and_dcpl_29 | exitL_exit_while_for_2_sva_mx1c1 | exitL_exit_while_for_2_sva_mx1c2)
        ) begin
      exitL_exit_while_for_2_sva <= MUX1HOT_s_1_3_2(exitL_exit_while_for_2_sva_mx0w0,
          while_for_2_acc_itm_3_1, lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2, {and_dcpl_29
          , exitL_exit_while_for_2_sva_mx1c1 , exitL_exit_while_for_2_sva_mx1c2});
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_2_or_tmp_1 <= 1'b0;
      while_for_i_3_0_sva_1_1 <= 4'b0000;
      while_for_2_equal_tmp_1 <= 1'b0;
      while_for_2_equal_tmp_2_1 <= 1'b0;
      while_for_slc_while_for_acc_3_svs_1 <= 1'b0;
      while_for_1_slc_while_for_1_acc_3_svs_1 <= 1'b0;
    end
    else if ( while_and_16_cse ) begin
      while_for_2_or_tmp_1 <= while_for_2_or_tmp_mx0w0;
      while_for_i_3_0_sva_1_1 <= while_for_i_3_0_sva_2;
      while_for_2_equal_tmp_1 <= while_for_2_equal_tmp_mx0w0;
      while_for_2_equal_tmp_2_1 <= while_for_2_equal_tmp_2_mx0w0;
      while_for_slc_while_for_acc_3_svs_1 <= while_for_acc_itm_3_1;
      while_for_1_slc_while_for_1_acc_3_svs_1 <= while_for_1_acc_itm_3_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_3 <= 1'b0;
    end
    else if ( run_wen ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_3 <= while_for_1_slc_while_for_1_acc_3_svs_st_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_slc_while_for_acc_3_svs_st <= 1'b0;
    end
    else if ( run_wen & (~ mux_tmp_16) ) begin
      while_for_slc_while_for_acc_3_svs_st <= while_for_acc_itm_3_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( run_wen & (~(while_for_2_or_tmp_mx0w0 | while_for_2_equal_tmp_2_mx0w0
        | or_dcpl_13)) ) begin
      while_for_1_i_3_0_lpi_1 <= MUX_v_4_2_2(while_for_while_for_and_nl, while_for_1_i_3_0_sva_2,
          while_for_2_equal_tmp_1_mx1w1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_2_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( run_wen & (~((while_for_1_acc_itm_3_1 & while_for_2_equal_tmp_1_mx1w1)
        | or_dcpl_13 | while_for_2_equal_tmp_mx0w0 | while_for_2_or_tmp_mx0w0)) )
        begin
      while_for_2_i_3_0_lpi_1 <= MUX_v_4_2_2(({{3{while_for_1_acc_itm_3_1}}, while_for_1_acc_itm_3_1}),
          while_for_2_i_3_0_sva_2, while_for_2_i_and_2_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_2 <= 1'b0;
    end
    else if ( run_wen & (~ and_dcpl_12) ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_2 <= while_for_1_slc_while_for_1_acc_3_svs_st_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_1 <= 1'b0;
    end
    else if ( run_wen & (mux_45_nl | while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1)
        ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_1 <= MUX_s_1_2_2(while_for_1_acc_itm_3_1,
          while_for_2_acc_itm_3_1, while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1);
    end
  end
  assign while_for_while_for_and_nl = MUX_v_4_2_2(4'b0000, while_for_1_i_3_0_lpi_1,
      while_for_acc_itm_3_1);
  assign while_for_2_i_and_2_nl = while_for_2_equal_tmp_2_mx0w0 & (~ or_dcpl_13);
  assign nor_29_nl = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2 | (~ and_tmp));
  assign or_94_nl = (~ (while_for_2_mux_3_tmp[0])) | while_for_2_equal_tmp_2_1;
  assign mux_44_nl = MUX_s_1_2_2((~ and_tmp), or_tmp_47, or_94_nl);
  assign nor_30_nl = ~(nor_tmp | mux_44_nl);
  assign mux_45_nl = MUX_s_1_2_2(nor_29_nl, nor_30_nl, reg_while_stage_v_2_tmp);

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input  vector;
  begin
    signext_2_1= {{1{vector}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_1;
    input  vector;
  begin
    signext_4_1= {{3{vector}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run
// ------------------------------------------------------------------


module InputBuffer_run (
  clk, rst, cfg_block_size, cfg_input_base, sync1_val, sync1_rdy, sync1_msg, dma_read_ctrl_val,
      dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val, dma_read_chnl_rdy,
      dma_read_chnl_msg, rotate_in_val, rotate_in_rdy, rotate_in_msg, mem_rsci_clken_d,
      mem_rsci_d_d, mem_rsci_q_d, mem_rsci_radr_d, mem_rsci_wadr_d, mem_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      mem_rsci_we_d_pff
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_input_base;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output rotate_in_val;
  input rotate_in_rdy;
  output [511:0] rotate_in_msg;
  output mem_rsci_clken_d;
  output [63:0] mem_rsci_d_d;
  input [63:0] mem_rsci_q_d;
  output [13:0] mem_rsci_radr_d;
  output [13:0] mem_rsci_wadr_d;
  output mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output mem_rsci_we_d_pff;


  // Interconnect Declarations
  reg run_wen;
  wire sync1_Pop_mioi_wen_comp;
  wire dma_read_ctrl_Push_mioi_wen_comp;
  wire dma_read_chnl_Pop_mioi_wen_comp;
  wire [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;
  wire rotate_in_Push_mioi_wen_comp;
  reg [27:0] dma_read_ctrl_Push_mioi_idat_63_36;
  reg [31:0] dma_read_ctrl_Push_mioi_idat_31_0;
  reg [63:0] rotate_in_Push_mioi_idat_511_448;
  reg [31:0] rotate_in_Push_mioi_idat_447_416;
  reg [31:0] rotate_in_Push_mioi_idat_415_384;
  reg [31:0] rotate_in_Push_mioi_idat_383_352;
  reg [31:0] rotate_in_Push_mioi_idat_351_320;
  reg [31:0] rotate_in_Push_mioi_idat_319_288;
  reg [31:0] rotate_in_Push_mioi_idat_287_256;
  reg [31:0] rotate_in_Push_mioi_idat_255_224;
  reg [31:0] rotate_in_Push_mioi_idat_223_192;
  reg [31:0] rotate_in_Push_mioi_idat_191_160;
  reg [31:0] rotate_in_Push_mioi_idat_159_128;
  reg [31:0] rotate_in_Push_mioi_idat_127_96;
  reg [31:0] rotate_in_Push_mioi_idat_95_64;
  reg [31:0] rotate_in_Push_mioi_idat_63_32;
  reg [31:0] rotate_in_Push_mioi_idat_31_0;
  wire [8:0] fsm_output;
  wire or_dcpl_2;
  wire or_dcpl_7;
  wire or_dcpl_12;
  wire and_dcpl_9;
  wire and_dcpl_10;
  wire and_dcpl_13;
  wire and_dcpl_16;
  wire and_dcpl_21;
  wire or_tmp_15;
  wire or_tmp_21;
  wire or_tmp_27;
  wire or_tmp_33;
  wire or_tmp_39;
  wire or_tmp_45;
  wire or_tmp_51;
  wire exit_while_for_1_sva_mx0;
  reg [2:0] while_for_1_for_j_3_0_sva_2_0_1;
  wire exit_while_for_sva_mx0;
  reg [3:0] while_for_1_for_j_3_0_sva_1;
  reg while_for_1_for_and_5_cse_sva;
  wire while_for_1_and_cse;
  wire while_for_1_and_2_cse;
  wire while_for_1_and_4_cse;
  wire while_for_1_and_6_cse;
  wire while_for_1_and_8_cse;
  wire while_for_1_and_10_cse;
  wire while_for_1_and_12_cse;
  wire while_and_cse;
  wire or_3_cse;
  wire or_13_cse;
  wire or_19_cse;
  wire or_21_cse;
  wire or_16_cse;
  wire or_8_cse;
  reg [31:0] while_for_1_i_sva;
  wire run_wen_rtff;
  reg reg_sync1_Pop_mioi_iswt0_tmp;
  reg reg_dma_read_ctrl_Push_mioi_iswt0_tmp;
  reg reg_dma_read_chnl_Pop_mioi_iswt0_tmp;
  reg reg_rotate_in_Push_mioi_iswt0_tmp;
  wire while_mux_rmff;
  wire while_mux_1_rmff;
  wire while_for_data_mux_rmff;
  wire while_for_1_mux_1_rmff;
  wire [31:0] z_out;
  wire [32:0] nl_z_out;
  reg [31:0] while_for_1_out_reg_data_8_sva_1;
  reg [31:0] while_for_1_out_reg_data_6_sva_1;
  reg [31:0] while_for_1_out_reg_data_10_sva_1;
  reg [31:0] while_for_1_out_reg_data_4_sva_1;
  reg [31:0] while_for_1_out_reg_data_12_sva_1;
  reg [31:0] while_for_1_out_reg_data_2_sva_1;
  reg [31:0] while_for_1_out_reg_data_0_sva_1;
  reg [31:0] while_for_1_out_reg_data_7_sva_1;
  reg [31:0] while_for_1_out_reg_data_9_sva_1;
  reg [31:0] while_for_1_out_reg_data_5_sva_1;
  reg [31:0] while_for_1_out_reg_data_11_sva_1;
  reg [31:0] while_for_1_out_reg_data_3_sva_1;
  reg [31:0] while_for_1_out_reg_data_13_sva_1;
  reg [31:0] while_for_1_out_reg_data_1_sva_1;
  wire while_for_1_out_reg_data_and_cse;
  wire while_for_1_out_reg_data_and_2_cse;
  wire while_for_1_out_reg_data_and_3_cse;
  wire while_for_1_out_reg_data_and_6_cse;
  wire while_for_1_out_reg_data_and_7_cse;
  wire while_for_1_out_reg_data_and_10_cse;
  wire while_for_1_out_reg_data_and_12_cse;

  wire and_185_nl;
  wire nor_4_nl;
  wire nor_8_nl;
  wire[31:0] operator_32_false_mux1h_1_nl;
  wire or_149_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat;
  assign nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat
      = {3'b011 , dma_read_ctrl_Push_mioi_idat_63_36 , 4'b0000 , dma_read_ctrl_Push_mioi_idat_31_0};
  wire [511:0] nl_InputBuffer_run_rotate_in_Push_mioi_inst_rotate_in_Push_mioi_idat;
  assign nl_InputBuffer_run_rotate_in_Push_mioi_inst_rotate_in_Push_mioi_idat = {rotate_in_Push_mioi_idat_511_448
      , rotate_in_Push_mioi_idat_447_416 , rotate_in_Push_mioi_idat_415_384 , rotate_in_Push_mioi_idat_383_352
      , rotate_in_Push_mioi_idat_351_320 , rotate_in_Push_mioi_idat_319_288 , rotate_in_Push_mioi_idat_287_256
      , rotate_in_Push_mioi_idat_255_224 , rotate_in_Push_mioi_idat_223_192 , rotate_in_Push_mioi_idat_191_160
      , rotate_in_Push_mioi_idat_159_128 , rotate_in_Push_mioi_idat_127_96 , rotate_in_Push_mioi_idat_95_64
      , rotate_in_Push_mioi_idat_63_32 , rotate_in_Push_mioi_idat_31_0};
  wire  nl_InputBuffer_run_run_fsm_inst_while_for_1_for_C_1_tr0;
  assign nl_InputBuffer_run_run_fsm_inst_while_for_1_for_C_1_tr0 = while_for_1_for_j_3_0_sva_1[3];
  InputBuffer_run_sync1_Pop_mioi InputBuffer_run_sync1_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync1_Pop_mioi_oswt(reg_sync1_Pop_mioi_iswt0_tmp),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp),
      .sync1_Pop_mioi_oswt_pff(while_mux_rmff)
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi InputBuffer_run_dma_read_ctrl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_ctrl_Push_mioi_oswt(reg_dma_read_ctrl_Push_mioi_iswt0_tmp),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp),
      .dma_read_ctrl_Push_mioi_idat(nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat[66:0]),
      .dma_read_ctrl_Push_mioi_oswt_pff(while_mux_1_rmff)
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi InputBuffer_run_dma_read_chnl_Pop_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .dma_read_chnl_Pop_mioi_oswt(reg_dma_read_chnl_Pop_mioi_iswt0_tmp),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp),
      .dma_read_chnl_Pop_mioi_idat_mxwt(dma_read_chnl_Pop_mioi_idat_mxwt),
      .dma_read_chnl_Pop_mioi_oswt_pff(while_for_data_mux_rmff)
    );
  InputBuffer_run_rotate_in_Push_mioi InputBuffer_run_rotate_in_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .rotate_in_Push_mioi_oswt(reg_rotate_in_Push_mioi_iswt0_tmp),
      .rotate_in_Push_mioi_wen_comp(rotate_in_Push_mioi_wen_comp),
      .rotate_in_Push_mioi_idat(nl_InputBuffer_run_rotate_in_Push_mioi_inst_rotate_in_Push_mioi_idat[511:0]),
      .rotate_in_Push_mioi_oswt_pff(while_for_1_mux_1_rmff)
    );
  InputBuffer_run_staller InputBuffer_run_staller_inst (
      .run_wen(run_wen_rtff),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp),
      .rotate_in_Push_mioi_wen_comp(rotate_in_Push_mioi_wen_comp)
    );
  InputBuffer_run_run_fsm InputBuffer_run_run_fsm_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .while_C_2_tr0(exit_while_for_sva_mx0),
      .while_for_C_1_tr0(exit_while_for_sva_mx0),
      .while_C_3_tr0(exit_while_for_1_sva_mx0),
      .while_for_1_for_C_1_tr0(nl_InputBuffer_run_run_fsm_inst_while_for_1_for_C_1_tr0),
      .while_for_1_C_0_tr0(exit_while_for_1_sva_mx0)
    );
  assign mem_rsci_clken_d = run_wen;
  assign while_for_1_and_cse = run_wen & ((and_dcpl_10 & and_dcpl_9 & (fsm_output[7]))
      | or_tmp_15);
  assign while_for_1_and_2_cse = run_wen & ((and_dcpl_13 & and_dcpl_9 & (fsm_output[7]))
      | or_tmp_21);
  assign while_for_1_and_4_cse = run_wen & ((and_dcpl_16 & and_dcpl_9 & (fsm_output[7]))
      | or_tmp_27);
  assign while_for_1_and_6_cse = run_wen & (((while_for_1_for_j_3_0_sva_1[3]) & while_for_1_for_and_5_cse_sva
      & (fsm_output[7])) | or_tmp_33);
  assign while_for_1_and_8_cse = run_wen & ((and_dcpl_10 & and_dcpl_21 & (fsm_output[7]))
      | or_tmp_39);
  assign while_for_1_and_10_cse = run_wen & ((and_dcpl_13 & and_dcpl_21 & (fsm_output[7]))
      | or_tmp_45);
  assign while_for_1_and_12_cse = run_wen & ((and_dcpl_16 & and_dcpl_21 & (fsm_output[7]))
      | or_tmp_51);
  assign or_8_cse = or_dcpl_7 | (~ (while_for_1_for_j_3_0_sva_2_0_1[2]));
  assign while_for_1_out_reg_data_and_cse = run_wen & (~ or_8_cse) & (fsm_output[7]);
  assign or_13_cse = or_dcpl_12 | (while_for_1_for_j_3_0_sva_2_0_1[2]);
  assign while_for_1_out_reg_data_and_2_cse = run_wen & (~ or_13_cse) & (fsm_output[7]);
  assign or_16_cse = or_dcpl_12 | (~ (while_for_1_for_j_3_0_sva_2_0_1[2]));
  assign while_for_1_out_reg_data_and_3_cse = run_wen & (~ or_16_cse) & (fsm_output[7]);
  assign or_19_cse = or_dcpl_7 | (while_for_1_for_j_3_0_sva_2_0_1[2]);
  assign while_for_1_out_reg_data_and_6_cse = run_wen & (~ or_19_cse) & (fsm_output[7]);
  assign or_21_cse = or_dcpl_2 | (~ (while_for_1_for_j_3_0_sva_2_0_1[2]));
  assign while_for_1_out_reg_data_and_7_cse = run_wen & (~ or_21_cse) & (fsm_output[7]);
  assign while_for_1_out_reg_data_and_10_cse = run_wen & while_for_1_for_and_5_cse_sva
      & (fsm_output[7]);
  assign while_and_cse = run_wen & (fsm_output[1]);
  assign and_185_nl = (while_for_1_for_j_3_0_sva_1[3]) & (fsm_output[7]);
  assign while_for_1_mux_1_rmff = MUX_s_1_2_2(reg_rotate_in_Push_mioi_iswt0_tmp,
      and_185_nl, run_wen);
  assign nor_4_nl = ~(exit_while_for_sva_mx0 | (~((fsm_output[2]) | (fsm_output[4]))));
  assign while_for_data_mux_rmff = MUX_s_1_2_2(reg_dma_read_chnl_Pop_mioi_iswt0_tmp,
      nor_4_nl, run_wen);
  assign while_mux_1_rmff = MUX_s_1_2_2(reg_dma_read_ctrl_Push_mioi_iswt0_tmp, (fsm_output[1]),
      run_wen);
  assign while_mux_rmff = MUX_s_1_2_2(reg_sync1_Pop_mioi_iswt0_tmp, (fsm_output[0]),
      run_wen);
  assign while_for_1_out_reg_data_and_12_cse = run_wen & (~ or_3_cse) & (fsm_output[7]);
  assign exit_while_for_sva_mx0 = MUX_s_1_2_2((~ (z_out[28])), (~ ($signed((while_for_1_i_sva[31:4]))
      < $signed({1'b0, (cfg_block_size[28:1])}))), fsm_output[4]);
  assign exit_while_for_1_sva_mx0 = MUX_s_1_2_2((~ ($signed({1'b0, 1'b0}) < $signed(cfg_block_size))),
      (~ ($signed(z_out) < $signed(cfg_block_size))), fsm_output[8]);
  assign or_dcpl_2 = (while_for_1_for_j_3_0_sva_2_0_1[1:0]!=2'b00);
  assign or_3_cse = or_dcpl_2 | (while_for_1_for_j_3_0_sva_2_0_1[2]);
  assign or_dcpl_7 = (while_for_1_for_j_3_0_sva_2_0_1[1:0]!=2'b10);
  assign or_dcpl_12 = (while_for_1_for_j_3_0_sva_2_0_1[1:0]!=2'b01);
  assign and_dcpl_9 = (~ (while_for_1_for_j_3_0_sva_2_0_1[2])) & (while_for_1_for_j_3_0_sva_1[3]);
  assign and_dcpl_10 = ~((while_for_1_for_j_3_0_sva_2_0_1[1:0]!=2'b00));
  assign and_dcpl_13 = (while_for_1_for_j_3_0_sva_2_0_1[1:0]==2'b01);
  assign and_dcpl_16 = (while_for_1_for_j_3_0_sva_2_0_1[1:0]==2'b10);
  assign and_dcpl_21 = (while_for_1_for_j_3_0_sva_2_0_1[2]) & (while_for_1_for_j_3_0_sva_1[3]);
  assign or_tmp_15 = or_3_cse & (while_for_1_for_j_3_0_sva_1[3]) & (fsm_output[7]);
  assign or_tmp_21 = or_13_cse & (while_for_1_for_j_3_0_sva_1[3]) & (fsm_output[7]);
  assign or_tmp_27 = or_19_cse & (while_for_1_for_j_3_0_sva_1[3]) & (fsm_output[7]);
  assign or_tmp_33 = (while_for_1_for_j_3_0_sva_1[3]) & (~ while_for_1_for_and_5_cse_sva)
      & (fsm_output[7]);
  assign or_tmp_39 = or_21_cse & (while_for_1_for_j_3_0_sva_1[3]) & (fsm_output[7]);
  assign or_tmp_45 = or_16_cse & (while_for_1_for_j_3_0_sva_1[3]) & (fsm_output[7]);
  assign or_tmp_51 = or_8_cse & (while_for_1_for_j_3_0_sva_1[3]) & (fsm_output[7]);
  assign mem_rsci_d_d = dma_read_chnl_Pop_mioi_idat_mxwt;
  assign mem_rsci_radr_d = {(while_for_1_i_sva[10:0]) , while_for_1_for_j_3_0_sva_2_0_1};
  assign mem_rsci_wadr_d = while_for_1_i_sva[13:0];
  assign mem_rsci_we_d_pff = fsm_output[3];
  assign mem_rsci_readA_r_ram_ir_internal_RMASK_B_d = fsm_output[6];
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_63_32 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_cse ) begin
      rotate_in_Push_mioi_idat_31_0 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_0_sva_1,
          or_tmp_15);
      rotate_in_Push_mioi_idat_63_32 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_1_sva_1,
          or_tmp_15);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_95_64 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_127_96 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_2_cse ) begin
      rotate_in_Push_mioi_idat_95_64 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_2_sva_1,
          or_tmp_21);
      rotate_in_Push_mioi_idat_127_96 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_3_sva_1,
          or_tmp_21);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_159_128 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_191_160 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_4_cse ) begin
      rotate_in_Push_mioi_idat_159_128 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_4_sva_1,
          or_tmp_27);
      rotate_in_Push_mioi_idat_191_160 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_5_sva_1,
          or_tmp_27);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_223_192 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_255_224 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_6_cse ) begin
      rotate_in_Push_mioi_idat_223_192 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_6_sva_1,
          or_tmp_33);
      rotate_in_Push_mioi_idat_255_224 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_7_sva_1,
          or_tmp_33);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_287_256 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_319_288 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_8_cse ) begin
      rotate_in_Push_mioi_idat_287_256 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_8_sva_1,
          or_tmp_39);
      rotate_in_Push_mioi_idat_319_288 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_9_sva_1,
          or_tmp_39);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_351_320 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_383_352 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_10_cse ) begin
      rotate_in_Push_mioi_idat_351_320 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_10_sva_1,
          or_tmp_45);
      rotate_in_Push_mioi_idat_383_352 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_11_sva_1,
          or_tmp_45);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_415_384 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_447_416 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_12_cse ) begin
      rotate_in_Push_mioi_idat_415_384 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_12_sva_1,
          or_tmp_51);
      rotate_in_Push_mioi_idat_447_416 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_13_sva_1,
          or_tmp_51);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_511_448 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (while_for_1_for_j_3_0_sva_1[3]) & (fsm_output[7]) ) begin
      rotate_in_Push_mioi_idat_511_448 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_13_sva_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_12_sva_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_cse ) begin
      while_for_1_out_reg_data_13_sva_1 <= mem_rsci_q_d[63:32];
      while_for_1_out_reg_data_12_sva_1 <= mem_rsci_q_d[31:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_2_sva_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_3_sva_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_2_cse ) begin
      while_for_1_out_reg_data_2_sva_1 <= mem_rsci_q_d[31:0];
      while_for_1_out_reg_data_3_sva_1 <= mem_rsci_q_d[63:32];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_11_sva_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_10_sva_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_3_cse ) begin
      while_for_1_out_reg_data_11_sva_1 <= mem_rsci_q_d[63:32];
      while_for_1_out_reg_data_10_sva_1 <= mem_rsci_q_d[31:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_4_sva_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_5_sva_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_6_cse ) begin
      while_for_1_out_reg_data_4_sva_1 <= mem_rsci_q_d[31:0];
      while_for_1_out_reg_data_5_sva_1 <= mem_rsci_q_d[63:32];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_9_sva_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_8_sva_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_7_cse ) begin
      while_for_1_out_reg_data_9_sva_1 <= mem_rsci_q_d[63:32];
      while_for_1_out_reg_data_8_sva_1 <= mem_rsci_q_d[31:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_6_sva_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_7_sva_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_10_cse ) begin
      while_for_1_out_reg_data_6_sva_1 <= mem_rsci_q_d[31:0];
      while_for_1_out_reg_data_7_sva_1 <= mem_rsci_q_d[63:32];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_ctrl_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      dma_read_ctrl_Push_mioi_idat_63_36 <= 28'b0000000000000000000000000000;
    end
    else if ( while_and_cse ) begin
      dma_read_ctrl_Push_mioi_idat_31_0 <= cfg_input_base;
      dma_read_ctrl_Push_mioi_idat_63_36 <= cfg_block_size[28:1];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_rotate_in_Push_mioi_iswt0_tmp <= 1'b0;
      reg_dma_read_chnl_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_dma_read_ctrl_Push_mioi_iswt0_tmp <= 1'b0;
      reg_sync1_Pop_mioi_iswt0_tmp <= 1'b0;
      run_wen <= 1'b1;
    end
    else begin
      reg_rotate_in_Push_mioi_iswt0_tmp <= while_for_1_mux_1_rmff;
      reg_dma_read_chnl_Pop_mioi_iswt0_tmp <= while_for_data_mux_rmff;
      reg_dma_read_ctrl_Push_mioi_iswt0_tmp <= while_mux_1_rmff;
      reg_sync1_Pop_mioi_iswt0_tmp <= while_mux_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((fsm_output[4]) | (fsm_output[6]) | (fsm_output[7])))
        ) begin
      while_for_1_i_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000, z_out,
          nor_8_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_0_sva_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_1_sva_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_12_cse ) begin
      while_for_1_out_reg_data_0_sva_1 <= mem_rsci_q_d[31:0];
      while_for_1_out_reg_data_1_sva_1 <= mem_rsci_q_d[63:32];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_j_3_0_sva_2_0_1 <= 3'b000;
    end
    else if ( run_wen & ((fsm_output[5]) | (fsm_output[8]) | (fsm_output[7])) ) begin
      while_for_1_for_j_3_0_sva_2_0_1 <= MUX_v_3_2_2(3'b000, (while_for_1_for_j_3_0_sva_1[2:0]),
          (fsm_output[7]));
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_j_3_0_sva_1 <= 4'b0000;
      while_for_1_for_and_5_cse_sva <= 1'b0;
    end
    else if ( run_wen ) begin
      while_for_1_for_j_3_0_sva_1 <= z_out[3:0];
      while_for_1_for_and_5_cse_sva <= (while_for_1_for_j_3_0_sva_2_0_1==3'b011);
    end
  end
  assign nor_8_nl = ~((fsm_output[2]) | (fsm_output[5]));
  assign or_149_nl = (fsm_output[8]) | (fsm_output[3]);
  assign operator_32_false_mux1h_1_nl = MUX1HOT_v_32_3_2(({4'b1111 , (~ (cfg_block_size[28:1]))}),
      while_for_1_i_sva, ({29'b00000000000000000000000000000 , while_for_1_for_j_3_0_sva_2_0_1}),
      {(fsm_output[2]) , or_149_nl , (fsm_output[6])});
  assign nl_z_out = operator_32_false_mux1h_1_nl + 32'b00000000000000000000000000000001;
  assign z_out = nl_z_out[31:0];

  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run
// ------------------------------------------------------------------


module Rotate_run (
  clk, rst, cfg_cos_alpha, cfg_sin_alpha, cfg_cos_beta, cfg_sin_beta, cfg_cos_gamma,
      cfg_sin_gamma, cfg_cos_2_alpha, cfg_sin_2_alpha, cfg_cos_2_beta, cfg_cos_2_gamma,
      cfg_sin_2_gamma, cfg_cos_3_alpha, cfg_sin_3_alpha, cfg_cos_3_beta, cfg_sin_3_beta,
      cfg_cos_3_gamma, cfg_sin_3_gamma, rotate_in_val, rotate_in_rdy, rotate_in_msg,
      rotate_out_val, rotate_out_rdy, rotate_out_msg, while_mul_103_cmp_a, while_mul_103_cmp_b,
      while_mul_103_cmp_en, while_mul_103_cmp_z
);
  input clk;
  input rst;
  input [31:0] cfg_cos_alpha;
  input [31:0] cfg_sin_alpha;
  input [31:0] cfg_cos_beta;
  input [31:0] cfg_sin_beta;
  input [31:0] cfg_cos_gamma;
  input [31:0] cfg_sin_gamma;
  input [31:0] cfg_cos_2_alpha;
  input [31:0] cfg_sin_2_alpha;
  input [31:0] cfg_cos_2_beta;
  input [31:0] cfg_cos_2_gamma;
  input [31:0] cfg_sin_2_gamma;
  input [31:0] cfg_cos_3_alpha;
  input [31:0] cfg_sin_3_alpha;
  input [31:0] cfg_cos_3_beta;
  input [31:0] cfg_sin_3_beta;
  input [31:0] cfg_cos_3_gamma;
  input [31:0] cfg_sin_3_gamma;
  input rotate_in_val;
  output rotate_in_rdy;
  input [511:0] rotate_in_msg;
  output rotate_out_val;
  input rotate_out_rdy;
  output [511:0] rotate_out_msg;
  output [34:0] while_mul_103_cmp_a;
  output [51:0] while_mul_103_cmp_b;
  output while_mul_103_cmp_en;
  input [77:0] while_mul_103_cmp_z;


  // Interconnect Declarations
  wire run_wen;
  wire run_wten;
  wire rotate_in_Pop_mioi_bawt;
  wire rotate_in_Pop_mioi_iden;
  reg rotate_in_Pop_mioi_iswt0;
  wire rotate_in_Pop_mioi_iden_1;
  wire rotate_in_Pop_mioi_wen_comp;
  wire [479:0] rotate_in_Pop_mioi_idat_mxwt;
  wire rotate_in_Pop_mioi_ivld;
  wire rotate_in_Pop_mioi_ivld_oreg;
  wire rotate_out_Push_mioi_bawt;
  wire rotate_out_Push_mioi_iden;
  wire rotate_out_Push_mioi_wen_comp;
  wire rotate_out_Push_mioi_irdy;
  wire rotate_out_Push_mioi_irdy_oreg;
  wire while_mul_110_cmp_bawt;
  wire while_mul_110_cmp_iden;
  wire while_mul_110_cmp_iden_1;
  wire while_mul_110_cmp_iden_2;
  wire while_mul_110_cmp_iden_3;
  wire while_mul_110_cmp_iden_4;
  wire while_mul_110_cmp_iden_5;
  wire [129:0] while_mul_110_cmp_z_mxwt;
  wire [105:0] while_mul_110_cmp_z_mxwt_1;
  wire [100:0] while_mul_110_cmp_z_mxwt_2;
  wire while_mul_111_cmp_bawt;
  wire while_mul_111_cmp_iden;
  wire while_mul_111_cmp_iden_1;
  wire while_mul_111_cmp_iden_2;
  reg while_mul_111_cmp_iswt2_1;
  wire while_mul_111_cmp_iden_3;
  wire while_mul_111_cmp_iden_4;
  reg while_mul_111_cmp_iswt2_2;
  wire while_mul_111_cmp_iden_5;
  wire [121:0] while_mul_111_cmp_z_mxwt;
  wire [121:0] while_mul_111_cmp_z_mxwt_1;
  wire [121:0] while_mul_111_cmp_z_mxwt_2;
  wire while_mul_79_cmp_bawt;
  wire while_mul_79_cmp_iden;
  wire while_mul_79_cmp_iden_1;
  wire while_mul_79_cmp_iden_2;
  reg while_mul_79_cmp_iswt2_1;
  wire while_mul_79_cmp_iden_3;
  wire while_mul_79_cmp_iden_4;
  wire while_mul_79_cmp_iden_5;
  wire [98:0] while_mul_79_cmp_z_mxwt;
  wire [89:0] while_mul_79_cmp_z_mxwt_1;
  wire [89:0] while_mul_79_cmp_z_mxwt_2;
  wire while_mul_76_cmp_bawt;
  wire while_mul_76_cmp_iden;
  wire while_mul_76_cmp_iden_1;
  wire while_mul_76_cmp_iden_2;
  reg while_mul_76_cmp_iswt2_1;
  wire while_mul_76_cmp_iden_3;
  wire while_mul_76_cmp_iden_4;
  wire while_mul_76_cmp_iden_5;
  wire [120:0] while_mul_76_cmp_z_mxwt;
  wire [103:0] while_mul_76_cmp_z_mxwt_1;
  wire [120:0] while_mul_76_cmp_z_mxwt_2;
  wire while_mul_77_cmp_bawt;
  wire while_mul_77_cmp_iden;
  reg while_mul_77_cmp_iswt1;
  wire while_mul_77_cmp_iden_1;
  wire while_mul_77_cmp_iden_2;
  wire while_mul_77_cmp_iden_3;
  wire [82:0] while_mul_77_cmp_z_mxwt;
  wire [90:0] while_mul_77_cmp_z_mxwt_1;
  wire while_while_mul_cmp_bawt;
  wire while_while_mul_cmp_iden;
  reg while_while_mul_cmp_iswt3;
  wire while_while_mul_cmp_iden_1;
  wire while_while_mul_cmp_iden_2;
  wire while_while_mul_cmp_iden_3;
  wire [128:0] while_while_mul_cmp_z_mxwt;
  wire [128:0] while_while_mul_cmp_z_mxwt_1;
  wire while_mul_67_cmp_bawt;
  wire while_mul_67_cmp_iden;
  reg while_mul_67_cmp_iswt1;
  wire while_mul_67_cmp_iden_1;
  wire while_mul_67_cmp_iden_2;
  reg while_mul_67_cmp_iswt1_1;
  wire while_mul_67_cmp_iden_3;
  wire while_mul_67_cmp_iden_4;
  wire while_mul_67_cmp_iden_5;
  wire [89:0] while_mul_67_cmp_z_mxwt;
  wire [89:0] while_mul_67_cmp_z_mxwt_1;
  wire [88:0] while_mul_67_cmp_z_mxwt_2;
  wire while_mul_72_cmp_bawt;
  wire while_mul_72_cmp_iden;
  reg while_mul_72_cmp_iswt2;
  wire while_mul_72_cmp_iden_1;
  wire while_mul_72_cmp_iden_2;
  reg while_mul_72_cmp_iswt2_1;
  wire while_mul_72_cmp_iden_3;
  wire [102:0] while_mul_72_cmp_z_mxwt;
  wire [100:0] while_mul_72_cmp_z_mxwt_1;
  wire while_mul_73_cmp_bawt;
  wire while_mul_73_cmp_iden;
  reg while_mul_73_cmp_iswt1;
  wire while_mul_73_cmp_iden_1;
  wire while_mul_73_cmp_iden_2;
  wire while_mul_73_cmp_iden_3;
  wire [84:0] while_mul_73_cmp_z_mxwt;
  wire [84:0] while_mul_73_cmp_z_mxwt_1;
  wire while_mul_37_cmp_bawt;
  wire while_mul_37_cmp_iden;
  reg while_mul_37_cmp_iswt2;
  wire while_mul_37_cmp_iden_1;
  wire while_mul_37_cmp_iden_2;
  wire while_mul_37_cmp_iden_3;
  wire while_mul_37_cmp_iden_4;
  wire while_mul_37_cmp_iden_5;
  wire [81:0] while_mul_37_cmp_z_mxwt;
  wire [77:0] while_mul_37_cmp_z_mxwt_1;
  wire [79:0] while_mul_37_cmp_z_mxwt_2;
  wire while_mul_34_cmp_bawt;
  wire while_mul_34_cmp_iden;
  reg while_mul_34_cmp_iswt2;
  wire while_mul_34_cmp_iden_1;
  wire while_mul_34_cmp_iden_2;
  wire while_mul_34_cmp_iden_3;
  wire [103:0] while_mul_34_cmp_z_mxwt;
  wire [103:0] while_mul_34_cmp_z_mxwt_1;
  wire while_mul_25_cmp_bawt;
  wire while_mul_25_cmp_iden;
  reg while_mul_25_cmp_iswt1;
  wire while_mul_25_cmp_iden_1;
  wire while_mul_25_cmp_iden_2;
  wire while_mul_25_cmp_iden_3;
  wire while_mul_25_cmp_iden_4;
  wire while_mul_25_cmp_iden_5;
  wire [87:0] while_mul_25_cmp_z_mxwt;
  wire [88:0] while_mul_25_cmp_z_mxwt_1;
  wire [87:0] while_mul_25_cmp_z_mxwt_2;
  reg [31:0] rotate_out_Push_mioi_idat_511_480;
  reg [31:0] rotate_out_Push_mioi_idat_479_448;
  reg [31:0] rotate_out_Push_mioi_idat_447_416;
  reg [31:0] rotate_out_Push_mioi_idat_415_384;
  reg [31:0] rotate_out_Push_mioi_idat_383_352;
  reg [31:0] rotate_out_Push_mioi_idat_351_320;
  reg [31:0] rotate_out_Push_mioi_idat_319_288;
  reg [31:0] rotate_out_Push_mioi_idat_287_256;
  reg [31:0] rotate_out_Push_mioi_idat_255_224;
  reg [31:0] rotate_out_Push_mioi_idat_223_192;
  reg [31:0] rotate_out_Push_mioi_idat_191_160;
  reg [31:0] rotate_out_Push_mioi_idat_159_128;
  reg [31:0] rotate_out_Push_mioi_idat_127_96;
  reg [31:0] rotate_out_Push_mioi_idat_95_64;
  reg [31:0] rotate_out_Push_mioi_idat_63_32;
  wire [4:0] fsm_output;
  wire while_nor_tmp;
  wire while_and_76_tmp;
  wire while_and_64_tmp;
  wire while_and_56_tmp;
  wire while_and_44_tmp;
  wire and_dcpl_1;
  wire or_dcpl_1;
  wire or_tmp_8;
  wire mux_tmp;
  wire not_tmp_9;
  wire or_tmp_17;
  wire or_tmp_25;
  wire or_tmp_33;
  wire or_dcpl_24;
  wire or_dcpl_25;
  wire or_dcpl_26;
  wire or_dcpl_28;
  wire or_dcpl_29;
  wire or_dcpl_32;
  wire or_dcpl_37;
  wire or_dcpl_38;
  wire or_dcpl_39;
  wire and_dcpl_17;
  wire or_dcpl_42;
  wire and_dcpl_21;
  wire and_dcpl_29;
  wire or_dcpl_59;
  wire and_dcpl_49;
  wire or_dcpl_60;
  wire and_dcpl_67;
  wire and_dcpl_69;
  wire or_dcpl_80;
  wire or_dcpl_81;
  wire or_tmp_72;
  wire or_tmp_76;
  wire or_tmp_77;
  wire or_dcpl_123;
  wire or_dcpl_124;
  wire and_dcpl_130;
  wire or_dcpl_130;
  wire or_dcpl_131;
  wire or_tmp_183;
  wire or_tmp_184;
  wire or_tmp_185;
  wire or_tmp_186;
  wire mux_tmp_88;
  wire or_tmp_188;
  wire nor_tmp_32;
  wire nor_tmp_35;
  wire or_dcpl_159;
  wire or_dcpl_163;
  wire or_dcpl_169;
  wire or_dcpl_173;
  wire or_dcpl_177;
  wire or_dcpl_183;
  wire or_dcpl_186;
  wire or_dcpl_190;
  wire and_dcpl_228;
  wire or_dcpl_196;
  wire and_dcpl_229;
  wire and_dcpl_230;
  wire or_dcpl_198;
  wire or_dcpl_203;
  wire and_dcpl_232;
  wire or_dcpl_215;
  wire and_dcpl_235;
  wire and_dcpl_238;
  wire or_dcpl_236;
  wire or_dcpl_252;
  wire or_dcpl_263;
  wire or_tmp_289;
  wire or_tmp_300;
  wire or_tmp_313;
  wire or_tmp_346;
  wire or_tmp_353;
  wire or_tmp_395;
  wire or_tmp_466;
  wire or_tmp_474;
  wire or_tmp_488;
  wire and_515_cse;
  wire and_538_cse;
  wire and_514_cse;
  wire and_541_cse;
  wire and_509_cse;
  wire and_511_cse;
  wire and_507_cse;
  wire and_535_cse;
  wire and_581_cse;
  wire and_504_cse;
  wire and_606_cse;
  wire and_540_cse;
  wire and_620_cse;
  wire and_597_cse;
  wire and_580_cse;
  wire and_559_cse;
  wire and_539_cse;
  wire and_599_cse;
  wire and_704_cse;
  wire and_560_cse;
  wire and_454_cse;
  wire and_513_cse;
  wire and_517_cse;
  reg while_stage_v_3;
  reg while_stage_v_4;
  reg while_stage_v_5;
  reg while_stage_v_6;
  wire while_while_or_30_cse_1;
  wire while_or_69_cse_1;
  wire while_or_70_cse_1;
  reg while_stage_v_7;
  reg while_stage_v_8;
  reg while_stage_v_9;
  reg while_stage_v_10;
  wire while_stage_v_11_mx2;
  reg while_stage_v_11;
  reg while_stage_v_12;
  reg while_stage_v_13;
  reg while_stage_v_14;
  wire while_stage_v_15_mx2;
  reg while_stage_v_15;
  reg while_stage_v_16;
  reg while_stage_v_17;
  reg while_stage_v_18;
  reg while_stage_v_19;
  reg while_stage_v_20;
  reg while_stage_v_21;
  reg while_stage_v_22;
  reg while_stage_v_23;
  reg while_stage_v_24;
  reg while_stage_v_25;
  wire while_stage_v_18_mx2;
  wire while_while_or_21_cse_1;
  wire while_stage_v_26_mx2;
  reg while_stage_v_1;
  reg while_stage_v_2;
  wire while_stage_v_5_mx2;
  wire while_or_19_cse_1;
  wire while_or_20_cse_1;
  wire while_while_or_11_cse_1;
  wire while_while_or_10_cse_1;
  wire while_stage_v_9_mx2;
  wire while_stage_v_13_mx2;
  wire while_stage_v_17_mx2;
  reg while_stage_v;
  wire while_while_or_cse_1;
  wire while_while_or_1_cse_1;
  wire while_stage_v_12_mx1;
  wire while_stage_v_16_mx1;
  wire while_and_cse;
  reg reg_while_mul_25_cmp_oswt_2_cse;
  reg reg_while_mul_25_cmp_iswt1_1_cse;
  reg reg_while_mul_25_cmp_iswt1_2_cse;
  reg reg_while_mul_25_cmp_oswt_1_cse;
  reg reg_while_while_mul_cmp_iswt3_1_cse;
  reg reg_while_mul_67_cmp_oswt_cse;
  reg reg_while_mul_76_cmp_oswt_cse;
  reg reg_while_mul_111_cmp_oswt_2_cse;
  reg reg_while_mul_111_cmp_oswt_1_cse;
  reg reg_while_mul_79_cmp_iswt2_cse;
  wire while_and_140_cse;
  wire while_and_141_cse;
  wire while_and_157_cse;
  wire while_nor_1_cse;
  wire or_12_cse;
  wire and_1616_cse;
  wire nor_30_cse;
  wire nor_29_cse;
  wire or_14_cse;
  wire or_9_cse;
  wire and_414_cse;
  wire and_11_cse;
  wire mux_142_cse;
  reg reg_rotate_out_Push_mioi_iswt0_cse;
  wire mux_117_cse;
  wire mux_151_cse;
  wire mux_124_cse;
  wire mux_123_cse;
  wire mux_49_cse;
  wire mux_118_cse;
  wire mux_51_cse;
  wire or_655_rmff;
  wire or_654_rmff;
  wire or_647_rmff;
  wire or_639_rmff;
  wire or_633_rmff;
  wire or_624_rmff;
  wire or_614_rmff;
  wire or_604_rmff;
  wire or_606_rmff;
  wire or_597_rmff;
  wire or_589_rmff;
  wire or_579_rmff;
  wire or_568_rmff;
  reg [83:0] while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm_1_1;
  reg [57:0] while_mul_83_itm_1;
  reg [57:0] while_mul_136_itm_1;
  reg [88:0] while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1;
  reg [88:0] while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1_1;
  reg [88:0] while_asn_itm_1;
  reg [56:0] while_mul_89_itm_2;
  reg [56:0] while_mul_108_itm_1;
  reg [56:0] while_mul_132_itm_3;
  reg [56:0] while_mul_78_itm_1;
  reg [120:0] while_asn_178_itm_2;
  reg [57:0] while_mul_68_itm_2;
  reg [56:0] while_mul_147_itm;
  reg [57:0] while_mul_113_itm;
  reg [57:0] while_mul_93_itm_2;
  reg [31:0] while_slc_55_24_8_ncse_sva_5;
  reg [87:0] while_slc_while_mul_25_cmp_z_mxwt_87_0_itm;
  reg [83:0] while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm;
  reg [51:0] while_mul_81_itm_2;
  reg [51:0] while_mul_122_itm_2;
  reg [51:0] while_mul_142_itm_3;
  reg [51:0] while_mul_74_itm_1;
  wire [34:0] while_acc_89_cse_sva_1;
  wire [36:0] nl_while_acc_89_cse_sva_1;
  reg [31:0] while_slc_55_24_9_ncse_sva;
  reg [63:0] while_mul_96_itm_5;
  reg [51:0] while_mul_118_itm_3;
  reg [63:0] while_mul_38_cse_sva;
  reg [31:0] while_slc_55_24_9_ncse_sva_2;
  reg [89:0] while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm_2;
  reg [87:0] while_mul_25_cse_sva_1;
  reg [87:0] while_mul_25_cse_sva;
  reg [56:0] while_mul_101_itm_2;
  reg [55:0] while_mul_36_itm_1;
  reg [55:0] while_mul_26_cse_sva_4;
  reg [55:0] while_mul_26_cse_sva;
  reg [8:0] while_acc_79_cse_sva_3;
  reg [8:0] while_acc_79_cse_sva_4;
  reg [51:0] while_mul_104_itm_2;
  reg [479:0] while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32;
  wire while_or_85_itm;
  wire while_or_95_itm;
  wire while_or_97_itm;
  wire [57:0] z_out;
  wire signed [58:0] nl_z_out;
  wire [57:0] z_out_1;
  wire signed [58:0] nl_z_out_1;
  wire [57:0] z_out_2;
  wire signed [58:0] nl_z_out_2;
  wire [58:0] z_out_3;
  wire signed [65:0] nl_z_out_3;
  wire [57:0] z_out_4;
  wire signed [64:0] nl_z_out_4;
  wire [63:0] z_out_20;
  wire [32:0] z_out_21;
  wire [33:0] nl_z_out_21;
  wire [59:0] z_out_22;
  wire signed [67:0] nl_z_out_22;
  wire [51:0] z_out_23;
  wire signed [52:0] nl_z_out_23;
  wire [32:0] z_out_25;
  wire [34:0] nl_z_out_25;
  reg [31:0] while_slc_55_24_ncse_sva;
  reg [31:0] while_slc_55_24_1_ncse_sva;
  reg [31:0] while_slc_55_24_3_ncse_sva;
  reg [31:0] while_slc_55_24_6_ncse_sva;
  reg [31:0] while_slc_55_24_7_ncse_sva;
  reg [31:0] while_slc_55_24_8_ncse_sva;
  reg [31:0] while_slc_55_24_10_ncse_sva;
  reg [31:0] while_slc_55_24_11_ncse_sva;
  reg [31:0] while_slc_while_acc_78_79_48_ncse_sva;
  reg [8:0] while_acc_79_cse_sva;
  wire [9:0] nl_while_acc_79_cse_sva;
  reg [31:0] while_slc_79_48_ncse_sva;
  reg [31:0] while_slc_while_acc_83_98_67_ncse_sva;
  reg [31:0] while_slc_103_72_3_ncse_sva;
  reg [31:0] while_slc_while_acc_93_77_46_ncse_sva;
  reg [31:0] while_slc_while_acc_98_82_51_ncse_sva;
  reg [55:0] while_mul_1_itm;
  reg [55:0] while_mul_2_itm;
  reg [55:0] while_mul_3_itm;
  reg [55:0] while_mul_7_itm;
  reg [55:0] while_mul_13_itm;
  reg [55:0] while_mul_15_itm;
  reg [55:0] while_mul_16_itm;
  reg [55:0] while_mul_17_itm;
  reg [55:0] while_mul_18_itm;
  reg [55:0] while_mul_19_itm;
  reg [55:0] while_mul_36_itm;
  reg [79:0] while_slc_while_mul_37_cmp_z_mxwt_2_79_0_itm;
  reg [79:0] while_slc_while_mul_37_cmp_z_mxwt_2_79_0_1_itm;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm;
  reg [55:0] while_mul_56_itm;
  reg [55:0] while_mul_58_itm;
  reg [55:0] while_mul_60_itm;
  reg [55:0] while_mul_61_itm;
  reg [55:0] while_mul_62_itm;
  reg [55:0] while_mul_63_itm;
  reg [55:0] while_mul_64_itm;
  reg [55:0] while_mul_65_itm;
  reg [55:0] while_mul_66_itm;
  reg [51:0] while_mul_74_itm;
  reg [98:0] while_slc_while_while_mul_105_2_itm;
  reg [32:0] operator_64_40_true_AC_TRN_AC_WRAP_acc_itm;
  reg [58:0] while_mul_70_itm;
  reg [88:0] while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm;
  reg [51:0] while_mul_81_itm;
  reg [83:0] while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm_1;
  reg [88:0] while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1_2;
  reg [103:0] while_slc_while_mul_76_cmp_z_mxwt_1_103_0_1_itm;
  reg [57:0] while_mul_83_itm;
  reg [89:0] while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm;
  reg [32:0] operator_64_40_true_AC_TRN_AC_WRAP_1_acc_itm;
  reg [56:0] while_mul_108_itm;
  reg [59:0] while_mul_115_itm;
  reg [51:0] while_mul_118_itm;
  reg [77:0] while_slc_while_mul_37_cmp_z_mxwt_1_77_0_itm;
  reg [51:0] while_mul_122_itm;
  reg [100:0] while_slc_while_mul_72_cmp_z_mxwt_1_100_0_itm;
  reg [100:0] while_slc_while_mul_124_128_1_itm;
  reg [34:0] while_acc_121_itm;
  wire [36:0] nl_while_acc_121_itm;
  reg [58:0] while_mul_129_itm;
  reg [56:0] while_mul_132_itm;
  reg [82:0] while_slc_while_mul_77_cmp_z_mxwt_82_0_itm;
  reg [57:0] while_mul_136_itm;
  reg [120:0] while_asn_178_itm;
  reg [128:0] while_asn_180_itm;
  reg [128:0] while_acc_128_itm;
  wire [130:0] nl_while_acc_128_itm;
  reg [35:0] while_acc_103_itm;
  wire [37:0] nl_while_acc_103_itm;
  reg [59:0] while_mul_138_itm;
  reg [51:0] while_mul_142_itm;
  wire signed [52:0] nl_while_mul_142_itm;
  reg [55:0] while_mul_159_itm;
  wire signed [63:0] nl_while_mul_159_itm;
  reg [55:0] while_mul_160_itm;
  wire signed [63:0] nl_while_mul_160_itm;
  reg [55:0] while_mul_157_itm;
  reg [55:0] while_mul_158_itm;
  reg [55:0] while_mul_155_itm;
  reg [55:0] while_mul_156_itm;
  reg [57:0] while_mul_93_itm;
  reg [128:0] while_slc_while_mul_110_cmp_z_mxwt_128_0_itm;
  reg [56:0] while_mul_101_itm;
  reg [63:0] while_mul_96_itm;
  reg [51:0] while_mul_104_itm;
  reg [55:0] while_mul_154_itm;
  reg [55:0] while_mul_152_itm;
  reg [55:0] while_mul_150_itm;
  reg [55:0] while_mul_53_itm;
  reg [55:0] while_mul_51_itm;
  reg [102:0] while_slc_while_mul_sdt_127_24_103_1_itm;
  reg [102:0] while_asn_itm_3;
  reg [57:0] while_mul_29_itm;
  reg [31:0] while_slc_55_24_13_itm;
  reg [31:0] while_slc_55_24_5_itm;
  reg [55:0] while_mul_5_itm;
  reg [31:0] while_slc_55_24_2_itm;
  reg [31:0] while_slc_55_24_3_ncse_sva_1;
  reg [31:0] while_slc_55_24_8_ncse_sva_1;
  reg [31:0] while_slc_55_24_8_ncse_sva_2;
  reg [31:0] while_slc_55_24_8_ncse_sva_3;
  reg [31:0] while_slc_55_24_8_ncse_sva_4;
  reg [31:0] while_slc_55_24_9_ncse_sva_1;
  reg [55:0] while_mul_26_cse_sva_1;
  reg [55:0] while_mul_26_cse_sva_2;
  reg [55:0] while_mul_26_cse_sva_3;
  reg [31:0] while_slc_while_acc_78_79_48_ncse_sva_1;
  reg [31:0] while_slc_while_acc_78_79_48_ncse_sva_2;
  reg [31:0] while_slc_while_acc_78_79_48_ncse_sva_3;
  reg [31:0] while_slc_while_acc_78_79_48_ncse_sva_4;
  reg [8:0] while_acc_79_cse_sva_1;
  reg [8:0] while_acc_79_cse_sva_2;
  reg [31:0] while_slc_79_48_ncse_sva_1;
  reg [31:0] while_slc_79_48_ncse_sva_2;
  reg [31:0] while_slc_79_48_ncse_sva_3;
  reg [31:0] while_slc_79_48_ncse_sva_4;
  reg [31:0] while_slc_55_24_16_ncse_sva_1;
  reg [31:0] while_slc_55_24_17_ncse_sva_1;
  reg [31:0] while_slc_55_24_18_ncse_sva_1;
  reg [31:0] while_slc_55_24_18_ncse_sva_2;
  reg [31:0] while_slc_55_24_18_ncse_sva_3;
  reg [31:0] while_slc_55_24_19_ncse_sva_1;
  reg [31:0] while_slc_55_24_19_ncse_sva_2;
  reg [31:0] while_slc_55_24_19_ncse_sva_3;
  reg [31:0] while_slc_55_24_19_ncse_sva_4;
  reg [31:0] while_slc_55_24_20_ncse_sva_1;
  reg [31:0] while_slc_55_24_20_ncse_sva_2;
  reg [31:0] while_slc_55_24_20_ncse_sva_3;
  reg [31:0] while_slc_55_24_20_ncse_sva_4;
  reg [31:0] while_slc_55_24_20_ncse_sva_5;
  reg [31:0] while_slc_55_24_21_ncse_sva_1;
  reg [31:0] while_slc_55_24_21_ncse_sva_2;
  reg [31:0] while_slc_55_24_21_ncse_sva_3;
  reg [31:0] while_slc_55_24_21_ncse_sva_4;
  reg [31:0] while_slc_55_24_21_ncse_sva_5;
  reg [31:0] while_slc_while_acc_83_98_67_ncse_sva_1;
  reg [31:0] while_slc_while_acc_83_98_67_ncse_sva_2;
  reg [31:0] while_slc_103_72_3_ncse_sva_1;
  reg [31:0] while_slc_103_72_4_ncse_sva_1;
  reg [31:0] while_slc_while_acc_93_77_46_ncse_sva_1;
  reg [31:0] while_slc_while_acc_93_77_46_ncse_sva_2;
  reg [31:0] while_slc_while_acc_98_82_51_ncse_sva_1;
  reg [31:0] while_slc_while_acc_104_128_97_ncse_sva_1;
  reg [55:0] while_mul_6_itm_1;
  reg [55:0] while_mul_7_itm_1;
  reg [55:0] while_mul_21_itm_1;
  reg [55:0] while_mul_23_itm_1;
  reg [55:0] while_mul_33_itm_1;
  reg [55:0] while_mul_33_itm_2;
  reg [79:0] while_slc_while_mul_37_cmp_z_mxwt_2_79_0_itm_1;
  reg [57:0] while_mul_44_itm_1;
  reg [57:0] while_mul_44_itm_2;
  reg [79:0] while_slc_while_mul_37_cmp_z_mxwt_2_79_0_1_itm_1;
  reg [57:0] while_mul_68_itm_1;
  wire signed [58:0] nl_while_mul_68_itm_1;
  reg [98:0] while_slc_while_while_mul_105_2_itm_1;
  reg [58:0] while_mul_70_itm_1;
  reg [58:0] while_mul_70_itm_2;
  reg [58:0] while_mul_70_itm_3;
  reg [103:0] while_slc_while_mul_76_cmp_z_mxwt_1_103_0_itm_1;
  reg [103:0] while_slc_while_mul_76_cmp_z_mxwt_1_103_0_itm_2;
  reg [51:0] while_mul_81_itm_1;
  reg [55:0] while_mul_75_itm_1;
  reg [55:0] while_mul_75_itm_2;
  reg [55:0] while_mul_75_itm_3;
  reg [55:0] while_mul_75_itm_4;
  reg [56:0] while_mul_89_itm_1;
  reg [103:0] while_slc_while_mul_76_cmp_z_mxwt_1_103_0_1_itm_1;
  reg [89:0] while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm_1;
  reg [58:0] while_mul_85_itm_1;
  wire signed [66:0] nl_while_mul_85_itm_1;
  reg [58:0] while_mul_85_itm_2;
  reg [105:0] while_slc_while_while_mul_cmp_z_mxwt_1_105_0_1_itm_1;
  reg [105:0] while_slc_while_mul_110_129_2_itm_1;
  reg [35:0] while_acc_91_itm_1;
  wire [37:0] nl_while_acc_91_itm_1;
  reg [51:0] while_mul_118_itm_1;
  reg [51:0] while_mul_118_itm_2;
  reg [51:0] while_mul_122_itm_1;
  reg [100:0] while_slc_while_mul_72_cmp_z_mxwt_1_100_0_itm_1;
  reg [100:0] while_slc_while_mul_124_128_1_itm_1;
  reg [100:0] while_slc_while_mul_124_128_1_itm_2;
  reg [100:0] while_slc_while_mul_124_128_1_itm_3;
  reg [56:0] while_mul_132_itm_1;
  reg [56:0] while_mul_132_itm_2;
  reg [120:0] while_asn_178_itm_1;
  reg [128:0] while_asn_180_itm_1;
  reg [51:0] while_mul_142_itm_1;
  reg [51:0] while_mul_142_itm_2;
  reg [55:0] while_mul_155_itm_1;
  reg [57:0] while_mul_93_itm_1;
  reg [56:0] while_mul_101_itm_1;
  reg [63:0] while_mul_96_itm_1;
  reg [63:0] while_mul_96_itm_2;
  reg [63:0] while_mul_96_itm_3;
  reg [63:0] while_mul_96_itm_4;
  reg [81:0] while_asn_itm_1_1;
  reg [51:0] while_mul_104_itm_1;
  reg [77:0] while_asn_itm_2_1;
  reg [77:0] while_asn_itm_2_2;
  reg [77:0] while_asn_itm_2_3;
  reg [55:0] while_mul_54_itm_1;
  reg [55:0] while_mul_54_itm_2;
  reg [55:0] while_mul_54_itm_3;
  reg [55:0] while_mul_54_itm_4;
  reg [55:0] while_mul_54_itm_5;
  reg [55:0] while_mul_52_itm_1;
  reg [55:0] while_mul_52_itm_2;
  reg [55:0] while_mul_52_itm_3;
  reg [55:0] while_mul_52_itm_4;
  reg [55:0] while_mul_52_itm_5;
  reg [102:0] while_slc_while_mul_sdt_127_24_103_1_itm_1;
  reg [102:0] while_slc_while_mul_sdt_127_24_103_1_itm_2;
  reg [102:0] while_slc_while_mul_sdt_127_24_103_1_itm_3;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_2;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_3;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_4;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_5;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_6;
  reg [9:0] while_acc_75_itm_1;
  wire [10:0] nl_while_acc_75_itm_1;
  reg [22:0] while_slc_while_acc_74_psp_22_0_itm_1;
  reg [55:0] while_mul_50_itm_1;
  reg [55:0] while_mul_50_itm_2;
  reg [55:0] while_mul_50_itm_3;
  reg [55:0] while_mul_50_itm_4;
  reg [55:0] while_mul_50_itm_5;
  reg [55:0] while_mul_48_itm_1;
  reg [55:0] while_mul_48_itm_2;
  reg [55:0] while_mul_48_itm_3;
  reg [55:0] while_mul_48_itm_4;
  reg [55:0] while_mul_48_itm_5;
  reg [55:0] while_mul_10_itm_1;
  reg [55:0] while_mul_11_itm_1;
  reg [55:0] while_mul_11_itm_2;
  reg [31:0] while_slc_55_24_5_itm_1;
  reg [31:0] while_slc_55_24_5_itm_2;
  reg [31:0] while_slc_55_24_5_itm_3;
  reg [31:0] while_slc_55_24_5_itm_4;
  reg [55:0] while_mul_4_itm_1;
  reg [55:0] while_mul_5_itm_1;
  reg [31:0] while_slc_55_24_2_itm_1;
  reg [31:0] while_slc_55_24_2_itm_2;
  reg [31:0] while_slc_55_24_2_itm_3;
  reg [31:0] while_slc_55_24_2_itm_4;
  reg [31:0] while_slc_55_24_2_itm_5;
  reg [55:0] while_mul_9_itm_1;
  reg [55:0] while_mul_9_itm_2;
  reg [31:0] while_slc_55_24_4_itm_1;
  reg [31:0] while_slc_55_24_4_itm_2;
  reg [31:0] while_slc_55_24_4_itm_3;
  reg [31:0] while_slc_55_24_4_itm_4;
  reg [55:0] while_mul_itm_55_0;
  reg [55:0] while_mul_12_itm_55_0;
  reg [55:0] while_mul_14_itm_55_0;
  reg [55:0] while_mul_55_itm_55_0;
  reg [55:0] while_mul_57_itm_55_0;
  reg [55:0] while_mul_59_itm_55_0;
  reg [55:0] while_mul_153_itm_55_0;
  reg [55:0] while_mul_151_itm_55_0;
  reg [55:0] while_mul_149_itm_55_0;
  reg [55:0] while_mul_47_itm_55_0;
  reg [55:0] while_mul_8_itm_55_0;
  reg [55:0] while_mul_20_itm_1_55_0;
  reg [55:0] while_mul_22_itm_1_55_0;
  reg [55:0] while_mul_49_itm_1_55_0;
  wire signed [64:0] nl_while_mul_49_itm_1_55_0;
  wire while_stage_v_10_mx2;
  wire while_stage_v_14_mx2;
  wire while_or_40_cse_1;
  wire while_or_41_cse_1;
  wire or_569_cse;
  wire or_663_cse;
  wire while_or_99_ssc;
  wire while_or_113_cse;
  wire [31:0] while_mux_600_cse;
  wire while_and_177_cse;
  wire while_and_197_cse;
  wire while_and_205_cse;
  wire while_and_209_cse;
  wire while_and_214_cse;
  wire while_and_213_cse;
  wire while_and_220_cse;
  wire while_and_224_cse;
  wire while_and_231_cse;
  wire while_and_233_cse;
  wire while_and_243_cse;
  wire while_and_195_cse;
  wire while_and_259_cse;
  wire while_and_200_cse;
  wire while_and_280_cse;
  wire while_and_256_cse;
  wire while_and_297_cse;
  wire while_and_230_cse;
  wire while_and_304_cse;
  wire while_and_305_cse;
  wire while_and_308_cse;
  wire while_and_311_cse;
  wire while_and_310_cse;
  wire while_and_266_cse;
  wire while_and_350_cse;
  wire while_and_354_cse;
  wire while_and_356_cse;
  wire while_and_314_cse;
  wire while_and_279_cse;
  wire while_and_267_cse;
  wire while_and_201_cse;
  wire while_or_98_cse_1;
  wire or_594_cse;
  reg [31:0] reg_reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1_cse;
  wire or_51_itm;
  wire or_487_itm;
  wire [31:0] while_acc_115_itm_55_24_1;
  wire [31:0] while_acc_12_itm_55_24_1;
  wire [31:0] while_acc_114_itm_55_24_1;
  wire [1:0] while_while_mux_1_cse;
  wire [1:0] while_while_mux_4_cse;
  wire [1:0] while_mux_cse;
  wire [55:0] z_out_5_55_0;
  wire signed [63:0] nl_z_out_5_55_0;
  wire [55:0] z_out_6_55_0;
  wire signed [63:0] nl_z_out_6_55_0;
  wire [55:0] z_out_7_55_0;
  wire signed [63:0] nl_z_out_7_55_0;
  wire [55:0] z_out_8_55_0;
  wire signed [63:0] nl_z_out_8_55_0;
  wire [55:0] z_out_9_55_0;
  wire signed [63:0] nl_z_out_9_55_0;
  wire [55:0] z_out_10_55_0;
  wire signed [63:0] nl_z_out_10_55_0;
  wire [55:0] z_out_11_55_0;
  wire signed [63:0] nl_z_out_11_55_0;
  wire [55:0] z_out_12_55_0;
  wire signed [63:0] nl_z_out_12_55_0;
  wire [55:0] z_out_13_55_0;
  wire signed [63:0] nl_z_out_13_55_0;
  wire [55:0] z_out_14_55_0;
  wire signed [63:0] nl_z_out_14_55_0;
  wire [55:0] z_out_15_55_0;
  wire signed [63:0] nl_z_out_15_55_0;
  wire [55:0] z_out_16_55_0;
  wire signed [63:0] nl_z_out_16_55_0;
  wire [55:0] z_out_17_55_0;
  wire signed [63:0] nl_z_out_17_55_0;
  wire [55:0] z_out_18_55_0;
  wire signed [63:0] nl_z_out_18_55_0;
  wire [55:0] z_out_19_55_0;
  wire signed [63:0] nl_z_out_19_55_0;
  wire [51:0] z_out_24_51_0;
  wire signed [52:0] nl_z_out_24_51_0;

  wire[55:0] while_acc_109_nl;
  wire[56:0] nl_while_acc_109_nl;
  wire[102:0] while_acc_77_nl;
  wire[104:0] nl_while_acc_77_nl;
  wire[55:0] while_acc_30_nl;
  wire[56:0] nl_while_acc_30_nl;
  wire[55:0] while_acc_31_nl;
  wire[56:0] nl_while_acc_31_nl;
  wire[55:0] while_acc_111_nl;
  wire[56:0] nl_while_acc_111_nl;
  wire[55:0] while_acc_112_nl;
  wire[56:0] nl_while_acc_112_nl;
  wire[55:0] while_acc_113_nl;
  wire[56:0] nl_while_acc_113_nl;
  wire[77:0] while_acc_88_nl;
  wire[78:0] nl_while_acc_88_nl;
  wire[128:0] while_acc_105_nl;
  wire[130:0] nl_while_acc_105_nl;
  wire[55:0] while_acc_71_nl;
  wire[56:0] nl_while_acc_71_nl;
  wire[55:0] while_acc_72_nl;
  wire[56:0] nl_while_acc_72_nl;
  wire[55:0] while_acc_73_nl;
  wire[56:0] nl_while_acc_73_nl;
  wire[55:0] while_acc_110_nl;
  wire[56:0] nl_while_acc_110_nl;
  wire[55:0] while_acc_13_nl;
  wire[56:0] nl_while_acc_13_nl;
  wire[55:0] while_acc_40_nl;
  wire[56:0] nl_while_acc_40_nl;
  wire[128:0] while_acc_127_nl;
  wire[129:0] nl_while_acc_127_nl;
  wire[100:0] while_acc_132_nl;
  wire[101:0] nl_while_acc_132_nl;
  wire[103:0] while_acc_85_nl;
  wire[105:0] nl_while_acc_85_nl;
  wire[55:0] while_acc_39_nl;
  wire[56:0] nl_while_acc_39_nl;
  wire[55:0] while_acc_116_nl;
  wire[56:0] nl_while_acc_116_nl;
  wire[55:0] while_acc_38_nl;
  wire[56:0] nl_while_acc_38_nl;
  wire[103:0] while_acc_84_nl;
  wire[106:0] nl_while_acc_84_nl;
  wire[82:0] while_acc_98_nl;
  wire[83:0] nl_while_acc_98_nl;
  wire[100:0] while_acc_107_nl;
  wire[102:0] nl_while_acc_107_nl;
  wire[77:0] while_acc_93_nl;
  wire[78:0] nl_while_acc_93_nl;
  wire[105:0] while_acc_106_nl;
  wire[107:0] nl_while_acc_106_nl;
  wire[98:0] while_acc_83_nl;
  wire[100:0] nl_while_acc_83_nl;
  wire mux_125_nl;
  wire nand_17_nl;
  wire[55:0] while_acc_108_nl;
  wire[56:0] nl_while_acc_108_nl;
  wire[55:0] while_acc_7_nl;
  wire[56:0] nl_while_acc_7_nl;
  wire[79:0] while_acc_78_nl;
  wire[80:0] nl_while_acc_78_nl;
  wire[103:0] while_acc_22_nl;
  wire[104:0] nl_while_acc_22_nl;
  wire[79:0] while_acc_80_nl;
  wire[81:0] nl_while_acc_80_nl;
  wire[55:0] while_acc_3_nl;
  wire[56:0] nl_while_acc_3_nl;
  wire[55:0] while_acc_117_nl;
  wire[56:0] nl_while_acc_117_nl;
  wire[55:0] while_acc_118_nl;
  wire[56:0] nl_while_acc_118_nl;
  wire[55:0] while_acc_4_nl;
  wire[56:0] nl_while_acc_4_nl;
  wire[55:0] while_acc_119_nl;
  wire[56:0] nl_while_acc_119_nl;
  wire[55:0] while_acc_120_nl;
  wire[56:0] nl_while_acc_120_nl;
  wire[55:0] while_acc_2_nl;
  wire[56:0] nl_while_acc_2_nl;
  wire[55:0] while_acc_nl;
  wire[56:0] nl_while_acc_nl;
  wire[55:0] while_acc_115_nl;
  wire[56:0] nl_while_acc_115_nl;
  wire[55:0] while_acc_12_nl;
  wire[56:0] nl_while_acc_12_nl;
  wire[55:0] while_acc_114_nl;
  wire[56:0] nl_while_acc_114_nl;
  wire or_10_nl;
  wire mux_48_nl;
  wire mux_47_nl;
  wire mux_46_nl;
  wire and_85_nl;
  wire or_150_nl;
  wire or_170_nl;
  wire mux_50_nl;
  wire nor_16_nl;
  wire nor_99_nl;
  wire nand_10_nl;
  wire or_378_nl;
  wire mux_116_nl;
  wire mux_3_nl;
  wire mux_2_nl;
  wire mux_1_nl;
  wire or_370_nl;
  wire or_379_nl;
  wire and_429_nl;
  wire and_1623_nl;
  wire mux_122_nl;
  wire and_1622_nl;
  wire mux_121_nl;
  wire mux_120_nl;
  wire mux_119_nl;
  wire mux_133_nl;
  wire mux_132_nl;
  wire or_400_nl;
  wire and_1628_nl;
  wire mux_141_nl;
  wire mux_140_nl;
  wire and_1627_nl;
  wire mux_143_nl;
  wire nand_69_nl;
  wire nand_19_nl;
  wire mux_148_nl;
  wire or_436_nl;
  wire mux_150_nl;
  wire mux_149_nl;
  wire mux_152_nl;
  wire nand_20_nl;
  wire mux_53_nl;
  wire mux_52_nl;
  wire nor_79_nl;
  wire mux_87_nl;
  wire and_1638_nl;
  wire mux_93_nl;
  wire nor_106_nl;
  wire mux_97_nl;
  wire and_1642_nl;
  wire mux_104_nl;
  wire and_1645_nl;
  wire[2:0] while_while_mux_9_nl;
  wire[31:0] while_mux1h_990_nl;
  wire[2:0] while_while_mux_10_nl;
  wire[31:0] while_mux1h_991_nl;
  wire[2:0] while_mux_609_nl;
  wire[31:0] while_mux_610_nl;
  wire[31:0] while_mux1h_992_nl;
  wire[32:0] while_mux1h_993_nl;
  wire while_while_mux_11_nl;
  wire[31:0] while_mux_611_nl;
  wire[32:0] while_mux_612_nl;
  wire[31:0] while_mux1h_994_nl;
  wire[31:0] while_mux1h_995_nl;
  wire[31:0] while_mux1h_996_nl;
  wire[31:0] while_mux1h_997_nl;
  wire[31:0] while_mux1h_998_nl;
  wire[31:0] while_mux1h_999_nl;
  wire[31:0] while_mux1h_1000_nl;
  wire[31:0] while_mux1h_1001_nl;
  wire[31:0] while_mux1h_1002_nl;
  wire[31:0] while_mux1h_1003_nl;
  wire[31:0] while_mux1h_1004_nl;
  wire[31:0] while_mux1h_1005_nl;
  wire[31:0] while_mux1h_1006_nl;
  wire[31:0] while_mux1h_1007_nl;
  wire[31:0] while_mux1h_1008_nl;
  wire[31:0] while_mux_613_nl;
  wire[31:0] while_mux1h_1009_nl;
  wire[31:0] while_mux_614_nl;
  wire[31:0] while_mux1h_1010_nl;
  wire[31:0] while_mux1h_1011_nl;
  wire[31:0] while_mux1h_1012_nl;
  wire[31:0] while_mux_615_nl;
  wire[31:0] while_mux_616_nl;
  wire[31:0] while_while_mux_12_nl;
  wire[31:0] while_mux1h_1013_nl;
  wire[31:0] while_mux_617_nl;
  wire[31:0] while_mux1h_1014_nl;
  wire[31:0] while_mux_618_nl;
  wire[31:0] while_mux1h_1015_nl;
  wire[31:0] while_mux_619_nl;
  wire[30:0] while_mux_620_nl;
  wire[31:0] while_mux1h_1016_nl;
  wire[35:0] while_mux1h_1017_nl;
  wire[31:0] while_mux1h_1018_nl;
  wire[31:0] while_mux_621_nl;
  wire[29:0] operator_64_40_true_AC_TRN_AC_WRAP_1_mux_5_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [511:0] nl_Rotate_run_rotate_out_Push_mioi_inst_rotate_out_Push_mioi_idat;
  assign nl_Rotate_run_rotate_out_Push_mioi_inst_rotate_out_Push_mioi_idat = {rotate_out_Push_mioi_idat_511_480
      , rotate_out_Push_mioi_idat_479_448 , rotate_out_Push_mioi_idat_447_416 , rotate_out_Push_mioi_idat_415_384
      , rotate_out_Push_mioi_idat_383_352 , rotate_out_Push_mioi_idat_351_320 , rotate_out_Push_mioi_idat_319_288
      , rotate_out_Push_mioi_idat_287_256 , rotate_out_Push_mioi_idat_255_224 , rotate_out_Push_mioi_idat_223_192
      , rotate_out_Push_mioi_idat_191_160 , rotate_out_Push_mioi_idat_159_128 , rotate_out_Push_mioi_idat_127_96
      , rotate_out_Push_mioi_idat_95_64 , rotate_out_Push_mioi_idat_63_32 , 32'b00000000000000000000000000000000};
  wire  nl_Rotate_run_while_mul_110_cmp_inst_while_mul_110_cmp_oswt_unreg_2;
  assign nl_Rotate_run_while_mul_110_cmp_inst_while_mul_110_cmp_oswt_unreg_2 = and_599_cse
      | and_597_cse;
  wire or_658_nl;
  wire [121:0] nl_Rotate_run_while_mul_110_cmp_inst_while_mul_110_cmp_b_run;
  assign or_658_nl = (fsm_output[2:1]!=2'b00);
  assign nl_Rotate_run_while_mul_110_cmp_inst_while_mul_110_cmp_b_run = MUX1HOT_v_122_3_2(while_mul_111_cmp_z_mxwt,
      while_mul_111_cmp_z_mxwt_2, while_mul_111_cmp_z_mxwt_1, {or_658_nl , (fsm_output[3])
      , (fsm_output[4])});
  wire [89:0] nl_Rotate_run_while_mul_111_cmp_inst_while_mul_111_cmp_b_run;
  assign nl_Rotate_run_while_mul_111_cmp_inst_while_mul_111_cmp_b_run = MUX1HOT_v_90_4_2(while_mul_67_cmp_z_mxwt_1,
      while_mul_67_cmp_z_mxwt, while_mul_79_cmp_z_mxwt_1, while_mul_79_cmp_z_mxwt_2,
      {(fsm_output[1]) , (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  wire  nl_Rotate_run_while_mul_79_cmp_inst_while_mul_79_cmp_oswt_unreg_1;
  assign nl_Rotate_run_while_mul_79_cmp_inst_while_mul_79_cmp_oswt_unreg_1 = and_581_cse
      | and_541_cse;
  wire [31:0] nl_Rotate_run_while_mul_79_cmp_inst_while_mul_79_cmp_a_run;
  assign nl_Rotate_run_while_mul_79_cmp_inst_while_mul_79_cmp_a_run = MUX_v_32_2_2(cfg_cos_beta,
      cfg_sin_beta, while_or_98_cse_1);
  wire or_642_nl;
  wire [83:0] nl_Rotate_run_while_mul_79_cmp_inst_while_mul_79_cmp_b_run;
  assign or_642_nl = (fsm_output[0]) | (fsm_output[3]);
  assign nl_Rotate_run_while_mul_79_cmp_inst_while_mul_79_cmp_b_run = MUX1HOT_v_84_4_2(while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm_1_1,
      ({{26{z_out_1[57]}}, z_out_1}), ({{26{while_mul_83_itm_1[57]}}, while_mul_83_itm_1}),
      ({{26{while_mul_136_itm_1[57]}}, while_mul_136_itm_1}), {or_642_nl , (fsm_output[1])
      , (fsm_output[2]) , (fsm_output[4])});
  wire [88:0] nl_Rotate_run_while_mul_76_cmp_inst_while_mul_76_cmp_b_run;
  assign nl_Rotate_run_while_mul_76_cmp_inst_while_mul_76_cmp_b_run = MUX1HOT_v_89_4_2(while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1,
      while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1_1, while_asn_itm_1, while_mul_67_cmp_z_mxwt_2,
      {or_tmp_300 , (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  wire  nl_Rotate_run_while_mul_77_cmp_inst_while_mul_77_cmp_oswt_unreg;
  assign nl_Rotate_run_while_mul_77_cmp_inst_while_mul_77_cmp_oswt_unreg = and_540_cse
      | and_538_cse | and_580_cse;
  wire[32:0] operator_64_40_true_AC_TRN_AC_WRAP_3_acc_nl;
  wire[34:0] nl_operator_64_40_true_AC_TRN_AC_WRAP_3_acc_nl;
  wire[33:0] while_acc_124_nl;
  wire[34:0] nl_while_acc_124_nl;
  wire[33:0] while_acc_125_nl;
  wire[34:0] nl_while_acc_125_nl;
  wire[30:0] while_acc_130_nl;
  wire[31:0] nl_while_acc_130_nl;
  wire [33:0] nl_Rotate_run_while_mul_77_cmp_inst_while_mul_77_cmp_a_run;
  assign nl_operator_64_40_true_AC_TRN_AC_WRAP_3_acc_nl = conv_s2s_32_33(cfg_cos_2_beta)
      + conv_s2s_31_33(cfg_cos_2_beta[31:1]) + 33'b000000000100000000000000000000000;
  assign operator_64_40_true_AC_TRN_AC_WRAP_3_acc_nl = nl_operator_64_40_true_AC_TRN_AC_WRAP_3_acc_nl[32:0];
  assign nl_while_acc_125_nl = ({(~ cfg_sin_3_beta) , 2'b00}) + conv_s2s_32_34(cfg_sin_3_beta);
  assign while_acc_125_nl = nl_while_acc_125_nl[33:0];
  assign nl_while_acc_130_nl = conv_s2s_30_31(cfg_sin_beta[31:2]) + 31'b0000000000000000000000000000001;
  assign while_acc_130_nl = nl_while_acc_130_nl[30:0];
  assign nl_while_acc_124_nl = while_acc_125_nl + conv_s2s_33_34({while_acc_130_nl
      , (cfg_sin_beta[1:0])});
  assign while_acc_124_nl = nl_while_acc_124_nl[33:0];
  assign nl_Rotate_run_while_mul_77_cmp_inst_while_mul_77_cmp_a_run = MUX1HOT_v_34_3_2(({{2{cfg_cos_beta[31]}},
      cfg_cos_beta}), ({operator_64_40_true_AC_TRN_AC_WRAP_3_acc_nl , (cfg_cos_2_beta[0])}),
      while_acc_124_nl, {or_594_cse , (fsm_output[2]) , (fsm_output[3])});
  wire [56:0] nl_Rotate_run_while_mul_77_cmp_inst_while_mul_77_cmp_b_run;
  assign nl_Rotate_run_while_mul_77_cmp_inst_while_mul_77_cmp_b_run = MUX1HOT_v_57_4_2(while_mul_89_itm_2,
      while_mul_108_itm_1, while_mul_132_itm_3, while_mul_78_itm_1, {or_tmp_300 ,
      (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  wire  nl_Rotate_run_while_while_mul_cmp_inst_while_while_mul_cmp_oswt_unreg;
  assign nl_Rotate_run_while_while_mul_cmp_inst_while_while_mul_cmp_oswt_unreg =
      and_581_cse | and_559_cse | and_511_cse;
  wire [120:0] nl_Rotate_run_while_while_mul_cmp_inst_while_while_mul_cmp_b_run;
  assign nl_Rotate_run_while_while_mul_cmp_inst_while_while_mul_cmp_b_run = MUX1HOT_v_121_4_2(while_asn_178_itm_2,
      while_mul_76_cmp_z_mxwt, ({{31{while_mul_67_cmp_z_mxwt_1[89]}}, while_mul_67_cmp_z_mxwt_1}),
      ({{30{while_mul_77_cmp_z_mxwt_1[90]}}, while_mul_77_cmp_z_mxwt_1}), {or_tmp_300
      , (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  wire  nl_Rotate_run_while_mul_67_cmp_inst_while_mul_67_cmp_oswt_unreg_1;
  assign nl_Rotate_run_while_mul_67_cmp_inst_while_mul_67_cmp_oswt_unreg_1 = and_540_cse
      | and_620_cse;
  wire [31:0] nl_Rotate_run_while_mul_67_cmp_inst_while_mul_67_cmp_a_run;
  assign nl_Rotate_run_while_mul_67_cmp_inst_while_mul_67_cmp_a_run = MUX_v_32_2_2(cfg_sin_beta,
      cfg_cos_beta, or_tmp_313);
  wire [57:0] nl_Rotate_run_while_mul_67_cmp_inst_while_mul_67_cmp_b_run;
  assign nl_Rotate_run_while_mul_67_cmp_inst_while_mul_67_cmp_b_run = MUX1HOT_v_58_4_2(while_mul_68_itm_2,
      ({{1{while_mul_147_itm[56]}}, while_mul_147_itm}), while_mul_113_itm, while_mul_93_itm_2,
      {or_tmp_300 , (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  wire nor_121_nl;
  wire [31:0] nl_Rotate_run_while_mul_72_cmp_inst_while_mul_72_cmp_a_run;
  assign nor_121_nl = ~((fsm_output[0]) | (fsm_output[2]));
  assign nl_Rotate_run_while_mul_72_cmp_inst_while_mul_72_cmp_a_run = MUX_v_32_2_2(while_slc_55_24_8_ncse_sva_5,
      cfg_sin_beta, nor_121_nl);
  wire [87:0] nl_Rotate_run_while_mul_72_cmp_inst_while_mul_72_cmp_b_run;
  assign nl_Rotate_run_while_mul_72_cmp_inst_while_mul_72_cmp_b_run = MUX1HOT_v_88_4_2(while_slc_while_mul_25_cmp_z_mxwt_87_0_itm,
      ({{3{while_mul_73_cmp_z_mxwt[84]}}, while_mul_73_cmp_z_mxwt}), ({{4{while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm[83]}},
      while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm}), ({{3{while_mul_73_cmp_z_mxwt_1[84]}},
      while_mul_73_cmp_z_mxwt_1}), {or_tmp_289 , (fsm_output[1]) , (fsm_output[3])
      , (fsm_output[4])});
  wire  nl_Rotate_run_while_mul_73_cmp_inst_while_mul_73_cmp_oswt_unreg;
  assign nl_Rotate_run_while_mul_73_cmp_inst_while_mul_73_cmp_oswt_unreg = and_581_cse
      | and_509_cse | and_511_cse;
  wire[8:0] while_mux1h_6_nl;
  wire[23:0] while_while_mux_nl;
  wire [32:0] nl_Rotate_run_while_mul_73_cmp_inst_while_mul_73_cmp_a_run;
  assign while_mux1h_6_nl = MUX1HOT_v_9_3_2((signext_9_8(cfg_cos_beta[31:24])), while_acc_79_cse_sva_3,
      while_acc_79_cse_sva_4, {or_594_cse , (fsm_output[2]) , (fsm_output[3])});
  assign while_while_mux_nl = MUX_v_24_2_2((cfg_cos_beta[23:0]), (cfg_cos_2_beta[23:0]),
      while_or_98_cse_1);
  assign nl_Rotate_run_while_mul_73_cmp_inst_while_mul_73_cmp_a_run = {while_mux1h_6_nl
      , while_while_mux_nl};
  wire [51:0] nl_Rotate_run_while_mul_73_cmp_inst_while_mul_73_cmp_b_run;
  assign nl_Rotate_run_while_mul_73_cmp_inst_while_mul_73_cmp_b_run = MUX1HOT_v_52_4_2(while_mul_81_itm_2,
      while_mul_122_itm_2, while_mul_142_itm_3, while_mul_74_itm_1, {or_tmp_300 ,
      (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  wire[35:0] operator_64_40_true_AC_TRN_AC_WRAP_2_acc_nl;
  wire[37:0] nl_operator_64_40_true_AC_TRN_AC_WRAP_2_acc_nl;
  wire [35:0] nl_Rotate_run_while_mul_37_cmp_inst_while_mul_37_cmp_a_run;
  assign nl_operator_64_40_true_AC_TRN_AC_WRAP_2_acc_nl = ({cfg_cos_2_beta , 4'b0001})
      + conv_s2s_32_36(~ cfg_cos_2_beta) + 36'b111111111111000000000000000000000000;
  assign operator_64_40_true_AC_TRN_AC_WRAP_2_acc_nl = nl_operator_64_40_true_AC_TRN_AC_WRAP_2_acc_nl[35:0];
  assign nl_Rotate_run_while_mul_37_cmp_inst_while_mul_37_cmp_a_run = MUX1HOT_v_36_4_2(operator_64_40_true_AC_TRN_AC_WRAP_2_acc_nl,
      ({{1{while_acc_89_cse_sva_1[34]}}, while_acc_89_cse_sva_1}), ({{4{while_acc_12_itm_55_24_1[31]}},
      while_acc_12_itm_55_24_1}), ({{4{while_slc_55_24_9_ncse_sva[31]}}, while_slc_55_24_9_ncse_sva}),
      {(fsm_output[1]) , (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  wire [63:0] nl_Rotate_run_while_mul_37_cmp_inst_while_mul_37_cmp_b_run;
  assign nl_Rotate_run_while_mul_37_cmp_inst_while_mul_37_cmp_b_run = MUX1HOT_v_64_3_2(while_mul_96_itm_5,
      ({{12{while_mul_118_itm_3[51]}}, while_mul_118_itm_3}), while_mul_38_cse_sva,
      {or_tmp_300 , (fsm_output[2]) , or_tmp_313});
  wire  nl_Rotate_run_while_mul_34_cmp_inst_while_mul_34_cmp_oswt_unreg;
  assign nl_Rotate_run_while_mul_34_cmp_inst_while_mul_34_cmp_oswt_unreg = and_540_cse
      | and_541_cse | and_538_cse;
  wire while_or_120_nl;
  wire [31:0] nl_Rotate_run_while_mul_34_cmp_inst_while_mul_34_cmp_a_run;
  assign while_or_120_nl = (fsm_output[4:3]!=2'b00);
  assign nl_Rotate_run_while_mul_34_cmp_inst_while_mul_34_cmp_a_run = MUX1HOT_v_32_3_2(while_slc_55_24_9_ncse_sva_2,
      cfg_sin_beta, reg_reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1_cse,
      {or_tmp_289 , (fsm_output[1]) , while_or_120_nl});
  wire [89:0] nl_Rotate_run_while_mul_34_cmp_inst_while_mul_34_cmp_b_run;
  assign nl_Rotate_run_while_mul_34_cmp_inst_while_mul_34_cmp_b_run = MUX1HOT_v_90_4_2(while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm_2,
      ({{2{while_mul_25_cse_sva_1[87]}}, while_mul_25_cse_sva_1}), ({{2{while_mul_25_cmp_z_mxwt_2[87]}},
      while_mul_25_cmp_z_mxwt_2}), ({{2{while_mul_25_cse_sva[87]}}, while_mul_25_cse_sva}),
      {or_tmp_300 , (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  wire [56:0] nl_Rotate_run_while_mul_25_cmp_inst_while_mul_25_cmp_b_run;
  assign nl_Rotate_run_while_mul_25_cmp_inst_while_mul_25_cmp_b_run = MUX1HOT_v_57_4_2(while_mul_101_itm_2,
      ({{1{while_mul_36_itm_1[55]}}, while_mul_36_itm_1}), ({{1{while_mul_26_cse_sva_4[55]}},
      while_mul_26_cse_sva_4}), ({{1{while_mul_26_cse_sva[55]}}, while_mul_26_cse_sva}),
      {or_tmp_289 , (fsm_output[1]) , (fsm_output[3]) , (fsm_output[4])});
  wire nor_nl;
  wire nor_1_nl;
  wire nor_2_nl;
  wire nor_3_nl;
  wire  nl_Rotate_run_staller_inst_run_flen_unreg;
  assign nor_nl = ~(while_nor_tmp | (while_stage_v_3 & (~(while_stage_v_4 | while_stage_v_5
      | while_stage_v_6 | (while_stage_v_7 & or_dcpl_173))) & while_mul_79_cmp_bawt
      & while_mul_67_cmp_bawt & while_while_or_30_cse_1 & while_or_69_cse_1 & while_or_70_cse_1
      & (fsm_output[4])) | (while_stage_v_7 & (~(while_stage_v_8 | while_stage_v_9
      | while_stage_v_10 | while_stage_v_11_mx2)) & while_while_or_30_cse_1 & while_or_69_cse_1
      & while_or_70_cse_1 & (fsm_output[4])) | (while_stage_v_11 & (~(while_stage_v_12
      | while_stage_v_13 | while_stage_v_14 | while_stage_v_15_mx2)) & while_mul_77_cmp_bawt
      & while_or_69_cse_1 & while_or_70_cse_1 & (fsm_output[4])) | (while_stage_v_15
      & (~(while_stage_v_16 | while_stage_v_17 | while_stage_v_18 | (while_stage_v_19
      & or_dcpl_252))) & while_while_mul_cmp_bawt & while_mul_73_cmp_bawt & (fsm_output[4]))
      | (while_stage_v_19 & (~(while_stage_v_20 | while_stage_v_21 | while_stage_v_22
      | (while_stage_v_23 & or_dcpl_263))) & (fsm_output[4])) | (while_stage_v_23
      & (~(while_stage_v_24 | while_stage_v_25 | reg_rotate_out_Push_mioi_iswt0_cse))
      & (fsm_output[4])));
  assign nor_1_nl = ~((while_stage_v & (~(while_stage_v_1 | while_stage_v_2 | while_stage_v_3
      | (while_stage_v_4 & or_dcpl_163))) & rotate_in_Pop_mioi_bawt & while_while_or_cse_1
      & while_while_or_1_cse_1) | (while_stage_v_4 & (~(while_stage_v_5 | while_stage_v_6
      | while_stage_v_7 | (while_stage_v_8 & or_dcpl_177))) & while_while_or_cse_1
      & while_while_or_1_cse_1) | (while_stage_v_8 & (~(while_stage_v_9 | while_stage_v_10
      | while_stage_v_11 | while_stage_v_12_mx1)) & while_while_or_cse_1 & while_while_or_1_cse_1)
      | (while_stage_v_12 & (~(while_stage_v_13 | while_stage_v_14 | while_stage_v_15
      | while_stage_v_16_mx1)) & while_mul_34_cmp_bawt & while_while_or_1_cse_1)
      | (while_stage_v_16 & (~(while_stage_v_17 | while_stage_v_18 | while_stage_v_19
      | (while_stage_v_20 & (and_11_cse | while_stage_v_23 | or_dcpl_32)))) & while_while_mul_cmp_bawt)
      | (while_stage_v_20 & (~(while_stage_v_21 | while_stage_v_22 | while_stage_v_23
      | and_11_cse))) | (while_stage_v_24 & while_nor_1_cse));
  assign nor_2_nl = ~((while_stage_v_1 & (~(while_stage_v_2 | while_stage_v_3 | while_stage_v_4
      | while_stage_v_5_mx2)) & (while_mul_25_cmp_bawt | (~ while_stage_v_5_mx2))
      & (while_mul_37_cmp_bawt | (~ while_stage_v_5_mx2)) & while_or_19_cse_1 & while_or_20_cse_1
      & while_while_or_11_cse_1 & while_while_or_10_cse_1) | (while_stage_v_5 & (~(while_stage_v_6
      | while_stage_v_7 | while_stage_v_8 | while_stage_v_9_mx2)) & while_mul_25_cmp_bawt
      & while_mul_37_cmp_bawt & while_or_19_cse_1 & while_or_20_cse_1 & while_while_or_11_cse_1
      & while_while_or_10_cse_1) | (while_stage_v_9 & (~(while_stage_v_10 | while_stage_v_11
      | while_stage_v_12 | while_stage_v_13_mx2)) & while_mul_34_cmp_bawt & while_mul_77_cmp_bawt
      & while_while_or_11_cse_1 & while_while_or_10_cse_1) | (while_stage_v_13 &
      (~(while_stage_v_14 | while_stage_v_15 | while_stage_v_16 | while_stage_v_17_mx2))
      & while_mul_73_cmp_bawt & while_while_or_10_cse_1) | (while_stage_v_17 & (~(while_stage_v_18
      | while_stage_v_19 | while_stage_v_20 | (while_stage_v_21 & or_487_itm))) &
      while_mul_72_cmp_bawt) | (while_stage_v_21 & (~(while_stage_v_22 | while_stage_v_23
      | while_stage_v_24 | (while_stage_v_25 & or_dcpl_123)))) | (while_stage_v_25
      & (~ reg_rotate_out_Push_mioi_iswt0_cse)));
  assign nor_3_nl = ~(while_and_76_tmp | while_and_64_tmp | while_and_56_tmp | (while_stage_v_14
      & (~(while_stage_v_15 | while_stage_v_16 | while_stage_v_17 | while_stage_v_18_mx2))
      & while_while_mul_cmp_bawt & while_mul_73_cmp_bawt & while_while_or_21_cse_1
      & (~ while_stage_v_26_mx2)) | (while_stage_v_18 & (~(while_stage_v_19 | while_stage_v_20
      | while_stage_v_21 | (while_stage_v_22 & or_51_itm))) & while_mul_72_cmp_bawt
      & (~ while_stage_v_26_mx2)) | (while_stage_v_22 & (~(while_stage_v_23 | while_stage_v_24
      | while_stage_v_25)) & (~ while_stage_v_26_mx2)) | while_and_44_tmp);
  assign nl_Rotate_run_staller_inst_run_flen_unreg = MUX1HOT_s_1_4_2(nor_nl, nor_1_nl,
      nor_2_nl, nor_3_nl, {or_dcpl_124 , (fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])});
  Rotate_run_rotate_in_Pop_mioi Rotate_run_rotate_in_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_in_Pop_mioi_oswt_unreg(and_704_cse),
      .rotate_in_Pop_mioi_bawt(rotate_in_Pop_mioi_bawt),
      .rotate_in_Pop_mioi_iden(rotate_in_Pop_mioi_iden),
      .rotate_in_Pop_mioi_iswt0(rotate_in_Pop_mioi_iswt0),
      .rotate_in_Pop_mioi_iden_1(rotate_in_Pop_mioi_iden_1),
      .rotate_in_Pop_mioi_wen_comp(rotate_in_Pop_mioi_wen_comp),
      .rotate_in_Pop_mioi_idat_mxwt(rotate_in_Pop_mioi_idat_mxwt),
      .rotate_in_Pop_mioi_ivld(rotate_in_Pop_mioi_ivld),
      .rotate_in_Pop_mioi_ivld_oreg(rotate_in_Pop_mioi_ivld_oreg)
    );
  Rotate_run_wait_dp Rotate_run_wait_dp_inst (
      .clk(clk),
      .rst(rst),
      .rotate_in_Pop_mioi_ivld(rotate_in_Pop_mioi_ivld),
      .rotate_in_Pop_mioi_ivld_oreg(rotate_in_Pop_mioi_ivld_oreg),
      .rotate_out_Push_mioi_irdy(rotate_out_Push_mioi_irdy),
      .rotate_out_Push_mioi_irdy_oreg(rotate_out_Push_mioi_irdy_oreg)
    );
  Rotate_run_rotate_out_Push_mioi Rotate_run_rotate_out_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg),
      .run_wen(run_wen),
      .rotate_out_Push_mioi_oswt_unreg(or_tmp_395),
      .rotate_out_Push_mioi_bawt(rotate_out_Push_mioi_bawt),
      .rotate_out_Push_mioi_iden(rotate_out_Push_mioi_iden),
      .rotate_out_Push_mioi_iswt0(reg_rotate_out_Push_mioi_iswt0_cse),
      .rotate_out_Push_mioi_wen_comp(rotate_out_Push_mioi_wen_comp),
      .rotate_out_Push_mioi_idat(nl_Rotate_run_rotate_out_Push_mioi_inst_rotate_out_Push_mioi_idat[511:0]),
      .rotate_out_Push_mioi_irdy(rotate_out_Push_mioi_irdy),
      .rotate_out_Push_mioi_irdy_oreg(rotate_out_Push_mioi_irdy_oreg)
    );
  Rotate_run_while_mul_110_cmp Rotate_run_while_mul_110_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_110_cmp_oswt_unreg(and_540_cse),
      .while_mul_110_cmp_bawt(while_mul_110_cmp_bawt),
      .while_mul_110_cmp_iden(while_mul_110_cmp_iden),
      .while_mul_110_cmp_iswt3(reg_while_mul_76_cmp_oswt_cse),
      .while_mul_110_cmp_iden_1(while_mul_110_cmp_iden_1),
      .while_mul_110_cmp_oswt_unreg_1(and_511_cse),
      .while_mul_110_cmp_iden_2(while_mul_110_cmp_iden_2),
      .while_mul_110_cmp_iswt3_1(reg_while_mul_111_cmp_oswt_1_cse),
      .while_mul_110_cmp_iden_3(while_mul_110_cmp_iden_3),
      .while_mul_110_cmp_oswt_unreg_2(nl_Rotate_run_while_mul_110_cmp_inst_while_mul_110_cmp_oswt_unreg_2),
      .while_mul_110_cmp_iden_4(while_mul_110_cmp_iden_4),
      .while_mul_110_cmp_iswt3_2(reg_while_mul_111_cmp_oswt_2_cse),
      .while_mul_110_cmp_iden_5(while_mul_110_cmp_iden_5),
      .while_mul_110_cmp_a_run(cfg_sin_beta),
      .while_mul_110_cmp_b_run(nl_Rotate_run_while_mul_110_cmp_inst_while_mul_110_cmp_b_run[121:0]),
      .while_mul_110_cmp_z_mxwt(while_mul_110_cmp_z_mxwt),
      .while_mul_110_cmp_z_mxwt_1(while_mul_110_cmp_z_mxwt_1),
      .while_mul_110_cmp_z_mxwt_2(while_mul_110_cmp_z_mxwt_2),
      .while_mul_110_cmp_iswt3_2_pff(or_655_rmff),
      .while_mul_110_cmp_iswt3_1_pff(and_580_cse),
      .while_mul_110_cmp_iswt3_pff(and_515_cse)
    );
  Rotate_run_while_mul_111_cmp Rotate_run_while_mul_111_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_111_cmp_oswt_unreg(and_515_cse),
      .while_mul_111_cmp_bawt(while_mul_111_cmp_bawt),
      .while_mul_111_cmp_iden(while_mul_111_cmp_iden),
      .while_mul_111_cmp_iswt2(reg_while_mul_67_cmp_oswt_cse),
      .while_mul_111_cmp_iden_1(while_mul_111_cmp_iden_1),
      .while_mul_111_cmp_oswt_unreg_1(and_580_cse),
      .while_mul_111_cmp_iden_2(while_mul_111_cmp_iden_2),
      .while_mul_111_cmp_iswt2_1(while_mul_111_cmp_iswt2_1),
      .while_mul_111_cmp_iden_3(while_mul_111_cmp_iden_3),
      .while_mul_111_cmp_oswt_unreg_2(or_655_rmff),
      .while_mul_111_cmp_iden_4(while_mul_111_cmp_iden_4),
      .while_mul_111_cmp_iswt2_2(while_mul_111_cmp_iswt2_2),
      .while_mul_111_cmp_iden_5(while_mul_111_cmp_iden_5),
      .while_mul_111_cmp_a_run(cfg_sin_beta),
      .while_mul_111_cmp_b_run(nl_Rotate_run_while_mul_111_cmp_inst_while_mul_111_cmp_b_run[89:0]),
      .while_mul_111_cmp_z_mxwt(while_mul_111_cmp_z_mxwt),
      .while_mul_111_cmp_z_mxwt_1(while_mul_111_cmp_z_mxwt_1),
      .while_mul_111_cmp_z_mxwt_2(while_mul_111_cmp_z_mxwt_2),
      .while_mul_111_cmp_iswt2_2_pff(or_654_rmff),
      .while_mul_111_cmp_iswt2_1_pff(and_620_cse),
      .while_mul_111_cmp_iswt2_pff(and_514_cse)
    );
  Rotate_run_while_mul_79_cmp Rotate_run_while_mul_79_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_79_cmp_oswt_unreg(and_514_cse),
      .while_mul_79_cmp_bawt(while_mul_79_cmp_bawt),
      .while_mul_79_cmp_iden(while_mul_79_cmp_iden),
      .while_mul_79_cmp_iswt2(reg_while_mul_79_cmp_iswt2_cse),
      .while_mul_79_cmp_iden_1(while_mul_79_cmp_iden_1),
      .while_mul_79_cmp_oswt_unreg_1(nl_Rotate_run_while_mul_79_cmp_inst_while_mul_79_cmp_oswt_unreg_1),
      .while_mul_79_cmp_iden_2(while_mul_79_cmp_iden_2),
      .while_mul_79_cmp_iswt2_1(while_mul_79_cmp_iswt2_1),
      .while_mul_79_cmp_iden_3(while_mul_79_cmp_iden_3),
      .while_mul_79_cmp_oswt_unreg_2(and_597_cse),
      .while_mul_79_cmp_iden_4(while_mul_79_cmp_iden_4),
      .while_mul_79_cmp_iswt2_2(reg_while_mul_25_cmp_iswt1_2_cse),
      .while_mul_79_cmp_iden_5(while_mul_79_cmp_iden_5),
      .while_mul_79_cmp_a_run(nl_Rotate_run_while_mul_79_cmp_inst_while_mul_79_cmp_a_run[31:0]),
      .while_mul_79_cmp_b_run(nl_Rotate_run_while_mul_79_cmp_inst_while_mul_79_cmp_b_run[83:0]),
      .while_mul_79_cmp_z_mxwt(while_mul_79_cmp_z_mxwt),
      .while_mul_79_cmp_z_mxwt_1(while_mul_79_cmp_z_mxwt_1),
      .while_mul_79_cmp_z_mxwt_2(while_mul_79_cmp_z_mxwt_2),
      .while_mul_79_cmp_iswt2_2_pff(and_504_cse),
      .while_mul_79_cmp_iswt2_1_pff(or_647_rmff),
      .while_mul_79_cmp_iswt2_pff(and_704_cse)
    );
  Rotate_run_while_mul_76_cmp Rotate_run_while_mul_76_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_76_cmp_oswt_unreg(and_515_cse),
      .while_mul_76_cmp_bawt(while_mul_76_cmp_bawt),
      .while_mul_76_cmp_iden(while_mul_76_cmp_iden),
      .while_mul_76_cmp_iswt2(reg_while_mul_67_cmp_oswt_cse),
      .while_mul_76_cmp_iden_1(while_mul_76_cmp_iden_1),
      .while_mul_76_cmp_oswt_unreg_1(while_or_95_itm),
      .while_mul_76_cmp_iden_2(while_mul_76_cmp_iden_2),
      .while_mul_76_cmp_iswt2_1(while_mul_76_cmp_iswt2_1),
      .while_mul_76_cmp_iden_3(while_mul_76_cmp_iden_3),
      .while_mul_76_cmp_oswt_unreg_2(and_597_cse),
      .while_mul_76_cmp_iden_4(while_mul_76_cmp_iden_4),
      .while_mul_76_cmp_iswt2_2(reg_while_mul_25_cmp_iswt1_2_cse),
      .while_mul_76_cmp_iden_5(while_mul_76_cmp_iden_5),
      .while_mul_76_cmp_a_run(cfg_sin_beta),
      .while_mul_76_cmp_b_run(nl_Rotate_run_while_mul_76_cmp_inst_while_mul_76_cmp_b_run[88:0]),
      .while_mul_76_cmp_z_mxwt(while_mul_76_cmp_z_mxwt),
      .while_mul_76_cmp_z_mxwt_1(while_mul_76_cmp_z_mxwt_1),
      .while_mul_76_cmp_z_mxwt_2(while_mul_76_cmp_z_mxwt_2),
      .while_mul_76_cmp_iswt2_2_pff(and_504_cse),
      .while_mul_76_cmp_iswt2_1_pff(or_639_rmff),
      .while_mul_76_cmp_iswt2_pff(and_514_cse)
    );
  Rotate_run_while_mul_77_cmp Rotate_run_while_mul_77_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_77_cmp_oswt_unreg(nl_Rotate_run_while_mul_77_cmp_inst_while_mul_77_cmp_oswt_unreg),
      .while_mul_77_cmp_bawt(while_mul_77_cmp_bawt),
      .while_mul_77_cmp_iden(while_mul_77_cmp_iden),
      .while_mul_77_cmp_iswt1(while_mul_77_cmp_iswt1),
      .while_mul_77_cmp_iden_1(while_mul_77_cmp_iden_1),
      .while_mul_77_cmp_oswt_unreg_1(and_507_cse),
      .while_mul_77_cmp_iden_2(while_mul_77_cmp_iden_2),
      .while_mul_77_cmp_iswt1_1(reg_while_mul_25_cmp_iswt1_2_cse),
      .while_mul_77_cmp_iden_3(while_mul_77_cmp_iden_3),
      .while_mul_77_cmp_a_run(nl_Rotate_run_while_mul_77_cmp_inst_while_mul_77_cmp_a_run[33:0]),
      .while_mul_77_cmp_b_run(nl_Rotate_run_while_mul_77_cmp_inst_while_mul_77_cmp_b_run[56:0]),
      .while_mul_77_cmp_z_mxwt(while_mul_77_cmp_z_mxwt),
      .while_mul_77_cmp_z_mxwt_1(while_mul_77_cmp_z_mxwt_1),
      .while_mul_77_cmp_iswt1_1_pff(and_504_cse),
      .while_mul_77_cmp_iswt1_pff(or_633_rmff)
    );
  Rotate_run_while_while_mul_cmp Rotate_run_while_while_mul_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_while_mul_cmp_oswt_unreg(nl_Rotate_run_while_while_mul_cmp_inst_while_while_mul_cmp_oswt_unreg),
      .while_while_mul_cmp_bawt(while_while_mul_cmp_bawt),
      .while_while_mul_cmp_iden(while_while_mul_cmp_iden),
      .while_while_mul_cmp_iswt3(while_while_mul_cmp_iswt3),
      .while_while_mul_cmp_iden_1(while_while_mul_cmp_iden_1),
      .while_while_mul_cmp_oswt_unreg_1(or_tmp_353),
      .while_while_mul_cmp_iden_2(while_while_mul_cmp_iden_2),
      .while_while_mul_cmp_iswt3_1(reg_while_while_mul_cmp_iswt3_1_cse),
      .while_while_mul_cmp_iden_3(while_while_mul_cmp_iden_3),
      .while_while_mul_cmp_a_run(cfg_sin_beta),
      .while_while_mul_cmp_b_run(nl_Rotate_run_while_while_mul_cmp_inst_while_while_mul_cmp_b_run[120:0]),
      .while_while_mul_cmp_z_mxwt(while_while_mul_cmp_z_mxwt),
      .while_while_mul_cmp_z_mxwt_1(while_while_mul_cmp_z_mxwt_1),
      .while_while_mul_cmp_iswt3_1_pff(and_597_cse),
      .while_while_mul_cmp_iswt3_pff(or_624_rmff)
    );
  Rotate_run_while_mul_67_cmp Rotate_run_while_mul_67_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_67_cmp_oswt_unreg(and_514_cse),
      .while_mul_67_cmp_bawt(while_mul_67_cmp_bawt),
      .while_mul_67_cmp_iden(while_mul_67_cmp_iden),
      .while_mul_67_cmp_iswt1(while_mul_67_cmp_iswt1),
      .while_mul_67_cmp_iden_1(while_mul_67_cmp_iden_1),
      .while_mul_67_cmp_oswt_unreg_1(nl_Rotate_run_while_mul_67_cmp_inst_while_mul_67_cmp_oswt_unreg_1),
      .while_mul_67_cmp_iden_2(while_mul_67_cmp_iden_2),
      .while_mul_67_cmp_iswt1_1(while_mul_67_cmp_iswt1_1),
      .while_mul_67_cmp_iden_3(while_mul_67_cmp_iden_3),
      .while_mul_67_cmp_oswt_unreg_2(and_606_cse),
      .while_mul_67_cmp_iden_4(while_mul_67_cmp_iden_4),
      .while_mul_67_cmp_iswt1_2(reg_while_mul_25_cmp_oswt_1_cse),
      .while_mul_67_cmp_iden_5(while_mul_67_cmp_iden_5),
      .while_mul_67_cmp_a_run(nl_Rotate_run_while_mul_67_cmp_inst_while_mul_67_cmp_a_run[31:0]),
      .while_mul_67_cmp_b_run(nl_Rotate_run_while_mul_67_cmp_inst_while_mul_67_cmp_b_run[57:0]),
      .while_mul_67_cmp_z_mxwt(while_mul_67_cmp_z_mxwt),
      .while_mul_67_cmp_z_mxwt_1(while_mul_67_cmp_z_mxwt_1),
      .while_mul_67_cmp_z_mxwt_2(while_mul_67_cmp_z_mxwt_2),
      .while_mul_67_cmp_iswt1_2_pff(and_511_cse),
      .while_mul_67_cmp_iswt1_1_pff(or_614_rmff),
      .while_mul_67_cmp_iswt1_pff(or_tmp_346)
    );
  Rotate_run_while_mul_72_cmp Rotate_run_while_mul_72_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_72_cmp_oswt_unreg(while_or_85_itm),
      .while_mul_72_cmp_bawt(while_mul_72_cmp_bawt),
      .while_mul_72_cmp_iden(while_mul_72_cmp_iden),
      .while_mul_72_cmp_iswt2(while_mul_72_cmp_iswt2),
      .while_mul_72_cmp_iden_1(while_mul_72_cmp_iden_1),
      .while_mul_72_cmp_oswt_unreg_1(while_or_97_itm),
      .while_mul_72_cmp_iden_2(while_mul_72_cmp_iden_2),
      .while_mul_72_cmp_iswt2_1(while_mul_72_cmp_iswt2_1),
      .while_mul_72_cmp_iden_3(while_mul_72_cmp_iden_3),
      .while_mul_72_cmp_a_run(nl_Rotate_run_while_mul_72_cmp_inst_while_mul_72_cmp_a_run[31:0]),
      .while_mul_72_cmp_b_run(nl_Rotate_run_while_mul_72_cmp_inst_while_mul_72_cmp_b_run[87:0]),
      .while_mul_72_cmp_z_mxwt(while_mul_72_cmp_z_mxwt),
      .while_mul_72_cmp_z_mxwt_1(while_mul_72_cmp_z_mxwt_1),
      .while_mul_72_cmp_iswt2_1_pff(or_604_rmff),
      .while_mul_72_cmp_iswt2_pff(or_606_rmff)
    );
  Rotate_run_while_mul_73_cmp Rotate_run_while_mul_73_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_73_cmp_oswt_unreg(nl_Rotate_run_while_mul_73_cmp_inst_while_mul_73_cmp_oswt_unreg),
      .while_mul_73_cmp_bawt(while_mul_73_cmp_bawt),
      .while_mul_73_cmp_iden(while_mul_73_cmp_iden),
      .while_mul_73_cmp_iswt1(while_mul_73_cmp_iswt1),
      .while_mul_73_cmp_iden_1(while_mul_73_cmp_iden_1),
      .while_mul_73_cmp_oswt_unreg_1(and_507_cse),
      .while_mul_73_cmp_iden_2(while_mul_73_cmp_iden_2),
      .while_mul_73_cmp_iswt1_1(reg_while_mul_25_cmp_iswt1_2_cse),
      .while_mul_73_cmp_iden_3(while_mul_73_cmp_iden_3),
      .while_mul_73_cmp_a_run(nl_Rotate_run_while_mul_73_cmp_inst_while_mul_73_cmp_a_run[32:0]),
      .while_mul_73_cmp_b_run(nl_Rotate_run_while_mul_73_cmp_inst_while_mul_73_cmp_b_run[51:0]),
      .while_mul_73_cmp_z_mxwt(while_mul_73_cmp_z_mxwt),
      .while_mul_73_cmp_z_mxwt_1(while_mul_73_cmp_z_mxwt_1),
      .while_mul_73_cmp_iswt1_1_pff(and_504_cse),
      .while_mul_73_cmp_iswt1_pff(or_597_rmff)
    );
  Rotate_run_while_mul_37_cmp Rotate_run_while_mul_37_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_37_cmp_oswt_unreg(or_569_cse),
      .while_mul_37_cmp_bawt(while_mul_37_cmp_bawt),
      .while_mul_37_cmp_iden(while_mul_37_cmp_iden),
      .while_mul_37_cmp_iswt2(while_mul_37_cmp_iswt2),
      .while_mul_37_cmp_iden_1(while_mul_37_cmp_iden_1),
      .while_mul_37_cmp_oswt_unreg_1(and_559_cse),
      .while_mul_37_cmp_iden_2(while_mul_37_cmp_iden_2),
      .while_mul_37_cmp_iswt2_1(reg_while_mul_25_cmp_iswt1_1_cse),
      .while_mul_37_cmp_iden_3(while_mul_37_cmp_iden_3),
      .while_mul_37_cmp_oswt_unreg_2(and_535_cse),
      .while_mul_37_cmp_iden_4(while_mul_37_cmp_iden_4),
      .while_mul_37_cmp_iswt2_2(reg_while_mul_25_cmp_oswt_2_cse),
      .while_mul_37_cmp_iden_5(while_mul_37_cmp_iden_5),
      .while_mul_37_cmp_a_run(nl_Rotate_run_while_mul_37_cmp_inst_while_mul_37_cmp_a_run[35:0]),
      .while_mul_37_cmp_b_run(nl_Rotate_run_while_mul_37_cmp_inst_while_mul_37_cmp_b_run[63:0]),
      .while_mul_37_cmp_z_mxwt(while_mul_37_cmp_z_mxwt),
      .while_mul_37_cmp_z_mxwt_1(while_mul_37_cmp_z_mxwt_1),
      .while_mul_37_cmp_z_mxwt_2(while_mul_37_cmp_z_mxwt_2),
      .while_mul_37_cmp_iswt2_2_pff(and_507_cse),
      .while_mul_37_cmp_iswt2_1_pff(and_509_cse),
      .while_mul_37_cmp_iswt2_pff(or_589_rmff)
    );
  Rotate_run_while_mul_34_cmp Rotate_run_while_mul_34_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_34_cmp_oswt_unreg(nl_Rotate_run_while_mul_34_cmp_inst_while_mul_34_cmp_oswt_unreg),
      .while_mul_34_cmp_bawt(while_mul_34_cmp_bawt),
      .while_mul_34_cmp_iden(while_mul_34_cmp_iden),
      .while_mul_34_cmp_iswt2(while_mul_34_cmp_iswt2),
      .while_mul_34_cmp_iden_1(while_mul_34_cmp_iden_1),
      .while_mul_34_cmp_oswt_unreg_1(and_535_cse),
      .while_mul_34_cmp_iden_2(while_mul_34_cmp_iden_2),
      .while_mul_34_cmp_iswt2_1(reg_while_mul_25_cmp_oswt_2_cse),
      .while_mul_34_cmp_iden_3(while_mul_34_cmp_iden_3),
      .while_mul_34_cmp_a_run(nl_Rotate_run_while_mul_34_cmp_inst_while_mul_34_cmp_a_run[31:0]),
      .while_mul_34_cmp_b_run(nl_Rotate_run_while_mul_34_cmp_inst_while_mul_34_cmp_b_run[89:0]),
      .while_mul_34_cmp_z_mxwt(while_mul_34_cmp_z_mxwt),
      .while_mul_34_cmp_z_mxwt_1(while_mul_34_cmp_z_mxwt_1),
      .while_mul_34_cmp_iswt2_1_pff(and_507_cse),
      .while_mul_34_cmp_iswt2_pff(or_579_rmff)
    );
  Rotate_run_while_mul_25_cmp Rotate_run_while_mul_25_cmp_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .while_mul_25_cmp_oswt_unreg(or_569_cse),
      .while_mul_25_cmp_bawt(while_mul_25_cmp_bawt),
      .while_mul_25_cmp_iden(while_mul_25_cmp_iden),
      .while_mul_25_cmp_iswt1(while_mul_25_cmp_iswt1),
      .while_mul_25_cmp_iden_1(while_mul_25_cmp_iden_1),
      .while_mul_25_cmp_oswt_unreg_1(and_511_cse),
      .while_mul_25_cmp_iden_2(while_mul_25_cmp_iden_2),
      .while_mul_25_cmp_iswt1_1(reg_while_mul_25_cmp_iswt1_1_cse),
      .while_mul_25_cmp_iden_3(while_mul_25_cmp_iden_3),
      .while_mul_25_cmp_oswt_unreg_2(and_507_cse),
      .while_mul_25_cmp_iden_4(while_mul_25_cmp_iden_4),
      .while_mul_25_cmp_iswt1_2(reg_while_mul_25_cmp_iswt1_2_cse),
      .while_mul_25_cmp_iden_5(while_mul_25_cmp_iden_5),
      .while_mul_25_cmp_a_run(while_mux_600_cse),
      .while_mul_25_cmp_b_run(nl_Rotate_run_while_mul_25_cmp_inst_while_mul_25_cmp_b_run[56:0]),
      .while_mul_25_cmp_z_mxwt(while_mul_25_cmp_z_mxwt),
      .while_mul_25_cmp_z_mxwt_1(while_mul_25_cmp_z_mxwt_1),
      .while_mul_25_cmp_z_mxwt_2(while_mul_25_cmp_z_mxwt_2),
      .while_mul_25_cmp_iswt1_2_pff(and_504_cse),
      .while_mul_25_cmp_iswt1_1_pff(and_509_cse),
      .while_mul_25_cmp_iswt1_pff(or_568_rmff)
    );
  Rotate_run_staller Rotate_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_in_Pop_mioi_iden(rotate_in_Pop_mioi_iden),
      .rotate_in_Pop_mioi_iden_1(rotate_in_Pop_mioi_iden_1),
      .rotate_in_Pop_mioi_wen_comp(rotate_in_Pop_mioi_wen_comp),
      .rotate_out_Push_mioi_iden(rotate_out_Push_mioi_iden),
      .rotate_out_Push_mioi_wen_comp(rotate_out_Push_mioi_wen_comp),
      .while_mul_110_cmp_iden(while_mul_110_cmp_iden),
      .while_mul_110_cmp_iden_1(while_mul_110_cmp_iden_1),
      .while_mul_110_cmp_iden_2(while_mul_110_cmp_iden_2),
      .while_mul_110_cmp_iden_3(while_mul_110_cmp_iden_3),
      .while_mul_110_cmp_iden_4(while_mul_110_cmp_iden_4),
      .while_mul_110_cmp_iden_5(while_mul_110_cmp_iden_5),
      .while_mul_111_cmp_iden(while_mul_111_cmp_iden),
      .while_mul_111_cmp_iden_1(while_mul_111_cmp_iden_1),
      .while_mul_111_cmp_iden_2(while_mul_111_cmp_iden_2),
      .while_mul_111_cmp_iden_3(while_mul_111_cmp_iden_3),
      .while_mul_111_cmp_iden_4(while_mul_111_cmp_iden_4),
      .while_mul_111_cmp_iden_5(while_mul_111_cmp_iden_5),
      .while_mul_79_cmp_iden(while_mul_79_cmp_iden),
      .while_mul_79_cmp_iden_1(while_mul_79_cmp_iden_1),
      .while_mul_79_cmp_iden_2(while_mul_79_cmp_iden_2),
      .while_mul_79_cmp_iden_3(while_mul_79_cmp_iden_3),
      .while_mul_79_cmp_iden_4(while_mul_79_cmp_iden_4),
      .while_mul_79_cmp_iden_5(while_mul_79_cmp_iden_5),
      .while_mul_76_cmp_iden(while_mul_76_cmp_iden),
      .while_mul_76_cmp_iden_1(while_mul_76_cmp_iden_1),
      .while_mul_76_cmp_iden_2(while_mul_76_cmp_iden_2),
      .while_mul_76_cmp_iden_3(while_mul_76_cmp_iden_3),
      .while_mul_76_cmp_iden_4(while_mul_76_cmp_iden_4),
      .while_mul_76_cmp_iden_5(while_mul_76_cmp_iden_5),
      .while_mul_77_cmp_iden(while_mul_77_cmp_iden),
      .while_mul_77_cmp_iden_1(while_mul_77_cmp_iden_1),
      .while_mul_77_cmp_iden_2(while_mul_77_cmp_iden_2),
      .while_mul_77_cmp_iden_3(while_mul_77_cmp_iden_3),
      .while_while_mul_cmp_iden(while_while_mul_cmp_iden),
      .while_while_mul_cmp_iden_1(while_while_mul_cmp_iden_1),
      .while_while_mul_cmp_iden_2(while_while_mul_cmp_iden_2),
      .while_while_mul_cmp_iden_3(while_while_mul_cmp_iden_3),
      .while_mul_67_cmp_iden(while_mul_67_cmp_iden),
      .while_mul_67_cmp_iden_1(while_mul_67_cmp_iden_1),
      .while_mul_67_cmp_iden_2(while_mul_67_cmp_iden_2),
      .while_mul_67_cmp_iden_3(while_mul_67_cmp_iden_3),
      .while_mul_67_cmp_iden_4(while_mul_67_cmp_iden_4),
      .while_mul_67_cmp_iden_5(while_mul_67_cmp_iden_5),
      .while_mul_72_cmp_iden(while_mul_72_cmp_iden),
      .while_mul_72_cmp_iden_1(while_mul_72_cmp_iden_1),
      .while_mul_72_cmp_iden_2(while_mul_72_cmp_iden_2),
      .while_mul_72_cmp_iden_3(while_mul_72_cmp_iden_3),
      .while_mul_73_cmp_iden(while_mul_73_cmp_iden),
      .while_mul_73_cmp_iden_1(while_mul_73_cmp_iden_1),
      .while_mul_73_cmp_iden_2(while_mul_73_cmp_iden_2),
      .while_mul_73_cmp_iden_3(while_mul_73_cmp_iden_3),
      .while_mul_37_cmp_iden(while_mul_37_cmp_iden),
      .while_mul_37_cmp_iden_1(while_mul_37_cmp_iden_1),
      .while_mul_37_cmp_iden_2(while_mul_37_cmp_iden_2),
      .while_mul_37_cmp_iden_3(while_mul_37_cmp_iden_3),
      .while_mul_37_cmp_iden_4(while_mul_37_cmp_iden_4),
      .while_mul_37_cmp_iden_5(while_mul_37_cmp_iden_5),
      .while_mul_34_cmp_iden(while_mul_34_cmp_iden),
      .while_mul_34_cmp_iden_1(while_mul_34_cmp_iden_1),
      .while_mul_34_cmp_iden_2(while_mul_34_cmp_iden_2),
      .while_mul_34_cmp_iden_3(while_mul_34_cmp_iden_3),
      .while_mul_25_cmp_iden(while_mul_25_cmp_iden),
      .while_mul_25_cmp_iden_1(while_mul_25_cmp_iden_1),
      .while_mul_25_cmp_iden_2(while_mul_25_cmp_iden_2),
      .while_mul_25_cmp_iden_3(while_mul_25_cmp_iden_3),
      .while_mul_25_cmp_iden_4(while_mul_25_cmp_iden_4),
      .while_mul_25_cmp_iden_5(while_mul_25_cmp_iden_5),
      .run_flen_unreg(nl_Rotate_run_staller_inst_run_flen_unreg)
    );
  Rotate_run_run_fsm Rotate_run_run_fsm_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .fsm_output(fsm_output)
    );
  assign or_663_cse = and_581_cse | and_509_cse;
  assign while_mul_103_cmp_en = or_663_cse;
  assign while_and_cse = run_wen & (~((~ (fsm_output[2])) | or_dcpl_123));
  assign while_nor_1_cse = ~(while_stage_v_25 | reg_rotate_out_Push_mioi_iswt0_cse);
  assign or_568_rmff = and_513_cse | and_514_cse;
  assign or_569_cse = and_515_cse | and_517_cse;
  assign or_579_rmff = and_515_cse | and_538_cse | and_539_cse;
  assign or_589_rmff = and_560_cse | and_514_cse;
  assign while_or_98_cse_1 = (fsm_output[3:2]!=2'b00);
  assign or_597_rmff = and_541_cse | and_509_cse | and_580_cse;
  assign or_604_rmff = and_507_cse | and_597_cse;
  assign or_606_rmff = and_581_cse | and_511_cse;
  assign or_614_rmff = and_515_cse | and_620_cse;
  assign or_624_rmff = and_540_cse | and_541_cse | and_580_cse;
  assign or_633_rmff = and_620_cse | and_538_cse | and_539_cse;
  assign or_639_rmff = and_541_cse | and_509_cse;
  assign or_647_rmff = and_538_cse | and_580_cse;
  assign or_654_rmff = and_581_cse | and_606_cse;
  assign or_655_rmff = and_507_cse | and_606_cse;
  assign while_or_85_itm = and_606_cse | and_504_cse;
  assign while_and_177_cse = run_wen & (~(while_stage_v_25 | or_tmp_488));
  assign while_and_195_cse = run_wen & (~(while_stage_v_21 | or_tmp_488));
  assign or_14_cse = ((while_stage_v_21 | while_stage_v_22 | while_stage_v_23) &
      while_stage_v_20) | while_stage_v_17 | while_stage_v_18 | while_stage_v_19;
  assign or_9_cse = ((while_stage_v_25 | reg_rotate_out_Push_mioi_iswt0_cse | while_stage_v_21
      | while_stage_v_22 | while_stage_v_23) & while_stage_v_20) | while_stage_v_17
      | while_stage_v_18 | while_stage_v_19;
  assign while_and_197_cse = run_wen & or_tmp_346;
  assign while_and_200_cse = run_wen & while_and_76_tmp & (fsm_output[3]);
  assign while_and_140_cse = run_wen & (~((~ (fsm_output[4])) | or_dcpl_159));
  assign while_and_201_cse = run_wen & (~ while_stage_v_4) & (fsm_output[4]);
  assign while_and_141_cse = run_wen & (~((~ (fsm_output[2])) | or_dcpl_169));
  assign while_and_205_cse = run_wen & and_539_cse;
  assign while_and_209_cse = run_wen & (~ while_stage_v_8) & (fsm_output[4]);
  assign while_and_213_cse = run_wen & (~(and_dcpl_230 | or_dcpl_186)) & (fsm_output[4]);
  assign while_and_214_cse = run_wen & (~(while_stage_v_13 | while_stage_v_12)) &
      (fsm_output[4]);
  assign while_and_220_cse = run_wen & (~ while_stage_v_12) & (fsm_output[4]);
  assign while_or_95_itm = and_559_cse | and_511_cse;
  assign while_and_224_cse = run_wen & (~ or_dcpl_25) & (fsm_output[4]);
  assign while_and_230_cse = run_wen & (~ or_dcpl_26) & (fsm_output[4]);
  assign while_and_231_cse = run_wen & (~ while_stage_v_20) & (fsm_output[4]);
  assign while_or_97_itm = and_599_cse | and_535_cse;
  assign while_and_233_cse = run_wen & (~ or_tmp_33) & (fsm_output[4]);
  assign while_and_243_cse = run_wen & (~ while_stage_v_24) & (fsm_output[4]);
  assign while_and_256_cse = run_wen & (~ or_dcpl_196) & (fsm_output[4]);
  assign while_and_259_cse = run_wen & (~((~ (fsm_output[1])) | or_dcpl_163));
  assign while_and_266_cse = run_wen & while_and_64_tmp & (fsm_output[3]);
  assign while_and_157_cse = run_wen & (~((~ (fsm_output[2])) | or_dcpl_183));
  assign while_and_267_cse = run_wen & while_and_56_tmp & (fsm_output[3]);
  assign while_and_279_cse = run_wen & (~ while_stage_v_15) & (fsm_output[3]);
  assign while_and_280_cse = run_wen & (~(and_dcpl_229 | or_dcpl_25)) & (fsm_output[4]);
  assign while_and_297_cse = run_wen & (~ or_dcpl_37) & (fsm_output[4]);
  assign while_and_304_cse = run_wen & (~ while_stage_v_22) & (fsm_output[2]);
  assign while_and_305_cse = run_wen & (~ or_dcpl_28) & (fsm_output[2]);
  assign while_and_308_cse = run_wen & (~ while_stage_v_23) & (fsm_output[3]);
  assign while_and_310_cse = run_wen & (~(or_dcpl_38 | or_tmp_488));
  assign while_and_311_cse = run_wen & (~(while_stage_v_17 | or_tmp_488));
  assign while_and_314_cse = run_wen & (~(or_dcpl_42 | or_tmp_488));
  assign while_and_350_cse = run_wen & (~(while_stage_v_17 | while_stage_v_16)) &
      (fsm_output[4]);
  assign while_and_354_cse = run_wen & (~ while_stage_v_16) & (fsm_output[4]);
  assign while_and_356_cse = run_wen & (~ or_tmp_25) & (fsm_output[2]);
  assign nl_while_acc_89_cse_sva_1 = conv_s2s_32_35(cfg_sin_beta) + conv_s2s_32_35(cfg_sin_3_beta)
      + conv_s2s_34_35({cfg_sin_3_beta , 2'b00});
  assign while_acc_89_cse_sva_1 = nl_while_acc_89_cse_sva_1[34:0];
  assign while_nor_tmp = ~((while_stage_v & (~ (fsm_output[0]))) | (while_stage_v_1
      & (~ (fsm_output[0]))) | (while_stage_v_2 & (~ (fsm_output[0]))) | (while_stage_v_3
      & (and_454_cse | (or_dcpl_159 & (fsm_output[4])))) | (while_stage_v_5 & (~
      (fsm_output[0]))) | (while_stage_v_6 & (~ (fsm_output[0]))) | (while_stage_v_7
      & (and_454_cse | (or_dcpl_173 & (fsm_output[4])))) | (while_stage_v_9 & (~
      (fsm_output[0]))) | (while_stage_v_10 & (~ (fsm_output[0]))) | (while_stage_v_11
      & (and_454_cse | (or_dcpl_198 & (fsm_output[4])))) | (while_stage_v_13 & (~
      (fsm_output[0]))) | (while_stage_v_14 & (~ (fsm_output[0]))) | (while_stage_v_15
      & (and_454_cse | (or_dcpl_236 & (fsm_output[4])))) | (while_stage_v_17 & (~
      (fsm_output[0]))) | (while_stage_v_18 & (~ (fsm_output[0]))) | (while_stage_v_19
      & (and_454_cse | (or_dcpl_252 & (fsm_output[4])))) | (while_stage_v_21 & (~
      (fsm_output[0]))) | (while_stage_v_22 & (~ (fsm_output[0]))) | (while_stage_v_23
      & (and_454_cse | (or_dcpl_263 & (fsm_output[4])))) | (while_stage_v_25 & (~
      (fsm_output[0]))) | (reg_rotate_out_Push_mioi_iswt0_cse & (~ (fsm_output[0]))));
  assign while_stage_v_5_mx2 = while_stage_v_5 & or_dcpl_169;
  assign while_stage_v_9_mx2 = while_stage_v_9 & or_dcpl_183;
  assign while_stage_v_10_mx2 = while_stage_v_10 & (~ while_and_56_tmp);
  assign while_stage_v_11_mx2 = while_stage_v_11 & or_dcpl_198;
  assign while_stage_v_13_mx2 = while_stage_v_13 & (((and_dcpl_235 | or_dcpl_215
      | or_tmp_25) & while_stage_v_17) | (~ while_mul_73_cmp_bawt) | while_stage_v_14
      | while_stage_v_15 | while_stage_v_16);
  assign while_stage_v_14_mx2 = while_stage_v_14 & (((and_dcpl_238 | or_dcpl_26 |
      (~ while_mul_72_cmp_bawt) | while_stage_v_19) & while_stage_v_18) | while_stage_v_26_mx2
      | or_dcpl_203 | (~ while_mul_73_cmp_bawt) | while_stage_v_16 | while_stage_v_15);
  assign while_stage_v_15_mx2 = while_stage_v_15 & or_dcpl_236;
  assign while_stage_v_17_mx2 = while_stage_v_17 & (and_dcpl_235 | or_dcpl_215 |
      while_stage_v_19 | while_stage_v_18);
  assign while_stage_v_18_mx2 = while_stage_v_18 & (and_dcpl_238 | while_stage_v_26_mx2
      | or_dcpl_26 | (~ while_mul_72_cmp_bawt) | while_stage_v_19);
  assign while_stage_v_26_mx2 = reg_rotate_out_Push_mioi_iswt0_cse & (~ rotate_out_Push_mioi_bawt);
  assign while_stage_v_12_mx1 = while_stage_v_12 & (((and_dcpl_232 | or_tmp_25 |
      or_dcpl_203) & while_stage_v_16) | or_dcpl_42 | (~ while_mul_34_cmp_bawt));
  assign while_stage_v_16_mx1 = while_stage_v_16 & (and_dcpl_232 | or_dcpl_38 | (~
      while_while_mul_cmp_bawt));
  assign nl_while_acc_115_nl = while_mul_58_itm - while_mul_57_itm_55_0;
  assign while_acc_115_nl = nl_while_acc_115_nl[55:0];
  assign while_acc_115_itm_55_24_1 = readslicef_56_32_24(while_acc_115_nl);
  assign nl_while_acc_12_nl = while_mul_16_itm + while_mul_17_itm;
  assign while_acc_12_nl = nl_while_acc_12_nl[55:0];
  assign while_acc_12_itm_55_24_1 = readslicef_56_32_24(while_acc_12_nl);
  assign nl_while_acc_114_nl = while_mul_60_itm - while_mul_59_itm_55_0;
  assign while_acc_114_nl = nl_while_acc_114_nl[55:0];
  assign while_acc_114_itm_55_24_1 = readslicef_56_32_24(while_acc_114_nl);
  assign while_while_or_cse_1 = while_mul_34_cmp_bawt | (~ while_stage_v_12_mx1);
  assign while_while_or_1_cse_1 = while_while_mul_cmp_bawt | (~ while_stage_v_16_mx1);
  assign while_or_19_cse_1 = while_mul_34_cmp_bawt | (~ while_stage_v_9_mx2);
  assign while_or_20_cse_1 = while_mul_77_cmp_bawt | (~ while_stage_v_9_mx2);
  assign while_while_or_11_cse_1 = while_mul_73_cmp_bawt | (~ while_stage_v_13_mx2);
  assign while_while_or_10_cse_1 = while_mul_72_cmp_bawt | (~ while_stage_v_17_mx2);
  assign while_and_76_tmp = while_stage_v_2 & (~(while_stage_v_3 | while_stage_v_4
      | while_stage_v_5 | (while_stage_v_6 & (~ while_and_64_tmp)))) & (while_mul_34_cmp_bawt
      | (~ while_stage_v_10_mx2)) & (while_mul_77_cmp_bawt | (~ while_stage_v_10_mx2))
      & (while_mul_110_cmp_bawt | (~ while_stage_v_10_mx2)) & while_or_40_cse_1 &
      while_or_41_cse_1 & while_while_or_21_cse_1 & (~ while_stage_v_26_mx2);
  assign while_and_64_tmp = while_stage_v_6 & (~(while_stage_v_7 | while_stage_v_8
      | while_stage_v_9 | while_stage_v_10_mx2)) & while_mul_25_cmp_bawt & while_mul_37_cmp_bawt
      & while_mul_111_cmp_bawt & while_mul_76_cmp_bawt & while_or_40_cse_1 & while_or_41_cse_1
      & while_while_or_21_cse_1 & (~ while_stage_v_26_mx2);
  assign while_and_56_tmp = while_stage_v_10 & (~(while_stage_v_11 | while_stage_v_12
      | while_stage_v_13 | while_stage_v_14_mx2)) & while_mul_34_cmp_bawt & while_mul_77_cmp_bawt
      & while_mul_110_cmp_bawt & while_while_or_21_cse_1 & (~ while_stage_v_26_mx2);
  assign while_and_44_tmp = reg_rotate_out_Push_mioi_iswt0_cse & rotate_out_Push_mioi_bawt;
  assign while_or_40_cse_1 = while_while_mul_cmp_bawt | (~ while_stage_v_14_mx2);
  assign while_or_41_cse_1 = while_mul_73_cmp_bawt | (~ while_stage_v_14_mx2);
  assign while_while_or_21_cse_1 = while_mul_72_cmp_bawt | (~ while_stage_v_18_mx2);
  assign while_while_or_30_cse_1 = while_mul_77_cmp_bawt | (~ while_stage_v_11_mx2);
  assign while_or_69_cse_1 = while_while_mul_cmp_bawt | (~ while_stage_v_15_mx2);
  assign while_or_70_cse_1 = while_mul_73_cmp_bawt | (~ while_stage_v_15_mx2);
  assign and_dcpl_1 = ~(while_stage_v_23 | while_stage_v_22);
  assign or_dcpl_1 = while_nor_1_cse | (~ while_stage_v_24);
  assign or_tmp_8 = while_mul_34_cmp_bawt | (~ while_stage_v_12);
  assign or_10_nl = (~ while_while_mul_cmp_bawt) | while_stage_v_12;
  assign mux_tmp = MUX_s_1_2_2((~ or_tmp_8), or_10_nl, while_stage_v_16);
  assign or_12_cse = (~ while_stage_v_16) | while_while_mul_cmp_bawt;
  assign not_tmp_9 = ~(or_12_cse & or_tmp_8);
  assign or_tmp_17 = while_stage_v_25 | reg_rotate_out_Push_mioi_iswt0_cse;
  assign and_11_cse = while_stage_v_24 & or_tmp_17;
  assign or_tmp_25 = while_stage_v_18 | while_stage_v_19;
  assign or_tmp_33 = while_stage_v_24 | while_stage_v_25;
  assign or_dcpl_24 = while_stage_v_18 | while_stage_v_17;
  assign or_dcpl_25 = or_dcpl_24 | while_stage_v_16;
  assign or_dcpl_26 = while_stage_v_21 | while_stage_v_20;
  assign or_dcpl_28 = while_stage_v_23 | while_stage_v_22;
  assign or_dcpl_29 = or_dcpl_28 | while_stage_v_21;
  assign or_dcpl_32 = while_stage_v_22 | while_stage_v_21;
  assign or_dcpl_37 = or_dcpl_32 | while_stage_v_20;
  assign or_dcpl_38 = or_tmp_25 | while_stage_v_17;
  assign or_dcpl_39 = ~((~(or_dcpl_1 & and_dcpl_1 & (~ while_stage_v_21))) & while_stage_v_20);
  assign and_dcpl_17 = ~(while_stage_v_19 | while_stage_v_18);
  assign or_dcpl_42 = while_stage_v_15 | while_stage_v_14 | while_stage_v_13;
  assign and_dcpl_21 = (~ while_stage_v_17) & while_while_mul_cmp_bawt;
  assign and_dcpl_29 = (~ while_stage_v_20) & while_mul_72_cmp_bawt;
  assign or_dcpl_59 = (~ reg_rotate_out_Push_mioi_iswt0_cse) | rotate_out_Push_mioi_bawt;
  assign and_dcpl_49 = ~(while_stage_v_21 | while_stage_v_20);
  assign or_51_itm = while_stage_v_23 | while_stage_v_24 | while_stage_v_25;
  assign or_dcpl_60 = ~(or_51_itm & while_stage_v_22);
  assign and_dcpl_67 = (~(while_stage_v_18 | while_stage_v_17)) & while_while_mul_cmp_bawt;
  assign and_dcpl_69 = ~(while_stage_v_22 | while_stage_v_21);
  assign or_dcpl_80 = ~((~(while_nor_1_cse & (~ while_stage_v_24))) & while_stage_v_23);
  assign or_dcpl_81 = ~((~(or_dcpl_80 & and_dcpl_69 & (~ while_stage_v_20))) & while_stage_v_19);
  assign or_tmp_72 = while_stage_v_8 | while_stage_v_9 | while_stage_v_10;
  assign or_tmp_76 = ~((~(while_mul_73_cmp_bawt & while_while_mul_cmp_bawt)) & while_stage_v_15);
  assign or_tmp_77 = while_stage_v_11 | (~ or_tmp_76);
  assign and_85_nl = while_stage_v_23 & (while_stage_v_24 | while_stage_v_25 | reg_rotate_out_Push_mioi_iswt0_cse);
  assign mux_46_nl = MUX_s_1_2_2((~ or_tmp_76), while_stage_v_15, and_85_nl);
  assign or_150_nl = while_stage_v_20 | while_stage_v_21 | while_stage_v_22;
  assign mux_47_nl = MUX_s_1_2_2(mux_46_nl, while_stage_v_15, or_150_nl);
  assign mux_48_nl = MUX_s_1_2_2((~ or_tmp_76), mux_47_nl, while_stage_v_19);
  assign or_170_nl = while_stage_v_16 | while_stage_v_17 | while_stage_v_18;
  assign mux_49_cse = MUX_s_1_2_2(mux_48_nl, while_stage_v_15, or_170_nl);
  assign mux_50_nl = MUX_s_1_2_2((~ or_tmp_76), mux_49_cse, while_stage_v_11);
  assign nor_16_nl = ~(while_stage_v_12 | while_stage_v_13 | while_stage_v_14 | (~
      while_mul_77_cmp_bawt));
  assign mux_51_cse = MUX_s_1_2_2(or_tmp_77, mux_50_nl, nor_16_nl);
  assign or_dcpl_123 = (~ while_stage_v_25) | reg_rotate_out_Push_mioi_iswt0_cse;
  assign or_dcpl_124 = (fsm_output[0]) | (fsm_output[4]);
  assign and_1616_cse = while_stage_v_25 & reg_rotate_out_Push_mioi_iswt0_cse;
  assign and_dcpl_130 = ~(and_1616_cse | while_stage_v_24);
  assign or_dcpl_130 = ~((~(and_dcpl_130 & and_dcpl_1)) & while_stage_v_21);
  assign or_dcpl_131 = ~((~(or_dcpl_130 & and_dcpl_29 & and_dcpl_17)) & while_stage_v_17);
  assign nor_29_cse = ~(while_stage_v_10 | while_stage_v_11 | (~ while_mul_77_cmp_bawt)
      | while_stage_v_12 | (~ while_mul_34_cmp_bawt));
  assign nor_30_cse = ~(while_stage_v_14 | while_stage_v_15 | while_stage_v_16 |
      (~ while_mul_73_cmp_bawt));
  assign or_tmp_183 = while_stage_v_18 | while_stage_v_19 | while_stage_v_20;
  assign or_tmp_184 = and_1616_cse | while_stage_v_22 | while_stage_v_23 | while_stage_v_24;
  assign or_tmp_185 = while_mul_72_cmp_bawt | (~ while_stage_v_17);
  assign or_tmp_186 = (~ while_stage_v_13) | while_mul_73_cmp_bawt;
  assign nor_99_nl = ~((~ while_stage_v_17) | while_mul_72_cmp_bawt);
  assign nand_10_nl = ~(nor_30_cse & or_dcpl_131);
  assign mux_tmp_88 = MUX_s_1_2_2(nor_99_nl, nand_10_nl, while_stage_v_13);
  assign or_tmp_188 = (~ while_mul_77_cmp_bawt) | while_stage_v_12 | while_stage_v_13
      | while_stage_v_14;
  assign nor_tmp_32 = ~(while_stage_v_13 | while_stage_v_14 | while_stage_v_15 |
      (~ while_mul_34_cmp_bawt));
  assign nor_tmp_35 = ~(while_stage_v_6 | while_stage_v_7 | while_stage_v_8 | (~
      while_mul_25_cmp_bawt) | (~ while_mul_37_cmp_bawt));
  assign and_414_cse = or_tmp_186 & or_tmp_185;
  assign mux_2_nl = MUX_s_1_2_2(not_tmp_9, mux_tmp, or_14_cse);
  assign mux_1_nl = MUX_s_1_2_2(not_tmp_9, mux_tmp, or_9_cse);
  assign mux_3_nl = MUX_s_1_2_2(mux_2_nl, mux_1_nl, while_stage_v_24);
  assign or_370_nl = (~ or_12_cse) | while_stage_v_12;
  assign mux_116_nl = MUX_s_1_2_2(mux_3_nl, or_370_nl, or_dcpl_42);
  assign or_378_nl = while_stage_v_9 | while_stage_v_10 | while_stage_v_11 | mux_116_nl;
  assign mux_117_cse = MUX_s_1_2_2(not_tmp_9, or_378_nl, while_stage_v_8);
  assign or_379_nl = while_stage_v_5 | while_stage_v_6 | while_stage_v_7 | mux_117_cse;
  assign mux_118_cse = MUX_s_1_2_2(not_tmp_9, or_379_nl, while_stage_v_4);
  assign and_429_nl = while_mul_77_cmp_bawt & while_mul_34_cmp_bawt & and_414_cse;
  assign mux_124_cse = MUX_s_1_2_2(and_414_cse, and_429_nl, while_stage_v_9);
  assign mux_119_nl = MUX_s_1_2_2((~ or_tmp_185), while_stage_v_17, or_tmp_184);
  assign mux_120_nl = MUX_s_1_2_2((~ or_tmp_185), mux_119_nl, while_stage_v_21);
  assign mux_121_nl = MUX_s_1_2_2(mux_120_nl, while_stage_v_17, or_tmp_183);
  assign and_1622_nl = nor_30_cse & (~ mux_121_nl);
  assign mux_122_nl = MUX_s_1_2_2(or_tmp_185, and_1622_nl, while_stage_v_13);
  assign and_1623_nl = nor_29_cse & mux_122_nl;
  assign mux_123_cse = MUX_s_1_2_2(and_414_cse, and_1623_nl, while_stage_v_9);
  assign mux_132_nl = MUX_s_1_2_2(or_tmp_77, (~ or_tmp_76), while_mul_77_cmp_bawt);
  assign or_400_nl = or_tmp_72 | mux_51_cse;
  assign mux_133_nl = MUX_s_1_2_2(mux_132_nl, or_400_nl, while_stage_v_7);
  assign or_dcpl_159 = mux_133_nl | while_stage_v_6 | while_stage_v_5 | (~ while_stage_v_3)
      | (~(while_mul_67_cmp_bawt & while_mul_79_cmp_bawt)) | while_stage_v_4;
  assign or_dcpl_163 = mux_117_cse | while_stage_v_7 | while_stage_v_6 | while_stage_v_5
      | (~ while_stage_v_4);
  assign and_1627_nl = or_tmp_184 & while_stage_v_21;
  assign mux_140_nl = MUX_s_1_2_2((~ or_tmp_185), while_stage_v_17, and_1627_nl);
  assign mux_141_nl = MUX_s_1_2_2(mux_140_nl, while_stage_v_17, or_tmp_183);
  assign and_1628_nl = nor_30_cse & (~ mux_141_nl);
  assign mux_142_cse = MUX_s_1_2_2(or_tmp_185, and_1628_nl, while_stage_v_13);
  assign nand_69_nl = ~(or_tmp_186 & or_tmp_185);
  assign nand_19_nl = ~(nor_29_cse & mux_142_cse);
  assign mux_143_nl = MUX_s_1_2_2(nand_69_nl, nand_19_nl, while_stage_v_9);
  assign or_dcpl_169 = mux_143_nl | while_stage_v_8 | while_stage_v_7 | while_stage_v_6
      | (~(while_mul_25_cmp_bawt & while_mul_37_cmp_bawt & while_stage_v_5));
  assign or_436_nl = or_tmp_188 | mux_49_cse;
  assign mux_148_nl = MUX_s_1_2_2((~ or_tmp_76), or_436_nl, while_stage_v_11);
  assign or_dcpl_173 = mux_148_nl | while_stage_v_10 | while_stage_v_9 | while_stage_v_8
      | (~ while_stage_v_7);
  assign mux_150_nl = MUX_s_1_2_2((~ or_12_cse), while_stage_v_16, or_14_cse);
  assign mux_149_nl = MUX_s_1_2_2((~ or_12_cse), while_stage_v_16, or_9_cse);
  assign mux_151_cse = MUX_s_1_2_2(mux_150_nl, mux_149_nl, while_stage_v_24);
  assign nand_20_nl = ~(nor_tmp_32 & (~ mux_151_cse));
  assign mux_152_nl = MUX_s_1_2_2((~ or_12_cse), nand_20_nl, while_stage_v_12);
  assign or_dcpl_177 = mux_152_nl | while_stage_v_11 | while_stage_v_10 | while_stage_v_9
      | (~ while_stage_v_8);
  assign or_dcpl_183 = mux_tmp_88 | (~ while_mul_34_cmp_bawt) | while_stage_v_12
      | while_stage_v_11 | while_stage_v_10 | (~ while_mul_77_cmp_bawt) | (~ while_stage_v_9);
  assign or_dcpl_186 = while_stage_v_14 | while_stage_v_13 | while_stage_v_12;
  assign or_dcpl_190 = or_dcpl_24 | (~ while_while_mul_cmp_bawt);
  assign and_dcpl_228 = (or_tmp_17 | while_stage_v_24) & while_stage_v_23;
  assign or_dcpl_196 = and_dcpl_228 | or_dcpl_37;
  assign and_dcpl_229 = or_dcpl_196 & while_stage_v_19;
  assign and_dcpl_230 = (and_dcpl_229 | or_dcpl_190 | (~ while_mul_73_cmp_bawt) |
      while_stage_v_16) & while_stage_v_15;
  assign or_dcpl_198 = and_dcpl_230 | or_dcpl_186 | (~(while_stage_v_11 & while_mul_77_cmp_bawt));
  assign or_dcpl_203 = while_stage_v_17 | (~ while_while_mul_cmp_bawt);
  assign and_dcpl_232 = (and_11_cse | or_dcpl_29) & while_stage_v_20;
  assign or_dcpl_215 = while_stage_v_20 | (~ while_mul_72_cmp_bawt);
  assign or_487_itm = and_1616_cse | while_stage_v_24 | or_dcpl_28;
  assign and_dcpl_235 = or_487_itm & while_stage_v_21;
  assign and_dcpl_238 = (or_tmp_33 | while_stage_v_23) & while_stage_v_22;
  assign or_dcpl_236 = and_dcpl_229 | or_dcpl_190 | (~(while_mul_73_cmp_bawt & while_stage_v_15))
      | while_stage_v_16;
  assign or_dcpl_252 = and_dcpl_228 | or_dcpl_32 | while_stage_v_20 | (~ while_stage_v_19);
  assign or_dcpl_263 = or_tmp_17 | while_stage_v_24 | (~ while_stage_v_23);
  assign and_454_cse = ~((fsm_output[0]) | (fsm_output[4]));
  assign or_tmp_289 = (fsm_output[0]) | (fsm_output[2]);
  assign and_504_cse = or_dcpl_60 & or_dcpl_59 & and_dcpl_49 & while_mul_72_cmp_bawt
      & (~ while_stage_v_19) & while_stage_v_18 & (fsm_output[3]);
  assign and_507_cse = or_dcpl_1 & (~ while_stage_v_23) & and_dcpl_69 & while_stage_v_20
      & (fsm_output[1]);
  assign and_509_cse = or_dcpl_131 & while_mul_73_cmp_bawt & (~ while_stage_v_14)
      & (~ while_stage_v_15) & (~ while_stage_v_16) & while_stage_v_13 & (fsm_output[2]);
  assign and_511_cse = or_dcpl_81 & and_dcpl_67 & while_mul_73_cmp_bawt & while_stage_v_15
      & (~ while_stage_v_16) & (fsm_output[4]);
  assign mux_52_nl = MUX_s_1_2_2((~ or_tmp_77), or_tmp_76, while_mul_77_cmp_bawt);
  assign nor_79_nl = ~(or_tmp_72 | mux_51_cse);
  assign mux_53_nl = MUX_s_1_2_2(mux_52_nl, nor_79_nl, while_stage_v_7);
  assign and_514_cse = mux_53_nl & (~(while_stage_v_6 | while_stage_v_5)) & while_stage_v_3
      & while_mul_67_cmp_bawt & while_mul_79_cmp_bawt & (~ while_stage_v_4) & (fsm_output[4]);
  assign and_513_cse = (~ mux_117_cse) & (~(while_stage_v_7 | while_stage_v_6)) &
      (~ while_stage_v_5) & while_stage_v_4 & (fsm_output[1]);
  assign and_515_cse = while_and_64_tmp & (fsm_output[3]);
  assign and_1638_nl = nor_29_cse & mux_142_cse;
  assign mux_87_nl = MUX_s_1_2_2(and_414_cse, and_1638_nl, while_stage_v_9);
  assign and_517_cse = mux_87_nl & (~(while_stage_v_8 | while_stage_v_7 | while_stage_v_6))
      & while_mul_25_cmp_bawt & while_mul_37_cmp_bawt & while_stage_v_5 & (fsm_output[2]);
  assign or_tmp_300 = (fsm_output[1:0]!=2'b00);
  assign and_535_cse = while_nor_1_cse & (~ while_stage_v_24) & while_stage_v_23
      & (fsm_output[4]);
  assign and_538_cse = (~ mux_tmp_88) & while_mul_34_cmp_bawt & (~ while_stage_v_12)
      & (~ while_stage_v_11) & (~ while_stage_v_10) & while_mul_77_cmp_bawt & while_stage_v_9
      & (fsm_output[2]);
  assign nor_106_nl = ~(or_tmp_188 | mux_49_cse);
  assign mux_93_nl = MUX_s_1_2_2(or_tmp_76, nor_106_nl, while_stage_v_11);
  assign and_539_cse = mux_93_nl & (~(while_stage_v_10 | while_stage_v_9)) & (~ while_stage_v_8)
      & while_stage_v_7 & (fsm_output[4]);
  assign and_541_cse = (~((~(or_dcpl_39 & and_dcpl_17 & and_dcpl_21)) & while_stage_v_16))
      & (~(while_stage_v_14 | while_stage_v_15 | while_stage_v_13)) & while_mul_34_cmp_bawt
      & while_stage_v_12 & (fsm_output[1]);
  assign and_540_cse = while_and_56_tmp & (fsm_output[3]);
  assign or_tmp_313 = (fsm_output[4:3]!=2'b00);
  assign and_559_cse = or_dcpl_39 & and_dcpl_17 & (~ while_stage_v_17) & while_while_mul_cmp_bawt
      & while_stage_v_16 & (fsm_output[1]);
  assign and_560_cse = while_and_76_tmp & (fsm_output[3]);
  assign or_594_cse = (fsm_output[4]) | (fsm_output[1]);
  assign and_580_cse = (~((~(or_dcpl_81 & and_dcpl_67 & while_mul_73_cmp_bawt & (~
      while_stage_v_16))) & while_stage_v_15)) & (~(while_stage_v_14 | while_stage_v_13
      | while_stage_v_12)) & while_stage_v_11 & while_mul_77_cmp_bawt & (fsm_output[4]);
  assign and_581_cse = (~((~(or_dcpl_60 & and_dcpl_49 & while_mul_72_cmp_bawt & (~
      while_stage_v_19))) & while_stage_v_18)) & or_dcpl_59 & and_dcpl_21 & while_mul_73_cmp_bawt
      & while_stage_v_14 & (~ while_stage_v_15) & (~ while_stage_v_16) & (fsm_output[3]);
  assign and_597_cse = and_dcpl_130 & and_dcpl_1 & while_stage_v_21 & (fsm_output[2]);
  assign and_599_cse = while_nor_1_cse & while_stage_v_24 & (fsm_output[1]);
  assign and_606_cse = or_dcpl_130 & and_dcpl_29 & (~ while_stage_v_19) & (~ while_stage_v_18)
      & while_stage_v_17 & (fsm_output[2]);
  assign and_1642_nl = nor_tmp_32 & (~ mux_151_cse);
  assign mux_97_nl = MUX_s_1_2_2(or_12_cse, and_1642_nl, while_stage_v_12);
  assign and_620_cse = mux_97_nl & (~(while_stage_v_11 | while_stage_v_10)) & (~
      while_stage_v_9) & while_stage_v_8 & (fsm_output[1]);
  assign and_1645_nl = nor_tmp_35 & mux_123_cse;
  assign mux_104_nl = MUX_s_1_2_2(mux_124_cse, and_1645_nl, while_stage_v_5);
  assign or_tmp_346 = mux_104_nl & (~(while_stage_v_3 | while_stage_v_4)) & while_stage_v_1
      & (~ while_stage_v_2) & (fsm_output[2]);
  assign or_tmp_353 = while_stage_v_25 & (~ reg_rotate_out_Push_mioi_iswt0_cse) &
      (fsm_output[2]);
  assign and_704_cse = (~ mux_118_cse) & (~ while_stage_v_3) & while_stage_v & rotate_in_Pop_mioi_bawt
      & (~(while_stage_v_1 | while_stage_v_2)) & (fsm_output[1]);
  assign or_tmp_395 = while_and_44_tmp & (fsm_output[3]);
  assign or_tmp_466 = or_dcpl_80 & and_dcpl_69 & (~ while_stage_v_20) & while_stage_v_19
      & (fsm_output[4]);
  assign or_tmp_474 = or_dcpl_59 & (~ while_stage_v_25) & (~(while_stage_v_24 | while_stage_v_23))
      & while_stage_v_22 & (fsm_output[3]);
  assign or_tmp_488 = ~((fsm_output[1:0]!=2'b00));
  assign while_mul_103_cmp_a = while_acc_89_cse_sva_1;
  assign while_mul_103_cmp_b = while_mul_104_itm_2;
  assign while_or_99_ssc = (fsm_output[3]) | (fsm_output[1]);
  assign while_or_113_cse = (fsm_output[4]) | (fsm_output[2]);
  assign while_mux_600_cse = MUX_v_32_2_2(cfg_sin_beta, cfg_cos_beta, fsm_output[3]);
  assign while_while_mux_1_cse = MUX_v_2_2_2(2'b01, 2'b10, fsm_output[2]);
  assign while_while_mux_4_cse = MUX_v_2_2_2(2'b01, 2'b10, while_or_99_ssc);
  assign while_mux_cse = MUX_v_2_2_2(2'b10, 2'b01, fsm_output[2]);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Pop_mioi_iswt0 <= 1'b0;
      reg_while_mul_25_cmp_iswt1_2_cse <= 1'b0;
      reg_while_mul_25_cmp_oswt_2_cse <= 1'b0;
      reg_while_mul_25_cmp_iswt1_1_cse <= 1'b0;
      reg_while_mul_25_cmp_oswt_1_cse <= 1'b0;
      while_mul_25_cmp_iswt1 <= 1'b0;
      while_mul_34_cmp_iswt2 <= 1'b0;
      while_mul_37_cmp_iswt2 <= 1'b0;
      while_mul_73_cmp_iswt1 <= 1'b0;
      while_mul_72_cmp_iswt2_1 <= 1'b0;
      while_mul_72_cmp_iswt2 <= 1'b0;
      while_mul_67_cmp_iswt1_1 <= 1'b0;
      while_mul_67_cmp_iswt1 <= 1'b0;
      reg_while_mul_67_cmp_oswt_cse <= 1'b0;
      reg_while_while_mul_cmp_iswt3_1_cse <= 1'b0;
      while_while_mul_cmp_iswt3 <= 1'b0;
      while_mul_77_cmp_iswt1 <= 1'b0;
      while_mul_76_cmp_iswt2_1 <= 1'b0;
      reg_while_mul_76_cmp_oswt_cse <= 1'b0;
      while_mul_79_cmp_iswt2_1 <= 1'b0;
      reg_while_mul_79_cmp_iswt2_cse <= 1'b0;
      while_mul_111_cmp_iswt2_2 <= 1'b0;
      reg_while_mul_111_cmp_oswt_2_cse <= 1'b0;
      while_mul_111_cmp_iswt2_1 <= 1'b0;
      reg_while_mul_111_cmp_oswt_1_cse <= 1'b0;
    end
    else if ( run_wen ) begin
      rotate_in_Pop_mioi_iswt0 <= ~(and_454_cse | (~ while_nor_tmp));
      reg_while_mul_25_cmp_iswt1_2_cse <= and_504_cse;
      reg_while_mul_25_cmp_oswt_2_cse <= and_507_cse;
      reg_while_mul_25_cmp_iswt1_1_cse <= and_509_cse;
      reg_while_mul_25_cmp_oswt_1_cse <= and_511_cse;
      while_mul_25_cmp_iswt1 <= or_568_rmff;
      while_mul_34_cmp_iswt2 <= or_579_rmff;
      while_mul_37_cmp_iswt2 <= or_589_rmff;
      while_mul_73_cmp_iswt1 <= or_597_rmff;
      while_mul_72_cmp_iswt2_1 <= or_604_rmff;
      while_mul_72_cmp_iswt2 <= or_606_rmff;
      while_mul_67_cmp_iswt1_1 <= or_614_rmff;
      while_mul_67_cmp_iswt1 <= or_tmp_346;
      reg_while_mul_67_cmp_oswt_cse <= and_514_cse;
      reg_while_while_mul_cmp_iswt3_1_cse <= and_597_cse;
      while_while_mul_cmp_iswt3 <= or_624_rmff;
      while_mul_77_cmp_iswt1 <= or_633_rmff;
      while_mul_76_cmp_iswt2_1 <= or_639_rmff;
      reg_while_mul_76_cmp_oswt_cse <= and_515_cse;
      while_mul_79_cmp_iswt2_1 <= or_647_rmff;
      reg_while_mul_79_cmp_iswt2_cse <= and_704_cse;
      while_mul_111_cmp_iswt2_2 <= or_654_rmff;
      reg_while_mul_111_cmp_oswt_2_cse <= or_655_rmff;
      while_mul_111_cmp_iswt2_1 <= and_620_cse;
      reg_while_mul_111_cmp_oswt_1_cse <= and_580_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_out_Push_mioi_idat_63_32 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_95_64 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_127_96 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_159_128 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_191_160 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_223_192 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_255_224 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_287_256 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_319_288 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_351_320 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_383_352 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_415_384 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_447_416 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_479_448 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_511_480 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_cse ) begin
      rotate_out_Push_mioi_idat_63_32 <= while_slc_55_24_4_itm_4;
      rotate_out_Push_mioi_idat_95_64 <= while_slc_55_24_2_itm_5;
      rotate_out_Push_mioi_idat_127_96 <= while_slc_55_24_5_itm_4;
      rotate_out_Push_mioi_idat_159_128 <= readslicef_56_32_24(while_acc_109_nl);
      rotate_out_Push_mioi_idat_191_160 <= while_slc_55_24_13_itm;
      rotate_out_Push_mioi_idat_223_192 <= readslicef_103_32_71(while_acc_77_nl);
      rotate_out_Push_mioi_idat_255_224 <= readslicef_56_32_24(while_acc_30_nl);
      rotate_out_Push_mioi_idat_287_256 <= readslicef_56_32_24(while_acc_31_nl);
      rotate_out_Push_mioi_idat_319_288 <= readslicef_56_32_24(while_acc_111_nl);
      rotate_out_Push_mioi_idat_351_320 <= readslicef_56_32_24(while_acc_112_nl);
      rotate_out_Push_mioi_idat_383_352 <= readslicef_56_32_24(while_acc_113_nl);
      rotate_out_Push_mioi_idat_415_384 <= readslicef_78_32_46(while_acc_88_nl);
      rotate_out_Push_mioi_idat_447_416 <= readslicef_56_32_24(while_acc_71_nl);
      rotate_out_Push_mioi_idat_479_448 <= readslicef_56_32_24(while_acc_72_nl);
      rotate_out_Push_mioi_idat_511_480 <= readslicef_56_32_24(while_acc_73_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_rotate_out_Push_mioi_iswt0_cse <= 1'b0;
    end
    else if ( run_wen & (or_tmp_353 | or_tmp_395) ) begin
      reg_rotate_out_Push_mioi_iswt0_cse <= ~ or_tmp_395;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v <= 1'b0;
    end
    else if ( run_wen & ((while_nor_tmp & or_dcpl_124) | and_704_cse) ) begin
      while_stage_v <= ~ and_704_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_1 <= 1'b0;
    end
    else if ( run_wen & (and_704_cse | or_tmp_346) ) begin
      while_stage_v_1 <= ~ or_tmp_346;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_2 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_346 | and_560_cse) ) begin
      while_stage_v_2 <= ~ and_560_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_3 <= 1'b0;
    end
    else if ( run_wen & or_589_rmff ) begin
      while_stage_v_3 <= ~ and_514_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_5 <= 1'b0;
    end
    else if ( run_wen & (and_513_cse | and_517_cse) ) begin
      while_stage_v_5 <= ~ and_517_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_6 <= 1'b0;
    end
    else if ( run_wen & or_569_cse ) begin
      while_stage_v_6 <= ~ and_515_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_7 <= 1'b0;
    end
    else if ( run_wen & (and_515_cse | and_539_cse) ) begin
      while_stage_v_7 <= ~ and_539_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_9 <= 1'b0;
    end
    else if ( run_wen & (and_620_cse | and_538_cse) ) begin
      while_stage_v_9 <= ~ and_538_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_10 <= 1'b0;
    end
    else if ( run_wen & (and_538_cse | and_540_cse) ) begin
      while_stage_v_10 <= ~ and_540_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_11 <= 1'b0;
    end
    else if ( run_wen & (and_540_cse | and_580_cse) ) begin
      while_stage_v_11 <= ~ and_580_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_13 <= 1'b0;
    end
    else if ( run_wen & or_639_rmff ) begin
      while_stage_v_13 <= ~ and_509_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_14 <= 1'b0;
    end
    else if ( run_wen & or_663_cse ) begin
      while_stage_v_14 <= ~ and_581_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_15 <= 1'b0;
    end
    else if ( run_wen & or_606_rmff ) begin
      while_stage_v_15 <= ~ and_511_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_17 <= 1'b0;
    end
    else if ( run_wen & (and_559_cse | and_606_cse) ) begin
      while_stage_v_17 <= ~ and_606_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_18 <= 1'b0;
    end
    else if ( run_wen & while_or_85_itm ) begin
      while_stage_v_18 <= ~ and_504_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_19 <= 1'b0;
    end
    else if ( run_wen & (and_504_cse | or_tmp_466) ) begin
      while_stage_v_19 <= ~ or_tmp_466;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_21 <= 1'b0;
    end
    else if ( run_wen & or_604_rmff ) begin
      while_stage_v_21 <= ~ and_597_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_22 <= 1'b0;
    end
    else if ( run_wen & (and_597_cse | or_tmp_474) ) begin
      while_stage_v_22 <= ~ or_tmp_474;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_23 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_474 | and_535_cse) ) begin
      while_stage_v_23 <= ~ and_535_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_25 <= 1'b0;
    end
    else if ( run_wen & (and_599_cse | or_tmp_353) ) begin
      while_stage_v_25 <= ~ or_tmp_353;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_47_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_13_itm <= 32'b00000000000000000000000000000000;
      while_mul_29_itm <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_asn_itm_3 <= 103'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_51_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_53_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_150_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_149_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_152_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_151_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_154_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_153_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_110_cmp_z_mxwt_128_0_itm <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_156_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_158_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_157_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_160_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_159_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_177_cse ) begin
      while_mul_47_itm_55_0 <= z_out_5_55_0;
      while_slc_55_24_13_itm <= readslicef_56_32_24(while_acc_110_nl);
      while_mul_29_itm <= z_out_3[57:0];
      while_asn_itm_3 <= while_mul_72_cmp_z_mxwt;
      while_mul_51_itm <= z_out_6_55_0;
      while_mul_53_itm <= z_out_7_55_0;
      while_mul_150_itm <= z_out_8_55_0;
      while_mul_149_itm_55_0 <= z_out_9_55_0;
      while_mul_152_itm <= z_out_10_55_0;
      while_mul_151_itm_55_0 <= z_out_11_55_0;
      while_mul_154_itm <= z_out_12_55_0;
      while_mul_153_itm_55_0 <= z_out_13_55_0;
      while_slc_while_mul_110_cmp_z_mxwt_128_0_itm <= while_mul_110_cmp_z_mxwt[128:0];
      while_mul_156_itm <= z_out_14_55_0;
      while_mul_158_itm <= z_out_15_55_0;
      while_mul_157_itm <= z_out_4[55:0];
      while_mul_160_itm <= nl_while_mul_160_itm[55:0];
      while_mul_159_itm <= nl_while_mul_159_itm[55:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_25_cmp_z_mxwt_87_0_itm <= 88'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_acc_121_itm <= 35'b00000000000000000000000000000000000;
    end
    else if ( while_and_195_cse ) begin
      while_slc_while_mul_25_cmp_z_mxwt_87_0_itm <= while_mul_25_cmp_z_mxwt;
      while_acc_121_itm <= nl_while_acc_121_itm[34:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_147_itm <= 57'b000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(while_stage_v_1 | or_tmp_488)) ) begin
      while_mul_147_itm <= z_out[56:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32
          <= 480'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ (fsm_output[1])) | mux_118_cse | while_stage_v_3 |
        (~ while_stage_v) | (~ rotate_in_Pop_mioi_bawt) | while_stage_v_1 | while_stage_v_2))
        ) begin
      while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32
          <= rotate_in_Pop_mioi_idat_mxwt;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_26_cse_sva <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_19_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_18_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_38_cse_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_mul_17_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_16_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_5_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_15_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_14_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_13_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_12_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_7_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_3_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_2_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_1_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_197_cse ) begin
      while_mul_26_cse_sva <= z_out_17_55_0;
      while_mul_19_itm <= z_out_5_55_0;
      while_mul_18_itm <= z_out_9_55_0;
      while_mul_38_cse_sva <= z_out_20;
      while_mul_17_itm <= z_out_13_55_0;
      while_mul_16_itm <= z_out_15_55_0;
      while_mul_5_itm <= z_out_18_55_0;
      while_mul_15_itm <= z_out_12_55_0;
      while_mul_14_itm_55_0 <= z_out_6_55_0;
      while_mul_13_itm <= z_out_8_55_0;
      while_mul_12_itm_55_0 <= z_out_10_55_0;
      while_mul_7_itm <= z_out_19_55_0;
      while_mul_3_itm <= z_out_14_55_0;
      while_mul_2_itm <= z_out_7_55_0;
      while_mul_1_itm <= z_out_3[55:0];
      while_mul_itm_55_0 <= z_out_11_55_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_55_24_9_ncse_sva <= 32'b00000000000000000000000000000000;
      while_mul_66_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_65_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_60_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_59_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm
          <= 32'b00000000000000000000000000000000;
      while_mul_36_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_64_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_63_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_62_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_61_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_58_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_57_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_56_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_55_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_acc_79_cse_sva <= 9'b000000000;
      while_mul_96_itm <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_8_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_55_24_7_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_55_24_6_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_55_24_1_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_55_24_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_200_cse ) begin
      while_slc_55_24_9_ncse_sva <= readslicef_56_32_24(while_acc_13_nl);
      while_mul_66_itm <= z_out_14_55_0;
      while_mul_65_itm <= z_out_19_55_0;
      while_mul_60_itm <= z_out_15_55_0;
      while_mul_59_itm_55_0 <= z_out_11_55_0;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm
          <= while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[191:160];
      while_mul_36_itm <= z_out_17_55_0;
      while_mul_64_itm <= z_out_5_55_0;
      while_mul_63_itm <= z_out_9_55_0;
      while_mul_62_itm <= z_out_13_55_0;
      while_mul_61_itm <= z_out_12_55_0;
      while_mul_58_itm <= z_out_8_55_0;
      while_mul_57_itm_55_0 <= z_out_10_55_0;
      while_mul_56_itm <= z_out_7_55_0;
      while_mul_55_itm_55_0 <= z_out_6_55_0;
      while_acc_79_cse_sva <= nl_while_acc_79_cse_sva[8:0];
      while_mul_96_itm <= z_out_20;
      while_slc_55_24_8_ncse_sva <= while_acc_12_itm_55_24_1;
      while_slc_55_24_7_ncse_sva <= readslicef_56_32_24(while_acc_119_nl);
      while_slc_55_24_6_ncse_sva <= readslicef_56_32_24(while_acc_120_nl);
      while_slc_55_24_1_ncse_sva <= readslicef_56_32_24(while_acc_2_nl);
      while_slc_55_24_ncse_sva <= readslicef_56_32_24(while_acc_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_4 <= 1'b0;
    end
    else if ( run_wen & or_568_rmff ) begin
      while_stage_v_4 <= ~ and_513_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_55_24_21_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_78_itm_1 <= 57'b000000000000000000000000000000000000000000000000000000000;
      reg_reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1_cse
          <= 32'b00000000000000000000000000000000;
      while_slc_55_24_20_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_16_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_17_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_9_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_68_itm_1 <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_mul_89_itm_1 <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_19_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_acc_79_cse_sva_1 <= 9'b000000000;
      while_mul_118_itm_1 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_26_cse_sva_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_8_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_96_itm_1 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_mul_33_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_11_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_18_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_44_itm_1 <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_mul_9_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_140_cse ) begin
      while_slc_55_24_21_ncse_sva_1 <= readslicef_56_32_24(while_acc_40_nl);
      while_mul_78_itm_1 <= z_out[56:0];
      reg_reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1_cse
          <= reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm;
      while_slc_55_24_20_ncse_sva_1 <= readslicef_56_32_24(while_acc_39_nl);
      while_slc_55_24_16_ncse_sva_1 <= readslicef_56_32_24(while_acc_116_nl);
      while_slc_55_24_17_ncse_sva_1 <= while_acc_115_itm_55_24_1;
      while_slc_55_24_9_ncse_sva_1 <= while_slc_55_24_9_ncse_sva;
      while_mul_68_itm_1 <= nl_while_mul_68_itm_1[57:0];
      while_mul_89_itm_1 <= z_out_1[56:0];
      while_slc_55_24_19_ncse_sva_1 <= readslicef_56_32_24(while_acc_38_nl);
      while_acc_79_cse_sva_1 <= while_acc_79_cse_sva;
      while_mul_118_itm_1 <= while_mul_118_itm;
      while_mul_26_cse_sva_1 <= while_mul_26_cse_sva;
      while_slc_55_24_8_ncse_sva_1 <= while_slc_55_24_8_ncse_sva;
      while_mul_96_itm_1 <= while_mul_96_itm;
      while_mul_33_itm_1 <= z_out_5_55_0;
      while_mul_11_itm_1 <= z_out_14_55_0;
      while_slc_55_24_18_ncse_sva_1 <= while_acc_114_itm_55_24_1;
      while_mul_44_itm_1 <= z_out_4;
      while_mul_9_itm_1 <= z_out_6_55_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_36_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_4_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_5_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_22_itm_1_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_23_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_20_itm_1_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_21_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_6_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_7_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_201_cse ) begin
      while_mul_36_itm_1 <= while_mul_36_itm;
      while_mul_4_itm_1 <= z_out_19_55_0;
      while_mul_5_itm_1 <= while_mul_5_itm;
      while_mul_22_itm_1_55_0 <= z_out_11_55_0;
      while_mul_23_itm_1 <= z_out_17_55_0;
      while_mul_20_itm_1_55_0 <= z_out_8_55_0;
      while_mul_21_itm_1 <= z_out_20[55:0];
      while_mul_6_itm_1 <= z_out_18_55_0;
      while_mul_7_itm_1 <= while_mul_7_itm;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_25_cse_sva <= 88'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_113_itm <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_mul_108_itm <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_mul_122_itm <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_132_itm <= 57'b000000000000000000000000000000000000000000000000000000000;
      operator_64_40_true_AC_TRN_AC_WRAP_acc_itm <= 33'b000000000000000000000000000000000;
      while_slc_while_mul_37_cmp_z_mxwt_2_79_0_1_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_141_cse ) begin
      while_mul_25_cse_sva <= while_mul_25_cmp_z_mxwt_2;
      while_mul_113_itm <= z_out;
      while_mul_108_itm <= z_out_1[56:0];
      while_mul_122_itm <= z_out_24_51_0;
      while_mul_132_itm <= z_out_2[56:0];
      operator_64_40_true_AC_TRN_AC_WRAP_acc_itm <= z_out_25;
      while_slc_while_mul_37_cmp_z_mxwt_2_79_0_1_itm <= while_mul_37_cmp_z_mxwt_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_8 <= 1'b0;
    end
    else if ( run_wen & (and_620_cse | and_539_cse) ) begin
      while_stage_v_8 <= ~ and_620_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_25_cse_sva_1 <= 88'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_9_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_mul_108_itm_1 <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_mul_83_itm_1 <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_mul_136_itm_1 <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_mul_74_itm_1 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_acc_79_cse_sva_2 <= 9'b000000000;
      while_mul_81_itm_1 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_118_itm_2 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_122_itm_1 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_asn_178_itm_1 <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_93_itm_1 <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_mul_101_itm_1 <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_mul_104_itm_1 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_26_cse_sva_2 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_132_itm_1 <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_mul_142_itm_1 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_slc_55_24_8_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_mul_96_itm_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_mul_33_itm_2 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_37_cmp_z_mxwt_2_79_0_itm_1 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_18_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_19_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_20_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_21_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_mul_70_itm_1 <= 59'b00000000000000000000000000000000000000000000000000000000000;
      while_mul_75_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_54_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_52_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_2
          <= 32'b00000000000000000000000000000000;
      while_mul_50_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_48_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_2_itm_1 <= 32'b00000000000000000000000000000000;
      while_mul_9_itm_2 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_3_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_44_itm_2 <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_37_cmp_z_mxwt_2_79_0_1_itm_1 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_205_cse ) begin
      while_mul_25_cse_sva_1 <= while_mul_25_cse_sva;
      while_slc_55_24_9_ncse_sva_2 <= while_slc_55_24_9_ncse_sva_1;
      while_mul_108_itm_1 <= while_mul_108_itm;
      while_mul_83_itm_1 <= while_mul_83_itm;
      while_mul_136_itm_1 <= while_mul_136_itm;
      while_mul_74_itm_1 <= while_mul_74_itm;
      while_acc_79_cse_sva_2 <= while_acc_79_cse_sva_1;
      while_mul_81_itm_1 <= while_mul_81_itm;
      while_mul_118_itm_2 <= while_mul_118_itm_1;
      while_mul_122_itm_1 <= while_mul_122_itm;
      while_asn_178_itm_1 <= while_asn_178_itm;
      while_mul_93_itm_1 <= while_mul_93_itm;
      while_mul_101_itm_1 <= while_mul_101_itm;
      while_mul_104_itm_1 <= while_mul_104_itm;
      while_mul_26_cse_sva_2 <= while_mul_26_cse_sva_1;
      while_mul_132_itm_1 <= while_mul_132_itm;
      while_mul_142_itm_1 <= while_mul_142_itm;
      while_slc_55_24_8_ncse_sva_2 <= while_slc_55_24_8_ncse_sva_1;
      while_mul_96_itm_2 <= while_mul_96_itm_1;
      while_mul_33_itm_2 <= while_mul_33_itm_1;
      while_slc_while_mul_37_cmp_z_mxwt_2_79_0_itm_1 <= while_slc_while_mul_37_cmp_z_mxwt_2_79_0_itm;
      while_slc_55_24_18_ncse_sva_2 <= while_slc_55_24_18_ncse_sva_1;
      while_slc_55_24_19_ncse_sva_2 <= while_slc_55_24_19_ncse_sva_1;
      while_slc_55_24_20_ncse_sva_2 <= while_slc_55_24_20_ncse_sva_1;
      while_slc_55_24_21_ncse_sva_2 <= while_slc_55_24_21_ncse_sva_1;
      while_mul_70_itm_1 <= while_mul_70_itm;
      while_mul_75_itm_1 <= z_out_9_55_0;
      while_mul_54_itm_1 <= z_out_15_55_0;
      while_mul_52_itm_1 <= z_out_10_55_0;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_2
          <= reg_reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1_cse;
      while_mul_50_itm_1 <= z_out_12_55_0;
      while_mul_48_itm_1 <= z_out_7_55_0;
      while_slc_55_24_2_itm_1 <= while_slc_55_24_2_itm;
      while_mul_9_itm_2 <= while_mul_9_itm_1;
      while_slc_55_24_3_ncse_sva_1 <= while_slc_55_24_3_ncse_sva;
      while_mul_44_itm_2 <= while_mul_44_itm_1;
      while_slc_while_mul_37_cmp_z_mxwt_2_79_0_1_itm_1 <= while_slc_while_mul_37_cmp_z_mxwt_2_79_0_1_itm;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_89_itm_2 <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_mul_68_itm_2 <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_mul_10_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_11_itm_2 <= 56'b00000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_209_cse ) begin
      while_mul_89_itm_2 <= while_mul_89_itm_1;
      while_mul_68_itm_2 <= while_mul_68_itm_1;
      while_mul_10_itm_1 <= z_out_16_55_0;
      while_mul_11_itm_2 <= while_mul_11_itm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_12 <= 1'b0;
    end
    else if ( run_wen & (and_541_cse | and_580_cse) ) begin
      while_stage_v_12 <= ~ and_541_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_93_itm_2 <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_acc_79_cse_sva_3 <= 9'b000000000;
      while_mul_26_cse_sva_3 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_132_itm_2 <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_mul_142_itm_2 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_slc_55_24_8_ncse_sva_3 <= 32'b00000000000000000000000000000000;
      while_mul_96_itm_3 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_acc_78_79_48_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_79_48_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_19_ncse_sva_3 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_20_ncse_sva_3 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_21_ncse_sva_3 <= 32'b00000000000000000000000000000000;
      while_mul_70_itm_2 <= 59'b00000000000000000000000000000000000000000000000000000000000;
      while_mul_75_itm_2 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_124_128_1_itm_1 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_54_itm_2 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_52_itm_2 <= 56'b00000000000000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_3
          <= 32'b00000000000000000000000000000000;
      while_mul_50_itm_2 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_48_itm_2 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_5_itm_1 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_2_itm_2 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_4_itm_1 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_18_ncse_sva_3 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_213_cse ) begin
      while_mul_93_itm_2 <= while_mul_93_itm_1;
      while_acc_79_cse_sva_3 <= while_acc_79_cse_sva_2;
      while_mul_26_cse_sva_3 <= while_mul_26_cse_sva_2;
      while_mul_132_itm_2 <= while_mul_132_itm_1;
      while_mul_142_itm_2 <= while_mul_142_itm_1;
      while_slc_55_24_8_ncse_sva_3 <= while_slc_55_24_8_ncse_sva_2;
      while_mul_96_itm_3 <= while_mul_96_itm_2;
      while_slc_while_acc_78_79_48_ncse_sva_1 <= while_slc_while_acc_78_79_48_ncse_sva;
      while_slc_79_48_ncse_sva_1 <= while_slc_79_48_ncse_sva;
      while_slc_55_24_19_ncse_sva_3 <= while_slc_55_24_19_ncse_sva_2;
      while_slc_55_24_20_ncse_sva_3 <= while_slc_55_24_20_ncse_sva_2;
      while_slc_55_24_21_ncse_sva_3 <= while_slc_55_24_21_ncse_sva_2;
      while_mul_70_itm_2 <= while_mul_70_itm_1;
      while_mul_75_itm_2 <= while_mul_75_itm_1;
      while_slc_while_mul_124_128_1_itm_1 <= while_slc_while_mul_124_128_1_itm;
      while_mul_54_itm_2 <= while_mul_54_itm_1;
      while_mul_52_itm_2 <= while_mul_52_itm_1;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_3
          <= reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_2;
      while_mul_50_itm_2 <= while_mul_50_itm_1;
      while_mul_48_itm_2 <= while_mul_48_itm_1;
      while_slc_55_24_5_itm_1 <= while_slc_55_24_5_itm;
      while_slc_55_24_2_itm_2 <= while_slc_55_24_2_itm_1;
      while_slc_55_24_4_itm_1 <= readslicef_56_32_24(while_acc_108_nl);
      while_slc_55_24_18_ncse_sva_3 <= while_slc_55_24_18_ncse_sva_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_104_itm_2 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_101_itm_2 <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_mul_122_itm_2 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_118_itm_3 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1_1 <= 89'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_214_cse ) begin
      while_mul_104_itm_2 <= while_mul_104_itm_1;
      while_mul_101_itm_2 <= while_mul_101_itm_1;
      while_mul_122_itm_2 <= while_mul_122_itm_1;
      while_mul_118_itm_3 <= while_mul_118_itm_2;
      while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1_1 <= while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_asn_178_itm_2 <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_81_itm_2 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1 <= 89'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_220_cse ) begin
      while_asn_178_itm_2 <= while_asn_178_itm_1;
      while_mul_81_itm_2 <= while_mul_81_itm_1;
      while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1 <= while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm <= 84'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~ while_stage_v_14) & (fsm_output[2]) ) begin
      while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm <= while_mul_73_cmp_z_mxwt_1[83:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_16 <= 1'b0;
    end
    else if ( run_wen & while_or_95_itm ) begin
      while_stage_v_16 <= ~ and_559_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_26_cse_sva_4 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_asn_itm_1 <= 89'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_142_itm_3 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_acc_79_cse_sva_4 <= 9'b000000000;
      while_mul_132_itm_3 <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm_1_1 <= 84'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_224_cse ) begin
      while_mul_26_cse_sva_4 <= while_mul_26_cse_sva_3;
      while_asn_itm_1 <= while_mul_25_cmp_z_mxwt_1;
      while_mul_142_itm_3 <= while_mul_142_itm_2;
      while_acc_79_cse_sva_4 <= while_acc_79_cse_sva_3;
      while_mul_132_itm_3 <= while_mul_132_itm_2;
      while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm_1_1 <= while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_20 <= 1'b0;
    end
    else if ( run_wen & (and_507_cse | or_tmp_466) ) begin
      while_stage_v_20 <= ~ and_507_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_55_24_8_ncse_sva_5 <= 32'b00000000000000000000000000000000;
      while_asn_180_itm_1 <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_20_ncse_sva_5 <= 32'b00000000000000000000000000000000;
      while_slc_while_mul_76_cmp_z_mxwt_1_103_0_itm_2 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_75_itm_4 <= 56'b00000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_230_cse ) begin
      while_slc_55_24_8_ncse_sva_5 <= while_slc_55_24_8_ncse_sva_4;
      while_asn_180_itm_1 <= while_asn_180_itm;
      while_slc_55_24_20_ncse_sva_5 <= while_slc_55_24_20_ncse_sva_4;
      while_slc_while_mul_76_cmp_z_mxwt_1_103_0_itm_2 <= while_slc_while_mul_76_cmp_z_mxwt_1_103_0_itm_1;
      while_mul_75_itm_4 <= while_mul_75_itm_3;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_96_itm_5 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm_2 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_231_cse ) begin
      while_mul_96_itm_5 <= while_mul_96_itm_4;
      while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm_2 <= while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_24 <= 1'b0;
    end
    else if ( run_wen & while_or_97_itm ) begin
      while_stage_v_24 <= ~ and_599_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_55_24_4_itm_4 <= 32'b00000000000000000000000000000000;
      while_mul_155_itm_1 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_2_itm_5 <= 32'b00000000000000000000000000000000;
      while_asn_itm_1_1 <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_asn_itm_2_3 <= 78'b000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_5_itm_4 <= 32'b00000000000000000000000000000000;
      while_mul_48_itm_5 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_sdt_127_24_103_1_itm_3 <= 103'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_54_itm_5 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_52_itm_5 <= 56'b00000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_233_cse ) begin
      while_slc_55_24_4_itm_4 <= while_slc_55_24_4_itm_3;
      while_mul_155_itm_1 <= while_mul_155_itm;
      while_slc_55_24_2_itm_5 <= while_slc_55_24_2_itm_4;
      while_asn_itm_1_1 <= while_mul_37_cmp_z_mxwt;
      while_asn_itm_2_3 <= while_asn_itm_2_2;
      while_slc_55_24_5_itm_4 <= while_slc_55_24_5_itm_3;
      while_mul_48_itm_5 <= while_mul_48_itm_4;
      while_slc_while_mul_sdt_127_24_103_1_itm_3 <= while_slc_while_mul_sdt_127_24_103_1_itm_2;
      while_mul_54_itm_5 <= while_mul_54_itm_4;
      while_mul_52_itm_5 <= while_mul_52_itm_4;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_79_48_ncse_sva_4 <= 32'b00000000000000000000000000000000;
      while_mul_49_itm_1_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_50_itm_5 <= 56'b00000000000000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_6
          <= 32'b00000000000000000000000000000000;
      while_acc_75_itm_1 <= 10'b0000000000;
      while_slc_while_acc_74_psp_22_0_itm_1 <= 23'b00000000000000000000000;
      while_slc_while_acc_78_79_48_ncse_sva_4 <= 32'b00000000000000000000000000000000;
      while_slc_while_acc_83_98_67_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_slc_while_acc_104_128_97_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_103_72_3_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_while_acc_98_82_51_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_103_72_4_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_while_acc_93_77_46_ncse_sva_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_243_cse ) begin
      while_slc_79_48_ncse_sva_4 <= while_slc_79_48_ncse_sva_3;
      while_mul_49_itm_1_55_0 <= nl_while_mul_49_itm_1_55_0[55:0];
      while_mul_50_itm_5 <= while_mul_50_itm_4;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_6
          <= reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_5;
      while_acc_75_itm_1 <= nl_while_acc_75_itm_1[9:0];
      while_slc_while_acc_74_psp_22_0_itm_1 <= z_out_21[22:0];
      while_slc_while_acc_78_79_48_ncse_sva_4 <= while_slc_while_acc_78_79_48_ncse_sva_3;
      while_slc_while_acc_83_98_67_ncse_sva_2 <= while_slc_while_acc_83_98_67_ncse_sva_1;
      while_slc_while_acc_104_128_97_ncse_sva_1 <= readslicef_129_32_97(while_acc_127_nl);
      while_slc_103_72_3_ncse_sva_1 <= while_slc_103_72_3_ncse_sva;
      while_slc_while_acc_98_82_51_ncse_sva_1 <= while_slc_while_acc_98_82_51_ncse_sva;
      while_slc_103_72_4_ncse_sva_1 <= readslicef_104_32_72(while_acc_85_nl);
      while_slc_while_acc_93_77_46_ncse_sva_2 <= while_slc_while_acc_93_77_46_ncse_sva_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_155_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_29 | or_tmp_488)) ) begin
      while_mul_155_itm <= z_out_16_55_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_acc_93_77_46_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_while_acc_78_79_48_ncse_sva_3 <= 32'b00000000000000000000000000000000;
      while_slc_79_48_ncse_sva_3 <= 32'b00000000000000000000000000000000;
      while_slc_while_acc_83_98_67_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_asn_itm_2_2 <= 78'b000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_54_itm_4 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_52_itm_4 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_sdt_127_24_103_1_itm_2 <= 103'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_5
          <= 32'b00000000000000000000000000000000;
      while_mul_50_itm_4 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_48_itm_4 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_5_itm_3 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_2_itm_4 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_4_itm_3 <= 32'b00000000000000000000000000000000;
      while_slc_while_mul_76_cmp_z_mxwt_1_103_0_1_itm_1 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_85_itm_2 <= 59'b00000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_256_cse ) begin
      while_slc_while_acc_93_77_46_ncse_sva_1 <= while_slc_while_acc_93_77_46_ncse_sva;
      while_slc_while_acc_78_79_48_ncse_sva_3 <= while_slc_while_acc_78_79_48_ncse_sva_2;
      while_slc_79_48_ncse_sva_3 <= while_slc_79_48_ncse_sva_2;
      while_slc_while_acc_83_98_67_ncse_sva_1 <= while_slc_while_acc_83_98_67_ncse_sva;
      while_asn_itm_2_2 <= while_asn_itm_2_1;
      while_mul_54_itm_4 <= while_mul_54_itm_3;
      while_mul_52_itm_4 <= while_mul_52_itm_3;
      while_slc_while_mul_sdt_127_24_103_1_itm_2 <= while_slc_while_mul_sdt_127_24_103_1_itm_1;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_5
          <= reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_4;
      while_mul_50_itm_4 <= while_mul_50_itm_3;
      while_mul_48_itm_4 <= while_mul_48_itm_3;
      while_slc_55_24_5_itm_3 <= while_slc_55_24_5_itm_2;
      while_slc_55_24_2_itm_4 <= while_slc_55_24_2_itm_3;
      while_slc_55_24_4_itm_3 <= while_slc_55_24_4_itm_2;
      while_slc_while_mul_76_cmp_z_mxwt_1_103_0_1_itm_1 <= while_slc_while_mul_76_cmp_z_mxwt_1_103_0_1_itm;
      while_mul_85_itm_2 <= while_mul_85_itm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_77_cmp_z_mxwt_82_0_itm <= 83'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_32 | or_tmp_488)) ) begin
      while_slc_while_mul_77_cmp_z_mxwt_82_0_itm <= while_mul_77_cmp_z_mxwt;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_83_itm <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_mul_74_itm <= 52'b0000000000000000000000000000000000000000000000000000;
      while_slc_55_24_2_itm <= 32'b00000000000000000000000000000000;
      while_slc_55_24_11_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_55_24_10_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_55_24_3_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_259_cse ) begin
      while_mul_83_itm <= z_out_2;
      while_mul_74_itm <= z_out_23;
      while_slc_55_24_2_itm <= readslicef_56_32_24(while_acc_3_nl);
      while_slc_55_24_11_ncse_sva <= readslicef_56_32_24(while_acc_117_nl);
      while_slc_55_24_10_ncse_sva <= readslicef_56_32_24(while_acc_118_nl);
      while_slc_55_24_3_ncse_sva <= readslicef_56_32_24(while_acc_4_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_136_itm <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_mul_104_itm <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_101_itm <= 57'b000000000000000000000000000000000000000000000000000000000;
      while_mul_93_itm <= 58'b0000000000000000000000000000000000000000000000000000000000;
      while_asn_178_itm <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_81_itm <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_142_itm <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_70_itm <= 59'b00000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_37_cmp_z_mxwt_2_79_0_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_266_cse ) begin
      while_mul_136_itm <= z_out_2;
      while_mul_104_itm <= z_out_24_51_0;
      while_mul_101_itm <= z_out[56:0];
      while_mul_93_itm <= z_out_1;
      while_asn_178_itm <= while_mul_76_cmp_z_mxwt_2;
      while_mul_81_itm <= z_out_23;
      while_mul_142_itm <= nl_while_mul_142_itm[51:0];
      while_mul_70_itm <= z_out_3;
      while_slc_while_mul_37_cmp_z_mxwt_2_79_0_itm <= while_mul_37_cmp_z_mxwt_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm <= 89'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_acc_78_79_48_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_157_cse ) begin
      while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm <= while_mul_77_cmp_z_mxwt_1[88:0];
      while_slc_while_acc_78_79_48_ncse_sva <= readslicef_80_32_48(while_acc_78_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1_2 <= 89'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_8_itm_55_0 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_124_128_1_itm <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_79_48_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_267_cse ) begin
      while_slc_while_mul_77_cmp_z_mxwt_1_88_0_itm_1_2 <= while_mul_77_cmp_z_mxwt_1[88:0];
      while_mul_8_itm_55_0 <= z_out_18_55_0;
      while_slc_while_mul_124_128_1_itm <= while_mul_110_cmp_z_mxwt_2;
      while_slc_79_48_ncse_sva <= readslicef_80_32_48(while_acc_80_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm_1 <= 84'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      operator_64_40_true_AC_TRN_AC_WRAP_1_acc_itm <= 33'b000000000000000000000000000000000;
      while_slc_while_while_mul_105_2_itm <= 99'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_279_cse ) begin
      while_slc_while_mul_73_cmp_z_mxwt_1_83_0_itm_1 <= while_mul_73_cmp_z_mxwt_1[83:0];
      operator_64_40_true_AC_TRN_AC_WRAP_1_acc_itm <= z_out_25;
      while_slc_while_while_mul_105_2_itm <= while_while_mul_cmp_z_mxwt_1[105:7];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_55_24_8_ncse_sva_4 <= 32'b00000000000000000000000000000000;
      while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm_1 <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_96_itm_4 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_acc_78_79_48_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_slc_79_48_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_20_ncse_sva_4 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_21_ncse_sva_4 <= 32'b00000000000000000000000000000000;
      while_slc_while_mul_76_cmp_z_mxwt_1_103_0_itm_1 <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_75_itm_3 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_85_itm_1 <= 59'b00000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_124_128_1_itm_2 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_asn_itm_2_1 <= 78'b000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_54_itm_3 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_52_itm_3 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_sdt_127_24_103_1_itm_1 <= 103'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_4
          <= 32'b00000000000000000000000000000000;
      while_mul_50_itm_3 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_mul_48_itm_3 <= 56'b00000000000000000000000000000000000000000000000000000000;
      while_slc_55_24_5_itm_2 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_2_itm_3 <= 32'b00000000000000000000000000000000;
      while_slc_55_24_4_itm_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_280_cse ) begin
      while_slc_55_24_8_ncse_sva_4 <= while_slc_55_24_8_ncse_sva_3;
      while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm_1 <= while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm;
      while_mul_96_itm_4 <= while_mul_96_itm_3;
      while_slc_while_acc_78_79_48_ncse_sva_2 <= while_slc_while_acc_78_79_48_ncse_sva_1;
      while_slc_79_48_ncse_sva_2 <= while_slc_79_48_ncse_sva_1;
      while_slc_55_24_20_ncse_sva_4 <= while_slc_55_24_20_ncse_sva_3;
      while_slc_55_24_21_ncse_sva_4 <= while_slc_55_24_21_ncse_sva_3;
      while_slc_while_mul_76_cmp_z_mxwt_1_103_0_itm_1 <= while_mul_76_cmp_z_mxwt_1;
      while_mul_75_itm_3 <= while_mul_75_itm_2;
      while_mul_85_itm_1 <= nl_while_mul_85_itm_1[58:0];
      while_slc_while_mul_124_128_1_itm_2 <= while_slc_while_mul_124_128_1_itm_1;
      while_asn_itm_2_1 <= while_mul_103_cmp_z;
      while_mul_54_itm_3 <= while_mul_54_itm_2;
      while_mul_52_itm_3 <= while_mul_52_itm_2;
      while_slc_while_mul_sdt_127_24_103_1_itm_1 <= while_slc_while_mul_sdt_127_24_103_1_itm;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_4
          <= reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_3;
      while_mul_50_itm_3 <= while_mul_50_itm_2;
      while_mul_48_itm_3 <= while_mul_48_itm_2;
      while_slc_55_24_5_itm_2 <= while_slc_55_24_5_itm_1;
      while_slc_55_24_2_itm_3 <= while_slc_55_24_2_itm_2;
      while_slc_55_24_4_itm_2 <= while_slc_55_24_4_itm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_55_24_21_ncse_sva_5 <= 32'b00000000000000000000000000000000;
      while_slc_while_mul_72_cmp_z_mxwt_1_100_0_itm_1 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_124_128_1_itm_3 <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_297_cse ) begin
      while_slc_55_24_21_ncse_sva_5 <= while_slc_55_24_21_ncse_sva_4;
      while_slc_while_mul_72_cmp_z_mxwt_1_100_0_itm_1 <= while_slc_while_mul_72_cmp_z_mxwt_1_100_0_itm;
      while_slc_while_mul_124_128_1_itm_3 <= while_slc_while_mul_124_128_1_itm_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_acc_103_itm <= 36'b000000000000000000000000000000000000;
      while_mul_129_itm <= 59'b00000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_304_cse ) begin
      while_acc_103_itm <= nl_while_acc_103_itm[35:0];
      while_mul_129_itm <= z_out_22[58:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_acc_128_itm <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_103_72_3_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_305_cse ) begin
      while_acc_128_itm <= nl_while_acc_128_itm[128:0];
      while_slc_103_72_3_ncse_sva <= readslicef_104_32_72(while_acc_84_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_138_itm <= 60'b000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_acc_98_82_51_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_308_cse ) begin
      while_mul_138_itm <= z_out_22;
      while_slc_while_acc_98_82_51_ncse_sva <= readslicef_83_32_51(while_acc_98_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_asn_180_itm <= 129'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_76_cmp_z_mxwt_1_103_0_1_itm <= 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_310_cse ) begin
      while_asn_180_itm <= while_while_mul_cmp_z_mxwt_1;
      while_slc_while_mul_76_cmp_z_mxwt_1_103_0_1_itm <= while_mul_76_cmp_z_mxwt_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_37_cmp_z_mxwt_1_77_0_itm <= 78'b000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_115_itm <= 60'b000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_311_cse ) begin
      while_slc_while_mul_37_cmp_z_mxwt_1_77_0_itm <= while_mul_37_cmp_z_mxwt_1;
      while_mul_115_itm <= z_out_22;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_sdt_127_24_103_1_itm <= 103'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_314_cse ) begin
      while_slc_while_mul_79_cmp_z_mxwt_1_89_0_itm <= while_mul_79_cmp_z_mxwt_1;
      while_slc_while_mul_sdt_127_24_103_1_itm <= while_mul_34_cmp_z_mxwt_1[103:1];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_while_mul_cmp_z_mxwt_1_105_0_1_itm_1 <= 106'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_110_129_2_itm_1 <= 106'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_while_mul_105_2_itm_1 <= 99'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_70_itm_3 <= 59'b00000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_350_cse ) begin
      while_slc_while_while_mul_cmp_z_mxwt_1_105_0_1_itm_1 <= while_while_mul_cmp_z_mxwt_1[105:0];
      while_slc_while_mul_110_129_2_itm_1 <= while_mul_110_cmp_z_mxwt_1;
      while_slc_while_while_mul_105_2_itm_1 <= while_slc_while_while_mul_105_2_itm;
      while_mul_70_itm_3 <= while_mul_70_itm_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_acc_91_itm_1 <= 36'b000000000000000000000000000000000000;
      while_slc_55_24_19_ncse_sva_4 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_354_cse ) begin
      while_acc_91_itm_1 <= nl_while_acc_91_itm_1[35:0];
      while_slc_55_24_19_ncse_sva_4 <= while_slc_55_24_19_ncse_sva_3;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_acc_93_77_46_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_while_acc_83_98_67_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_356_cse ) begin
      while_slc_while_acc_93_77_46_ncse_sva <= readslicef_78_32_46(while_acc_93_nl);
      while_slc_while_acc_83_98_67_ncse_sva <= readslicef_99_32_67(while_acc_83_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_72_cmp_z_mxwt_1_100_0_itm <= 101'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~ while_stage_v_19) & (fsm_output[3]) ) begin
      while_slc_while_mul_72_cmp_z_mxwt_1_100_0_itm <= while_mul_72_cmp_z_mxwt_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_118_itm <= 52'b0000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ (fsm_output[2])) | mux_125_nl | while_stage_v_3 | while_stage_v_4
        | (~ while_stage_v_1) | while_stage_v_2)) ) begin
      while_mul_118_itm <= z_out_23;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_55_24_5_itm <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((~ (fsm_output[1])) | or_dcpl_177)) ) begin
      while_slc_55_24_5_itm <= readslicef_56_32_24(while_acc_7_nl);
    end
  end
  assign nl_while_acc_109_nl = while_mul_48_itm_5 - while_mul_47_itm_55_0;
  assign while_acc_109_nl = nl_while_acc_109_nl[55:0];
  assign nl_while_acc_77_nl = while_slc_while_mul_sdt_127_24_103_1_itm_3 + while_asn_itm_3
      + ({while_mul_29_itm , 45'b000000000000000000000000000000000000000000000});
  assign while_acc_77_nl = nl_while_acc_77_nl[102:0];
  assign nl_while_acc_30_nl = while_mul_51_itm + while_mul_52_itm_5;
  assign while_acc_30_nl = nl_while_acc_30_nl[55:0];
  assign nl_while_acc_31_nl = while_mul_53_itm + while_mul_54_itm_5;
  assign while_acc_31_nl = nl_while_acc_31_nl[55:0];
  assign nl_while_acc_111_nl = while_mul_150_itm - while_mul_149_itm_55_0;
  assign while_acc_111_nl = nl_while_acc_111_nl[55:0];
  assign nl_while_acc_112_nl = while_mul_152_itm - while_mul_151_itm_55_0;
  assign while_acc_112_nl = nl_while_acc_112_nl[55:0];
  assign nl_while_acc_113_nl = while_mul_154_itm - while_mul_153_itm_55_0;
  assign while_acc_113_nl = nl_while_acc_113_nl[55:0];
  assign nl_while_acc_105_nl = while_slc_while_mul_110_cmp_z_mxwt_128_0_itm + while_while_mul_cmp_z_mxwt
      + ({while_asn_itm_1_1 , 47'b00000000000000000000000000000000000000000000000});
  assign while_acc_105_nl = nl_while_acc_105_nl[128:0];
  assign nl_while_acc_88_nl = (readslicef_129_78_51(while_acc_105_nl)) + while_asn_itm_2_3;
  assign while_acc_88_nl = nl_while_acc_88_nl[77:0];
  assign nl_while_acc_71_nl = while_mul_155_itm_1 + while_mul_156_itm;
  assign while_acc_71_nl = nl_while_acc_71_nl[55:0];
  assign nl_while_acc_72_nl = while_mul_157_itm + while_mul_158_itm;
  assign while_acc_72_nl = nl_while_acc_72_nl[55:0];
  assign nl_while_acc_73_nl = while_mul_159_itm + while_mul_160_itm;
  assign while_acc_73_nl = nl_while_acc_73_nl[55:0];
  assign nl_while_acc_110_nl = while_mul_50_itm_5 - while_mul_49_itm_1_55_0;
  assign while_acc_110_nl = nl_while_acc_110_nl[55:0];
  assign nl_while_mul_160_itm  = $signed(while_slc_while_acc_83_98_67_ncse_sva_2)
      * $signed(cfg_sin_3_gamma);
  assign nl_while_mul_159_itm  = $signed(while_slc_while_acc_104_128_97_ncse_sva_1)
      * $signed(cfg_cos_3_gamma);
  assign nl_while_acc_121_itm  = ({z_out_21 , (cfg_cos_3_beta[0]) , 1'b0}) + conv_s2s_32_35(cfg_cos_beta)
      + conv_s2s_32_35(cfg_cos_3_beta);
  assign nl_while_acc_13_nl = while_mul_18_itm + while_mul_19_itm;
  assign while_acc_13_nl = nl_while_acc_13_nl[55:0];
  assign nl_while_acc_79_cse_sva  = conv_s2s_8_9(cfg_cos_2_beta[31:24]) + 9'b000000011;
  assign nl_while_acc_119_nl = while_mul_15_itm - while_mul_14_itm_55_0;
  assign while_acc_119_nl = nl_while_acc_119_nl[55:0];
  assign nl_while_acc_120_nl = while_mul_13_itm - while_mul_12_itm_55_0;
  assign while_acc_120_nl = nl_while_acc_120_nl[55:0];
  assign nl_while_acc_2_nl = while_mul_2_itm + while_mul_3_itm;
  assign while_acc_2_nl = nl_while_acc_2_nl[55:0];
  assign nl_while_acc_nl = while_mul_1_itm - while_mul_itm_55_0;
  assign while_acc_nl = nl_while_acc_nl[55:0];
  assign nl_while_acc_40_nl = while_mul_65_itm + while_mul_66_itm;
  assign while_acc_40_nl = nl_while_acc_40_nl[55:0];
  assign nl_while_acc_39_nl = while_mul_63_itm + while_mul_64_itm;
  assign while_acc_39_nl = nl_while_acc_39_nl[55:0];
  assign nl_while_acc_116_nl = while_mul_56_itm - while_mul_55_itm_55_0;
  assign while_acc_116_nl = nl_while_acc_116_nl[55:0];
  assign nl_while_mul_68_itm_1  = $signed(while_acc_114_itm_55_24_1) * $signed(27'b011110111110111101111010101);
  assign nl_while_acc_38_nl = while_mul_61_itm + while_mul_62_itm;
  assign while_acc_38_nl = nl_while_acc_38_nl[55:0];
  assign nl_while_acc_108_nl = while_mul_9_itm_2 - while_mul_8_itm_55_0;
  assign while_acc_108_nl = nl_while_acc_108_nl[55:0];
  assign nl_while_mul_49_itm_1_55_0  = $signed(cfg_sin_gamma) * $signed(conv_u2s_32_33(while_slc_while_acc_78_79_48_ncse_sva_3));
  assign nl_while_acc_75_itm_1  = (z_out_21[32:23]) + 10'b0000000001;
  assign nl_while_acc_132_nl = ({while_mul_138_itm , 41'b00000000000000000000000000000000000000001})
      + (~ (while_mul_72_cmp_z_mxwt[100:0]));
  assign while_acc_132_nl = nl_while_acc_132_nl[100:0];
  assign nl_while_acc_127_nl = while_acc_128_itm + ({while_acc_132_nl , 28'b0000000000000000000000000001});
  assign while_acc_127_nl = nl_while_acc_127_nl[128:0];
  assign nl_while_acc_85_nl = (~ while_slc_while_mul_76_cmp_z_mxwt_1_103_0_1_itm_1)
      + while_mul_34_cmp_z_mxwt + ({while_mul_85_itm_2 , 45'b000000000000000000000000000000000000000000001});
  assign while_acc_85_nl = nl_while_acc_85_nl[103:0];
  assign nl_while_acc_3_nl = while_mul_4_itm_1 + while_mul_5_itm_1;
  assign while_acc_3_nl = nl_while_acc_3_nl[55:0];
  assign nl_while_acc_117_nl = while_mul_23_itm_1 - while_mul_22_itm_1_55_0;
  assign while_acc_117_nl = nl_while_acc_117_nl[55:0];
  assign nl_while_acc_118_nl = while_mul_21_itm_1 - while_mul_20_itm_1_55_0;
  assign while_acc_118_nl = nl_while_acc_118_nl[55:0];
  assign nl_while_acc_4_nl = while_mul_6_itm_1 + while_mul_7_itm_1;
  assign while_acc_4_nl = nl_while_acc_4_nl[55:0];
  assign nl_while_mul_142_itm  = $signed(while_slc_55_24_20_ncse_sva_1) * $signed(21'b010011100110001000111);
  assign nl_while_acc_22_nl = ({while_mul_33_itm_2 , 48'b000000000000000000000000000000000000000000000000})
      + ({(~ (while_mul_34_cmp_z_mxwt_1[102:0])) , 1'b1}) + 104'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
  assign while_acc_22_nl = nl_while_acc_22_nl[103:0];
  assign nl_while_acc_78_nl = (readslicef_104_80_24(while_acc_22_nl)) + while_slc_while_mul_37_cmp_z_mxwt_2_79_0_itm_1;
  assign while_acc_78_nl = nl_while_acc_78_nl[79:0];
  assign nl_while_acc_80_nl = ({while_mul_44_itm_2 , 22'b0000000000000000000000})
      + (~ while_slc_while_mul_37_cmp_z_mxwt_2_79_0_1_itm_1) + (while_mul_34_cmp_z_mxwt_1[103:24])
      + 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000001;
  assign while_acc_80_nl = nl_while_acc_80_nl[79:0];
  assign nl_while_mul_85_itm_1  = $signed(({operator_64_40_true_AC_TRN_AC_WRAP_1_acc_itm
      , (cfg_cos_2_beta[1:0])})) * $signed(while_slc_55_24_18_ncse_sva_3);
  assign nl_while_acc_103_itm  = conv_s2s_32_36(~ cfg_cos_beta) + conv_s2s_32_36(cfg_cos_3_beta)
      + ({cfg_cos_beta , 4'b0001});
  assign nl_while_acc_128_itm  = (while_mul_110_cmp_z_mxwt[129:1]) + (~ while_asn_180_itm_1);
  assign nl_while_acc_84_nl = (~ while_slc_while_mul_76_cmp_z_mxwt_1_103_0_itm_2)
      + ({while_mul_79_cmp_z_mxwt , 5'b00001}) + ({while_mul_75_itm_4 , 48'b000000000000000000000000000000000000000000000000});
  assign while_acc_84_nl = nl_while_acc_84_nl[103:0];
  assign nl_while_acc_107_nl = while_slc_while_mul_72_cmp_z_mxwt_1_100_0_itm_1 +
      while_slc_while_mul_124_128_1_itm_3 + ({while_mul_129_itm , 42'b000000000000000000000000000000000000000000});
  assign while_acc_107_nl = nl_while_acc_107_nl[100:0];
  assign nl_while_acc_98_nl = (readslicef_101_83_18(while_acc_107_nl)) + while_slc_while_mul_77_cmp_z_mxwt_82_0_itm;
  assign while_acc_98_nl = nl_while_acc_98_nl[82:0];
  assign nl_while_acc_91_itm_1  = conv_s2s_32_36(cfg_cos_beta) + conv_s2s_32_36(~
      cfg_cos_3_beta) + ({cfg_cos_3_beta , 4'b0001});
  assign nl_while_acc_106_nl = while_slc_while_while_mul_cmp_z_mxwt_1_105_0_1_itm_1
      + while_slc_while_mul_110_129_2_itm_1 + ({while_mul_115_itm , 46'b0000000000000000000000000000000000000000000000});
  assign while_acc_106_nl = nl_while_acc_106_nl[105:0];
  assign nl_while_acc_93_nl = (readslicef_106_78_28(while_acc_106_nl)) - while_slc_while_mul_37_cmp_z_mxwt_1_77_0_itm;
  assign while_acc_93_nl = nl_while_acc_93_nl[77:0];
  assign nl_while_acc_83_nl = (~ (while_mul_72_cmp_z_mxwt_1[98:0])) + while_slc_while_while_mul_105_2_itm_1
      + ({while_mul_70_itm_3 , 40'b0000000000000000000000000000000000000001});
  assign while_acc_83_nl = nl_while_acc_83_nl[98:0];
  assign nand_17_nl = ~(nor_tmp_35 & mux_123_cse);
  assign mux_125_nl = MUX_s_1_2_2((~ mux_124_cse), nand_17_nl, while_stage_v_5);
  assign nl_while_acc_7_nl = while_mul_10_itm_1 + while_mul_11_itm_2;
  assign while_acc_7_nl = nl_while_acc_7_nl[55:0];
  assign while_while_mux_9_nl = MUX_v_3_2_2(3'b010, 3'b101, fsm_output[2]);
  assign while_mux1h_990_nl = MUX1HOT_v_32_3_2((rotate_in_Pop_mioi_idat_mxwt[383:352]),
      while_acc_114_itm_55_24_1, while_slc_55_24_21_ncse_sva_1, {(fsm_output[1])
      , (fsm_output[4]) , while_or_98_cse_1});
  assign nl_z_out = $signed(conv_u2s_26_27({(fsm_output[2]) , 2'b11 , (fsm_output[2])
      , 2'b01 , (fsm_output[2]) , 1'b1 , ({{1{while_while_mux_1_cse[1]}}, while_while_mux_1_cse})
      , 1'b1 , (signext_5_3(while_while_mux_9_nl)) , 2'b11 , (fsm_output[2]) , 1'b0
      , (fsm_output[2]) , 1'b0 , while_while_mux_1_cse , 1'b1})) * $signed(while_mux1h_990_nl);
  assign z_out = nl_z_out[57:0];
  assign while_while_mux_10_nl = MUX_v_3_2_2(3'b010, 3'b101, while_or_99_ssc);
  assign while_mux1h_991_nl = MUX1HOT_v_32_3_2(while_slc_55_24_20_ncse_sva_1, while_acc_115_itm_55_24_1,
      (rotate_in_Pop_mioi_idat_mxwt[383:352]), {while_or_98_cse_1 , (fsm_output[4])
      , (fsm_output[1])});
  assign nl_z_out_1 = $signed(conv_u2s_26_27({while_or_99_ssc , 2'b11 , while_or_99_ssc
      , 2'b01 , while_or_99_ssc , 1'b1 , ({{1{while_while_mux_4_cse[1]}}, while_while_mux_4_cse})
      , 1'b1 , (signext_5_3(while_while_mux_10_nl)) , 2'b11 , while_or_99_ssc , 1'b0
      , while_or_99_ssc , 1'b0 , while_while_mux_4_cse , 1'b1})) * $signed(while_mux1h_991_nl);
  assign z_out_1 = nl_z_out_1[57:0];
  assign while_mux_609_nl = MUX_v_3_2_2(3'b101, 3'b010, fsm_output[2]);
  assign while_mux_610_nl = MUX_v_32_2_2(while_slc_55_24_16_ncse_sva_1, while_slc_55_24_19_ncse_sva_1,
      while_or_98_cse_1);
  assign nl_z_out_2 = $signed(conv_u2s_26_27({(~ (fsm_output[2])) , 2'b11 , (~ (fsm_output[2]))
      , 2'b01 , (~ (fsm_output[2])) , 1'b1 , ({{1{while_mux_cse[1]}}, while_mux_cse})
      , 1'b1 , (signext_5_3(while_mux_609_nl)) , 2'b11 , (~ (fsm_output[2])) , 1'b0
      , (~ (fsm_output[2])) , 1'b0 , while_mux_cse , 1'b1})) * $signed(while_mux_610_nl);
  assign z_out_2 = nl_z_out_2[57:0];
  assign while_mux1h_992_nl = MUX1HOT_v_32_3_2(reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_6,
      while_slc_55_24_16_ncse_sva_1, cfg_cos_alpha, {(fsm_output[1]) , (fsm_output[3])
      , (fsm_output[2])});
  assign while_mux1h_993_nl = MUX1HOT_v_33_3_2(({while_acc_75_itm_1 , while_slc_while_acc_74_psp_22_0_itm_1}),
      operator_64_40_true_AC_TRN_AC_WRAP_acc_itm, (signext_33_31(while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[31:1])),
      {(fsm_output[1]) , (fsm_output[3]) , (fsm_output[2])});
  assign while_while_mux_11_nl = MUX_s_1_2_2((cfg_cos_2_beta[0]), (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[0]),
      fsm_output[2]);
  assign nl_z_out_3 = $signed(while_mux1h_992_nl) * $signed(({while_mux1h_993_nl
      , while_while_mux_11_nl}));
  assign z_out_3 = nl_z_out_3[58:0];
  assign while_mux_611_nl = MUX_v_32_2_2(while_slc_while_acc_98_82_51_ncse_sva_1,
      while_slc_55_24_9_ncse_sva, fsm_output[4]);
  assign while_mux_612_nl = MUX_v_33_2_2(({{1{cfg_cos_2_gamma[31]}}, cfg_cos_2_gamma}),
      ({while_acc_79_cse_sva , (cfg_cos_2_beta[23:0])}), fsm_output[4]);
  assign nl_z_out_4 = $signed(while_mux_611_nl) * $signed(while_mux_612_nl);
  assign z_out_4 = nl_z_out_4[57:0];
  assign while_mux1h_994_nl = MUX1HOT_v_32_4_2(cfg_sin_2_gamma, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[127:96]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[319:288]),
      cfg_cos_2_beta, {(fsm_output[1]) , (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  assign while_mux1h_995_nl = MUX1HOT_v_32_3_2(while_slc_79_48_ncse_sva_4, cfg_sin_2_alpha,
      while_slc_55_24_8_ncse_sva, {(fsm_output[1]) , while_or_98_cse_1 , (fsm_output[4])});
  assign nl_z_out_5_55_0 = $signed(while_mux1h_994_nl) * $signed(while_mux1h_995_nl);
  assign z_out_5_55_0 = nl_z_out_5_55_0[55:0];
  assign while_mux1h_996_nl = MUX1HOT_v_32_4_2(while_slc_while_acc_78_79_48_ncse_sva_4,
      cfg_sin_3_alpha, while_slc_55_24_ncse_sva, cfg_sin_alpha, {(fsm_output[1])
      , (fsm_output[3]) , (fsm_output[4]) , (fsm_output[2])});
  assign while_mux1h_997_nl = MUX1HOT_v_32_3_2(cfg_cos_gamma, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[479:448]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[223:192]),
      {or_594_cse , (fsm_output[3]) , (fsm_output[2])});
  assign nl_z_out_6_55_0 = $signed(while_mux1h_996_nl) * $signed(while_mux1h_997_nl);
  assign z_out_6_55_0 = nl_z_out_6_55_0[55:0];
  assign while_mux1h_998_nl = MUX1HOT_v_32_4_2(while_slc_79_48_ncse_sva_4, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[287:256]),
      while_slc_55_24_10_ncse_sva, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[95:64]),
      {(fsm_output[1]) , (fsm_output[3]) , (fsm_output[4]) , (fsm_output[2])});
  assign while_mux1h_999_nl = MUX1HOT_v_32_3_2(cfg_cos_2_gamma, cfg_cos_3_alpha,
      cfg_cos_alpha, {or_594_cse , (fsm_output[3]) , (fsm_output[2])});
  assign nl_z_out_7_55_0 = $signed(while_mux1h_998_nl) * $signed(while_mux1h_999_nl);
  assign z_out_7_55_0 = nl_z_out_7_55_0[55:0];
  assign while_mux1h_1000_nl = MUX1HOT_v_32_4_2(while_slc_while_acc_83_98_67_ncse_sva_2,
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[319:288]),
      while_slc_55_24_7_ncse_sva, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[127:96]),
      {(fsm_output[1]) , (fsm_output[3]) , (fsm_output[4]) , (fsm_output[2])});
  assign while_mux1h_1001_nl = MUX1HOT_v_32_3_2(cfg_cos_3_gamma, cfg_cos_2_alpha,
      cfg_sin_beta, {(fsm_output[1]) , while_or_98_cse_1 , (fsm_output[4])});
  assign nl_z_out_8_55_0 = $signed(while_mux1h_1000_nl) * $signed(while_mux1h_1001_nl);
  assign z_out_8_55_0 = nl_z_out_8_55_0[55:0];
  assign while_mux1h_1002_nl = MUX1HOT_v_32_4_2(cfg_sin_3_gamma, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[255:224]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[447:416]),
      while_slc_55_24_17_ncse_sva_1, {(fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])
      , (fsm_output[4])});
  assign while_mux1h_1003_nl = MUX1HOT_v_32_3_2(while_slc_while_acc_104_128_97_ncse_sva_1,
      cfg_cos_2_alpha, cfg_cos_2_beta, {(fsm_output[1]) , while_or_98_cse_1 , (fsm_output[4])});
  assign nl_z_out_9_55_0 = $signed(while_mux1h_1002_nl) * $signed(while_mux1h_1003_nl);
  assign z_out_9_55_0 = nl_z_out_9_55_0[55:0];
  assign while_mux1h_1004_nl = MUX1HOT_v_32_3_2(while_slc_103_72_3_ncse_sva_1, cfg_sin_2_alpha,
      while_slc_55_24_11_ncse_sva, {(fsm_output[1]) , while_or_98_cse_1 , (fsm_output[4])});
  assign while_mux1h_1005_nl = MUX1HOT_v_32_4_2(cfg_cos_2_gamma, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[447:416]),
      cfg_sin_gamma, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[255:224]),
      {(fsm_output[1]) , (fsm_output[3]) , (fsm_output[4]) , (fsm_output[2])});
  assign nl_z_out_10_55_0 = $signed(while_mux1h_1004_nl) * $signed(while_mux1h_1005_nl);
  assign z_out_10_55_0 = nl_z_out_10_55_0[55:0];
  assign while_mux1h_1006_nl = MUX1HOT_v_32_3_2(cfg_sin_2_gamma, cfg_sin_alpha, while_slc_55_24_7_ncse_sva,
      {(fsm_output[1]) , while_or_98_cse_1 , (fsm_output[4])});
  assign while_mux1h_1007_nl = MUX1HOT_v_32_4_2(while_slc_while_acc_98_82_51_ncse_sva_1,
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[415:384]),
      cfg_cos_beta, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[95:64]),
      {(fsm_output[1]) , (fsm_output[3]) , (fsm_output[4]) , (fsm_output[2])});
  assign nl_z_out_11_55_0 = $signed(while_mux1h_1006_nl) * $signed(while_mux1h_1007_nl);
  assign z_out_11_55_0 = nl_z_out_11_55_0[55:0];
  assign while_mux1h_1008_nl = MUX1HOT_v_32_4_2(while_slc_103_72_4_ncse_sva_1, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[415:384]),
      while_slc_55_24_11_ncse_sva, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[159:128]),
      {(fsm_output[1]) , (fsm_output[3]) , (fsm_output[4]) , (fsm_output[2])});
  assign while_mux_613_nl = MUX_v_32_2_2(cfg_cos_gamma, cfg_cos_alpha, while_or_98_cse_1);
  assign nl_z_out_12_55_0 = $signed(while_mux1h_1008_nl) * $signed(while_mux_613_nl);
  assign z_out_12_55_0 = nl_z_out_12_55_0[55:0];
  assign while_mux1h_1009_nl = MUX1HOT_v_32_3_2(cfg_sin_gamma, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[159:128]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[351:320]),
      {(fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])});
  assign while_mux_614_nl = MUX_v_32_2_2(while_slc_while_acc_93_77_46_ncse_sva_2,
      cfg_sin_alpha, while_or_98_cse_1);
  assign nl_z_out_13_55_0 = $signed(while_mux1h_1009_nl) * $signed(while_mux_614_nl);
  assign z_out_13_55_0 = nl_z_out_13_55_0[55:0];
  assign while_mux1h_1010_nl = MUX1HOT_v_32_4_2(while_slc_103_72_4_ncse_sva_1, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[287:256]),
      while_slc_55_24_ncse_sva, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[31:0]),
      {(fsm_output[1]) , (fsm_output[3]) , (fsm_output[4]) , (fsm_output[2])});
  assign while_mux1h_1011_nl = MUX1HOT_v_32_3_2(cfg_sin_gamma, cfg_sin_3_alpha, cfg_sin_alpha,
      {or_594_cse , (fsm_output[3]) , (fsm_output[2])});
  assign nl_z_out_14_55_0 = $signed(while_mux1h_1010_nl) * $signed(while_mux1h_1011_nl);
  assign z_out_14_55_0 = nl_z_out_14_55_0[55:0];
  assign while_mux1h_1012_nl = MUX1HOT_v_32_4_2(while_slc_103_72_3_ncse_sva_1, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[223:192]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[351:320]),
      while_slc_55_24_10_ncse_sva, {(fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])
      , (fsm_output[4])});
  assign while_mux_615_nl = MUX_v_32_2_2(cfg_sin_2_gamma, cfg_cos_alpha, while_or_98_cse_1);
  assign nl_z_out_15_55_0 = $signed(while_mux1h_1012_nl) * $signed(while_mux_615_nl);
  assign z_out_15_55_0 = nl_z_out_15_55_0[55:0];
  assign while_mux_616_nl = MUX_v_32_2_2(while_slc_while_acc_93_77_46_ncse_sva_1,
      while_slc_55_24_3_ncse_sva, fsm_output[4]);
  assign nl_z_out_16_55_0 = $signed(while_mux_616_nl) * $signed(cfg_cos_gamma);
  assign z_out_16_55_0 = nl_z_out_16_55_0[55:0];
  assign while_while_mux_12_nl = MUX_v_32_2_2(32'b00000000110111011011001111010111,
      while_slc_55_24_6_ncse_sva, fsm_output[4]);
  assign nl_z_out_17_55_0 = $signed(while_mux_600_cse) * $signed(while_while_mux_12_nl);
  assign z_out_17_55_0 = nl_z_out_17_55_0[55:0];
  assign while_mux1h_1013_nl = MUX1HOT_v_32_3_2(cfg_sin_gamma, while_slc_55_24_1_ncse_sva,
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[63:32]),
      {(fsm_output[3]) , (fsm_output[4]) , (fsm_output[2])});
  assign while_mux_617_nl = MUX_v_32_2_2(while_slc_55_24_3_ncse_sva_1, cfg_cos_beta,
      while_or_113_cse);
  assign nl_z_out_18_55_0 = $signed(while_mux1h_1013_nl) * $signed(while_mux_617_nl);
  assign z_out_18_55_0 = nl_z_out_18_55_0[55:0];
  assign while_mux1h_1014_nl = MUX1HOT_v_32_3_2((while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[479:448]),
      while_slc_55_24_1_ncse_sva, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[63:32]),
      {(fsm_output[3]) , (fsm_output[4]) , (fsm_output[2])});
  assign while_mux_618_nl = MUX_v_32_2_2(cfg_cos_3_alpha, cfg_sin_beta, while_or_113_cse);
  assign nl_z_out_19_55_0 = $signed(while_mux1h_1014_nl) * $signed(while_mux_618_nl);
  assign z_out_19_55_0 = nl_z_out_19_55_0[55:0];
  assign while_mux1h_1015_nl = MUX1HOT_v_32_3_2(cfg_sin_beta, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[383:352]),
      while_slc_55_24_6_ncse_sva, {(fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  assign z_out_20 = conv_u2u_64_64($signed(cfg_cos_beta) * $signed(while_mux1h_1015_nl));
  assign while_mux_619_nl = MUX_v_32_2_2(cfg_cos_beta, cfg_cos_2_beta, fsm_output[4]);
  assign while_mux_620_nl = MUX_v_31_2_2((cfg_cos_3_beta[31:1]), (cfg_cos_2_beta[31:1]),
      fsm_output[4]);
  assign nl_z_out_21 = conv_s2u_32_33(while_mux_619_nl) + conv_s2u_31_33(while_mux_620_nl);
  assign z_out_21 = nl_z_out_21[32:0];
  assign while_mux1h_1016_nl = MUX1HOT_v_32_3_2(while_slc_55_24_20_ncse_sva_5, while_slc_55_24_21_ncse_sva_5,
      while_slc_55_24_19_ncse_sva_4, {(fsm_output[2]) , (fsm_output[3]) , (fsm_output[1])});
  assign while_mux1h_1017_nl = MUX1HOT_v_36_3_2(({{1{while_acc_121_itm[34]}}, while_acc_121_itm}),
      while_acc_103_itm, while_acc_91_itm_1, {(fsm_output[2]) , (fsm_output[3]) ,
      (fsm_output[1])});
  assign nl_z_out_22 = $signed(while_mux1h_1016_nl) * $signed(while_mux1h_1017_nl);
  assign z_out_22 = nl_z_out_22[59:0];
  assign while_mux1h_1018_nl = MUX1HOT_v_32_3_2(while_slc_55_24_17_ncse_sva_1, while_slc_55_24_16_ncse_sva_1,
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_8_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[383:352]),
      {(fsm_output[1]) , (fsm_output[3]) , (fsm_output[2])});
  assign nl_z_out_23 = $signed(21'b010011100110001000111) * $signed(while_mux1h_1018_nl);
  assign z_out_23 = nl_z_out_23[51:0];
  assign while_mux_621_nl = MUX_v_32_2_2(while_slc_55_24_21_ncse_sva_1, while_slc_55_24_19_ncse_sva_1,
      fsm_output[3]);
  assign nl_z_out_24_51_0 = $signed(21'b010011100110001000111) * $signed(while_mux_621_nl);
  assign z_out_24_51_0 = nl_z_out_24_51_0[51:0];
  assign operator_64_40_true_AC_TRN_AC_WRAP_1_mux_5_nl = MUX_v_30_2_2((cfg_cos_2_beta[31:2]),
      (cfg_cos_2_beta[30:1]), fsm_output[2]);
  assign nl_z_out_25 = conv_u2u_26_33({(fsm_output[2]) , 2'b01 , (~ (fsm_output[2]))
      , 22'b0000000000000000000000}) + conv_s2u_31_33({(cfg_cos_2_beta[31]) , operator_64_40_true_AC_TRN_AC_WRAP_1_mux_5_nl})
      + conv_s2u_32_33(cfg_cos_2_beta);
  assign z_out_25 = nl_z_out_25[32:0];

  function automatic  MUX1HOT_s_1_4_2;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [3:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [120:0] MUX1HOT_v_121_4_2;
    input [120:0] input_3;
    input [120:0] input_2;
    input [120:0] input_1;
    input [120:0] input_0;
    input [3:0] sel;
    reg [120:0] result;
  begin
    result = input_0 & {121{sel[0]}};
    result = result | (input_1 & {121{sel[1]}});
    result = result | (input_2 & {121{sel[2]}});
    result = result | (input_3 & {121{sel[3]}});
    MUX1HOT_v_121_4_2 = result;
  end
  endfunction


  function automatic [121:0] MUX1HOT_v_122_3_2;
    input [121:0] input_2;
    input [121:0] input_1;
    input [121:0] input_0;
    input [2:0] sel;
    reg [121:0] result;
  begin
    result = input_0 & {122{sel[0]}};
    result = result | (input_1 & {122{sel[1]}});
    result = result | (input_2 & {122{sel[2]}});
    MUX1HOT_v_122_3_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_4_2;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [3:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    result = result | (input_3 & {32{sel[3]}});
    MUX1HOT_v_32_4_2 = result;
  end
  endfunction


  function automatic [32:0] MUX1HOT_v_33_3_2;
    input [32:0] input_2;
    input [32:0] input_1;
    input [32:0] input_0;
    input [2:0] sel;
    reg [32:0] result;
  begin
    result = input_0 & {33{sel[0]}};
    result = result | (input_1 & {33{sel[1]}});
    result = result | (input_2 & {33{sel[2]}});
    MUX1HOT_v_33_3_2 = result;
  end
  endfunction


  function automatic [33:0] MUX1HOT_v_34_3_2;
    input [33:0] input_2;
    input [33:0] input_1;
    input [33:0] input_0;
    input [2:0] sel;
    reg [33:0] result;
  begin
    result = input_0 & {34{sel[0]}};
    result = result | (input_1 & {34{sel[1]}});
    result = result | (input_2 & {34{sel[2]}});
    MUX1HOT_v_34_3_2 = result;
  end
  endfunction


  function automatic [35:0] MUX1HOT_v_36_3_2;
    input [35:0] input_2;
    input [35:0] input_1;
    input [35:0] input_0;
    input [2:0] sel;
    reg [35:0] result;
  begin
    result = input_0 & {36{sel[0]}};
    result = result | (input_1 & {36{sel[1]}});
    result = result | (input_2 & {36{sel[2]}});
    MUX1HOT_v_36_3_2 = result;
  end
  endfunction


  function automatic [35:0] MUX1HOT_v_36_4_2;
    input [35:0] input_3;
    input [35:0] input_2;
    input [35:0] input_1;
    input [35:0] input_0;
    input [3:0] sel;
    reg [35:0] result;
  begin
    result = input_0 & {36{sel[0]}};
    result = result | (input_1 & {36{sel[1]}});
    result = result | (input_2 & {36{sel[2]}});
    result = result | (input_3 & {36{sel[3]}});
    MUX1HOT_v_36_4_2 = result;
  end
  endfunction


  function automatic [51:0] MUX1HOT_v_52_4_2;
    input [51:0] input_3;
    input [51:0] input_2;
    input [51:0] input_1;
    input [51:0] input_0;
    input [3:0] sel;
    reg [51:0] result;
  begin
    result = input_0 & {52{sel[0]}};
    result = result | (input_1 & {52{sel[1]}});
    result = result | (input_2 & {52{sel[2]}});
    result = result | (input_3 & {52{sel[3]}});
    MUX1HOT_v_52_4_2 = result;
  end
  endfunction


  function automatic [56:0] MUX1HOT_v_57_4_2;
    input [56:0] input_3;
    input [56:0] input_2;
    input [56:0] input_1;
    input [56:0] input_0;
    input [3:0] sel;
    reg [56:0] result;
  begin
    result = input_0 & {57{sel[0]}};
    result = result | (input_1 & {57{sel[1]}});
    result = result | (input_2 & {57{sel[2]}});
    result = result | (input_3 & {57{sel[3]}});
    MUX1HOT_v_57_4_2 = result;
  end
  endfunction


  function automatic [57:0] MUX1HOT_v_58_4_2;
    input [57:0] input_3;
    input [57:0] input_2;
    input [57:0] input_1;
    input [57:0] input_0;
    input [3:0] sel;
    reg [57:0] result;
  begin
    result = input_0 & {58{sel[0]}};
    result = result | (input_1 & {58{sel[1]}});
    result = result | (input_2 & {58{sel[2]}});
    result = result | (input_3 & {58{sel[3]}});
    MUX1HOT_v_58_4_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_3_2;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [2:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | (input_1 & {64{sel[1]}});
    result = result | (input_2 & {64{sel[2]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function automatic [83:0] MUX1HOT_v_84_4_2;
    input [83:0] input_3;
    input [83:0] input_2;
    input [83:0] input_1;
    input [83:0] input_0;
    input [3:0] sel;
    reg [83:0] result;
  begin
    result = input_0 & {84{sel[0]}};
    result = result | (input_1 & {84{sel[1]}});
    result = result | (input_2 & {84{sel[2]}});
    result = result | (input_3 & {84{sel[3]}});
    MUX1HOT_v_84_4_2 = result;
  end
  endfunction


  function automatic [87:0] MUX1HOT_v_88_4_2;
    input [87:0] input_3;
    input [87:0] input_2;
    input [87:0] input_1;
    input [87:0] input_0;
    input [3:0] sel;
    reg [87:0] result;
  begin
    result = input_0 & {88{sel[0]}};
    result = result | (input_1 & {88{sel[1]}});
    result = result | (input_2 & {88{sel[2]}});
    result = result | (input_3 & {88{sel[3]}});
    MUX1HOT_v_88_4_2 = result;
  end
  endfunction


  function automatic [88:0] MUX1HOT_v_89_4_2;
    input [88:0] input_3;
    input [88:0] input_2;
    input [88:0] input_1;
    input [88:0] input_0;
    input [3:0] sel;
    reg [88:0] result;
  begin
    result = input_0 & {89{sel[0]}};
    result = result | (input_1 & {89{sel[1]}});
    result = result | (input_2 & {89{sel[2]}});
    result = result | (input_3 & {89{sel[3]}});
    MUX1HOT_v_89_4_2 = result;
  end
  endfunction


  function automatic [89:0] MUX1HOT_v_90_4_2;
    input [89:0] input_3;
    input [89:0] input_2;
    input [89:0] input_1;
    input [89:0] input_0;
    input [3:0] sel;
    reg [89:0] result;
  begin
    result = input_0 & {90{sel[0]}};
    result = result | (input_1 & {90{sel[1]}});
    result = result | (input_2 & {90{sel[2]}});
    result = result | (input_3 & {90{sel[3]}});
    MUX1HOT_v_90_4_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_3_2;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [2:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    MUX1HOT_v_9_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input  sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [29:0] MUX_v_30_2_2;
    input [29:0] input_0;
    input [29:0] input_1;
    input  sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function automatic [30:0] MUX_v_31_2_2;
    input [30:0] input_0;
    input [30:0] input_1;
    input  sel;
    reg [30:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_31_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [32:0] MUX_v_33_2_2;
    input [32:0] input_0;
    input [32:0] input_1;
    input  sel;
    reg [32:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_33_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [82:0] readslicef_101_83_18;
    input [100:0] vector;
    reg [100:0] tmp;
  begin
    tmp = vector >> 18;
    readslicef_101_83_18 = tmp[82:0];
  end
  endfunction


  function automatic [31:0] readslicef_103_32_71;
    input [102:0] vector;
    reg [102:0] tmp;
  begin
    tmp = vector >> 71;
    readslicef_103_32_71 = tmp[31:0];
  end
  endfunction


  function automatic [31:0] readslicef_104_32_72;
    input [103:0] vector;
    reg [103:0] tmp;
  begin
    tmp = vector >> 72;
    readslicef_104_32_72 = tmp[31:0];
  end
  endfunction


  function automatic [79:0] readslicef_104_80_24;
    input [103:0] vector;
    reg [103:0] tmp;
  begin
    tmp = vector >> 24;
    readslicef_104_80_24 = tmp[79:0];
  end
  endfunction


  function automatic [77:0] readslicef_106_78_28;
    input [105:0] vector;
    reg [105:0] tmp;
  begin
    tmp = vector >> 28;
    readslicef_106_78_28 = tmp[77:0];
  end
  endfunction


  function automatic [31:0] readslicef_129_32_97;
    input [128:0] vector;
    reg [128:0] tmp;
  begin
    tmp = vector >> 97;
    readslicef_129_32_97 = tmp[31:0];
  end
  endfunction


  function automatic [77:0] readslicef_129_78_51;
    input [128:0] vector;
    reg [128:0] tmp;
  begin
    tmp = vector >> 51;
    readslicef_129_78_51 = tmp[77:0];
  end
  endfunction


  function automatic [31:0] readslicef_56_32_24;
    input [55:0] vector;
    reg [55:0] tmp;
  begin
    tmp = vector >> 24;
    readslicef_56_32_24 = tmp[31:0];
  end
  endfunction


  function automatic [31:0] readslicef_78_32_46;
    input [77:0] vector;
    reg [77:0] tmp;
  begin
    tmp = vector >> 46;
    readslicef_78_32_46 = tmp[31:0];
  end
  endfunction


  function automatic [31:0] readslicef_80_32_48;
    input [79:0] vector;
    reg [79:0] tmp;
  begin
    tmp = vector >> 48;
    readslicef_80_32_48 = tmp[31:0];
  end
  endfunction


  function automatic [31:0] readslicef_83_32_51;
    input [82:0] vector;
    reg [82:0] tmp;
  begin
    tmp = vector >> 51;
    readslicef_83_32_51 = tmp[31:0];
  end
  endfunction


  function automatic [31:0] readslicef_99_32_67;
    input [98:0] vector;
    reg [98:0] tmp;
  begin
    tmp = vector >> 67;
    readslicef_99_32_67 = tmp[31:0];
  end
  endfunction


  function automatic [32:0] signext_33_31;
    input [30:0] vector;
  begin
    signext_33_31= {{2{vector[30]}}, vector};
  end
  endfunction


  function automatic [4:0] signext_5_3;
    input [2:0] vector;
  begin
    signext_5_3= {{2{vector[2]}}, vector};
  end
  endfunction


  function automatic [8:0] signext_9_8;
    input [7:0] vector;
  begin
    signext_9_8= {{1{vector[7]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_s2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_s2s_8_9 = {vector[7], vector};
  end
  endfunction


  function automatic [30:0] conv_s2s_30_31 ;
    input [29:0]  vector ;
  begin
    conv_s2s_30_31 = {vector[29], vector};
  end
  endfunction


  function automatic [32:0] conv_s2s_31_33 ;
    input [30:0]  vector ;
  begin
    conv_s2s_31_33 = {{2{vector[30]}}, vector};
  end
  endfunction


  function automatic [32:0] conv_s2s_32_33 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_33 = {vector[31], vector};
  end
  endfunction


  function automatic [33:0] conv_s2s_32_34 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_34 = {{2{vector[31]}}, vector};
  end
  endfunction


  function automatic [34:0] conv_s2s_32_35 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_35 = {{3{vector[31]}}, vector};
  end
  endfunction


  function automatic [35:0] conv_s2s_32_36 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_36 = {{4{vector[31]}}, vector};
  end
  endfunction


  function automatic [33:0] conv_s2s_33_34 ;
    input [32:0]  vector ;
  begin
    conv_s2s_33_34 = {vector[32], vector};
  end
  endfunction


  function automatic [34:0] conv_s2s_34_35 ;
    input [33:0]  vector ;
  begin
    conv_s2s_34_35 = {vector[33], vector};
  end
  endfunction


  function automatic [32:0] conv_s2u_31_33 ;
    input [30:0]  vector ;
  begin
    conv_s2u_31_33 = {{2{vector[30]}}, vector};
  end
  endfunction


  function automatic [32:0] conv_s2u_32_33 ;
    input [31:0]  vector ;
  begin
    conv_s2u_32_33 = {vector[31], vector};
  end
  endfunction


  function automatic [26:0] conv_u2s_26_27 ;
    input [25:0]  vector ;
  begin
    conv_u2s_26_27 =  {1'b0, vector};
  end
  endfunction


  function automatic [32:0] conv_u2s_32_33 ;
    input [31:0]  vector ;
  begin
    conv_u2s_32_33 =  {1'b0, vector};
  end
  endfunction


  function automatic [32:0] conv_u2u_26_33 ;
    input [25:0]  vector ;
  begin
    conv_u2u_26_33 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [63:0] conv_u2u_64_64 ;
    input [63:0]  vector ;
  begin
    conv_u2u_64_64 = vector;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run
// ------------------------------------------------------------------


module OutputBuffer_run (
  clk, rst, cfg_block_size, cfg_output_base, sync2_val, sync2_rdy, sync2_msg, sync3_val,
      sync3_rdy, sync3_msg, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg,
      dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, rotate_out_val,
      rotate_out_rdy, rotate_out_msg, mem_rsci_clken_d, mem_rsci_d_d, mem_rsci_q_d,
      mem_rsci_radr_d, mem_rsci_wadr_d, mem_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      mem_rsci_we_d_pff
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_output_base;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input rotate_out_val;
  output rotate_out_rdy;
  input [511:0] rotate_out_msg;
  output mem_rsci_clken_d;
  output [63:0] mem_rsci_d_d;
  input [63:0] mem_rsci_q_d;
  output [13:0] mem_rsci_radr_d;
  output [13:0] mem_rsci_wadr_d;
  output mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output mem_rsci_we_d_pff;


  // Interconnect Declarations
  reg run_wen;
  wire sync2_Pop_mioi_wen_comp;
  wire rotate_out_Pop_mioi_wen_comp;
  wire [511:0] rotate_out_Pop_mioi_idat_mxwt;
  wire dma_write_ctrl_Push_mioi_wen_comp;
  wire dma_write_chnl_Push_mioi_wen_comp;
  reg [63:0] dma_write_chnl_Push_mioi_idat;
  wire sync3_Push_mioi_wen_comp;
  reg [27:0] dma_write_ctrl_Push_mioi_idat_63_36;
  reg [31:0] dma_write_ctrl_Push_mioi_idat_31_0;
  wire [10:0] fsm_output;
  wire or_dcpl_6;
  wire exit_while_for_1_sva_mx0;
  wire exit_while_for_sva_mx0;
  reg [3:0] while_for_for_j_3_0_sva_1;
  wire while_and_cse;
  reg [31:0] while_for_1_i_sva;
  reg [2:0] while_for_for_j_3_0_sva_2_0_1;
  reg [511:0] while_rotate_out_reg_data_sva;
  wire run_wen_rtff;
  reg reg_sync2_Pop_mioi_iswt0_tmp;
  reg reg_rotate_out_Pop_mioi_iswt0_tmp;
  reg reg_dma_write_ctrl_Push_mioi_iswt0_tmp;
  reg reg_dma_write_chnl_Push_mioi_iswt0_tmp;
  reg reg_sync3_Push_mioi_iswt0_tmp;
  wire while_mux_rmff;
  wire while_for_mux_3_rmff;
  wire while_mux_1_rmff;
  wire while_for_1_mux_rmff;
  wire while_mux_2_rmff;
  wire [31:0] z_out;
  wire [32:0] nl_z_out;
  reg [27:0] while_for_1_i_sva_1_31_4;

  wire and_13_nl;
  wire and_17_nl;
  wire and_19_nl;
  wire nor_1_nl;
  wire[31:0] while_for_mux1h_1_nl;
  wire or_38_nl;
  wire or_39_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat;
  assign nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat
      = {3'b011 , dma_write_ctrl_Push_mioi_idat_63_36 , 4'b0000 , dma_write_ctrl_Push_mioi_idat_31_0};
  wire  nl_OutputBuffer_run_run_fsm_inst_while_for_for_C_1_tr0;
  assign nl_OutputBuffer_run_run_fsm_inst_while_for_for_C_1_tr0 = while_for_for_j_3_0_sva_1[3];
  OutputBuffer_run_sync2_Pop_mioi OutputBuffer_run_sync2_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync2_Pop_mioi_oswt(reg_sync2_Pop_mioi_iswt0_tmp),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp),
      .sync2_Pop_mioi_oswt_pff(while_mux_rmff)
    );
  OutputBuffer_run_rotate_out_Pop_mioi OutputBuffer_run_rotate_out_Pop_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg),
      .rotate_out_Pop_mioi_oswt(reg_rotate_out_Pop_mioi_iswt0_tmp),
      .rotate_out_Pop_mioi_wen_comp(rotate_out_Pop_mioi_wen_comp),
      .rotate_out_Pop_mioi_idat_mxwt(rotate_out_Pop_mioi_idat_mxwt),
      .rotate_out_Pop_mioi_oswt_pff(while_for_mux_3_rmff)
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi OutputBuffer_run_dma_write_ctrl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_ctrl_Push_mioi_oswt(reg_dma_write_ctrl_Push_mioi_iswt0_tmp),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp),
      .dma_write_ctrl_Push_mioi_idat(nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat[66:0]),
      .dma_write_ctrl_Push_mioi_oswt_pff(while_mux_1_rmff)
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi OutputBuffer_run_dma_write_chnl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .dma_write_chnl_Push_mioi_oswt(reg_dma_write_chnl_Push_mioi_iswt0_tmp),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp),
      .dma_write_chnl_Push_mioi_idat(dma_write_chnl_Push_mioi_idat),
      .dma_write_chnl_Push_mioi_oswt_pff(while_for_1_mux_rmff)
    );
  OutputBuffer_run_sync3_Push_mioi OutputBuffer_run_sync3_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .sync3_Push_mioi_oswt(reg_sync3_Push_mioi_iswt0_tmp),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp),
      .sync3_Push_mioi_oswt_pff(while_mux_2_rmff)
    );
  OutputBuffer_run_staller OutputBuffer_run_staller_inst (
      .run_wen(run_wen_rtff),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp),
      .rotate_out_Pop_mioi_wen_comp(rotate_out_Pop_mioi_wen_comp),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp)
    );
  OutputBuffer_run_run_fsm OutputBuffer_run_run_fsm_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .while_C_1_tr0(exit_while_for_sva_mx0),
      .while_for_for_C_1_tr0(nl_OutputBuffer_run_run_fsm_inst_while_for_for_C_1_tr0),
      .while_for_C_1_tr0(exit_while_for_sva_mx0),
      .while_C_2_tr0(exit_while_for_1_sva_mx0),
      .while_for_1_C_2_tr0(exit_while_for_1_sva_mx0)
    );
  assign mem_rsci_clken_d = run_wen;
  assign while_and_cse = run_wen & or_dcpl_6 & exit_while_for_sva_mx0;
  assign and_13_nl = exit_while_for_1_sva_mx0 & ((fsm_output[6]) | (fsm_output[9]));
  assign while_mux_2_rmff = MUX_s_1_2_2(reg_sync3_Push_mioi_iswt0_tmp, and_13_nl,
      run_wen);
  assign while_for_1_mux_rmff = MUX_s_1_2_2(reg_dma_write_chnl_Push_mioi_iswt0_tmp,
      (fsm_output[8]), run_wen);
  assign and_17_nl = exit_while_for_sva_mx0 & or_dcpl_6;
  assign while_mux_1_rmff = MUX_s_1_2_2(reg_dma_write_ctrl_Push_mioi_iswt0_tmp, and_17_nl,
      run_wen);
  assign and_19_nl = (~ exit_while_for_sva_mx0) & or_dcpl_6;
  assign while_for_mux_3_rmff = MUX_s_1_2_2(reg_rotate_out_Pop_mioi_iswt0_tmp, and_19_nl,
      run_wen);
  assign while_mux_rmff = MUX_s_1_2_2(reg_sync2_Pop_mioi_iswt0_tmp, (fsm_output[0]),
      run_wen);
  assign exit_while_for_sva_mx0 = MUX_s_1_2_2((~ (z_out[28])), (~ ($signed(z_out)
      < $signed({1'b0, ({(cfg_block_size[28:1]) , 1'b0})}))), fsm_output[5]);
  assign exit_while_for_1_sva_mx0 = MUX_s_1_2_2((~ (z_out[28])), (~ ($signed(while_for_1_i_sva_1_31_4)
      < $signed({1'b0, (cfg_block_size[28:1])}))), fsm_output[9]);
  assign or_dcpl_6 = (fsm_output[5]) | (fsm_output[1]);
  assign mem_rsci_d_d = MUX_v_64_8_2((while_rotate_out_reg_data_sva[63:0]), (while_rotate_out_reg_data_sva[127:64]),
      (while_rotate_out_reg_data_sva[191:128]), (while_rotate_out_reg_data_sva[255:192]),
      (while_rotate_out_reg_data_sva[319:256]), (while_rotate_out_reg_data_sva[383:320]),
      (while_rotate_out_reg_data_sva[447:384]), (while_rotate_out_reg_data_sva[511:448]),
      while_for_for_j_3_0_sva_2_0_1);
  assign mem_rsci_radr_d = while_for_1_i_sva[13:0];
  assign mem_rsci_wadr_d = {(while_for_1_i_sva[10:0]) , while_for_for_j_3_0_sva_2_0_1};
  assign mem_rsci_we_d_pff = fsm_output[3];
  assign mem_rsci_readA_r_ram_ir_internal_RMASK_B_d = fsm_output[7];
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_ctrl_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      dma_write_ctrl_Push_mioi_idat_63_36 <= 28'b0000000000000000000000000000;
    end
    else if ( while_and_cse ) begin
      dma_write_ctrl_Push_mioi_idat_31_0 <= cfg_output_base;
      dma_write_ctrl_Push_mioi_idat_63_36 <= cfg_block_size[28:1];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_chnl_Push_mioi_idat <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (fsm_output[8]) ) begin
      dma_write_chnl_Push_mioi_idat <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_sync3_Push_mioi_iswt0_tmp <= 1'b0;
      reg_dma_write_chnl_Push_mioi_iswt0_tmp <= 1'b0;
      reg_dma_write_ctrl_Push_mioi_iswt0_tmp <= 1'b0;
      reg_rotate_out_Pop_mioi_iswt0_tmp <= 1'b0;
      reg_sync2_Pop_mioi_iswt0_tmp <= 1'b0;
      run_wen <= 1'b1;
    end
    else begin
      reg_sync3_Push_mioi_iswt0_tmp <= while_mux_2_rmff;
      reg_dma_write_chnl_Push_mioi_iswt0_tmp <= while_for_1_mux_rmff;
      reg_dma_write_ctrl_Push_mioi_iswt0_tmp <= while_mux_1_rmff;
      reg_rotate_out_Pop_mioi_iswt0_tmp <= while_for_mux_3_rmff;
      reg_sync2_Pop_mioi_iswt0_tmp <= while_mux_rmff;
      run_wen <= run_wen_rtff;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((fsm_output[8]) | (fsm_output[3]) | (fsm_output[2]) |
        (fsm_output[4]) | (fsm_output[9]))) ) begin
      while_for_1_i_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000, z_out,
          nor_1_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_for_j_3_0_sva_2_0_1 <= 3'b000;
      while_for_for_j_3_0_sva_1 <= 4'b0000;
    end
    else if ( run_wen ) begin
      while_for_for_j_3_0_sva_2_0_1 <= MUX_v_3_2_2(3'b000, (while_for_for_j_3_0_sva_1[2:0]),
          (fsm_output[4]));
      while_for_for_j_3_0_sva_1 <= z_out[3:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_rotate_out_reg_data_sva <= 512'b
    end
    else if ( run_wen & (fsm_output[4:3]==2'b00) ) begin
      while_rotate_out_reg_data_sva <= rotate_out_Pop_mioi_idat_mxwt;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_sva_1_31_4 <= 28'b0000000000000000000000000000;
    end
    else if ( run_wen & (fsm_output[7]) ) begin
      while_for_1_i_sva_1_31_4 <= z_out[31:4];
    end
  end
  assign nor_1_nl = ~((fsm_output[6]) | (fsm_output[1]));
  assign or_38_nl = (fsm_output[7]) | (fsm_output[5]);
  assign or_39_nl = (fsm_output[6]) | (fsm_output[1]);
  assign while_for_mux1h_1_nl = MUX1HOT_v_32_3_2(while_for_1_i_sva, ({29'b00000000000000000000000000000
      , while_for_for_j_3_0_sva_2_0_1}), ({4'b1111 , (~ (cfg_block_size[28:1]))}),
      {or_38_nl , (fsm_output[3]) , or_39_nl});
  assign nl_z_out = while_for_mux1h_1_nl + 32'b00000000000000000000000000000001;
  assign z_out = nl_z_out[31:0];

  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_8_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input [63:0] input_2;
    input [63:0] input_3;
    input [63:0] input_4;
    input [63:0] input_5;
    input [63:0] input_6;
    input [63:0] input_7;
    input [2:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      3'b100 : begin
        result = input_4;
      end
      3'b101 : begin
        result = input_5;
      end
      3'b110 : begin
        result = input_6;
      end
      default : begin
        result = input_7;
      end
    endcase
    MUX_v_64_8_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control
// ------------------------------------------------------------------


module Control (
  clk, rst, acc_start, acc_done, sync1_val, sync1_rdy, sync1_msg, sync2_val, sync2_rdy,
      sync2_msg, sync3_val, sync3_rdy, sync3_msg
);
  input clk;
  input rst;
  input acc_start;
  output acc_done;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;



  // Interconnect Declarations for Component Instantiations 
  Control_run Control_run_inst (
      .clk(clk),
      .rst(rst),
      .acc_start(acc_start),
      .acc_done(acc_done),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer
// ------------------------------------------------------------------


module InputBuffer (
  clk, rst, cfg_block_size, cfg_input_base, sync1_val, sync1_rdy, sync1_msg, dma_read_ctrl_val,
      dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val, dma_read_chnl_rdy,
      dma_read_chnl_msg, rotate_in_val, rotate_in_rdy, rotate_in_msg
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_input_base;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output rotate_in_val;
  input rotate_in_rdy;
  output [511:0] rotate_in_msg;


  // Interconnect Declarations
  wire mem_rsci_clken_d;
  wire [63:0] mem_rsci_d_d;
  wire [63:0] mem_rsci_q_d;
  wire [13:0] mem_rsci_radr_d;
  wire [13:0] mem_rsci_wadr_d;
  wire mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire mem_rsc_clken;
  wire [63:0] mem_rsc_q;
  wire [13:0] mem_rsc_radr;
  wire mem_rsc_we;
  wire [63:0] mem_rsc_d;
  wire [13:0] mem_rsc_wadr;
  wire mem_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd14),
  .data_width(32'sd64),
  .depth(32'sd16384),
  .latency(32'sd1)) mem_rsc_comp (
      .clk(clk),
      .clken(mem_rsc_clken),
      .d(mem_rsc_d),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .wadr(mem_rsc_wadr),
      .we(mem_rsc_we)
    );
  InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_14_64_16384_16384_64_1_gen
      mem_rsci (
      .clken(mem_rsc_clken),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .we(mem_rsc_we),
      .d(mem_rsc_d),
      .wadr(mem_rsc_wadr),
      .clken_d(mem_rsci_clken_d),
      .d_d(mem_rsci_d_d),
      .q_d(mem_rsci_q_d),
      .radr_d(mem_rsci_radr_d),
      .wadr_d(mem_rsci_wadr_d),
      .we_d(mem_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(mem_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  InputBuffer_run InputBuffer_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_block_size),
      .cfg_input_base(cfg_input_base),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .mem_rsci_clken_d(mem_rsci_clken_d),
      .mem_rsci_d_d(mem_rsci_d_d),
      .mem_rsci_q_d(mem_rsci_q_d),
      .mem_rsci_radr_d(mem_rsci_radr_d),
      .mem_rsci_wadr_d(mem_rsci_wadr_d),
      .mem_rsci_readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .mem_rsci_we_d_pff(mem_rsci_we_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate
// ------------------------------------------------------------------


module Rotate (
  clk, rst, cfg_cos_alpha, cfg_sin_alpha, cfg_cos_beta, cfg_sin_beta, cfg_cos_gamma,
      cfg_sin_gamma, cfg_cos_2_alpha, cfg_sin_2_alpha, cfg_cos_2_beta, cfg_sin_2_beta,
      cfg_cos_2_gamma, cfg_sin_2_gamma, cfg_cos_3_alpha, cfg_sin_3_alpha, cfg_cos_3_beta,
      cfg_sin_3_beta, cfg_cos_3_gamma, cfg_sin_3_gamma, rotate_in_val, rotate_in_rdy,
      rotate_in_msg, rotate_out_val, rotate_out_rdy, rotate_out_msg
);
  input clk;
  input rst;
  input [31:0] cfg_cos_alpha;
  input [31:0] cfg_sin_alpha;
  input [31:0] cfg_cos_beta;
  input [31:0] cfg_sin_beta;
  input [31:0] cfg_cos_gamma;
  input [31:0] cfg_sin_gamma;
  input [31:0] cfg_cos_2_alpha;
  input [31:0] cfg_sin_2_alpha;
  input [31:0] cfg_cos_2_beta;
  input [31:0] cfg_sin_2_beta;
  input [31:0] cfg_cos_2_gamma;
  input [31:0] cfg_sin_2_gamma;
  input [31:0] cfg_cos_3_alpha;
  input [31:0] cfg_sin_3_alpha;
  input [31:0] cfg_cos_3_beta;
  input [31:0] cfg_sin_3_beta;
  input [31:0] cfg_cos_3_gamma;
  input [31:0] cfg_sin_3_gamma;
  input rotate_in_val;
  output rotate_in_rdy;
  input [511:0] rotate_in_msg;
  output rotate_out_val;
  input rotate_out_rdy;
  output [511:0] rotate_out_msg;


  // Interconnect Declarations
  wire [34:0] while_mul_103_cmp_a;
  wire [51:0] while_mul_103_cmp_b;
  wire while_mul_103_cmp_en;
  wire [77:0] while_mul_103_cmp_z;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd35),
  .signd_a(32'sd1),
  .width_b(32'sd52),
  .signd_b(32'sd1),
  .width_z(32'sd78),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_mul_103_cmp (
      .a(while_mul_103_cmp_a),
      .b(while_mul_103_cmp_b),
      .clk(clk),
      .en(while_mul_103_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_103_cmp_z)
    );
  Rotate_run Rotate_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_cos_alpha(cfg_cos_alpha),
      .cfg_sin_alpha(cfg_sin_alpha),
      .cfg_cos_beta(cfg_cos_beta),
      .cfg_sin_beta(cfg_sin_beta),
      .cfg_cos_gamma(cfg_cos_gamma),
      .cfg_sin_gamma(cfg_sin_gamma),
      .cfg_cos_2_alpha(cfg_cos_2_alpha),
      .cfg_sin_2_alpha(cfg_sin_2_alpha),
      .cfg_cos_2_beta(cfg_cos_2_beta),
      .cfg_cos_2_gamma(cfg_cos_2_gamma),
      .cfg_sin_2_gamma(cfg_sin_2_gamma),
      .cfg_cos_3_alpha(cfg_cos_3_alpha),
      .cfg_sin_3_alpha(cfg_sin_3_alpha),
      .cfg_cos_3_beta(cfg_cos_3_beta),
      .cfg_sin_3_beta(cfg_sin_3_beta),
      .cfg_cos_3_gamma(cfg_cos_3_gamma),
      .cfg_sin_3_gamma(cfg_sin_3_gamma),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg),
      .while_mul_103_cmp_a(while_mul_103_cmp_a),
      .while_mul_103_cmp_b(while_mul_103_cmp_b),
      .while_mul_103_cmp_en(while_mul_103_cmp_en),
      .while_mul_103_cmp_z(while_mul_103_cmp_z)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer
// ------------------------------------------------------------------


module OutputBuffer (
  clk, rst, cfg_block_size, cfg_output_base, sync2_val, sync2_rdy, sync2_msg, sync3_val,
      sync3_rdy, sync3_msg, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg,
      dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, rotate_out_val,
      rotate_out_rdy, rotate_out_msg
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_output_base;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input rotate_out_val;
  output rotate_out_rdy;
  input [511:0] rotate_out_msg;


  // Interconnect Declarations
  wire mem_rsci_clken_d;
  wire [63:0] mem_rsci_d_d;
  wire [63:0] mem_rsci_q_d;
  wire [13:0] mem_rsci_radr_d;
  wire [13:0] mem_rsci_wadr_d;
  wire mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire mem_rsc_clken;
  wire [63:0] mem_rsc_q;
  wire [13:0] mem_rsc_radr;
  wire mem_rsc_we;
  wire [63:0] mem_rsc_d;
  wire [13:0] mem_rsc_wadr;
  wire mem_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd14),
  .data_width(32'sd64),
  .depth(32'sd16384),
  .latency(32'sd1)) mem_rsc_comp (
      .clk(clk),
      .clken(mem_rsc_clken),
      .d(mem_rsc_d),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .wadr(mem_rsc_wadr),
      .we(mem_rsc_we)
    );
  OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
      mem_rsci (
      .clken(mem_rsc_clken),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .we(mem_rsc_we),
      .d(mem_rsc_d),
      .wadr(mem_rsc_wadr),
      .clken_d(mem_rsci_clken_d),
      .d_d(mem_rsci_d_d),
      .q_d(mem_rsci_q_d),
      .radr_d(mem_rsci_radr_d),
      .wadr_d(mem_rsci_wadr_d),
      .we_d(mem_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(mem_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  OutputBuffer_run OutputBuffer_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_block_size),
      .cfg_output_base(cfg_output_base),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg),
      .mem_rsci_clken_d(mem_rsci_clken_d),
      .mem_rsci_d_d(mem_rsci_d_d),
      .mem_rsci_q_d(mem_rsci_q_d),
      .mem_rsci_radr_d(mem_rsci_radr_d),
      .mem_rsci_wadr_d(mem_rsci_wadr_d),
      .mem_rsci_readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .mem_rsci_we_d_pff(mem_rsci_we_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Top_rtl
// ------------------------------------------------------------------


module Top_rtl (
  clk, rst, cfg_regs_0, cfg_regs_1, cfg_regs_2, cfg_regs_3, cfg_regs_4, cfg_regs_5,
      cfg_regs_6, cfg_regs_7, cfg_regs_8, cfg_regs_9, cfg_regs_10, cfg_regs_11, cfg_regs_12,
      cfg_regs_13, cfg_regs_14, cfg_regs_15, cfg_regs_16, cfg_regs_17, cfg_regs_18,
      cfg_regs_19, cfg_regs_20, cfg_regs_21, cfg_regs_22, cfg_regs_23, cfg_regs_24,
      cfg_regs_25, cfg_regs_26, cfg_regs_27, cfg_regs_28, cfg_regs_29, cfg_regs_30,
      cfg_regs_31, acc_start, acc_done, dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg,
      dma_read_chnl_val, dma_read_chnl_rdy, dma_read_chnl_msg, dma_write_ctrl_val,
      dma_write_ctrl_rdy, dma_write_ctrl_msg, dma_write_chnl_val, dma_write_chnl_rdy,
      dma_write_chnl_msg
);
  input clk;
  input rst;
  input [31:0] cfg_regs_0;
  input [31:0] cfg_regs_1;
  input [31:0] cfg_regs_2;
  input [31:0] cfg_regs_3;
  input [31:0] cfg_regs_4;
  input [31:0] cfg_regs_5;
  input [31:0] cfg_regs_6;
  input [31:0] cfg_regs_7;
  input [31:0] cfg_regs_8;
  input [31:0] cfg_regs_9;
  input [31:0] cfg_regs_10;
  input [31:0] cfg_regs_11;
  input [31:0] cfg_regs_12;
  input [31:0] cfg_regs_13;
  input [31:0] cfg_regs_14;
  input [31:0] cfg_regs_15;
  input [31:0] cfg_regs_16;
  input [31:0] cfg_regs_17;
  input [31:0] cfg_regs_18;
  input [31:0] cfg_regs_19;
  input [31:0] cfg_regs_20;
  input [31:0] cfg_regs_21;
  input [31:0] cfg_regs_22;
  input [31:0] cfg_regs_23;
  input [31:0] cfg_regs_24;
  input [31:0] cfg_regs_25;
  input [31:0] cfg_regs_26;
  input [31:0] cfg_regs_27;
  input [31:0] cfg_regs_28;
  input [31:0] cfg_regs_29;
  input [31:0] cfg_regs_30;
  input [31:0] cfg_regs_31;
  input acc_start;
  output acc_done;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;


  // Interconnect Declarations
  wire sync1_val;
  wire sync1_rdy;
  wire sync1_msg;
  wire sync2_val;
  wire sync2_rdy;
  wire sync2_msg;
  wire sync3_val;
  wire sync3_rdy;
  wire sync3_msg;
  wire rotate_in_val;
  wire rotate_in_rdy;
  wire [511:0] rotate_in_msg;
  wire rotate_out_val;
  wire rotate_out_rdy;
  wire [511:0] rotate_out_msg;


  // Interconnect Declarations for Component Instantiations 
  Control ctr (
      .clk(clk),
      .rst(rst),
      .acc_start(acc_start),
      .acc_done(acc_done),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg)
    );
  InputBuffer inb (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_regs_2),
      .cfg_input_base(cfg_regs_3),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg)
    );
  Rotate rot (
      .clk(clk),
      .rst(rst),
      .cfg_cos_alpha(cfg_regs_8),
      .cfg_sin_alpha(cfg_regs_9),
      .cfg_cos_beta(cfg_regs_10),
      .cfg_sin_beta(cfg_regs_11),
      .cfg_cos_gamma(cfg_regs_12),
      .cfg_sin_gamma(cfg_regs_13),
      .cfg_cos_2_alpha(cfg_regs_14),
      .cfg_sin_2_alpha(cfg_regs_15),
      .cfg_cos_2_beta(cfg_regs_16),
      .cfg_sin_2_beta(32'b00000000000000000000000000000000),
      .cfg_cos_2_gamma(cfg_regs_18),
      .cfg_sin_2_gamma(cfg_regs_19),
      .cfg_cos_3_alpha(cfg_regs_20),
      .cfg_sin_3_alpha(cfg_regs_21),
      .cfg_cos_3_beta(cfg_regs_22),
      .cfg_sin_3_beta(cfg_regs_23),
      .cfg_cos_3_gamma(cfg_regs_24),
      .cfg_sin_3_gamma(cfg_regs_25),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg)
    );
  OutputBuffer out_0 (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_regs_2),
      .cfg_output_base(cfg_regs_4),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg)
    );
endmodule



