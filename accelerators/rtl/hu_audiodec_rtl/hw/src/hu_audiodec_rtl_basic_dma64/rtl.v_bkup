// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2022.1/981271 Production Release
//  HLS Date:       Thu Feb 10 22:05:20 PST 2022
// 
//  Generated by:   vv15@mojave.cs.illinois.edu
//  Generated date: Tue May 31 22:29:02 2022
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Control_run_staller
// ------------------------------------------------------------------


module Control_run_staller (
  clk, rst, run_wen, run_wten, sync1_Push_mioi_wen_comp, sync2_Push_mioi_wen_comp,
      sync3_Pop_mioi_wen_comp, run_flen_unreg
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  reg run_wten;
  input sync1_Push_mioi_wen_comp;
  input sync2_Push_mioi_wen_comp;
  input sync3_Pop_mioi_wen_comp;
  input run_flen_unreg;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = sync1_Push_mioi_wen_comp & sync2_Push_mioi_wen_comp & sync3_Pop_mioi_wen_comp
      & (~ run_flen_unreg);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten <= 1'b0;
    end
    else begin
      run_wten <= ~ run_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp (
  clk, rst, sync3_Pop_mioi_oswt_unreg, sync3_Pop_mioi_bawt, sync3_Pop_mioi_wen_comp,
      sync3_Pop_mioi_biwt, sync3_Pop_mioi_bdwt
);
  input clk;
  input rst;
  input sync3_Pop_mioi_oswt_unreg;
  output sync3_Pop_mioi_bawt;
  output sync3_Pop_mioi_wen_comp;
  input sync3_Pop_mioi_biwt;
  input sync3_Pop_mioi_bdwt;


  // Interconnect Declarations
  reg sync3_Pop_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync3_Pop_mioi_bawt = sync3_Pop_mioi_biwt | sync3_Pop_mioi_bcwt;
  assign sync3_Pop_mioi_wen_comp = (~ sync3_Pop_mioi_oswt_unreg) | sync3_Pop_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      sync3_Pop_mioi_bcwt <= ~((~(sync3_Pop_mioi_bcwt | sync3_Pop_mioi_biwt)) | sync3_Pop_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync3_Pop_mioi_oswt_unreg, sync3_Pop_mioi_iswt0, sync3_Pop_mioi_biwt,
      sync3_Pop_mioi_bdwt, sync3_Pop_mioi_ivld, sync3_Pop_mioi_irdy_run_sct
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync3_Pop_mioi_oswt_unreg;
  input sync3_Pop_mioi_iswt0;
  output sync3_Pop_mioi_biwt;
  output sync3_Pop_mioi_bdwt;
  input sync3_Pop_mioi_ivld;
  output sync3_Pop_mioi_irdy_run_sct;


  // Interconnect Declarations
  wire sync3_Pop_mioi_ogwt;
  reg sync3_Pop_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync3_Pop_mioi_bdwt = sync3_Pop_mioi_oswt_unreg & run_wen;
  assign sync3_Pop_mioi_biwt = sync3_Pop_mioi_ogwt & sync3_Pop_mioi_ivld;
  assign sync3_Pop_mioi_ogwt = ((~ run_wten) & sync3_Pop_mioi_iswt0) | sync3_Pop_mioi_icwt;
  assign sync3_Pop_mioi_irdy_run_sct = sync3_Pop_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      sync3_Pop_mioi_icwt <= sync3_Pop_mioi_ogwt & (~ sync3_Pop_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp (
  clk, rst, sync2_Push_mioi_oswt_unreg, sync2_Push_mioi_bawt, sync2_Push_mioi_wen_comp,
      sync2_Push_mioi_biwt, sync2_Push_mioi_bdwt
);
  input clk;
  input rst;
  input sync2_Push_mioi_oswt_unreg;
  output sync2_Push_mioi_bawt;
  output sync2_Push_mioi_wen_comp;
  input sync2_Push_mioi_biwt;
  input sync2_Push_mioi_bdwt;


  // Interconnect Declarations
  reg sync2_Push_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync2_Push_mioi_bawt = sync2_Push_mioi_biwt | sync2_Push_mioi_bcwt;
  assign sync2_Push_mioi_wen_comp = (~ sync2_Push_mioi_oswt_unreg) | sync2_Push_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Push_mioi_bcwt <= 1'b0;
    end
    else begin
      sync2_Push_mioi_bcwt <= ~((~(sync2_Push_mioi_bcwt | sync2_Push_mioi_biwt))
          | sync2_Push_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync2_Push_mioi_oswt_unreg, sync2_Push_mioi_iswt0,
      sync2_Push_mioi_biwt, sync2_Push_mioi_bdwt, sync2_Push_mioi_ivld_run_sct, sync2_Push_mioi_irdy
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync2_Push_mioi_oswt_unreg;
  input sync2_Push_mioi_iswt0;
  output sync2_Push_mioi_biwt;
  output sync2_Push_mioi_bdwt;
  output sync2_Push_mioi_ivld_run_sct;
  input sync2_Push_mioi_irdy;


  // Interconnect Declarations
  wire sync2_Push_mioi_ogwt;
  reg sync2_Push_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync2_Push_mioi_bdwt = sync2_Push_mioi_oswt_unreg & run_wen;
  assign sync2_Push_mioi_biwt = sync2_Push_mioi_ogwt & sync2_Push_mioi_irdy;
  assign sync2_Push_mioi_ogwt = ((~ run_wten) & sync2_Push_mioi_iswt0) | sync2_Push_mioi_icwt;
  assign sync2_Push_mioi_ivld_run_sct = sync2_Push_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Push_mioi_icwt <= 1'b0;
    end
    else begin
      sync2_Push_mioi_icwt <= sync2_Push_mioi_ogwt & (~ sync2_Push_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp (
  clk, rst, sync1_Push_mioi_oswt_unreg, sync1_Push_mioi_bawt, sync1_Push_mioi_wen_comp,
      sync1_Push_mioi_biwt, sync1_Push_mioi_bdwt
);
  input clk;
  input rst;
  input sync1_Push_mioi_oswt_unreg;
  output sync1_Push_mioi_bawt;
  output sync1_Push_mioi_wen_comp;
  input sync1_Push_mioi_biwt;
  input sync1_Push_mioi_bdwt;


  // Interconnect Declarations
  reg sync1_Push_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Push_mioi_bawt = sync1_Push_mioi_biwt | sync1_Push_mioi_bcwt;
  assign sync1_Push_mioi_wen_comp = (~ sync1_Push_mioi_oswt_unreg) | sync1_Push_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Push_mioi_bcwt <= 1'b0;
    end
    else begin
      sync1_Push_mioi_bcwt <= ~((~(sync1_Push_mioi_bcwt | sync1_Push_mioi_biwt))
          | sync1_Push_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync1_Push_mioi_oswt_unreg, sync1_Push_mioi_iswt0,
      sync1_Push_mioi_biwt, sync1_Push_mioi_bdwt, sync1_Push_mioi_ivld_run_sct, sync1_Push_mioi_irdy
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync1_Push_mioi_oswt_unreg;
  input sync1_Push_mioi_iswt0;
  output sync1_Push_mioi_biwt;
  output sync1_Push_mioi_bdwt;
  output sync1_Push_mioi_ivld_run_sct;
  input sync1_Push_mioi_irdy;


  // Interconnect Declarations
  wire sync1_Push_mioi_ogwt;
  reg sync1_Push_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Push_mioi_bdwt = sync1_Push_mioi_oswt_unreg & run_wen;
  assign sync1_Push_mioi_biwt = sync1_Push_mioi_ogwt & sync1_Push_mioi_irdy;
  assign sync1_Push_mioi_ogwt = ((~ run_wten) & sync1_Push_mioi_iswt0) | sync1_Push_mioi_icwt;
  assign sync1_Push_mioi_ivld_run_sct = sync1_Push_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Push_mioi_icwt <= 1'b0;
    end
    else begin
      sync1_Push_mioi_icwt <= sync1_Push_mioi_ogwt & (~ sync1_Push_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_14_64_16384_16384_64_1_gen
// ------------------------------------------------------------------


module InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_14_64_16384_16384_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [13:0] radr;
  output we;
  output [63:0] d;
  output [13:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [13:0] radr_d;
  input [13:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_staller
// ------------------------------------------------------------------


module InputBuffer_run_staller (
  clk, rst, run_wen, run_wten, sync1_Pop_mioi_wen_comp, dma_read_ctrl_Push_mioi_wen_comp,
      dma_read_chnl_Pop_mioi_wen_comp, rotate_in_Push_mioi_wen_comp, run_flen_unreg
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  reg run_wten;
  input sync1_Pop_mioi_wen_comp;
  input dma_read_ctrl_Push_mioi_wen_comp;
  input dma_read_chnl_Pop_mioi_wen_comp;
  input rotate_in_Push_mioi_wen_comp;
  input run_flen_unreg;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = sync1_Pop_mioi_wen_comp & dma_read_ctrl_Push_mioi_wen_comp & dma_read_chnl_Pop_mioi_wen_comp
      & rotate_in_Push_mioi_wen_comp & (~ run_flen_unreg);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten <= 1'b0;
    end
    else begin
      run_wten <= ~ run_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_dp
// ------------------------------------------------------------------


module InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_dp (
  clk, rst, rotate_in_Push_mioi_oswt_unreg, rotate_in_Push_mioi_bawt, rotate_in_Push_mioi_wen_comp,
      rotate_in_Push_mioi_biwt, rotate_in_Push_mioi_bdwt
);
  input clk;
  input rst;
  input rotate_in_Push_mioi_oswt_unreg;
  output rotate_in_Push_mioi_bawt;
  output rotate_in_Push_mioi_wen_comp;
  input rotate_in_Push_mioi_biwt;
  input rotate_in_Push_mioi_bdwt;


  // Interconnect Declarations
  reg rotate_in_Push_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_in_Push_mioi_bawt = rotate_in_Push_mioi_biwt | rotate_in_Push_mioi_bcwt;
  assign rotate_in_Push_mioi_wen_comp = (~ rotate_in_Push_mioi_oswt_unreg) | rotate_in_Push_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_bcwt <= 1'b0;
    end
    else begin
      rotate_in_Push_mioi_bcwt <= ~((~(rotate_in_Push_mioi_bcwt | rotate_in_Push_mioi_biwt))
          | rotate_in_Push_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, rotate_in_Push_mioi_oswt_unreg, rotate_in_Push_mioi_iswt0,
      rotate_in_Push_mioi_biwt, rotate_in_Push_mioi_bdwt, rotate_in_Push_mioi_ivld_run_sct,
      rotate_in_Push_mioi_irdy
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input rotate_in_Push_mioi_oswt_unreg;
  input rotate_in_Push_mioi_iswt0;
  output rotate_in_Push_mioi_biwt;
  output rotate_in_Push_mioi_bdwt;
  output rotate_in_Push_mioi_ivld_run_sct;
  input rotate_in_Push_mioi_irdy;


  // Interconnect Declarations
  wire rotate_in_Push_mioi_ogwt;
  reg rotate_in_Push_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_in_Push_mioi_bdwt = rotate_in_Push_mioi_oswt_unreg & run_wen;
  assign rotate_in_Push_mioi_biwt = rotate_in_Push_mioi_ogwt & rotate_in_Push_mioi_irdy;
  assign rotate_in_Push_mioi_ogwt = ((~ run_wten) & rotate_in_Push_mioi_iswt0) |
      rotate_in_Push_mioi_icwt;
  assign rotate_in_Push_mioi_ivld_run_sct = rotate_in_Push_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_icwt <= 1'b0;
    end
    else begin
      rotate_in_Push_mioi_icwt <= rotate_in_Push_mioi_ogwt & (~ rotate_in_Push_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_dp
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_dp (
  clk, rst, dma_read_chnl_Pop_mioi_oswt_unreg, dma_read_chnl_Pop_mioi_bawt, dma_read_chnl_Pop_mioi_wen_comp,
      dma_read_chnl_Pop_mioi_idat_mxwt, dma_read_chnl_Pop_mioi_biwt, dma_read_chnl_Pop_mioi_bdwt,
      dma_read_chnl_Pop_mioi_idat
);
  input clk;
  input rst;
  input dma_read_chnl_Pop_mioi_oswt_unreg;
  output dma_read_chnl_Pop_mioi_bawt;
  output dma_read_chnl_Pop_mioi_wen_comp;
  output [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;
  input dma_read_chnl_Pop_mioi_biwt;
  input dma_read_chnl_Pop_mioi_bdwt;
  input [63:0] dma_read_chnl_Pop_mioi_idat;


  // Interconnect Declarations
  reg dma_read_chnl_Pop_mioi_bcwt;
  reg [63:0] dma_read_chnl_Pop_mioi_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_read_chnl_Pop_mioi_bawt = dma_read_chnl_Pop_mioi_biwt | dma_read_chnl_Pop_mioi_bcwt;
  assign dma_read_chnl_Pop_mioi_wen_comp = (~ dma_read_chnl_Pop_mioi_oswt_unreg)
      | dma_read_chnl_Pop_mioi_bawt;
  assign dma_read_chnl_Pop_mioi_idat_mxwt = MUX_v_64_2_2(dma_read_chnl_Pop_mioi_idat,
      dma_read_chnl_Pop_mioi_idat_bfwt, dma_read_chnl_Pop_mioi_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_chnl_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      dma_read_chnl_Pop_mioi_bcwt <= ~((~(dma_read_chnl_Pop_mioi_bcwt | dma_read_chnl_Pop_mioi_biwt))
          | dma_read_chnl_Pop_mioi_bdwt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_chnl_Pop_mioi_idat_bfwt <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( dma_read_chnl_Pop_mioi_biwt ) begin
      dma_read_chnl_Pop_mioi_idat_bfwt <= dma_read_chnl_Pop_mioi_idat;
    end
  end

  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input  sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, dma_read_chnl_Pop_mioi_oswt_unreg, dma_read_chnl_Pop_mioi_iswt0,
      dma_read_chnl_Pop_mioi_biwt, dma_read_chnl_Pop_mioi_bdwt, dma_read_chnl_Pop_mioi_ivld,
      dma_read_chnl_Pop_mioi_irdy_run_sct
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input dma_read_chnl_Pop_mioi_oswt_unreg;
  input dma_read_chnl_Pop_mioi_iswt0;
  output dma_read_chnl_Pop_mioi_biwt;
  output dma_read_chnl_Pop_mioi_bdwt;
  input dma_read_chnl_Pop_mioi_ivld;
  output dma_read_chnl_Pop_mioi_irdy_run_sct;


  // Interconnect Declarations
  wire dma_read_chnl_Pop_mioi_ogwt;
  reg dma_read_chnl_Pop_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_read_chnl_Pop_mioi_bdwt = dma_read_chnl_Pop_mioi_oswt_unreg & run_wen;
  assign dma_read_chnl_Pop_mioi_biwt = dma_read_chnl_Pop_mioi_ogwt & dma_read_chnl_Pop_mioi_ivld;
  assign dma_read_chnl_Pop_mioi_ogwt = ((~ run_wten) & dma_read_chnl_Pop_mioi_iswt0)
      | dma_read_chnl_Pop_mioi_icwt;
  assign dma_read_chnl_Pop_mioi_irdy_run_sct = dma_read_chnl_Pop_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_chnl_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      dma_read_chnl_Pop_mioi_icwt <= dma_read_chnl_Pop_mioi_ogwt & (~ dma_read_chnl_Pop_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_dp
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_dp (
  clk, rst, dma_read_ctrl_Push_mioi_oswt_unreg, dma_read_ctrl_Push_mioi_bawt, dma_read_ctrl_Push_mioi_wen_comp,
      dma_read_ctrl_Push_mioi_biwt, dma_read_ctrl_Push_mioi_bdwt
);
  input clk;
  input rst;
  input dma_read_ctrl_Push_mioi_oswt_unreg;
  output dma_read_ctrl_Push_mioi_bawt;
  output dma_read_ctrl_Push_mioi_wen_comp;
  input dma_read_ctrl_Push_mioi_biwt;
  input dma_read_ctrl_Push_mioi_bdwt;


  // Interconnect Declarations
  reg dma_read_ctrl_Push_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_read_ctrl_Push_mioi_bawt = dma_read_ctrl_Push_mioi_biwt | dma_read_ctrl_Push_mioi_bcwt;
  assign dma_read_ctrl_Push_mioi_wen_comp = (~ dma_read_ctrl_Push_mioi_oswt_unreg)
      | dma_read_ctrl_Push_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_ctrl_Push_mioi_bcwt <= 1'b0;
    end
    else begin
      dma_read_ctrl_Push_mioi_bcwt <= ~((~(dma_read_ctrl_Push_mioi_bcwt | dma_read_ctrl_Push_mioi_biwt))
          | dma_read_ctrl_Push_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, dma_read_ctrl_Push_mioi_oswt_unreg, dma_read_ctrl_Push_mioi_iswt0,
      dma_read_ctrl_Push_mioi_biwt, dma_read_ctrl_Push_mioi_bdwt, dma_read_ctrl_Push_mioi_ivld_run_sct,
      dma_read_ctrl_Push_mioi_irdy
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input dma_read_ctrl_Push_mioi_oswt_unreg;
  input dma_read_ctrl_Push_mioi_iswt0;
  output dma_read_ctrl_Push_mioi_biwt;
  output dma_read_ctrl_Push_mioi_bdwt;
  output dma_read_ctrl_Push_mioi_ivld_run_sct;
  input dma_read_ctrl_Push_mioi_irdy;


  // Interconnect Declarations
  wire dma_read_ctrl_Push_mioi_ogwt;
  reg dma_read_ctrl_Push_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_read_ctrl_Push_mioi_bdwt = dma_read_ctrl_Push_mioi_oswt_unreg & run_wen;
  assign dma_read_ctrl_Push_mioi_biwt = dma_read_ctrl_Push_mioi_ogwt & dma_read_ctrl_Push_mioi_irdy;
  assign dma_read_ctrl_Push_mioi_ogwt = ((~ run_wten) & dma_read_ctrl_Push_mioi_iswt0)
      | dma_read_ctrl_Push_mioi_icwt;
  assign dma_read_ctrl_Push_mioi_ivld_run_sct = dma_read_ctrl_Push_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_ctrl_Push_mioi_icwt <= 1'b0;
    end
    else begin
      dma_read_ctrl_Push_mioi_icwt <= dma_read_ctrl_Push_mioi_ogwt & (~ dma_read_ctrl_Push_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_dp
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_dp (
  clk, rst, sync1_Pop_mioi_oswt_unreg, sync1_Pop_mioi_bawt, sync1_Pop_mioi_wen_comp,
      sync1_Pop_mioi_biwt, sync1_Pop_mioi_bdwt
);
  input clk;
  input rst;
  input sync1_Pop_mioi_oswt_unreg;
  output sync1_Pop_mioi_bawt;
  output sync1_Pop_mioi_wen_comp;
  input sync1_Pop_mioi_biwt;
  input sync1_Pop_mioi_bdwt;


  // Interconnect Declarations
  reg sync1_Pop_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Pop_mioi_bawt = sync1_Pop_mioi_biwt | sync1_Pop_mioi_bcwt;
  assign sync1_Pop_mioi_wen_comp = (~ sync1_Pop_mioi_oswt_unreg) | sync1_Pop_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      sync1_Pop_mioi_bcwt <= ~((~(sync1_Pop_mioi_bcwt | sync1_Pop_mioi_biwt)) | sync1_Pop_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync1_Pop_mioi_oswt_unreg, sync1_Pop_mioi_iswt0, sync1_Pop_mioi_biwt,
      sync1_Pop_mioi_bdwt, sync1_Pop_mioi_ivld, sync1_Pop_mioi_irdy_run_sct
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync1_Pop_mioi_oswt_unreg;
  input sync1_Pop_mioi_iswt0;
  output sync1_Pop_mioi_biwt;
  output sync1_Pop_mioi_bdwt;
  input sync1_Pop_mioi_ivld;
  output sync1_Pop_mioi_irdy_run_sct;


  // Interconnect Declarations
  wire sync1_Pop_mioi_ogwt;
  reg sync1_Pop_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync1_Pop_mioi_bdwt = sync1_Pop_mioi_oswt_unreg & run_wen;
  assign sync1_Pop_mioi_biwt = sync1_Pop_mioi_ogwt & sync1_Pop_mioi_ivld;
  assign sync1_Pop_mioi_ogwt = ((~ run_wten) & sync1_Pop_mioi_iswt0) | sync1_Pop_mioi_icwt;
  assign sync1_Pop_mioi_irdy_run_sct = sync1_Pop_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync1_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      sync1_Pop_mioi_icwt <= sync1_Pop_mioi_ogwt & (~ sync1_Pop_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module Rotate_run_run_fsm (
  clk, rst, run_wen, fsm_output
);
  input clk;
  input rst;
  input run_wen;
  output [4:0] fsm_output;
  reg [4:0] fsm_output;


  // FSM State Type Declaration for Rotate_run_run_fsm_1
  parameter
    run_rlp_C_0 = 3'd0,
    while_C_0 = 3'd1,
    while_C_1 = 3'd2,
    while_C_2 = 3'd3,
    while_C_3 = 3'd4;

  reg [2:0] state_var;
  reg [2:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : Rotate_run_run_fsm_1
    case (state_var)
      while_C_0 : begin
        fsm_output = 5'b00010;
        state_var_NS = while_C_1;
      end
      while_C_1 : begin
        fsm_output = 5'b00100;
        state_var_NS = while_C_2;
      end
      while_C_2 : begin
        fsm_output = 5'b01000;
        state_var_NS = while_C_3;
      end
      while_C_3 : begin
        fsm_output = 5'b10000;
        state_var_NS = while_C_0;
      end
      // run_rlp_C_0
      default : begin
        fsm_output = 5'b00001;
        state_var_NS = while_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      state_var <= run_rlp_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_staller
// ------------------------------------------------------------------


module Rotate_run_staller (
  clk, rst, run_wen, run_wten, rotate_in_Pop_mioi_iden, rotate_in_Pop_mioi_iden_1,
      rotate_in_Pop_mioi_wen_comp, rotate_out_Push_mioi_iden, rotate_out_Push_mioi_iden_1,
      rotate_out_Push_mioi_wen_comp, run_flen_unreg
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  reg run_wten;
  input rotate_in_Pop_mioi_iden;
  input rotate_in_Pop_mioi_iden_1;
  input rotate_in_Pop_mioi_wen_comp;
  input rotate_out_Push_mioi_iden;
  input rotate_out_Push_mioi_iden_1;
  input rotate_out_Push_mioi_wen_comp;
  input run_flen_unreg;


  // Interconnect Declarations
  reg run_flen_shf_3;
  reg run_flen_shf_2;
  reg run_flen_shf_1;
  reg run_flen_shf_0;


  // Interconnect Declarations for Component Instantiations 
  assign run_wen = rotate_in_Pop_mioi_wen_comp & rotate_out_Push_mioi_wen_comp &
      (~(run_flen_shf_3 & run_flen_shf_2 & run_flen_shf_1 & run_flen_shf_0 & run_flen_unreg));
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_flen_shf_3 <= 1'b0;
      run_flen_shf_2 <= 1'b0;
      run_flen_shf_1 <= 1'b0;
      run_flen_shf_0 <= 1'b0;
      run_wten <= 1'b0;
    end
    else begin
      run_flen_shf_3 <= run_flen_shf_2;
      run_flen_shf_2 <= run_flen_shf_1;
      run_flen_shf_1 <= run_flen_shf_0;
      run_flen_shf_0 <= run_flen_unreg & (~(rotate_in_Pop_mioi_iden | rotate_in_Pop_mioi_iden_1
          | rotate_out_Push_mioi_iden | rotate_out_Push_mioi_iden_1));
      run_wten <= ~ run_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_dp
// ------------------------------------------------------------------


module Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_dp (
  clk, rst, rotate_out_Push_mioi_oswt_unreg, rotate_out_Push_mioi_bawt, rotate_out_Push_mioi_iden,
      rotate_out_Push_mioi_wen_comp, rotate_out_Push_mioi_biwt, rotate_out_Push_mioi_bdwt
);
  input clk;
  input rst;
  input rotate_out_Push_mioi_oswt_unreg;
  output rotate_out_Push_mioi_bawt;
  output rotate_out_Push_mioi_iden;
  output rotate_out_Push_mioi_wen_comp;
  input rotate_out_Push_mioi_biwt;
  input rotate_out_Push_mioi_bdwt;


  // Interconnect Declarations
  reg rotate_out_Push_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_out_Push_mioi_iden = rotate_out_Push_mioi_biwt | rotate_out_Push_mioi_bdwt;
  assign rotate_out_Push_mioi_bawt = rotate_out_Push_mioi_biwt | rotate_out_Push_mioi_bcwt;
  assign rotate_out_Push_mioi_wen_comp = (~ rotate_out_Push_mioi_oswt_unreg) | rotate_out_Push_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_out_Push_mioi_bcwt <= 1'b0;
    end
    else begin
      rotate_out_Push_mioi_bcwt <= ~((~(rotate_out_Push_mioi_bcwt | rotate_out_Push_mioi_biwt))
          | rotate_out_Push_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, rotate_out_Push_mioi_oswt_unreg, rotate_out_Push_mioi_iswt0,
      rotate_out_Push_mioi_iden_1, rotate_out_Push_mioi_biwt, rotate_out_Push_mioi_bdwt,
      rotate_out_Push_mioi_irdy
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input rotate_out_Push_mioi_oswt_unreg;
  input rotate_out_Push_mioi_iswt0;
  output rotate_out_Push_mioi_iden_1;
  output rotate_out_Push_mioi_biwt;
  output rotate_out_Push_mioi_bdwt;
  input rotate_out_Push_mioi_irdy;


  // Interconnect Declarations
  wire rotate_out_Push_mioi_ogwt;
  reg rotate_out_Push_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_out_Push_mioi_bdwt = rotate_out_Push_mioi_oswt_unreg & run_wen;
  assign rotate_out_Push_mioi_biwt = rotate_out_Push_mioi_ogwt & rotate_out_Push_mioi_irdy;
  assign rotate_out_Push_mioi_ogwt = ((~ run_wten) & rotate_out_Push_mioi_iswt0)
      | rotate_out_Push_mioi_icwt;
  assign rotate_out_Push_mioi_iden_1 = rotate_out_Push_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_out_Push_mioi_icwt <= 1'b0;
    end
    else begin
      rotate_out_Push_mioi_icwt <= rotate_out_Push_mioi_ogwt & (~ rotate_out_Push_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_dp
// ------------------------------------------------------------------


module Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_dp (
  clk, rst, rotate_in_Pop_mioi_oswt_unreg, rotate_in_Pop_mioi_bawt, rotate_in_Pop_mioi_iden,
      rotate_in_Pop_mioi_wen_comp, rotate_in_Pop_mioi_idat_mxwt, rotate_in_Pop_mioi_biwt,
      rotate_in_Pop_mioi_bdwt, rotate_in_Pop_mioi_idat
);
  input clk;
  input rst;
  input rotate_in_Pop_mioi_oswt_unreg;
  output rotate_in_Pop_mioi_bawt;
  output rotate_in_Pop_mioi_iden;
  output rotate_in_Pop_mioi_wen_comp;
  output [479:0] rotate_in_Pop_mioi_idat_mxwt;
  input rotate_in_Pop_mioi_biwt;
  input rotate_in_Pop_mioi_bdwt;
  input [511:0] rotate_in_Pop_mioi_idat;


  // Interconnect Declarations
  reg rotate_in_Pop_mioi_bcwt;
  reg [479:0] rotate_in_Pop_mioi_idat_bfwt_511_32;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_in_Pop_mioi_iden = rotate_in_Pop_mioi_biwt | rotate_in_Pop_mioi_bdwt;
  assign rotate_in_Pop_mioi_bawt = rotate_in_Pop_mioi_biwt | rotate_in_Pop_mioi_bcwt;
  assign rotate_in_Pop_mioi_wen_comp = (~ rotate_in_Pop_mioi_oswt_unreg) | rotate_in_Pop_mioi_bawt;
  assign rotate_in_Pop_mioi_idat_mxwt = MUX_v_480_2_2((rotate_in_Pop_mioi_idat[511:32]),
      rotate_in_Pop_mioi_idat_bfwt_511_32, rotate_in_Pop_mioi_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      rotate_in_Pop_mioi_bcwt <= ~((~(rotate_in_Pop_mioi_bcwt | rotate_in_Pop_mioi_biwt))
          | rotate_in_Pop_mioi_bdwt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Pop_mioi_idat_bfwt_511_32 <= 480'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( rotate_in_Pop_mioi_biwt ) begin
      rotate_in_Pop_mioi_idat_bfwt_511_32 <= rotate_in_Pop_mioi_idat[511:32];
    end
  end

  function automatic [479:0] MUX_v_480_2_2;
    input [479:0] input_0;
    input [479:0] input_1;
    input  sel;
    reg [479:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_480_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, rotate_in_Pop_mioi_oswt_unreg, rotate_in_Pop_mioi_iswt0,
      rotate_in_Pop_mioi_iden_1, rotate_in_Pop_mioi_biwt, rotate_in_Pop_mioi_bdwt,
      rotate_in_Pop_mioi_ivld
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input rotate_in_Pop_mioi_oswt_unreg;
  input rotate_in_Pop_mioi_iswt0;
  output rotate_in_Pop_mioi_iden_1;
  output rotate_in_Pop_mioi_biwt;
  output rotate_in_Pop_mioi_bdwt;
  input rotate_in_Pop_mioi_ivld;


  // Interconnect Declarations
  wire rotate_in_Pop_mioi_ogwt;
  reg rotate_in_Pop_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_in_Pop_mioi_bdwt = rotate_in_Pop_mioi_oswt_unreg & run_wen;
  assign rotate_in_Pop_mioi_biwt = rotate_in_Pop_mioi_ogwt & rotate_in_Pop_mioi_ivld;
  assign rotate_in_Pop_mioi_ogwt = ((~ run_wten) & rotate_in_Pop_mioi_iswt0) | rotate_in_Pop_mioi_icwt;
  assign rotate_in_Pop_mioi_iden_1 = rotate_in_Pop_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      rotate_in_Pop_mioi_icwt <= rotate_in_Pop_mioi_ogwt & (~ rotate_in_Pop_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
// ------------------------------------------------------------------


module OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
    (
  clken, q, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [63:0] q;
  output [13:0] radr;
  output we;
  output [63:0] d;
  output [13:0] wadr;
  input clken_d;
  input [63:0] d_d;
  output [63:0] q_d;
  input [13:0] radr_d;
  input [13:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_staller
// ------------------------------------------------------------------


module OutputBuffer_run_staller (
  clk, rst, run_wen, run_wten, sync2_Pop_mioi_wen_comp, rotate_out_Pop_mioi_wen_comp,
      dma_write_ctrl_Push_mioi_wen_comp, dma_write_chnl_Push_mioi_wen_comp, sync3_Push_mioi_wen_comp,
      run_flen_unreg
);
  input clk;
  input rst;
  output run_wen;
  output run_wten;
  reg run_wten;
  input sync2_Pop_mioi_wen_comp;
  input rotate_out_Pop_mioi_wen_comp;
  input dma_write_ctrl_Push_mioi_wen_comp;
  input dma_write_chnl_Push_mioi_wen_comp;
  input sync3_Push_mioi_wen_comp;
  input run_flen_unreg;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = sync2_Pop_mioi_wen_comp & rotate_out_Pop_mioi_wen_comp & dma_write_ctrl_Push_mioi_wen_comp
      & dma_write_chnl_Push_mioi_wen_comp & sync3_Push_mioi_wen_comp & (~ run_flen_unreg);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      run_wten <= 1'b0;
    end
    else begin
      run_wten <= ~ run_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_dp (
  clk, rst, sync3_Push_mioi_oswt_unreg, sync3_Push_mioi_bawt, sync3_Push_mioi_wen_comp,
      sync3_Push_mioi_biwt, sync3_Push_mioi_bdwt
);
  input clk;
  input rst;
  input sync3_Push_mioi_oswt_unreg;
  output sync3_Push_mioi_bawt;
  output sync3_Push_mioi_wen_comp;
  input sync3_Push_mioi_biwt;
  input sync3_Push_mioi_bdwt;


  // Interconnect Declarations
  reg sync3_Push_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync3_Push_mioi_bawt = sync3_Push_mioi_biwt | sync3_Push_mioi_bcwt;
  assign sync3_Push_mioi_wen_comp = (~ sync3_Push_mioi_oswt_unreg) | sync3_Push_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Push_mioi_bcwt <= 1'b0;
    end
    else begin
      sync3_Push_mioi_bcwt <= ~((~(sync3_Push_mioi_bcwt | sync3_Push_mioi_biwt))
          | sync3_Push_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync3_Push_mioi_oswt_unreg, sync3_Push_mioi_iswt0,
      sync3_Push_mioi_biwt, sync3_Push_mioi_bdwt, sync3_Push_mioi_ivld_run_sct, sync3_Push_mioi_irdy
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync3_Push_mioi_oswt_unreg;
  input sync3_Push_mioi_iswt0;
  output sync3_Push_mioi_biwt;
  output sync3_Push_mioi_bdwt;
  output sync3_Push_mioi_ivld_run_sct;
  input sync3_Push_mioi_irdy;


  // Interconnect Declarations
  wire sync3_Push_mioi_ogwt;
  reg sync3_Push_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync3_Push_mioi_bdwt = sync3_Push_mioi_oswt_unreg & run_wen;
  assign sync3_Push_mioi_biwt = sync3_Push_mioi_ogwt & sync3_Push_mioi_irdy;
  assign sync3_Push_mioi_ogwt = ((~ run_wten) & sync3_Push_mioi_iswt0) | sync3_Push_mioi_icwt;
  assign sync3_Push_mioi_ivld_run_sct = sync3_Push_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync3_Push_mioi_icwt <= 1'b0;
    end
    else begin
      sync3_Push_mioi_icwt <= sync3_Push_mioi_ogwt & (~ sync3_Push_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_dp
    (
  clk, rst, dma_write_chnl_Push_mioi_oswt_unreg, dma_write_chnl_Push_mioi_bawt, dma_write_chnl_Push_mioi_wen_comp,
      dma_write_chnl_Push_mioi_biwt, dma_write_chnl_Push_mioi_bdwt
);
  input clk;
  input rst;
  input dma_write_chnl_Push_mioi_oswt_unreg;
  output dma_write_chnl_Push_mioi_bawt;
  output dma_write_chnl_Push_mioi_wen_comp;
  input dma_write_chnl_Push_mioi_biwt;
  input dma_write_chnl_Push_mioi_bdwt;


  // Interconnect Declarations
  reg dma_write_chnl_Push_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_write_chnl_Push_mioi_bawt = dma_write_chnl_Push_mioi_biwt | dma_write_chnl_Push_mioi_bcwt;
  assign dma_write_chnl_Push_mioi_wen_comp = (~ dma_write_chnl_Push_mioi_oswt_unreg)
      | dma_write_chnl_Push_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_chnl_Push_mioi_bcwt <= 1'b0;
    end
    else begin
      dma_write_chnl_Push_mioi_bcwt <= ~((~(dma_write_chnl_Push_mioi_bcwt | dma_write_chnl_Push_mioi_biwt))
          | dma_write_chnl_Push_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl
    (
  clk, rst, run_wen, run_wten, dma_write_chnl_Push_mioi_oswt_unreg, dma_write_chnl_Push_mioi_iswt0,
      dma_write_chnl_Push_mioi_biwt, dma_write_chnl_Push_mioi_bdwt, dma_write_chnl_Push_mioi_ivld_run_sct,
      dma_write_chnl_Push_mioi_irdy
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input dma_write_chnl_Push_mioi_oswt_unreg;
  input dma_write_chnl_Push_mioi_iswt0;
  output dma_write_chnl_Push_mioi_biwt;
  output dma_write_chnl_Push_mioi_bdwt;
  output dma_write_chnl_Push_mioi_ivld_run_sct;
  input dma_write_chnl_Push_mioi_irdy;


  // Interconnect Declarations
  wire dma_write_chnl_Push_mioi_ogwt;
  reg dma_write_chnl_Push_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_write_chnl_Push_mioi_bdwt = dma_write_chnl_Push_mioi_oswt_unreg & run_wen;
  assign dma_write_chnl_Push_mioi_biwt = dma_write_chnl_Push_mioi_ogwt & dma_write_chnl_Push_mioi_irdy;
  assign dma_write_chnl_Push_mioi_ogwt = ((~ run_wten) & dma_write_chnl_Push_mioi_iswt0)
      | dma_write_chnl_Push_mioi_icwt;
  assign dma_write_chnl_Push_mioi_ivld_run_sct = dma_write_chnl_Push_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_chnl_Push_mioi_icwt <= 1'b0;
    end
    else begin
      dma_write_chnl_Push_mioi_icwt <= dma_write_chnl_Push_mioi_ogwt & (~ dma_write_chnl_Push_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_dp
    (
  clk, rst, dma_write_ctrl_Push_mioi_oswt_unreg, dma_write_ctrl_Push_mioi_bawt, dma_write_ctrl_Push_mioi_wen_comp,
      dma_write_ctrl_Push_mioi_biwt, dma_write_ctrl_Push_mioi_bdwt
);
  input clk;
  input rst;
  input dma_write_ctrl_Push_mioi_oswt_unreg;
  output dma_write_ctrl_Push_mioi_bawt;
  output dma_write_ctrl_Push_mioi_wen_comp;
  input dma_write_ctrl_Push_mioi_biwt;
  input dma_write_ctrl_Push_mioi_bdwt;


  // Interconnect Declarations
  reg dma_write_ctrl_Push_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_write_ctrl_Push_mioi_bawt = dma_write_ctrl_Push_mioi_biwt | dma_write_ctrl_Push_mioi_bcwt;
  assign dma_write_ctrl_Push_mioi_wen_comp = (~ dma_write_ctrl_Push_mioi_oswt_unreg)
      | dma_write_ctrl_Push_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_ctrl_Push_mioi_bcwt <= 1'b0;
    end
    else begin
      dma_write_ctrl_Push_mioi_bcwt <= ~((~(dma_write_ctrl_Push_mioi_bcwt | dma_write_ctrl_Push_mioi_biwt))
          | dma_write_ctrl_Push_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl
    (
  clk, rst, run_wen, run_wten, dma_write_ctrl_Push_mioi_oswt_unreg, dma_write_ctrl_Push_mioi_iswt0,
      dma_write_ctrl_Push_mioi_biwt, dma_write_ctrl_Push_mioi_bdwt, dma_write_ctrl_Push_mioi_ivld_run_sct,
      dma_write_ctrl_Push_mioi_irdy
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input dma_write_ctrl_Push_mioi_oswt_unreg;
  input dma_write_ctrl_Push_mioi_iswt0;
  output dma_write_ctrl_Push_mioi_biwt;
  output dma_write_ctrl_Push_mioi_bdwt;
  output dma_write_ctrl_Push_mioi_ivld_run_sct;
  input dma_write_ctrl_Push_mioi_irdy;


  // Interconnect Declarations
  wire dma_write_ctrl_Push_mioi_ogwt;
  reg dma_write_ctrl_Push_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign dma_write_ctrl_Push_mioi_bdwt = dma_write_ctrl_Push_mioi_oswt_unreg & run_wen;
  assign dma_write_ctrl_Push_mioi_biwt = dma_write_ctrl_Push_mioi_ogwt & dma_write_ctrl_Push_mioi_irdy;
  assign dma_write_ctrl_Push_mioi_ogwt = ((~ run_wten) & dma_write_ctrl_Push_mioi_iswt0)
      | dma_write_ctrl_Push_mioi_icwt;
  assign dma_write_ctrl_Push_mioi_ivld_run_sct = dma_write_ctrl_Push_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_ctrl_Push_mioi_icwt <= 1'b0;
    end
    else begin
      dma_write_ctrl_Push_mioi_icwt <= dma_write_ctrl_Push_mioi_ogwt & (~ dma_write_ctrl_Push_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_dp (
  clk, rst, rotate_out_Pop_mioi_oswt_unreg, rotate_out_Pop_mioi_bawt, rotate_out_Pop_mioi_wen_comp,
      rotate_out_Pop_mioi_idat_mxwt, rotate_out_Pop_mioi_biwt, rotate_out_Pop_mioi_bdwt,
      rotate_out_Pop_mioi_idat
);
  input clk;
  input rst;
  input rotate_out_Pop_mioi_oswt_unreg;
  output rotate_out_Pop_mioi_bawt;
  output rotate_out_Pop_mioi_wen_comp;
  output [511:0] rotate_out_Pop_mioi_idat_mxwt;
  input rotate_out_Pop_mioi_biwt;
  input rotate_out_Pop_mioi_bdwt;
  input [511:0] rotate_out_Pop_mioi_idat;


  // Interconnect Declarations
  reg rotate_out_Pop_mioi_bcwt;
  reg [511:0] rotate_out_Pop_mioi_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_out_Pop_mioi_bawt = rotate_out_Pop_mioi_biwt | rotate_out_Pop_mioi_bcwt;
  assign rotate_out_Pop_mioi_wen_comp = (~ rotate_out_Pop_mioi_oswt_unreg) | rotate_out_Pop_mioi_bawt;
  assign rotate_out_Pop_mioi_idat_mxwt = MUX_v_512_2_2(rotate_out_Pop_mioi_idat,
      rotate_out_Pop_mioi_idat_bfwt, rotate_out_Pop_mioi_bcwt);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_out_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      rotate_out_Pop_mioi_bcwt <= ~((~(rotate_out_Pop_mioi_bcwt | rotate_out_Pop_mioi_biwt))
          | rotate_out_Pop_mioi_bdwt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_out_Pop_mioi_idat_bfwt <= 512'b
    end
    else if ( rotate_out_Pop_mioi_biwt ) begin
      rotate_out_Pop_mioi_idat_bfwt <= rotate_out_Pop_mioi_idat;
    end
  end

  function automatic [511:0] MUX_v_512_2_2;
    input [511:0] input_0;
    input [511:0] input_1;
    input  sel;
    reg [511:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_512_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, rotate_out_Pop_mioi_oswt_unreg, rotate_out_Pop_mioi_iswt0,
      rotate_out_Pop_mioi_biwt, rotate_out_Pop_mioi_bdwt, rotate_out_Pop_mioi_ivld,
      rotate_out_Pop_mioi_irdy_run_sct
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input rotate_out_Pop_mioi_oswt_unreg;
  input rotate_out_Pop_mioi_iswt0;
  output rotate_out_Pop_mioi_biwt;
  output rotate_out_Pop_mioi_bdwt;
  input rotate_out_Pop_mioi_ivld;
  output rotate_out_Pop_mioi_irdy_run_sct;


  // Interconnect Declarations
  wire rotate_out_Pop_mioi_ogwt;
  reg rotate_out_Pop_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign rotate_out_Pop_mioi_bdwt = rotate_out_Pop_mioi_oswt_unreg & run_wen;
  assign rotate_out_Pop_mioi_biwt = rotate_out_Pop_mioi_ogwt & rotate_out_Pop_mioi_ivld;
  assign rotate_out_Pop_mioi_ogwt = ((~ run_wten) & rotate_out_Pop_mioi_iswt0) |
      rotate_out_Pop_mioi_icwt;
  assign rotate_out_Pop_mioi_irdy_run_sct = rotate_out_Pop_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_out_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      rotate_out_Pop_mioi_icwt <= rotate_out_Pop_mioi_ogwt & (~ rotate_out_Pop_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_dp
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_dp (
  clk, rst, sync2_Pop_mioi_oswt_unreg, sync2_Pop_mioi_bawt, sync2_Pop_mioi_wen_comp,
      sync2_Pop_mioi_biwt, sync2_Pop_mioi_bdwt
);
  input clk;
  input rst;
  input sync2_Pop_mioi_oswt_unreg;
  output sync2_Pop_mioi_bawt;
  output sync2_Pop_mioi_wen_comp;
  input sync2_Pop_mioi_biwt;
  input sync2_Pop_mioi_bdwt;


  // Interconnect Declarations
  reg sync2_Pop_mioi_bcwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync2_Pop_mioi_bawt = sync2_Pop_mioi_biwt | sync2_Pop_mioi_bcwt;
  assign sync2_Pop_mioi_wen_comp = (~ sync2_Pop_mioi_oswt_unreg) | sync2_Pop_mioi_bawt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Pop_mioi_bcwt <= 1'b0;
    end
    else begin
      sync2_Pop_mioi_bcwt <= ~((~(sync2_Pop_mioi_bcwt | sync2_Pop_mioi_biwt)) | sync2_Pop_mioi_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl (
  clk, rst, run_wen, run_wten, sync2_Pop_mioi_oswt_unreg, sync2_Pop_mioi_iswt0, sync2_Pop_mioi_biwt,
      sync2_Pop_mioi_bdwt, sync2_Pop_mioi_ivld, sync2_Pop_mioi_irdy_run_sct
);
  input clk;
  input rst;
  input run_wen;
  input run_wten;
  input sync2_Pop_mioi_oswt_unreg;
  input sync2_Pop_mioi_iswt0;
  output sync2_Pop_mioi_biwt;
  output sync2_Pop_mioi_bdwt;
  input sync2_Pop_mioi_ivld;
  output sync2_Pop_mioi_irdy_run_sct;


  // Interconnect Declarations
  wire sync2_Pop_mioi_ogwt;
  reg sync2_Pop_mioi_icwt;


  // Interconnect Declarations for Component Instantiations 
  assign sync2_Pop_mioi_bdwt = sync2_Pop_mioi_oswt_unreg & run_wen;
  assign sync2_Pop_mioi_biwt = sync2_Pop_mioi_ogwt & sync2_Pop_mioi_ivld;
  assign sync2_Pop_mioi_ogwt = ((~ run_wten) & sync2_Pop_mioi_iswt0) | sync2_Pop_mioi_icwt;
  assign sync2_Pop_mioi_irdy_run_sct = sync2_Pop_mioi_ogwt;
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sync2_Pop_mioi_icwt <= 1'b0;
    end
    else begin
      sync2_Pop_mioi_icwt <= sync2_Pop_mioi_ogwt & (~ sync2_Pop_mioi_biwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync3_Pop_mioi
// ------------------------------------------------------------------


module Control_run_sync3_Pop_mioi (
  clk, rst, sync3_val, sync3_rdy, sync3_msg, run_wen, run_wten, sync3_Pop_mioi_oswt_unreg,
      sync3_Pop_mioi_bawt, sync3_Pop_mioi_iswt0, sync3_Pop_mioi_wen_comp
);
  input clk;
  input rst;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;
  input run_wen;
  input run_wten;
  input sync3_Pop_mioi_oswt_unreg;
  output sync3_Pop_mioi_bawt;
  input sync3_Pop_mioi_iswt0;
  output sync3_Pop_mioi_wen_comp;


  // Interconnect Declarations
  wire sync3_Pop_mioi_biwt;
  wire sync3_Pop_mioi_bdwt;
  wire sync3_Pop_mioi_ivld;
  wire sync3_Pop_mioi_irdy_run_sct;
  wire sync3_Pop_mioi_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd5),
  .width(32'sd1)) sync3_Pop_mioi (
      .vld(sync3_val),
      .rdy(sync3_rdy),
      .dat(sync3_msg),
      .ivld(sync3_Pop_mioi_ivld),
      .irdy(sync3_Pop_mioi_irdy_run_sct),
      .idat(sync3_Pop_mioi_idat)
    );
  Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Pop_mioi_oswt_unreg(sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_iswt0(sync3_Pop_mioi_iswt0),
      .sync3_Pop_mioi_biwt(sync3_Pop_mioi_biwt),
      .sync3_Pop_mioi_bdwt(sync3_Pop_mioi_bdwt),
      .sync3_Pop_mioi_ivld(sync3_Pop_mioi_ivld),
      .sync3_Pop_mioi_irdy_run_sct(sync3_Pop_mioi_irdy_run_sct)
    );
  Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp Control_run_sync3_Pop_mioi_sync3_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync3_Pop_mioi_oswt_unreg(sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_bawt(sync3_Pop_mioi_bawt),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp),
      .sync3_Pop_mioi_biwt(sync3_Pop_mioi_biwt),
      .sync3_Pop_mioi_bdwt(sync3_Pop_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync2_Push_mioi
// ------------------------------------------------------------------


module Control_run_sync2_Push_mioi (
  clk, rst, sync2_val, sync2_rdy, sync2_msg, run_wen, run_wten, sync2_Push_mioi_oswt_unreg,
      sync2_Push_mioi_bawt, sync2_Push_mioi_iswt0, sync2_Push_mioi_wen_comp
);
  input clk;
  input rst;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input run_wen;
  input run_wten;
  input sync2_Push_mioi_oswt_unreg;
  output sync2_Push_mioi_bawt;
  input sync2_Push_mioi_iswt0;
  output sync2_Push_mioi_wen_comp;


  // Interconnect Declarations
  wire sync2_Push_mioi_biwt;
  wire sync2_Push_mioi_bdwt;
  wire sync2_Push_mioi_ivld_run_sct;
  wire sync2_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd4),
  .width(32'sd1)) sync2_Push_mioi (
      .vld(sync2_val),
      .rdy(sync2_rdy),
      .dat(sync2_msg),
      .ivld(sync2_Push_mioi_ivld_run_sct),
      .irdy(sync2_Push_mioi_irdy),
      .idat(1'b1)
    );
  Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl Control_run_sync2_Push_mioi_sync2_Push_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync2_Push_mioi_oswt_unreg(sync2_Push_mioi_oswt_unreg),
      .sync2_Push_mioi_iswt0(sync2_Push_mioi_iswt0),
      .sync2_Push_mioi_biwt(sync2_Push_mioi_biwt),
      .sync2_Push_mioi_bdwt(sync2_Push_mioi_bdwt),
      .sync2_Push_mioi_ivld_run_sct(sync2_Push_mioi_ivld_run_sct),
      .sync2_Push_mioi_irdy(sync2_Push_mioi_irdy)
    );
  Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp Control_run_sync2_Push_mioi_sync2_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync2_Push_mioi_oswt_unreg(sync2_Push_mioi_oswt_unreg),
      .sync2_Push_mioi_bawt(sync2_Push_mioi_bawt),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp),
      .sync2_Push_mioi_biwt(sync2_Push_mioi_biwt),
      .sync2_Push_mioi_bdwt(sync2_Push_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run_sync1_Push_mioi
// ------------------------------------------------------------------


module Control_run_sync1_Push_mioi (
  clk, rst, sync1_val, sync1_rdy, sync1_msg, run_wen, run_wten, sync1_Push_mioi_oswt_unreg,
      sync1_Push_mioi_bawt, sync1_Push_mioi_iswt0, sync1_Push_mioi_wen_comp
);
  input clk;
  input rst;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  input run_wen;
  input run_wten;
  input sync1_Push_mioi_oswt_unreg;
  output sync1_Push_mioi_bawt;
  input sync1_Push_mioi_iswt0;
  output sync1_Push_mioi_wen_comp;


  // Interconnect Declarations
  wire sync1_Push_mioi_biwt;
  wire sync1_Push_mioi_bdwt;
  wire sync1_Push_mioi_ivld_run_sct;
  wire sync1_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd3),
  .width(32'sd1)) sync1_Push_mioi (
      .vld(sync1_val),
      .rdy(sync1_rdy),
      .dat(sync1_msg),
      .ivld(sync1_Push_mioi_ivld_run_sct),
      .irdy(sync1_Push_mioi_irdy),
      .idat(1'b1)
    );
  Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl Control_run_sync1_Push_mioi_sync1_Push_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync1_Push_mioi_oswt_unreg(sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_iswt0(sync1_Push_mioi_iswt0),
      .sync1_Push_mioi_biwt(sync1_Push_mioi_biwt),
      .sync1_Push_mioi_bdwt(sync1_Push_mioi_bdwt),
      .sync1_Push_mioi_ivld_run_sct(sync1_Push_mioi_ivld_run_sct),
      .sync1_Push_mioi_irdy(sync1_Push_mioi_irdy)
    );
  Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp Control_run_sync1_Push_mioi_sync1_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync1_Push_mioi_oswt_unreg(sync1_Push_mioi_oswt_unreg),
      .sync1_Push_mioi_bawt(sync1_Push_mioi_bawt),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp),
      .sync1_Push_mioi_biwt(sync1_Push_mioi_biwt),
      .sync1_Push_mioi_bdwt(sync1_Push_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_rotate_in_Push_mioi
// ------------------------------------------------------------------


module InputBuffer_run_rotate_in_Push_mioi (
  clk, rst, rotate_in_val, rotate_in_rdy, rotate_in_msg, run_wen, run_wten, rotate_in_Push_mioi_oswt_unreg,
      rotate_in_Push_mioi_bawt, rotate_in_Push_mioi_iswt0, rotate_in_Push_mioi_wen_comp,
      rotate_in_Push_mioi_idat
);
  input clk;
  input rst;
  output rotate_in_val;
  input rotate_in_rdy;
  output [511:0] rotate_in_msg;
  input run_wen;
  input run_wten;
  input rotate_in_Push_mioi_oswt_unreg;
  output rotate_in_Push_mioi_bawt;
  input rotate_in_Push_mioi_iswt0;
  output rotate_in_Push_mioi_wen_comp;
  input [511:0] rotate_in_Push_mioi_idat;


  // Interconnect Declarations
  wire rotate_in_Push_mioi_biwt;
  wire rotate_in_Push_mioi_bdwt;
  wire rotate_in_Push_mioi_ivld_run_sct;
  wire rotate_in_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd15),
  .width(32'sd512)) rotate_in_Push_mioi (
      .vld(rotate_in_val),
      .rdy(rotate_in_rdy),
      .dat(rotate_in_msg),
      .ivld(rotate_in_Push_mioi_ivld_run_sct),
      .irdy(rotate_in_Push_mioi_irdy),
      .idat(rotate_in_Push_mioi_idat)
    );
  InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_ctrl InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_in_Push_mioi_oswt_unreg(rotate_in_Push_mioi_oswt_unreg),
      .rotate_in_Push_mioi_iswt0(rotate_in_Push_mioi_iswt0),
      .rotate_in_Push_mioi_biwt(rotate_in_Push_mioi_biwt),
      .rotate_in_Push_mioi_bdwt(rotate_in_Push_mioi_bdwt),
      .rotate_in_Push_mioi_ivld_run_sct(rotate_in_Push_mioi_ivld_run_sct),
      .rotate_in_Push_mioi_irdy(rotate_in_Push_mioi_irdy)
    );
  InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_dp InputBuffer_run_rotate_in_Push_mioi_rotate_in_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .rotate_in_Push_mioi_oswt_unreg(rotate_in_Push_mioi_oswt_unreg),
      .rotate_in_Push_mioi_bawt(rotate_in_Push_mioi_bawt),
      .rotate_in_Push_mioi_wen_comp(rotate_in_Push_mioi_wen_comp),
      .rotate_in_Push_mioi_biwt(rotate_in_Push_mioi_biwt),
      .rotate_in_Push_mioi_bdwt(rotate_in_Push_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_chnl_Pop_mioi
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_chnl_Pop_mioi (
  clk, rst, dma_read_chnl_val, dma_read_chnl_rdy, dma_read_chnl_msg, run_wen, run_wten,
      dma_read_chnl_Pop_mioi_oswt_unreg, dma_read_chnl_Pop_mioi_bawt, dma_read_chnl_Pop_mioi_iswt0,
      dma_read_chnl_Pop_mioi_wen_comp, dma_read_chnl_Pop_mioi_idat_mxwt
);
  input clk;
  input rst;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  input run_wen;
  input run_wten;
  input dma_read_chnl_Pop_mioi_oswt_unreg;
  output dma_read_chnl_Pop_mioi_bawt;
  input dma_read_chnl_Pop_mioi_iswt0;
  output dma_read_chnl_Pop_mioi_wen_comp;
  output [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;


  // Interconnect Declarations
  wire dma_read_chnl_Pop_mioi_biwt;
  wire dma_read_chnl_Pop_mioi_bdwt;
  wire dma_read_chnl_Pop_mioi_ivld;
  wire dma_read_chnl_Pop_mioi_irdy_run_sct;
  wire [63:0] dma_read_chnl_Pop_mioi_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd14),
  .width(32'sd64)) dma_read_chnl_Pop_mioi (
      .vld(dma_read_chnl_val),
      .rdy(dma_read_chnl_rdy),
      .dat(dma_read_chnl_msg),
      .ivld(dma_read_chnl_Pop_mioi_ivld),
      .irdy(dma_read_chnl_Pop_mioi_irdy_run_sct),
      .idat(dma_read_chnl_Pop_mioi_idat)
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_read_chnl_Pop_mioi_oswt_unreg(dma_read_chnl_Pop_mioi_oswt_unreg),
      .dma_read_chnl_Pop_mioi_iswt0(dma_read_chnl_Pop_mioi_iswt0),
      .dma_read_chnl_Pop_mioi_biwt(dma_read_chnl_Pop_mioi_biwt),
      .dma_read_chnl_Pop_mioi_bdwt(dma_read_chnl_Pop_mioi_bdwt),
      .dma_read_chnl_Pop_mioi_ivld(dma_read_chnl_Pop_mioi_ivld),
      .dma_read_chnl_Pop_mioi_irdy_run_sct(dma_read_chnl_Pop_mioi_irdy_run_sct)
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_dp InputBuffer_run_dma_read_chnl_Pop_mioi_dma_read_chnl_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_chnl_Pop_mioi_oswt_unreg(dma_read_chnl_Pop_mioi_oswt_unreg),
      .dma_read_chnl_Pop_mioi_bawt(dma_read_chnl_Pop_mioi_bawt),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp),
      .dma_read_chnl_Pop_mioi_idat_mxwt(dma_read_chnl_Pop_mioi_idat_mxwt),
      .dma_read_chnl_Pop_mioi_biwt(dma_read_chnl_Pop_mioi_biwt),
      .dma_read_chnl_Pop_mioi_bdwt(dma_read_chnl_Pop_mioi_bdwt),
      .dma_read_chnl_Pop_mioi_idat(dma_read_chnl_Pop_mioi_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_dma_read_ctrl_Push_mioi
// ------------------------------------------------------------------


module InputBuffer_run_dma_read_ctrl_Push_mioi (
  clk, rst, dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg, run_wen, run_wten,
      dma_read_ctrl_Push_mioi_oswt_unreg, dma_read_ctrl_Push_mioi_bawt, dma_read_ctrl_Push_mioi_iswt0,
      dma_read_ctrl_Push_mioi_wen_comp, dma_read_ctrl_Push_mioi_idat
);
  input clk;
  input rst;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input run_wen;
  input run_wten;
  input dma_read_ctrl_Push_mioi_oswt_unreg;
  output dma_read_ctrl_Push_mioi_bawt;
  input dma_read_ctrl_Push_mioi_iswt0;
  output dma_read_ctrl_Push_mioi_wen_comp;
  input [66:0] dma_read_ctrl_Push_mioi_idat;


  // Interconnect Declarations
  wire dma_read_ctrl_Push_mioi_biwt;
  wire dma_read_ctrl_Push_mioi_bdwt;
  wire dma_read_ctrl_Push_mioi_ivld_run_sct;
  wire dma_read_ctrl_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_dma_read_ctrl_Push_mioi_idat;
  assign nl_dma_read_ctrl_Push_mioi_idat = {3'b011 , (dma_read_ctrl_Push_mioi_idat[63:36])
      , 4'b0000 , (dma_read_ctrl_Push_mioi_idat[31:0])};
  ccs_out_wait_v1 #(.rscid(32'sd13),
  .width(32'sd67)) dma_read_ctrl_Push_mioi (
      .vld(dma_read_ctrl_val),
      .rdy(dma_read_ctrl_rdy),
      .dat(dma_read_ctrl_msg),
      .ivld(dma_read_ctrl_Push_mioi_ivld_run_sct),
      .irdy(dma_read_ctrl_Push_mioi_irdy),
      .idat(nl_dma_read_ctrl_Push_mioi_idat[66:0])
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_read_ctrl_Push_mioi_oswt_unreg(dma_read_ctrl_Push_mioi_oswt_unreg),
      .dma_read_ctrl_Push_mioi_iswt0(dma_read_ctrl_Push_mioi_iswt0),
      .dma_read_ctrl_Push_mioi_biwt(dma_read_ctrl_Push_mioi_biwt),
      .dma_read_ctrl_Push_mioi_bdwt(dma_read_ctrl_Push_mioi_bdwt),
      .dma_read_ctrl_Push_mioi_ivld_run_sct(dma_read_ctrl_Push_mioi_ivld_run_sct),
      .dma_read_ctrl_Push_mioi_irdy(dma_read_ctrl_Push_mioi_irdy)
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_dp InputBuffer_run_dma_read_ctrl_Push_mioi_dma_read_ctrl_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_ctrl_Push_mioi_oswt_unreg(dma_read_ctrl_Push_mioi_oswt_unreg),
      .dma_read_ctrl_Push_mioi_bawt(dma_read_ctrl_Push_mioi_bawt),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp),
      .dma_read_ctrl_Push_mioi_biwt(dma_read_ctrl_Push_mioi_biwt),
      .dma_read_ctrl_Push_mioi_bdwt(dma_read_ctrl_Push_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run_sync1_Pop_mioi
// ------------------------------------------------------------------


module InputBuffer_run_sync1_Pop_mioi (
  clk, rst, sync1_val, sync1_rdy, sync1_msg, run_wen, run_wten, sync1_Pop_mioi_oswt_unreg,
      sync1_Pop_mioi_bawt, sync1_Pop_mioi_iswt0, sync1_Pop_mioi_wen_comp
);
  input clk;
  input rst;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  input run_wen;
  input run_wten;
  input sync1_Pop_mioi_oswt_unreg;
  output sync1_Pop_mioi_bawt;
  input sync1_Pop_mioi_iswt0;
  output sync1_Pop_mioi_wen_comp;


  // Interconnect Declarations
  wire sync1_Pop_mioi_biwt;
  wire sync1_Pop_mioi_bdwt;
  wire sync1_Pop_mioi_ivld;
  wire sync1_Pop_mioi_irdy_run_sct;
  wire sync1_Pop_mioi_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd12),
  .width(32'sd1)) sync1_Pop_mioi (
      .vld(sync1_val),
      .rdy(sync1_rdy),
      .dat(sync1_msg),
      .ivld(sync1_Pop_mioi_ivld),
      .irdy(sync1_Pop_mioi_irdy_run_sct),
      .idat(sync1_Pop_mioi_idat)
    );
  InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync1_Pop_mioi_oswt_unreg(sync1_Pop_mioi_oswt_unreg),
      .sync1_Pop_mioi_iswt0(sync1_Pop_mioi_iswt0),
      .sync1_Pop_mioi_biwt(sync1_Pop_mioi_biwt),
      .sync1_Pop_mioi_bdwt(sync1_Pop_mioi_bdwt),
      .sync1_Pop_mioi_ivld(sync1_Pop_mioi_ivld),
      .sync1_Pop_mioi_irdy_run_sct(sync1_Pop_mioi_irdy_run_sct)
    );
  InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_dp InputBuffer_run_sync1_Pop_mioi_sync1_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync1_Pop_mioi_oswt_unreg(sync1_Pop_mioi_oswt_unreg),
      .sync1_Pop_mioi_bawt(sync1_Pop_mioi_bawt),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp),
      .sync1_Pop_mioi_biwt(sync1_Pop_mioi_biwt),
      .sync1_Pop_mioi_bdwt(sync1_Pop_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_out_Push_mioi
// ------------------------------------------------------------------


module Rotate_run_rotate_out_Push_mioi (
  clk, rst, rotate_out_val, rotate_out_rdy, rotate_out_msg, run_wen, run_wten, rotate_out_Push_mioi_oswt_unreg,
      rotate_out_Push_mioi_bawt, rotate_out_Push_mioi_iden, rotate_out_Push_mioi_iswt0,
      rotate_out_Push_mioi_iden_1, rotate_out_Push_mioi_wen_comp, rotate_out_Push_mioi_idat
);
  input clk;
  input rst;
  output rotate_out_val;
  input rotate_out_rdy;
  output [511:0] rotate_out_msg;
  input run_wen;
  input run_wten;
  input rotate_out_Push_mioi_oswt_unreg;
  output rotate_out_Push_mioi_bawt;
  output rotate_out_Push_mioi_iden;
  input rotate_out_Push_mioi_iswt0;
  output rotate_out_Push_mioi_iden_1;
  output rotate_out_Push_mioi_wen_comp;
  input [511:0] rotate_out_Push_mioi_idat;


  // Interconnect Declarations
  wire rotate_out_Push_mioi_biwt;
  wire rotate_out_Push_mioi_bdwt;
  wire rotate_out_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  wire [511:0] nl_rotate_out_Push_mioi_idat;
  assign nl_rotate_out_Push_mioi_idat = {(rotate_out_Push_mioi_idat[511:32]) , 32'b00000000000000000000000000000000};
  ccs_out_wait_v1 #(.rscid(32'sd22),
  .width(32'sd512)) rotate_out_Push_mioi (
      .vld(rotate_out_val),
      .rdy(rotate_out_rdy),
      .dat(rotate_out_msg),
      .ivld(rotate_out_Push_mioi_iden_1),
      .irdy(rotate_out_Push_mioi_irdy),
      .idat(nl_rotate_out_Push_mioi_idat[511:0])
    );
  Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_ctrl Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_out_Push_mioi_oswt_unreg(rotate_out_Push_mioi_oswt_unreg),
      .rotate_out_Push_mioi_iswt0(rotate_out_Push_mioi_iswt0),
      .rotate_out_Push_mioi_iden_1(rotate_out_Push_mioi_iden_1),
      .rotate_out_Push_mioi_biwt(rotate_out_Push_mioi_biwt),
      .rotate_out_Push_mioi_bdwt(rotate_out_Push_mioi_bdwt),
      .rotate_out_Push_mioi_irdy(rotate_out_Push_mioi_irdy)
    );
  Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_dp Rotate_run_rotate_out_Push_mioi_rotate_out_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .rotate_out_Push_mioi_oswt_unreg(rotate_out_Push_mioi_oswt_unreg),
      .rotate_out_Push_mioi_bawt(rotate_out_Push_mioi_bawt),
      .rotate_out_Push_mioi_iden(rotate_out_Push_mioi_iden),
      .rotate_out_Push_mioi_wen_comp(rotate_out_Push_mioi_wen_comp),
      .rotate_out_Push_mioi_biwt(rotate_out_Push_mioi_biwt),
      .rotate_out_Push_mioi_bdwt(rotate_out_Push_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run_rotate_in_Pop_mioi
// ------------------------------------------------------------------


module Rotate_run_rotate_in_Pop_mioi (
  clk, rst, rotate_in_val, rotate_in_rdy, rotate_in_msg, run_wen, run_wten, rotate_in_Pop_mioi_oswt_unreg,
      rotate_in_Pop_mioi_bawt, rotate_in_Pop_mioi_iden, rotate_in_Pop_mioi_iswt0,
      rotate_in_Pop_mioi_iden_1, rotate_in_Pop_mioi_wen_comp, rotate_in_Pop_mioi_idat_mxwt
);
  input clk;
  input rst;
  input rotate_in_val;
  output rotate_in_rdy;
  input [511:0] rotate_in_msg;
  input run_wen;
  input run_wten;
  input rotate_in_Pop_mioi_oswt_unreg;
  output rotate_in_Pop_mioi_bawt;
  output rotate_in_Pop_mioi_iden;
  input rotate_in_Pop_mioi_iswt0;
  output rotate_in_Pop_mioi_iden_1;
  output rotate_in_Pop_mioi_wen_comp;
  output [479:0] rotate_in_Pop_mioi_idat_mxwt;


  // Interconnect Declarations
  wire rotate_in_Pop_mioi_biwt;
  wire rotate_in_Pop_mioi_bdwt;
  wire rotate_in_Pop_mioi_ivld;
  wire [511:0] rotate_in_Pop_mioi_idat;
  wire [479:0] rotate_in_Pop_mioi_idat_mxwt_pconst;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd21),
  .width(32'sd512)) rotate_in_Pop_mioi (
      .vld(rotate_in_val),
      .rdy(rotate_in_rdy),
      .dat(rotate_in_msg),
      .ivld(rotate_in_Pop_mioi_ivld),
      .irdy(rotate_in_Pop_mioi_iden_1),
      .idat(rotate_in_Pop_mioi_idat)
    );
  Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_ctrl Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_in_Pop_mioi_oswt_unreg(rotate_in_Pop_mioi_oswt_unreg),
      .rotate_in_Pop_mioi_iswt0(rotate_in_Pop_mioi_iswt0),
      .rotate_in_Pop_mioi_iden_1(rotate_in_Pop_mioi_iden_1),
      .rotate_in_Pop_mioi_biwt(rotate_in_Pop_mioi_biwt),
      .rotate_in_Pop_mioi_bdwt(rotate_in_Pop_mioi_bdwt),
      .rotate_in_Pop_mioi_ivld(rotate_in_Pop_mioi_ivld)
    );
  Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_dp Rotate_run_rotate_in_Pop_mioi_rotate_in_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .rotate_in_Pop_mioi_oswt_unreg(rotate_in_Pop_mioi_oswt_unreg),
      .rotate_in_Pop_mioi_bawt(rotate_in_Pop_mioi_bawt),
      .rotate_in_Pop_mioi_iden(rotate_in_Pop_mioi_iden),
      .rotate_in_Pop_mioi_wen_comp(rotate_in_Pop_mioi_wen_comp),
      .rotate_in_Pop_mioi_idat_mxwt(rotate_in_Pop_mioi_idat_mxwt_pconst),
      .rotate_in_Pop_mioi_biwt(rotate_in_Pop_mioi_biwt),
      .rotate_in_Pop_mioi_bdwt(rotate_in_Pop_mioi_bdwt),
      .rotate_in_Pop_mioi_idat(rotate_in_Pop_mioi_idat)
    );
  assign rotate_in_Pop_mioi_idat_mxwt = rotate_in_Pop_mioi_idat_mxwt_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync3_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_sync3_Push_mioi (
  clk, rst, sync3_val, sync3_rdy, sync3_msg, run_wen, run_wten, sync3_Push_mioi_oswt_unreg,
      sync3_Push_mioi_bawt, sync3_Push_mioi_iswt0, sync3_Push_mioi_wen_comp
);
  input clk;
  input rst;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  input run_wen;
  input run_wten;
  input sync3_Push_mioi_oswt_unreg;
  output sync3_Push_mioi_bawt;
  input sync3_Push_mioi_iswt0;
  output sync3_Push_mioi_wen_comp;


  // Interconnect Declarations
  wire sync3_Push_mioi_biwt;
  wire sync3_Push_mioi_bdwt;
  wire sync3_Push_mioi_ivld_run_sct;
  wire sync3_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd31),
  .width(32'sd1)) sync3_Push_mioi (
      .vld(sync3_val),
      .rdy(sync3_rdy),
      .dat(sync3_msg),
      .ivld(sync3_Push_mioi_ivld_run_sct),
      .irdy(sync3_Push_mioi_irdy),
      .idat(1'b1)
    );
  OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Push_mioi_oswt_unreg(sync3_Push_mioi_oswt_unreg),
      .sync3_Push_mioi_iswt0(sync3_Push_mioi_iswt0),
      .sync3_Push_mioi_biwt(sync3_Push_mioi_biwt),
      .sync3_Push_mioi_bdwt(sync3_Push_mioi_bdwt),
      .sync3_Push_mioi_ivld_run_sct(sync3_Push_mioi_ivld_run_sct),
      .sync3_Push_mioi_irdy(sync3_Push_mioi_irdy)
    );
  OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_dp OutputBuffer_run_sync3_Push_mioi_sync3_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync3_Push_mioi_oswt_unreg(sync3_Push_mioi_oswt_unreg),
      .sync3_Push_mioi_bawt(sync3_Push_mioi_bawt),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp),
      .sync3_Push_mioi_biwt(sync3_Push_mioi_biwt),
      .sync3_Push_mioi_bdwt(sync3_Push_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_chnl_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_chnl_Push_mioi (
  clk, rst, dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, run_wen,
      run_wten, dma_write_chnl_Push_mioi_oswt_unreg, dma_write_chnl_Push_mioi_bawt,
      dma_write_chnl_Push_mioi_iswt0, dma_write_chnl_Push_mioi_wen_comp, dma_write_chnl_Push_mioi_idat
);
  input clk;
  input rst;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input run_wen;
  input run_wten;
  input dma_write_chnl_Push_mioi_oswt_unreg;
  output dma_write_chnl_Push_mioi_bawt;
  input dma_write_chnl_Push_mioi_iswt0;
  output dma_write_chnl_Push_mioi_wen_comp;
  input [63:0] dma_write_chnl_Push_mioi_idat;


  // Interconnect Declarations
  wire dma_write_chnl_Push_mioi_biwt;
  wire dma_write_chnl_Push_mioi_bdwt;
  wire dma_write_chnl_Push_mioi_ivld_run_sct;
  wire dma_write_chnl_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd30),
  .width(32'sd64)) dma_write_chnl_Push_mioi (
      .vld(dma_write_chnl_val),
      .rdy(dma_write_chnl_rdy),
      .dat(dma_write_chnl_msg),
      .ivld(dma_write_chnl_Push_mioi_ivld_run_sct),
      .irdy(dma_write_chnl_Push_mioi_irdy),
      .idat(dma_write_chnl_Push_mioi_idat)
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_write_chnl_Push_mioi_oswt_unreg(dma_write_chnl_Push_mioi_oswt_unreg),
      .dma_write_chnl_Push_mioi_iswt0(dma_write_chnl_Push_mioi_iswt0),
      .dma_write_chnl_Push_mioi_biwt(dma_write_chnl_Push_mioi_biwt),
      .dma_write_chnl_Push_mioi_bdwt(dma_write_chnl_Push_mioi_bdwt),
      .dma_write_chnl_Push_mioi_ivld_run_sct(dma_write_chnl_Push_mioi_ivld_run_sct),
      .dma_write_chnl_Push_mioi_irdy(dma_write_chnl_Push_mioi_irdy)
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_dp OutputBuffer_run_dma_write_chnl_Push_mioi_dma_write_chnl_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_chnl_Push_mioi_oswt_unreg(dma_write_chnl_Push_mioi_oswt_unreg),
      .dma_write_chnl_Push_mioi_bawt(dma_write_chnl_Push_mioi_bawt),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp),
      .dma_write_chnl_Push_mioi_biwt(dma_write_chnl_Push_mioi_biwt),
      .dma_write_chnl_Push_mioi_bdwt(dma_write_chnl_Push_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_dma_write_ctrl_Push_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_dma_write_ctrl_Push_mioi (
  clk, rst, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg, run_wen,
      run_wten, dma_write_ctrl_Push_mioi_oswt_unreg, dma_write_ctrl_Push_mioi_bawt,
      dma_write_ctrl_Push_mioi_iswt0, dma_write_ctrl_Push_mioi_wen_comp, dma_write_ctrl_Push_mioi_idat
);
  input clk;
  input rst;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  input run_wen;
  input run_wten;
  input dma_write_ctrl_Push_mioi_oswt_unreg;
  output dma_write_ctrl_Push_mioi_bawt;
  input dma_write_ctrl_Push_mioi_iswt0;
  output dma_write_ctrl_Push_mioi_wen_comp;
  input [66:0] dma_write_ctrl_Push_mioi_idat;


  // Interconnect Declarations
  wire dma_write_ctrl_Push_mioi_biwt;
  wire dma_write_ctrl_Push_mioi_bdwt;
  wire dma_write_ctrl_Push_mioi_ivld_run_sct;
  wire dma_write_ctrl_Push_mioi_irdy;


  // Interconnect Declarations for Component Instantiations 
  wire [66:0] nl_dma_write_ctrl_Push_mioi_idat;
  assign nl_dma_write_ctrl_Push_mioi_idat = {3'b011 , (dma_write_ctrl_Push_mioi_idat[63:36])
      , 4'b0000 , (dma_write_ctrl_Push_mioi_idat[31:0])};
  ccs_out_wait_v1 #(.rscid(32'sd29),
  .width(32'sd67)) dma_write_ctrl_Push_mioi (
      .vld(dma_write_ctrl_val),
      .rdy(dma_write_ctrl_rdy),
      .dat(dma_write_ctrl_msg),
      .ivld(dma_write_ctrl_Push_mioi_ivld_run_sct),
      .irdy(dma_write_ctrl_Push_mioi_irdy),
      .idat(nl_dma_write_ctrl_Push_mioi_idat[66:0])
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_write_ctrl_Push_mioi_oswt_unreg(dma_write_ctrl_Push_mioi_oswt_unreg),
      .dma_write_ctrl_Push_mioi_iswt0(dma_write_ctrl_Push_mioi_iswt0),
      .dma_write_ctrl_Push_mioi_biwt(dma_write_ctrl_Push_mioi_biwt),
      .dma_write_ctrl_Push_mioi_bdwt(dma_write_ctrl_Push_mioi_bdwt),
      .dma_write_ctrl_Push_mioi_ivld_run_sct(dma_write_ctrl_Push_mioi_ivld_run_sct),
      .dma_write_ctrl_Push_mioi_irdy(dma_write_ctrl_Push_mioi_irdy)
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_dp OutputBuffer_run_dma_write_ctrl_Push_mioi_dma_write_ctrl_Push_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_ctrl_Push_mioi_oswt_unreg(dma_write_ctrl_Push_mioi_oswt_unreg),
      .dma_write_ctrl_Push_mioi_bawt(dma_write_ctrl_Push_mioi_bawt),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp),
      .dma_write_ctrl_Push_mioi_biwt(dma_write_ctrl_Push_mioi_biwt),
      .dma_write_ctrl_Push_mioi_bdwt(dma_write_ctrl_Push_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_rotate_out_Pop_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_rotate_out_Pop_mioi (
  clk, rst, rotate_out_val, rotate_out_rdy, rotate_out_msg, run_wen, run_wten, rotate_out_Pop_mioi_oswt_unreg,
      rotate_out_Pop_mioi_bawt, rotate_out_Pop_mioi_iswt0, rotate_out_Pop_mioi_wen_comp,
      rotate_out_Pop_mioi_idat_mxwt
);
  input clk;
  input rst;
  input rotate_out_val;
  output rotate_out_rdy;
  input [511:0] rotate_out_msg;
  input run_wen;
  input run_wten;
  input rotate_out_Pop_mioi_oswt_unreg;
  output rotate_out_Pop_mioi_bawt;
  input rotate_out_Pop_mioi_iswt0;
  output rotate_out_Pop_mioi_wen_comp;
  output [511:0] rotate_out_Pop_mioi_idat_mxwt;


  // Interconnect Declarations
  wire rotate_out_Pop_mioi_biwt;
  wire rotate_out_Pop_mioi_bdwt;
  wire rotate_out_Pop_mioi_ivld;
  wire rotate_out_Pop_mioi_irdy_run_sct;
  wire [511:0] rotate_out_Pop_mioi_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd28),
  .width(32'sd512)) rotate_out_Pop_mioi (
      .vld(rotate_out_val),
      .rdy(rotate_out_rdy),
      .dat(rotate_out_msg),
      .ivld(rotate_out_Pop_mioi_ivld),
      .irdy(rotate_out_Pop_mioi_irdy_run_sct),
      .idat(rotate_out_Pop_mioi_idat)
    );
  OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_ctrl OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_out_Pop_mioi_oswt_unreg(rotate_out_Pop_mioi_oswt_unreg),
      .rotate_out_Pop_mioi_iswt0(rotate_out_Pop_mioi_iswt0),
      .rotate_out_Pop_mioi_biwt(rotate_out_Pop_mioi_biwt),
      .rotate_out_Pop_mioi_bdwt(rotate_out_Pop_mioi_bdwt),
      .rotate_out_Pop_mioi_ivld(rotate_out_Pop_mioi_ivld),
      .rotate_out_Pop_mioi_irdy_run_sct(rotate_out_Pop_mioi_irdy_run_sct)
    );
  OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_dp OutputBuffer_run_rotate_out_Pop_mioi_rotate_out_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .rotate_out_Pop_mioi_oswt_unreg(rotate_out_Pop_mioi_oswt_unreg),
      .rotate_out_Pop_mioi_bawt(rotate_out_Pop_mioi_bawt),
      .rotate_out_Pop_mioi_wen_comp(rotate_out_Pop_mioi_wen_comp),
      .rotate_out_Pop_mioi_idat_mxwt(rotate_out_Pop_mioi_idat_mxwt),
      .rotate_out_Pop_mioi_biwt(rotate_out_Pop_mioi_biwt),
      .rotate_out_Pop_mioi_bdwt(rotate_out_Pop_mioi_bdwt),
      .rotate_out_Pop_mioi_idat(rotate_out_Pop_mioi_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run_sync2_Pop_mioi
// ------------------------------------------------------------------


module OutputBuffer_run_sync2_Pop_mioi (
  clk, rst, sync2_val, sync2_rdy, sync2_msg, run_wen, run_wten, sync2_Pop_mioi_oswt_unreg,
      sync2_Pop_mioi_bawt, sync2_Pop_mioi_iswt0, sync2_Pop_mioi_wen_comp
);
  input clk;
  input rst;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  input run_wen;
  input run_wten;
  input sync2_Pop_mioi_oswt_unreg;
  output sync2_Pop_mioi_bawt;
  input sync2_Pop_mioi_iswt0;
  output sync2_Pop_mioi_wen_comp;


  // Interconnect Declarations
  wire sync2_Pop_mioi_biwt;
  wire sync2_Pop_mioi_bdwt;
  wire sync2_Pop_mioi_ivld;
  wire sync2_Pop_mioi_irdy_run_sct;
  wire sync2_Pop_mioi_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd27),
  .width(32'sd1)) sync2_Pop_mioi (
      .vld(sync2_val),
      .rdy(sync2_rdy),
      .dat(sync2_msg),
      .ivld(sync2_Pop_mioi_ivld),
      .irdy(sync2_Pop_mioi_irdy_run_sct),
      .idat(sync2_Pop_mioi_idat)
    );
  OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_ctrl_inst
      (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync2_Pop_mioi_oswt_unreg(sync2_Pop_mioi_oswt_unreg),
      .sync2_Pop_mioi_iswt0(sync2_Pop_mioi_iswt0),
      .sync2_Pop_mioi_biwt(sync2_Pop_mioi_biwt),
      .sync2_Pop_mioi_bdwt(sync2_Pop_mioi_bdwt),
      .sync2_Pop_mioi_ivld(sync2_Pop_mioi_ivld),
      .sync2_Pop_mioi_irdy_run_sct(sync2_Pop_mioi_irdy_run_sct)
    );
  OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_dp OutputBuffer_run_sync2_Pop_mioi_sync2_Pop_mio_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .sync2_Pop_mioi_oswt_unreg(sync2_Pop_mioi_oswt_unreg),
      .sync2_Pop_mioi_bawt(sync2_Pop_mioi_bawt),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp),
      .sync2_Pop_mioi_biwt(sync2_Pop_mioi_biwt),
      .sync2_Pop_mioi_bdwt(sync2_Pop_mioi_bdwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control_run
// ------------------------------------------------------------------


module Control_run (
  clk, rst, acc_start, acc_done, sync1_val, sync1_rdy, sync1_msg, sync2_val, sync2_rdy,
      sync2_msg, sync3_val, sync3_rdy, sync3_msg
);
  input clk;
  input rst;
  input acc_start;
  output acc_done;
  reg acc_done;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;


  // Interconnect Declarations
  wire run_wen;
  wire run_wten;
  wire sync1_Push_mioi_bawt;
  reg sync1_Push_mioi_iswt0;
  wire sync1_Push_mioi_wen_comp;
  wire sync2_Push_mioi_bawt;
  wire sync2_Push_mioi_wen_comp;
  wire sync3_Pop_mioi_bawt;
  wire sync3_Pop_mioi_wen_comp;
  wire [1:0] while_for_2_mux_3_tmp;
  wire or_tmp_1;
  wire and_tmp;
  wire and_tmp_4;
  wire and_dcpl_2;
  wire and_dcpl_9;
  wire and_dcpl_11;
  wire and_dcpl_12;
  wire or_dcpl_12;
  wire nor_tmp_2;
  wire mux_tmp_14;
  wire and_dcpl_14;
  wire and_tmp_10;
  wire and_dcpl_15;
  wire or_tmp_43;
  wire or_tmp_44;
  wire and_tmp_15;
  wire mux_tmp_23;
  wire and_tmp_16;
  wire or_dcpl_21;
  wire and_tmp_19;
  wire or_dcpl_22;
  wire and_dcpl_22;
  wire or_tmp_71;
  wire while_while_or_3_cse_1;
  wire while_while_or_1_cse_1;
  wire while_while_or_cse_1;
  reg while_stage_v_1;
  wire lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0;
  wire [1:0] lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0;
  reg exitL_exit_while_for_2_sva;
  reg while_for_2_equal_tmp_2_1;
  reg while_for_2_or_tmp_1;
  wire while_for_2_and_ssc_1;
  wire while_for_2_and_2_ssc_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_1;
  reg lfst_exit_while_for_2_lpi_1_dfm_5_2;
  reg while_for_slc_while_for_acc_3_svs_1;
  reg while_for_2_equal_tmp_1;
  reg while_stage_v_2;
  reg while_for_slc_while_for_acc_3_svs_st_1;
  reg [1:0] lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0;
  reg lfst_exit_while_for_2_lpi_1_dfm_st_1_2;
  reg while_stage_v_3;
  reg while_for_slc_while_for_acc_3_svs_st_2;
  reg [1:0] lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0;
  reg lfst_exit_while_for_2_lpi_1_dfm_st_2_2;
  reg while_stage_v_4;
  reg while_for_slc_while_for_acc_3_svs_st_3;
  reg [1:0] lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0;
  reg lfst_exit_while_for_2_lpi_1_dfm_st_3_2;
  wire lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2;
  reg [1:0] lfst_exit_while_for_2_lpi_1_dfm_5_1_0;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_3;
  wire [3:0] while_for_1_i_3_0_sva_2;
  wire [4:0] nl_while_for_1_i_3_0_sva_2;
  wire [3:0] while_for_2_i_3_0_sva_2;
  wire [4:0] nl_while_for_2_i_3_0_sva_2;
  wire exitL_exit_while_for_2_sva_mx0;
  wire [1:0] lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1;
  reg reg_sync3_Pop_mioi_iswt0_cse;
  reg reg_sync2_Push_mioi_iswt0_cse;
  wire while_for_2_and_6_cse;
  wire while_and_cse;
  wire while_for_2_and_9_cse;
  wire while_for_i_and_cse;
  wire while_for_and_3_cse;
  wire or_7_cse;
  wire nor_2_cse;
  wire while_for_2_or_tmp_mx0w0;
  wire while_for_2_equal_tmp_2_mx0w0;
  wire while_for_2_equal_tmp_mx0w0;
  wire while_for_2_or_5_tmp;
  wire nor_26_cse;
  wire sync1_write_reset_check_reset_while_nor_3_rmff;
  wire sync1_write_reset_check_reset_while_nor_2_rmff;
  wire while_for_2_equal_tmp_1_mx1w1;
  reg [3:0] while_for_2_i_3_0_lpi_1;
  wire or_101_tmp;
  reg [3:0] while_for_i_3_0_lpi_1;
  reg [3:0] while_for_1_i_3_0_lpi_1;
  reg while_for_slc_while_for_acc_3_svs_st;
  reg [3:0] while_for_i_3_0_sva_1_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_1;
  reg while_for_1_slc_while_for_1_acc_3_svs_st_2;
  wire acc_done_mx0c1;
  wire [3:0] while_for_i_3_0_lpi_1_mx0w0;
  wire [3:0] while_for_i_3_0_sva_2;
  wire [4:0] nl_while_for_i_3_0_sva_2;
  wire exitL_exit_while_for_2_sva_mx0w0;
  wire exitL_exit_while_for_2_sva_mx1c1;
  wire exitL_exit_while_for_2_sva_mx1c2;
  wire while_for_slc_while_for_acc_3_svs_st_1_mx0c1;
  wire while_stage_v_3_mx1c1;
  wire while_stage_v_4_mx1c1;
  wire while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1;
  wire while_for_acc_itm_3_1;
  wire while_for_2_acc_itm_3_1;
  wire while_for_1_acc_itm_3_1;

  wire[3:0] while_for_while_for_and_nl;
  wire while_for_2_i_and_2_nl;
  wire mux_41_nl;
  wire nor_27_nl;
  wire mux_40_nl;
  wire or_91_nl;
  wire nor_29_nl;
  wire and_57_nl;
  wire[3:0] while_for_acc_nl;
  wire[4:0] nl_while_for_acc_nl;
  wire[3:0] while_for_i_mux_nl;
  wire while_for_2_while_for_2_nor_3_nl;
  wire while_for_2_and_16_nl;
  wire[1:0] while_for_2_and_4_nl;
  wire[1:0] while_for_2_mux_nl;
  wire while_for_2_not_9_nl;
  wire[3:0] while_for_2_acc_nl;
  wire[4:0] nl_while_for_2_acc_nl;
  wire while_for_2_mux_6_nl;
  wire[3:0] while_for_1_acc_nl;
  wire[4:0] nl_while_for_1_acc_nl;
  wire or_57_nl;
  wire nand_4_nl;
  wire nor_18_nl;
  wire mux_22_nl;
  wire nor_22_nl;
  wire and_51_nl;
  wire mux_21_nl;
  wire mux_20_nl;
  wire mux_19_nl;
  wire mux_18_nl;
  wire mux_17_nl;
  wire mux_16_nl;
  wire mux_30_nl;
  wire mux_29_nl;
  wire or_72_nl;
  wire mux_28_nl;
  wire mux_27_nl;
  wire mux_26_nl;
  wire nor_24_nl;
  wire mux_25_nl;
  wire mux_24_nl;
  wire nor_23_nl;
  wire mux_33_nl;
  wire and_37_nl;
  wire mux_32_nl;
  wire mux_31_nl;
  wire and_36_nl;
  wire mux_34_nl;
  wire nor_25_nl;
  wire mux_37_nl;
  wire or_85_nl;
  wire and_48_nl;
  wire mux_44_nl;
  wire mux_43_nl;
  wire mux_42_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg;
  assign nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg = ~(lfst_exit_while_for_2_lpi_1_dfm_st_3_2
      | (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0!=2'b10) | while_for_slc_while_for_acc_3_svs_st_3
      | (~ sync3_Pop_mioi_bawt) | (~ while_stage_v_4));
  wire  nl_Control_run_staller_inst_run_flen_unreg;
  assign nl_Control_run_staller_inst_run_flen_unreg = ~(((~(while_stage_v_1 & or_dcpl_21))
      & while_while_or_3_cse_1 & while_while_or_1_cse_1 & while_while_or_cse_1) |
      (while_stage_v_1 & (~(while_stage_v_2 & or_dcpl_12)) & while_while_or_3_cse_1
      & while_while_or_1_cse_1 & while_while_or_cse_1) | (while_stage_v_2 & (~(while_stage_v_3
      & or_dcpl_22)) & while_while_or_3_cse_1 & while_while_or_1_cse_1 & while_while_or_cse_1)
      | (while_stage_v_3 & (~(while_stage_v_4 & and_dcpl_22)) & while_while_or_1_cse_1
      & while_while_or_cse_1) | (while_stage_v_4 & while_while_or_cse_1));
  Control_run_sync1_Push_mioi Control_run_sync1_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync1_Push_mioi_oswt_unreg(sync1_write_reset_check_reset_while_nor_3_rmff),
      .sync1_Push_mioi_bawt(sync1_Push_mioi_bawt),
      .sync1_Push_mioi_iswt0(sync1_Push_mioi_iswt0),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp)
    );
  Control_run_sync2_Push_mioi Control_run_sync2_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync2_Push_mioi_oswt_unreg(sync1_write_reset_check_reset_while_nor_2_rmff),
      .sync2_Push_mioi_bawt(sync2_Push_mioi_bawt),
      .sync2_Push_mioi_iswt0(reg_sync2_Push_mioi_iswt0_cse),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp)
    );
  Control_run_sync3_Pop_mioi Control_run_sync3_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Pop_mioi_oswt_unreg(nl_Control_run_sync3_Pop_mioi_inst_sync3_Pop_mioi_oswt_unreg),
      .sync3_Pop_mioi_bawt(sync3_Pop_mioi_bawt),
      .sync3_Pop_mioi_iswt0(reg_sync3_Pop_mioi_iswt0_cse),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp)
    );
  Control_run_staller Control_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync1_Push_mioi_wen_comp(sync1_Push_mioi_wen_comp),
      .sync2_Push_mioi_wen_comp(sync2_Push_mioi_wen_comp),
      .sync3_Pop_mioi_wen_comp(sync3_Pop_mioi_wen_comp),
      .run_flen_unreg(nl_Control_run_staller_inst_run_flen_unreg)
    );
  assign sync1_write_reset_check_reset_while_nor_2_rmff = ~(and_dcpl_12 | lfst_exit_while_for_2_lpi_1_dfm_st_2_2
      | while_for_slc_while_for_acc_3_svs_st_2 | (~ sync2_Push_mioi_bawt) | (lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0!=2'b10)
      | (~ while_stage_v_3));
  assign while_for_i_and_cse = run_wen & (~ or_dcpl_12);
  assign sync1_write_reset_check_reset_while_nor_3_rmff = ~((~ and_tmp) | (~ sync1_Push_mioi_bawt)
      | (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[0]) | lfst_exit_while_for_2_lpi_1_dfm_st_1_2
      | (~ (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[1])) | while_for_slc_while_for_acc_3_svs_st_1
      | (~ while_stage_v_2));
  assign while_for_2_and_6_cse = run_wen & (and_dcpl_14 | and_dcpl_15);
  assign while_and_cse = run_wen & and_tmp_10;
  assign while_for_2_and_9_cse = run_wen & (~ or_dcpl_21);
  assign while_for_and_3_cse = run_wen & (~ or_dcpl_22);
  assign or_7_cse = (~ while_for_2_equal_tmp_1) | while_for_slc_while_for_acc_3_svs_1;
  assign nor_26_cse = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2 | (~ and_tmp));
  assign or_101_tmp = (while_for_2_or_tmp_1 & (~ acc_start)) | lfst_exit_while_for_2_lpi_1_dfm_5_2
      | while_for_2_equal_tmp_2_1;
  assign nor_29_nl = ~(while_for_2_equal_tmp_1 | or_101_tmp);
  assign and_57_nl = while_for_2_equal_tmp_1 & (~ or_101_tmp);
  assign while_for_i_3_0_lpi_1_mx0w0 = MUX1HOT_v_4_3_2((signext_4_1(~ acc_start)),
      while_for_i_3_0_sva_1_1, while_for_i_3_0_lpi_1, {nor_29_nl , and_57_nl , or_101_tmp});
  assign nl_while_for_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_i_3_0_sva_2[3:1]);
  assign while_for_acc_nl = nl_while_for_acc_nl[3:0];
  assign while_for_acc_itm_3_1 = readslicef_4_1_3(while_for_acc_nl);
  assign while_for_i_mux_nl = MUX_v_4_2_2(while_for_i_3_0_lpi_1, while_for_i_3_0_lpi_1_mx0w0,
      while_stage_v_2);
  assign nl_while_for_i_3_0_sva_2 = while_for_i_mux_nl + 4'b0001;
  assign while_for_i_3_0_sva_2 = nl_while_for_i_3_0_sva_2[3:0];
  assign while_for_2_or_5_tmp = (while_for_slc_while_for_acc_3_svs_1 & while_for_2_equal_tmp_1)
      | (while_for_1_slc_while_for_1_acc_3_svs_1 & lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign while_for_2_while_for_2_nor_3_nl = ~(acc_start | while_for_2_or_5_tmp);
  assign while_for_2_and_16_nl = acc_start & (~ while_for_2_or_5_tmp);
  assign while_for_2_mux_3_tmp = MUX1HOT_v_2_3_2(2'b01, 2'b10, lfst_exit_while_for_2_lpi_1_dfm_5_1_0,
      {while_for_2_while_for_2_nor_3_nl , while_for_2_and_16_nl , while_for_2_or_5_tmp});
  assign while_for_2_and_4_nl = while_for_2_mux_3_tmp & (signext_2_1(~ while_for_2_equal_tmp_2_1))
      & (signext_2_1(~ while_for_2_and_2_ssc_1));
  assign lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0 = MUX_v_2_2_2(while_for_2_and_4_nl,
      2'b11, while_for_2_and_ssc_1);
  assign while_for_2_mux_nl = MUX_v_2_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_1_0,
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0, while_stage_v_2);
  assign while_for_2_not_9_nl = ~ exitL_exit_while_for_2_sva_mx0;
  assign lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1 = MUX_v_2_2_2(2'b00, while_for_2_mux_nl,
      while_for_2_not_9_nl);
  assign exitL_exit_while_for_2_sva_mx0w0 = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0
      | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0!=2'b00));
  assign exitL_exit_while_for_2_sva_mx0 = MUX_s_1_2_2(exitL_exit_while_for_2_sva,
      exitL_exit_while_for_2_sva_mx0w0, while_stage_v_2);
  assign nl_while_for_2_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_2_i_3_0_sva_2[3:1]);
  assign while_for_2_acc_nl = nl_while_for_2_acc_nl[3:0];
  assign while_for_2_acc_itm_3_1 = readslicef_4_1_3(while_for_2_acc_nl);
  assign while_for_2_mux_6_nl = MUX_s_1_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_2,
      lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0, while_stage_v_2);
  assign lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 = while_for_2_mux_6_nl & (~ exitL_exit_while_for_2_sva_mx0);
  assign lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0 = (exitL_exit_while_for_2_sva
      & (~(while_for_2_or_tmp_1 | while_for_2_and_ssc_1))) | while_for_2_and_2_ssc_1;
  assign while_for_2_equal_tmp_1_mx1w1 = (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1==2'b11)
      & (~ lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2);
  assign while_for_2_or_tmp_mx0w0 = ((lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[0])
      & (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[1]))))
      | (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1!=2'b00)));
  assign while_for_2_equal_tmp_mx0w0 = (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[1])
      & (~(lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2 | (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1[0])));
  assign while_for_2_equal_tmp_2_mx0w0 = lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2
      & (lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1==2'b00);
  assign while_for_2_and_ssc_1 = (~ while_for_slc_while_for_acc_3_svs_1) & while_for_2_equal_tmp_1;
  assign while_for_2_and_2_ssc_1 = (~ while_for_1_slc_while_for_1_acc_3_svs_1) &
      lfst_exit_while_for_2_lpi_1_dfm_5_2;
  assign nl_while_for_1_acc_nl = 4'b1011 + conv_u2s_3_4(while_for_1_i_3_0_sva_2[3:1]);
  assign while_for_1_acc_nl = nl_while_for_1_acc_nl[3:0];
  assign while_for_1_acc_itm_3_1 = readslicef_4_1_3(while_for_1_acc_nl);
  assign while_while_or_3_cse_1 = sync1_Push_mioi_bawt | (~((~ while_for_slc_while_for_acc_3_svs_st_1)
      & (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[1]) & (~(lfst_exit_while_for_2_lpi_1_dfm_st_1_2
      | (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[0]))) & while_stage_v_2));
  assign while_while_or_1_cse_1 = sync2_Push_mioi_bawt | (~((~ while_for_slc_while_for_acc_3_svs_st_2)
      & (lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0[1]) & (~(lfst_exit_while_for_2_lpi_1_dfm_st_2_2
      | (lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0[0]))) & while_stage_v_3));
  assign while_while_or_cse_1 = sync3_Pop_mioi_bawt | (~((~ while_for_slc_while_for_acc_3_svs_st_3)
      & (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0[1]) & (~(lfst_exit_while_for_2_lpi_1_dfm_st_3_2
      | (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0[0]))) & while_stage_v_4));
  assign nl_while_for_1_i_3_0_sva_2 = while_for_1_i_3_0_lpi_1 + 4'b0001;
  assign while_for_1_i_3_0_sva_2 = nl_while_for_1_i_3_0_sva_2[3:0];
  assign nl_while_for_2_i_3_0_sva_2 = while_for_2_i_3_0_lpi_1 + 4'b0001;
  assign while_for_2_i_3_0_sva_2 = nl_while_for_2_i_3_0_sva_2[3:0];
  assign or_tmp_1 = (~ while_stage_v_4) | sync3_Pop_mioi_bawt | (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0[0])
      | while_for_slc_while_for_acc_3_svs_st_3 | (~ (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0[1]))
      | lfst_exit_while_for_2_lpi_1_dfm_st_3_2;
  assign and_tmp = ((~ while_stage_v_3) | (lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0!=2'b10)
      | lfst_exit_while_for_2_lpi_1_dfm_st_2_2 | while_for_slc_while_for_acc_3_svs_st_2
      | sync2_Push_mioi_bawt) & or_tmp_1;
  assign and_tmp_4 = (while_for_slc_while_for_acc_3_svs_st_1 | (~ (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[1]))
      | lfst_exit_while_for_2_lpi_1_dfm_st_1_2 | (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[0])
      | sync1_Push_mioi_bawt) & and_tmp;
  assign and_dcpl_2 = (~ lfst_exit_while_for_2_lpi_1_dfm_st_3_2) & (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0[1]);
  assign and_dcpl_9 = ~(while_for_slc_while_for_acc_3_svs_st_3 | sync3_Pop_mioi_bawt);
  assign and_dcpl_11 = and_dcpl_2 & (~ (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0[0]));
  assign and_dcpl_12 = and_dcpl_11 & and_dcpl_9 & while_stage_v_4;
  assign or_dcpl_12 = ~(and_tmp_4 & while_stage_v_2);
  assign nor_tmp_2 = ~(while_for_1_slc_while_for_1_acc_3_svs_1 | (~ lfst_exit_while_for_2_lpi_1_dfm_5_2));
  assign nor_2_cse = ~((~(while_for_2_or_tmp_1 | (~ exitL_exit_while_for_2_sva)))
      | while_for_2_equal_tmp_2_1 | (~ (while_for_2_mux_3_tmp[1])));
  assign or_57_nl = exitL_exit_while_for_2_sva | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b10)
      | lfst_exit_while_for_2_lpi_1_dfm_5_2 | (~ and_tmp);
  assign nand_4_nl = ~(or_7_cse & nor_2_cse & (~(nor_tmp_2 | (while_for_2_mux_3_tmp[0])
      | (~ and_tmp_4))));
  assign mux_tmp_14 = MUX_s_1_2_2(or_57_nl, nand_4_nl, while_stage_v_2);
  assign and_dcpl_14 = and_tmp_4 & while_stage_v_2 & (~ while_stage_v_1);
  assign and_tmp_10 = ((~ while_stage_v_2) | while_for_slc_while_for_acc_3_svs_st_1
      | (~ (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[1])) | lfst_exit_while_for_2_lpi_1_dfm_st_1_2
      | (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[0]) | sync1_Push_mioi_bawt) & and_tmp;
  assign and_dcpl_15 = and_tmp_10 & while_stage_v_1;
  assign or_tmp_43 = while_for_1_slc_while_for_1_acc_3_svs_1 | (~(lfst_exit_while_for_2_lpi_1_dfm_5_2
      & and_tmp_4));
  assign or_tmp_44 = (while_for_2_mux_3_tmp[0]) | (~ and_tmp_4);
  assign and_tmp_15 = lfst_exit_while_for_2_lpi_1_dfm_5_2 & and_tmp;
  assign nor_18_nl = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2 | (~ and_tmp_4));
  assign mux_tmp_23 = MUX_s_1_2_2(nor_18_nl, and_tmp_4, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign and_tmp_16 = (while_for_2_mux_3_tmp[0]) & and_tmp_4;
  assign or_dcpl_21 = ~(and_tmp_10 & while_stage_v_1);
  assign and_tmp_19 = ((lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0!=2'b10) | sync2_Push_mioi_bawt
      | while_for_slc_while_for_acc_3_svs_st_2 | lfst_exit_while_for_2_lpi_1_dfm_st_2_2)
      & or_tmp_1;
  assign or_dcpl_22 = ~(and_tmp_19 & while_stage_v_3);
  assign and_dcpl_22 = and_dcpl_11 & and_dcpl_9;
  assign or_tmp_71 = (while_for_2_mux_3_tmp[0]) | (~ and_tmp);
  assign acc_done_mx0c1 = lfst_exit_while_for_2_lpi_1_dfm_st_3_2 & (~ (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0[1]))
      & (~ while_for_1_slc_while_for_1_acc_3_svs_st_3) & (~ (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0[0]))
      & while_stage_v_4;
  assign nor_22_nl = ~(exitL_exit_while_for_2_sva | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b00)
      | (~ and_tmp_15));
  assign mux_16_nl = MUX_s_1_2_2(or_tmp_44, (~ and_tmp_4), lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign mux_17_nl = MUX_s_1_2_2(mux_16_nl, or_tmp_44, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign mux_18_nl = MUX_s_1_2_2(mux_17_nl, or_tmp_43, while_for_2_mux_3_tmp[1]);
  assign mux_19_nl = MUX_s_1_2_2(mux_18_nl, (~ and_tmp_4), while_for_2_equal_tmp_2_1);
  assign mux_20_nl = MUX_s_1_2_2(or_tmp_43, mux_19_nl, exitL_exit_while_for_2_sva);
  assign mux_21_nl = MUX_s_1_2_2(mux_20_nl, or_tmp_43, while_for_2_or_tmp_1);
  assign and_51_nl = or_7_cse & (~ mux_21_nl);
  assign mux_22_nl = MUX_s_1_2_2(nor_22_nl, and_51_nl, while_stage_v_2);
  assign exitL_exit_while_for_2_sva_mx1c1 = mux_22_nl & while_stage_v_1;
  assign or_72_nl = exitL_exit_while_for_2_sva | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b00);
  assign mux_29_nl = MUX_s_1_2_2(nor_26_cse, and_tmp, or_72_nl);
  assign nor_23_nl = ~(lfst_exit_while_for_2_lpi_1_dfm_5_2 | (~ and_tmp_16));
  assign mux_24_nl = MUX_s_1_2_2(nor_23_nl, and_tmp_16, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign mux_25_nl = MUX_s_1_2_2(mux_24_nl, mux_tmp_23, while_for_2_mux_3_tmp[1]);
  assign nor_24_nl = ~(while_for_2_equal_tmp_2_1 | (~ mux_25_nl));
  assign mux_26_nl = MUX_s_1_2_2(mux_tmp_23, nor_24_nl, exitL_exit_while_for_2_sva);
  assign mux_27_nl = MUX_s_1_2_2(mux_26_nl, mux_tmp_23, while_for_2_or_tmp_1);
  assign mux_28_nl = MUX_s_1_2_2(and_tmp_4, mux_27_nl, or_7_cse);
  assign mux_30_nl = MUX_s_1_2_2(mux_29_nl, mux_28_nl, while_stage_v_2);
  assign exitL_exit_while_for_2_sva_mx1c2 = mux_30_nl & while_stage_v_1;
  assign and_37_nl = (exitL_exit_while_for_2_sva | (lfst_exit_while_for_2_lpi_1_dfm_5_1_0!=2'b10)
      | lfst_exit_while_for_2_lpi_1_dfm_5_2) & and_tmp;
  assign and_36_nl = (nor_tmp_2 | (while_for_2_mux_3_tmp[0])) & and_tmp_4;
  assign mux_31_nl = MUX_s_1_2_2(and_tmp_4, and_36_nl, nor_2_cse);
  assign mux_32_nl = MUX_s_1_2_2(and_tmp_4, mux_31_nl, or_7_cse);
  assign mux_33_nl = MUX_s_1_2_2(and_37_nl, mux_32_nl, while_stage_v_2);
  assign while_for_slc_while_for_acc_3_svs_st_1_mx0c1 = mux_33_nl & while_stage_v_1;
  assign nor_25_nl = ~(while_for_slc_while_for_acc_3_svs_st_1 | (~ (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[1]))
      | lfst_exit_while_for_2_lpi_1_dfm_st_1_2 | (lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0[0])
      | sync1_Push_mioi_bawt | (~ and_tmp_19));
  assign mux_34_nl = MUX_s_1_2_2(and_tmp_19, nor_25_nl, while_stage_v_2);
  assign while_stage_v_3_mx1c1 = mux_34_nl & while_stage_v_3;
  assign or_85_nl = (lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0!=2'b10) | sync2_Push_mioi_bawt
      | while_for_slc_while_for_acc_3_svs_st_2 | lfst_exit_while_for_2_lpi_1_dfm_st_2_2
      | and_dcpl_22;
  assign mux_37_nl = MUX_s_1_2_2(and_dcpl_22, or_85_nl, while_stage_v_3);
  assign while_stage_v_4_mx1c1 = (~ mux_37_nl) & while_stage_v_4;
  assign mux_42_nl = MUX_s_1_2_2(or_tmp_71, (~ and_tmp), lfst_exit_while_for_2_lpi_1_dfm_5_2);
  assign mux_43_nl = MUX_s_1_2_2(mux_42_nl, or_tmp_71, while_for_1_slc_while_for_1_acc_3_svs_1);
  assign mux_44_nl = MUX_s_1_2_2((~ mux_43_nl), and_tmp, while_for_2_equal_tmp_2_1);
  assign and_48_nl = or_7_cse & mux_44_nl;
  assign while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1 = MUX_s_1_2_2(and_tmp_15,
      and_48_nl, while_stage_v_2);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      acc_done <= 1'b0;
    end
    else if ( run_wen & ((and_dcpl_2 & (~ while_for_1_slc_while_for_1_acc_3_svs_st_3)
        & (lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0[0]) & while_stage_v_4) | acc_done_mx0c1)
        ) begin
      acc_done <= ~ acc_done_mx0c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_sync3_Pop_mioi_iswt0_cse <= 1'b0;
      reg_sync2_Push_mioi_iswt0_cse <= 1'b0;
      sync1_Push_mioi_iswt0 <= 1'b0;
      while_for_1_slc_while_for_1_acc_3_svs_st_3 <= 1'b0;
    end
    else if ( run_wen ) begin
      reg_sync3_Pop_mioi_iswt0_cse <= sync1_write_reset_check_reset_while_nor_2_rmff;
      reg_sync2_Push_mioi_iswt0_cse <= sync1_write_reset_check_reset_while_nor_3_rmff;
      sync1_Push_mioi_iswt0 <= ~(mux_tmp_14 | (~ while_stage_v_1) | while_for_acc_itm_3_1);
      while_for_1_slc_while_for_1_acc_3_svs_st_3 <= while_for_1_slc_while_for_1_acc_3_svs_st_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_i_3_0_lpi_1 <= 4'b0000;
      while_for_slc_while_for_acc_3_svs_st_2 <= 1'b0;
      lfst_exit_while_for_2_lpi_1_dfm_st_2_2 <= 1'b0;
      lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0 <= 2'b00;
    end
    else if ( while_for_i_and_cse ) begin
      while_for_i_3_0_lpi_1 <= while_for_i_3_0_lpi_1_mx0w0;
      while_for_slc_while_for_acc_3_svs_st_2 <= while_for_slc_while_for_acc_3_svs_st_1;
      lfst_exit_while_for_2_lpi_1_dfm_st_2_2 <= lfst_exit_while_for_2_lpi_1_dfm_st_1_2;
      lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0 <= lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0 <= 2'b00;
      lfst_exit_while_for_2_lpi_1_dfm_5_2 <= 1'b0;
      while_stage_v_2 <= 1'b0;
    end
    else if ( while_for_2_and_6_cse ) begin
      lfst_exit_while_for_2_lpi_1_dfm_5_1_0 <= MUX_v_2_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_1_0_mx0w0,
          lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1, and_dcpl_15);
      lfst_exit_while_for_2_lpi_1_dfm_5_2 <= MUX_s_1_2_2(lfst_exit_while_for_2_lpi_1_dfm_5_2_mx0w0,
          while_for_2_equal_tmp_1_mx1w1, and_dcpl_15);
      while_stage_v_2 <= ~ and_dcpl_14;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exit_while_for_2_sva <= 1'b1;
    end
    else if ( run_wen & (and_dcpl_14 | exitL_exit_while_for_2_sva_mx1c1 | exitL_exit_while_for_2_sva_mx1c2)
        ) begin
      exitL_exit_while_for_2_sva <= MUX1HOT_s_1_3_2(exitL_exit_while_for_2_sva_mx0w0,
          while_for_2_acc_itm_3_1, lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2, {and_dcpl_14
          , exitL_exit_while_for_2_sva_mx1c1 , exitL_exit_while_for_2_sva_mx1c2});
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_1 <= 1'b0;
      while_for_2_or_tmp_1 <= 1'b0;
      while_for_i_3_0_sva_1_1 <= 4'b0000;
      while_for_2_equal_tmp_1 <= 1'b0;
      while_for_2_equal_tmp_2_1 <= 1'b0;
      while_for_slc_while_for_acc_3_svs_1 <= 1'b0;
      while_for_1_slc_while_for_1_acc_3_svs_1 <= 1'b0;
    end
    else if ( while_and_cse ) begin
      while_stage_v_1 <= 1'b1;
      while_for_2_or_tmp_1 <= while_for_2_or_tmp_mx0w0;
      while_for_i_3_0_sva_1_1 <= while_for_i_3_0_sva_2;
      while_for_2_equal_tmp_1 <= while_for_2_equal_tmp_mx0w0;
      while_for_2_equal_tmp_2_1 <= while_for_2_equal_tmp_2_mx0w0;
      while_for_slc_while_for_acc_3_svs_1 <= while_for_acc_itm_3_1;
      while_for_1_slc_while_for_1_acc_3_svs_1 <= while_for_1_acc_itm_3_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_slc_while_for_acc_3_svs_st_1 <= 1'b0;
    end
    else if ( run_wen & (((~ mux_tmp_14) & while_stage_v_1) | while_for_slc_while_for_acc_3_svs_st_1_mx0c1)
        ) begin
      while_for_slc_while_for_acc_3_svs_st_1 <= MUX_s_1_2_2(while_for_acc_itm_3_1,
          while_for_slc_while_for_acc_3_svs_st, while_for_slc_while_for_acc_3_svs_st_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_2_lpi_1_dfm_st_1_2 <= 1'b0;
      lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0 <= 2'b00;
    end
    else if ( while_for_2_and_9_cse ) begin
      lfst_exit_while_for_2_lpi_1_dfm_st_1_2 <= lfst_exit_while_for_2_lpi_1_dfm_2_mx1w2;
      lfst_exit_while_for_2_lpi_1_dfm_st_1_1_0 <= lfst_exit_while_for_2_lpi_1_dfm_1_0_mx1w1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_3 <= 1'b0;
    end
    else if ( run_wen & ((and_tmp_4 & while_stage_v_2) | while_stage_v_3_mx1c1) )
        begin
      while_stage_v_3 <= ~ while_stage_v_3_mx1c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_4 <= 1'b0;
    end
    else if ( run_wen & ((while_stage_v_3 & and_tmp_19) | while_stage_v_4_mx1c1)
        ) begin
      while_stage_v_4 <= ~ while_stage_v_4_mx1c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_slc_while_for_acc_3_svs_st_3 <= 1'b0;
      lfst_exit_while_for_2_lpi_1_dfm_st_3_2 <= 1'b0;
      lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0 <= 2'b00;
    end
    else if ( while_for_and_3_cse ) begin
      while_for_slc_while_for_acc_3_svs_st_3 <= while_for_slc_while_for_acc_3_svs_st_2;
      lfst_exit_while_for_2_lpi_1_dfm_st_3_2 <= lfst_exit_while_for_2_lpi_1_dfm_st_2_2;
      lfst_exit_while_for_2_lpi_1_dfm_st_3_1_0 <= lfst_exit_while_for_2_lpi_1_dfm_st_2_1_0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_slc_while_for_acc_3_svs_st <= 1'b0;
    end
    else if ( run_wen & (~ mux_tmp_14) ) begin
      while_for_slc_while_for_acc_3_svs_st <= while_for_acc_itm_3_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( run_wen & (~(while_for_2_or_tmp_mx0w0 | while_for_2_equal_tmp_2_mx0w0
        | or_dcpl_21)) ) begin
      while_for_1_i_3_0_lpi_1 <= MUX_v_4_2_2(while_for_while_for_and_nl, while_for_1_i_3_0_sva_2,
          while_for_2_equal_tmp_1_mx1w1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_2_i_3_0_lpi_1 <= 4'b0000;
    end
    else if ( run_wen & (~((while_for_1_acc_itm_3_1 & while_for_2_equal_tmp_1_mx1w1)
        | or_dcpl_21 | while_for_2_equal_tmp_mx0w0 | while_for_2_or_tmp_mx0w0)) )
        begin
      while_for_2_i_3_0_lpi_1 <= MUX_v_4_2_2(({{3{while_for_1_acc_itm_3_1}}, while_for_1_acc_itm_3_1}),
          while_for_2_i_3_0_sva_2, while_for_2_i_and_2_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_2 <= 1'b0;
    end
    else if ( run_wen & (~ and_dcpl_12) ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_2 <= while_for_1_slc_while_for_1_acc_3_svs_st_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_1 <= 1'b0;
    end
    else if ( run_wen & (mux_41_nl | while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1)
        ) begin
      while_for_1_slc_while_for_1_acc_3_svs_st_1 <= MUX_s_1_2_2(while_for_1_acc_itm_3_1,
          while_for_2_acc_itm_3_1, while_for_1_slc_while_for_1_acc_3_svs_st_1_mx0c1);
    end
  end
  assign while_for_while_for_and_nl = MUX_v_4_2_2(4'b0000, while_for_1_i_3_0_lpi_1,
      while_for_acc_itm_3_1);
  assign while_for_2_i_and_2_nl = while_for_2_equal_tmp_2_mx0w0 & (~ or_dcpl_21);
  assign or_91_nl = while_for_2_equal_tmp_2_1 | (~((while_for_2_mux_3_tmp[0]) & and_tmp));
  assign mux_40_nl = MUX_s_1_2_2((~ and_tmp), or_91_nl, or_7_cse);
  assign nor_27_nl = ~(nor_tmp_2 | mux_40_nl);
  assign mux_41_nl = MUX_s_1_2_2(nor_26_cse, nor_27_nl, while_stage_v_2);

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input  vector;
  begin
    signext_2_1= {{1{vector}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_1;
    input  vector;
  begin
    signext_4_1= {{3{vector}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer_run
// ------------------------------------------------------------------


module InputBuffer_run (
  clk, rst, cfg_block_size, cfg_input_base, sync1_val, sync1_rdy, sync1_msg, dma_read_ctrl_val,
      dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val, dma_read_chnl_rdy,
      dma_read_chnl_msg, rotate_in_val, rotate_in_rdy, rotate_in_msg, mem_rsci_clken_d,
      mem_rsci_d_d, mem_rsci_q_d, mem_rsci_radr_d, mem_rsci_wadr_d, mem_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      mem_rsci_we_d_pff
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_input_base;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output rotate_in_val;
  input rotate_in_rdy;
  output [511:0] rotate_in_msg;
  output mem_rsci_clken_d;
  output [63:0] mem_rsci_d_d;
  input [63:0] mem_rsci_q_d;
  output [13:0] mem_rsci_radr_d;
  output [13:0] mem_rsci_wadr_d;
  output mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output mem_rsci_we_d_pff;


  // Interconnect Declarations
  wire run_wen;
  wire run_wten;
  wire sync1_Pop_mioi_bawt;
  reg sync1_Pop_mioi_iswt0;
  wire sync1_Pop_mioi_wen_comp;
  wire dma_read_ctrl_Push_mioi_bawt;
  wire dma_read_ctrl_Push_mioi_wen_comp;
  wire dma_read_chnl_Pop_mioi_bawt;
  reg dma_read_chnl_Pop_mioi_iswt0;
  wire dma_read_chnl_Pop_mioi_wen_comp;
  wire [63:0] dma_read_chnl_Pop_mioi_idat_mxwt;
  wire rotate_in_Push_mioi_bawt;
  reg rotate_in_Push_mioi_iswt0;
  wire rotate_in_Push_mioi_wen_comp;
  reg [27:0] dma_read_ctrl_Push_mioi_idat_63_36;
  reg [31:0] dma_read_ctrl_Push_mioi_idat_31_0;
  reg [63:0] rotate_in_Push_mioi_idat_511_448;
  reg [31:0] rotate_in_Push_mioi_idat_447_416;
  reg [31:0] rotate_in_Push_mioi_idat_415_384;
  reg [31:0] rotate_in_Push_mioi_idat_383_352;
  reg [31:0] rotate_in_Push_mioi_idat_351_320;
  reg [31:0] rotate_in_Push_mioi_idat_319_288;
  reg [31:0] rotate_in_Push_mioi_idat_287_256;
  reg [31:0] rotate_in_Push_mioi_idat_255_224;
  reg [31:0] rotate_in_Push_mioi_idat_223_192;
  reg [31:0] rotate_in_Push_mioi_idat_191_160;
  reg [31:0] rotate_in_Push_mioi_idat_159_128;
  reg [31:0] rotate_in_Push_mioi_idat_127_96;
  reg [31:0] rotate_in_Push_mioi_idat_95_64;
  reg [31:0] rotate_in_Push_mioi_idat_63_32;
  reg [31:0] rotate_in_Push_mioi_idat_31_0;
  wire [1:0] while_for_1_while_for_1_mux1h_tmp;
  wire operator_32_false_less_tmp;
  wire or_dcpl_10;
  wire and_dcpl_1;
  wire and_dcpl_4;
  wire and_dcpl_5;
  wire or_dcpl_16;
  wire and_dcpl_6;
  wire and_dcpl_8;
  wire and_dcpl_10;
  wire or_dcpl_17;
  wire or_dcpl_19;
  wire and_dcpl_12;
  wire or_dcpl_20;
  wire and_dcpl_15;
  wire and_dcpl_16;
  wire or_dcpl_22;
  wire and_dcpl_21;
  wire and_dcpl_22;
  wire or_dcpl_24;
  wire and_dcpl_27;
  wire and_dcpl_32;
  wire and_dcpl_37;
  wire and_dcpl_42;
  wire and_dcpl_45;
  wire and_dcpl_50;
  wire and_dcpl_52;
  wire and_tmp_8;
  wire and_tmp_9;
  wire mux_tmp_35;
  wire or_dcpl_35;
  wire and_dcpl_53;
  wire and_tmp_10;
  wire and_dcpl_54;
  wire mux_tmp_38;
  wire or_dcpl_52;
  wire and_dcpl_58;
  wire and_dcpl_59;
  wire or_dcpl_55;
  wire or_dcpl_58;
  wire mux_tmp_42;
  wire or_dcpl_60;
  wire or_dcpl_61;
  wire and_dcpl_63;
  wire or_dcpl_63;
  wire or_dcpl_70;
  wire or_dcpl_71;
  wire or_dcpl_72;
  wire or_tmp_58;
  wire mux_tmp_54;
  wire and_tmp_17;
  wire while_while_or_3_cse_1;
  wire while_or_2_cse_1;
  wire while_or_3_cse_1;
  wire while_while_or_cse_1;
  wire while_for_1_equal_tmp_1;
  wire [2:0] while_for_1_for_j_3_0_lpi_1_dfm_2_0_1;
  reg lfst_exitL_exit_while_for_1_for_lpi_1;
  reg exitL_exitL_exit_while_for_1_for_lpi_1;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_3;
  reg while_stage_v_1;
  reg while_for_1_asn_itm_1;
  reg while_stage_v_2;
  reg operator_32_false_slc_operator_32_false_acc_29_svs_st_1;
  reg while_for_1_asn_itm_2;
  reg while_stage_v_3;
  reg while_stage_v_4;
  reg while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_3;
  reg while_for_1_asn_sft_lpi_1_dfm_st_3;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_st_4;
  reg sfi_exit_while_for_1_lpi_1;
  wire while_for_1_asn_sft_lpi_1_dfm_mx0;
  reg [2:0] while_for_1_for_j_3_0_lpi_1_2_0;
  wire lfst_exitL_exit_while_for_1_for_lpi_1_dfm_1;
  reg exitL_exit_while_for_1_sva;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_st_2;
  reg while_for_1_asn_sft_lpi_1_dfm_st_1;
  reg while_for_1_asn_sft_lpi_1;
  reg while_for_1_for_and_5_cse_sva_1;
  reg while_for_1_equal_tmp_1_1;
  reg while_for_1_asn_sft_lpi_1_dfm_1;
  reg while_for_1_for_and_5_cse_sva_2;
  reg while_for_1_asn_sft_lpi_1_dfm_2;
  reg while_for_1_equal_tmp_2;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_st_3;
  reg while_for_1_asn_sft_lpi_1_dfm_st_2;
  reg while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_2;
  reg [2:0] while_for_1_for_j_3_0_lpi_1_dfm_2_2_0;
  wire exitL_exit_while_for_1_sva_mx0;
  wire [3:0] while_for_1_for_j_3_0_sva_2;
  wire [4:0] nl_while_for_1_for_j_3_0_sva_2;
  wire while_for_1_and_20_rgt;
  wire while_for_1_and_34_cse;
  wire while_for_1_and_35_cse;
  wire while_for_1_and_38_cse;
  wire while_for_1_and_39_cse;
  wire while_for_1_and_42_cse;
  wire while_for_1_and_43_cse;
  wire while_for_1_and_46_cse;
  wire while_and_cse;
  reg reg_dma_read_ctrl_Push_mioi_iswt0_cse;
  wire while_for_1_and_48_cse;
  wire while_for_1_out_reg_data_and_cse;
  wire while_for_1_out_reg_data_and_1_cse;
  wire while_for_1_out_reg_data_and_4_cse;
  wire while_for_1_out_reg_data_and_5_cse;
  wire while_for_1_out_reg_data_and_8_cse;
  wire while_for_1_out_reg_data_and_9_cse;
  wire while_for_1_for_j_and_1_cse;
  wire nor_12_cse;
  wire or_2_cse;
  wire or_1_cse;
  wire and_108_cse;
  wire sync1_read_reset_check_reset_while_for_nor_2_rmff;
  reg [13:0] while_for_slc_while_for_i_13_0_itm_1;
  reg [2:0] while_for_1_for_j_3_0_lpi_1_dfm_1_2_0_1;
  reg [31:0] while_for_i_lpi_1;
  wire operator_32_true_less_itm;
  wire [31:0] z_out;
  wire [32:0] nl_z_out;
  reg [31:0] while_for_1_i_lpi_1;
  reg [31:0] while_for_1_out_reg_data_7_lpi_1;
  reg [31:0] while_for_1_out_reg_data_8_lpi_1;
  reg [31:0] while_for_1_out_reg_data_6_lpi_1;
  reg [31:0] while_for_1_out_reg_data_9_lpi_1;
  reg [31:0] while_for_1_out_reg_data_5_lpi_1;
  reg [31:0] while_for_1_out_reg_data_10_lpi_1;
  reg [31:0] while_for_1_out_reg_data_4_lpi_1;
  reg [31:0] while_for_1_out_reg_data_11_lpi_1;
  reg [31:0] while_for_1_out_reg_data_3_lpi_1;
  reg [31:0] while_for_1_out_reg_data_12_lpi_1;
  reg [31:0] while_for_1_out_reg_data_2_lpi_1;
  reg [31:0] while_for_1_out_reg_data_13_lpi_1;
  reg [31:0] while_for_1_out_reg_data_1_lpi_1;
  reg [31:0] while_for_1_out_reg_data_0_lpi_1;
  reg operator_32_false_slc_operator_32_false_acc_29_svs_st;
  reg while_for_1_asn_sft_lpi_1_dfm_st;
  reg while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm;
  reg while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_1;
  wire exitL_exit_while_for_1_sva_mx0w0;
  wire while_for_while_for_or_mx1w1;
  wire exit_while_for_1_lpi_1_dfm_1;
  wire while_for_1_asn_itm_1_mx0c1;
  wire while_stage_v_2_mx1c1;
  wire while_for_slc_while_for_i_13_0_itm_1_mx0c1;
  wire operator_32_false_slc_operator_32_false_acc_29_svs_st_1_mx0c1;
  wire while_stage_v_3_mx1c1;
  wire while_stage_v_4_mx1c1;
  wire exitL_exit_while_for_1_for_lpi_1_dfm_1;
  wire and_73_rgt;
  wire and_74_rgt;
  wire mux_64_rgt;
  wire or_100_cse;
  wire while_for_1_and_55_cse;
  wire while_for_1_out_reg_data_and_12_cse;
  wire while_for_1_for_and_13_cse;
  wire while_for_1_and_58_itm;

  wire mux_37_nl;
  wire mux_36_nl;
  wire or_80_nl;
  wire or_79_nl;
  wire and_119_nl;
  wire nor_35_nl;
  wire[1:0] while_for_1_mux_nl;
  wire while_for_1_not_63_nl;
  wire[31:0] while_for_while_for_and_nl;
  wire mux_43_nl;
  wire[10:0] while_for_1_for_idx_mux_nl;
  wire and_88_nl;
  wire and_92_nl;
  wire mux_53_nl;
  wire or_130_nl;
  wire mux_55_nl;
  wire nor_16_nl;
  wire mux_56_nl;
  wire or_138_nl;
  wire mux_57_nl;
  wire or_140_nl;
  wire mux_58_nl;
  wire nor_17_nl;
  wire mux_59_nl;
  wire or_143_nl;
  wire while_for_1_not_61_nl;
  wire mux_63_nl;
  wire and_104_nl;
  wire mux_62_nl;
  wire and_102_nl;
  wire and_107_nl;
  wire[1:0] while_for_1_while_for_1_and_5_nl;
  wire while_for_1_not_5_nl;
  wire while_for_1_while_for_1_nor_2_nl;
  wire while_for_1_and_2_nl;
  wire while_for_1_while_for_1_for_nor_nl;
  wire nor_31_nl;
  wire or_109_nl;
  wire mux_41_nl;
  wire nand_nl;
  wire mux_44_nl;
  wire or_119_nl;
  wire and_117_nl;
  wire mux_47_nl;
  wire or_121_nl;
  wire mux_50_nl;
  wire mux_49_nl;
  wire or_127_nl;
  wire[31:0] while_for_1_mux_84_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_InputBuffer_run_sync1_Pop_mioi_inst_sync1_Pop_mioi_oswt_unreg;
  assign nl_InputBuffer_run_sync1_Pop_mioi_inst_sync1_Pop_mioi_oswt_unreg = ~ or_dcpl_35;
  wire  nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_oswt_unreg;
  assign nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_oswt_unreg
      = ~(and_dcpl_5 | and_dcpl_52 | (~(dma_read_ctrl_Push_mioi_bawt & while_for_1_asn_itm_2
      & while_stage_v_2)));
  wire [66:0] nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat;
  assign nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat
      = {3'b011 , dma_read_ctrl_Push_mioi_idat_63_36 , 4'b0000 , dma_read_ctrl_Push_mioi_idat_31_0};
  wire  nl_InputBuffer_run_rotate_in_Push_mioi_inst_rotate_in_Push_mioi_oswt_unreg;
  assign nl_InputBuffer_run_rotate_in_Push_mioi_inst_rotate_in_Push_mioi_oswt_unreg
      = ~(or_dcpl_10 | while_for_1_asn_sft_lpi_1_dfm_st_3 | (~ rotate_in_Push_mioi_bawt)
      | (~ while_stage_v_4));
  wire [511:0] nl_InputBuffer_run_rotate_in_Push_mioi_inst_rotate_in_Push_mioi_idat;
  assign nl_InputBuffer_run_rotate_in_Push_mioi_inst_rotate_in_Push_mioi_idat = {rotate_in_Push_mioi_idat_511_448
      , rotate_in_Push_mioi_idat_447_416 , rotate_in_Push_mioi_idat_415_384 , rotate_in_Push_mioi_idat_383_352
      , rotate_in_Push_mioi_idat_351_320 , rotate_in_Push_mioi_idat_319_288 , rotate_in_Push_mioi_idat_287_256
      , rotate_in_Push_mioi_idat_255_224 , rotate_in_Push_mioi_idat_223_192 , rotate_in_Push_mioi_idat_191_160
      , rotate_in_Push_mioi_idat_159_128 , rotate_in_Push_mioi_idat_127_96 , rotate_in_Push_mioi_idat_95_64
      , rotate_in_Push_mioi_idat_63_32 , rotate_in_Push_mioi_idat_31_0};
  wire  nl_InputBuffer_run_staller_inst_run_flen_unreg;
  assign nl_InputBuffer_run_staller_inst_run_flen_unreg = ~(((~(while_stage_v_1 &
      or_dcpl_55)) & while_while_or_3_cse_1 & while_or_2_cse_1 & while_or_3_cse_1
      & while_while_or_cse_1) | (while_stage_v_1 & (~(while_stage_v_2 & (or_dcpl_63
      | and_dcpl_52))) & while_while_or_3_cse_1 & while_or_2_cse_1 & while_or_3_cse_1
      & while_while_or_cse_1) | (while_stage_v_2 & (~(while_stage_v_3 & or_dcpl_70))
      & while_or_2_cse_1 & while_or_3_cse_1 & while_while_or_cse_1) | (while_stage_v_3
      & (~(while_stage_v_4 & and_dcpl_4 & and_dcpl_1)) & while_while_or_cse_1) |
      (while_stage_v_4 & while_while_or_cse_1));
  InputBuffer_run_sync1_Pop_mioi InputBuffer_run_sync1_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync1_Pop_mioi_oswt_unreg(nl_InputBuffer_run_sync1_Pop_mioi_inst_sync1_Pop_mioi_oswt_unreg),
      .sync1_Pop_mioi_bawt(sync1_Pop_mioi_bawt),
      .sync1_Pop_mioi_iswt0(sync1_Pop_mioi_iswt0),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp)
    );
  InputBuffer_run_dma_read_ctrl_Push_mioi InputBuffer_run_dma_read_ctrl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_read_ctrl_Push_mioi_oswt_unreg(nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_oswt_unreg),
      .dma_read_ctrl_Push_mioi_bawt(dma_read_ctrl_Push_mioi_bawt),
      .dma_read_ctrl_Push_mioi_iswt0(reg_dma_read_ctrl_Push_mioi_iswt0_cse),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp),
      .dma_read_ctrl_Push_mioi_idat(nl_InputBuffer_run_dma_read_ctrl_Push_mioi_inst_dma_read_ctrl_Push_mioi_idat[66:0])
    );
  InputBuffer_run_dma_read_chnl_Pop_mioi InputBuffer_run_dma_read_chnl_Pop_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_read_chnl_Pop_mioi_oswt_unreg(sync1_read_reset_check_reset_while_for_nor_2_rmff),
      .dma_read_chnl_Pop_mioi_bawt(dma_read_chnl_Pop_mioi_bawt),
      .dma_read_chnl_Pop_mioi_iswt0(dma_read_chnl_Pop_mioi_iswt0),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp),
      .dma_read_chnl_Pop_mioi_idat_mxwt(dma_read_chnl_Pop_mioi_idat_mxwt)
    );
  InputBuffer_run_rotate_in_Push_mioi InputBuffer_run_rotate_in_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_in_Push_mioi_oswt_unreg(nl_InputBuffer_run_rotate_in_Push_mioi_inst_rotate_in_Push_mioi_oswt_unreg),
      .rotate_in_Push_mioi_bawt(rotate_in_Push_mioi_bawt),
      .rotate_in_Push_mioi_iswt0(rotate_in_Push_mioi_iswt0),
      .rotate_in_Push_mioi_wen_comp(rotate_in_Push_mioi_wen_comp),
      .rotate_in_Push_mioi_idat(nl_InputBuffer_run_rotate_in_Push_mioi_inst_rotate_in_Push_mioi_idat[511:0])
    );
  InputBuffer_run_staller InputBuffer_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync1_Pop_mioi_wen_comp(sync1_Pop_mioi_wen_comp),
      .dma_read_ctrl_Push_mioi_wen_comp(dma_read_ctrl_Push_mioi_wen_comp),
      .dma_read_chnl_Pop_mioi_wen_comp(dma_read_chnl_Pop_mioi_wen_comp),
      .rotate_in_Push_mioi_wen_comp(rotate_in_Push_mioi_wen_comp),
      .run_flen_unreg(nl_InputBuffer_run_staller_inst_run_flen_unreg)
    );
  assign mux_36_nl = MUX_s_1_2_2(and_tmp_10, or_dcpl_19, lfst_exit_while_for_1_lpi_1_dfm_st_2[1]);
  assign or_80_nl = (lfst_exit_while_for_1_lpi_1_dfm_st_2[1]) | (~ and_tmp_10);
  assign or_79_nl = (lfst_exit_while_for_1_lpi_1_dfm_st_2[0]) | while_for_1_asn_sft_lpi_1_dfm_st_1;
  assign mux_37_nl = MUX_s_1_2_2((~ mux_36_nl), or_80_nl, or_79_nl);
  assign mem_rsci_clken_d = ~(mux_37_nl | and_dcpl_53 | (~ while_stage_v_2));
  assign while_for_1_and_34_cse = run_wen & ((and_dcpl_12 & and_dcpl_10 & and_dcpl_6
      & (~ (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2]))) | and_dcpl_15);
  assign while_for_1_and_35_cse = run_wen & ((and_dcpl_12 & and_dcpl_10 & and_dcpl_16
      & (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2])) | and_dcpl_21);
  assign while_for_1_and_38_cse = run_wen & ((and_dcpl_12 & and_dcpl_10 & and_dcpl_22
      & (~ (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2]))) | and_dcpl_27);
  assign while_for_1_and_39_cse = run_wen & ((and_dcpl_12 & and_dcpl_10 & and_dcpl_22
      & (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2])) | and_dcpl_32);
  assign while_for_1_and_42_cse = run_wen & ((and_dcpl_12 & and_dcpl_10 & and_dcpl_16
      & (~ (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2]))) | and_dcpl_37);
  assign while_for_1_and_43_cse = run_wen & ((and_dcpl_12 & and_dcpl_10 & and_dcpl_6
      & (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2])) | and_dcpl_42);
  assign while_for_1_and_46_cse = run_wen & ((or_dcpl_19 & and_dcpl_45 & and_dcpl_8
      & while_for_1_for_and_5_cse_sva_2) | and_dcpl_50);
  assign while_and_cse = run_wen & (~ or_dcpl_35);
  assign sync1_read_reset_check_reset_while_for_nor_2_rmff = ~(and_dcpl_5 | and_dcpl_53
      | (~ dma_read_chnl_Pop_mioi_bawt) | (~ operator_32_false_slc_operator_32_false_acc_29_svs_st_1)
      | (lfst_exit_while_for_1_lpi_1_dfm_st_2[1]) | (~ while_stage_v_2));
  assign while_for_1_and_55_cse = run_wen & (~ or_dcpl_52);
  assign and_73_rgt = mux_tmp_35 & while_for_1_equal_tmp_1 & (~ while_stage_v_1);
  assign while_for_1_and_48_cse = run_wen & (~ or_dcpl_55);
  assign nor_12_cse = ~((lfst_exit_while_for_1_lpi_1_dfm_3!=2'b10));
  assign and_74_rgt = and_dcpl_59 & while_stage_v_1;
  assign and_108_cse = while_for_1_asn_sft_lpi_1 & lfst_exitL_exit_while_for_1_for_lpi_1;
  assign while_for_1_and_58_itm = run_wen & mux_tmp_35;
  assign or_130_nl = (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0!=3'b000);
  assign mux_53_nl = MUX_s_1_2_2(or_tmp_58, (~ or_tmp_58), or_130_nl);
  assign while_for_1_out_reg_data_and_cse = run_wen & (~(mux_53_nl | or_dcpl_72));
  assign nor_16_nl = ~((while_for_1_for_j_3_0_lpi_1_dfm_2_2_0!=3'b110));
  assign mux_55_nl = MUX_s_1_2_2(and_tmp_17, mux_tmp_54, nor_16_nl);
  assign while_for_1_out_reg_data_and_1_cse = run_wen & (~((~ mux_55_nl) | or_dcpl_72));
  assign or_138_nl = (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0!=3'b001);
  assign mux_56_nl = MUX_s_1_2_2(mux_tmp_54, and_tmp_17, or_138_nl);
  assign while_for_1_out_reg_data_and_4_cse = run_wen & (~((~ mux_56_nl) | or_dcpl_72));
  assign or_140_nl = (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0!=3'b101);
  assign mux_57_nl = MUX_s_1_2_2(mux_tmp_54, and_tmp_17, or_140_nl);
  assign while_for_1_out_reg_data_and_5_cse = run_wen & (~((~ mux_57_nl) | or_dcpl_72));
  assign nor_17_nl = ~((while_for_1_for_j_3_0_lpi_1_dfm_2_2_0!=3'b010));
  assign mux_58_nl = MUX_s_1_2_2(and_tmp_17, mux_tmp_54, nor_17_nl);
  assign while_for_1_out_reg_data_and_8_cse = run_wen & (~((~ mux_58_nl) | or_dcpl_72));
  assign or_143_nl = (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0!=3'b100);
  assign mux_59_nl = MUX_s_1_2_2(mux_tmp_54, and_tmp_17, or_143_nl);
  assign while_for_1_out_reg_data_and_9_cse = run_wen & (~((~ mux_59_nl) | or_dcpl_72));
  assign while_for_1_out_reg_data_and_12_cse = run_wen & (~(or_dcpl_71 | while_for_1_asn_sft_lpi_1_dfm_2
      | (~ while_for_1_for_and_5_cse_sva_2)));
  assign while_for_1_for_and_13_cse = run_wen & (~ and_dcpl_5);
  assign while_for_1_for_j_and_1_cse = run_wen & (~ or_dcpl_70);
  assign and_104_nl = and_108_cse & mux_tmp_35;
  assign and_102_nl = (~ operator_32_true_less_itm) & mux_tmp_35;
  assign mux_62_nl = MUX_s_1_2_2(mux_tmp_35, and_102_nl, exitL_exit_while_for_1_sva);
  assign mux_63_nl = MUX_s_1_2_2(and_104_nl, mux_62_nl, exitL_exitL_exit_while_for_1_for_lpi_1);
  assign mux_64_rgt = MUX_s_1_2_2(mux_tmp_35, mux_63_nl, nor_12_cse);
  assign while_for_1_not_5_nl = ~ exit_while_for_1_lpi_1_dfm_1;
  assign while_for_1_while_for_1_and_5_nl = MUX_v_2_2_2(2'b00, lfst_exit_while_for_1_lpi_1_dfm_3,
      while_for_1_not_5_nl);
  assign while_for_1_while_for_1_nor_2_nl = ~(operator_32_false_less_tmp | while_for_1_equal_tmp_1);
  assign while_for_1_and_2_nl = operator_32_false_less_tmp & (~ while_for_1_equal_tmp_1);
  assign while_for_1_while_for_1_mux1h_tmp = MUX1HOT_v_2_3_2(2'b10, 2'b01, while_for_1_while_for_1_and_5_nl,
      {while_for_1_while_for_1_nor_2_nl , while_for_1_and_2_nl , while_for_1_equal_tmp_1});
  assign exitL_exit_while_for_1_sva_mx0w0 = ~((while_for_1_while_for_1_mux1h_tmp!=2'b00));
  assign exitL_exit_while_for_1_sva_mx0 = MUX_s_1_2_2(exitL_exit_while_for_1_sva,
      exitL_exit_while_for_1_sva_mx0w0, while_stage_v_1);
  assign while_for_while_for_or_mx1w1 = exitL_exitL_exit_while_for_1_for_lpi_1 |
      (~ operator_32_false_less_tmp);
  assign operator_32_false_less_tmp = $signed((while_for_i_lpi_1[31:4])) < $signed({1'b0,
      (cfg_block_size[28:1])});
  assign nl_while_for_1_for_j_3_0_sva_2 = conv_u2s_3_4(while_for_1_for_j_3_0_lpi_1_dfm_2_0_1)
      + 4'b0001;
  assign while_for_1_for_j_3_0_sva_2 = nl_while_for_1_for_j_3_0_sva_2[3:0];
  assign while_for_1_while_for_1_for_nor_nl = ~(sfi_exit_while_for_1_lpi_1 | (~ lfst_exitL_exit_while_for_1_for_lpi_1_dfm_1));
  assign while_for_1_for_j_3_0_lpi_1_dfm_2_0_1 = MUX_v_3_2_2(3'b000, while_for_1_for_j_3_0_lpi_1_2_0,
      while_for_1_while_for_1_for_nor_nl);
  assign lfst_exitL_exit_while_for_1_for_lpi_1_dfm_1 = lfst_exitL_exit_while_for_1_for_lpi_1
      & (~ exitL_exitL_exit_while_for_1_for_lpi_1);
  assign operator_32_true_less_itm = $signed(while_for_1_i_lpi_1) < $signed(cfg_block_size);
  assign while_for_1_and_20_rgt = (while_for_1_for_j_3_0_sva_2[3]) & (~ while_for_1_asn_sft_lpi_1_dfm_mx0)
      & while_for_1_equal_tmp_1;
  assign exit_while_for_1_lpi_1_dfm_1 = (~ operator_32_true_less_itm) & exitL_exitL_exit_while_for_1_for_lpi_1;
  assign while_for_1_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(while_for_1_asn_sft_lpi_1,
      exit_while_for_1_lpi_1_dfm_1, or_dcpl_60);
  assign while_for_1_equal_tmp_1 = (lfst_exit_while_for_1_lpi_1_dfm_3==2'b10);
  assign while_while_or_3_cse_1 = sync1_Pop_mioi_bawt | (~(while_for_1_asn_itm_1
      & while_stage_v_1));
  assign while_or_2_cse_1 = dma_read_ctrl_Push_mioi_bawt | (~(while_for_1_asn_itm_2
      & while_stage_v_2));
  assign while_or_3_cse_1 = dma_read_chnl_Pop_mioi_bawt | (~(operator_32_false_slc_operator_32_false_acc_29_svs_st_1
      & (((lfst_exit_while_for_1_lpi_1_dfm_st_2==2'b01)) | (~((lfst_exit_while_for_1_lpi_1_dfm_st_2!=2'b00))))
      & while_stage_v_2));
  assign while_while_or_cse_1 = rotate_in_Push_mioi_bawt | (~(while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_3
      & (~ while_for_1_asn_sft_lpi_1_dfm_st_3) & (lfst_exit_while_for_1_lpi_1_dfm_st_4==2'b10)
      & while_stage_v_4));
  assign exitL_exit_while_for_1_for_lpi_1_dfm_1 = (while_for_1_for_j_3_0_sva_2[3])
      | while_for_1_asn_sft_lpi_1_dfm_mx0;
  assign or_2_cse = (~ while_for_1_asn_itm_2) | dma_read_ctrl_Push_mioi_bawt;
  assign or_1_cse = (lfst_exit_while_for_1_lpi_1_dfm_st_2[1]) | (~ operator_32_false_slc_operator_32_false_acc_29_svs_st_1)
      | dma_read_chnl_Pop_mioi_bawt;
  assign or_dcpl_10 = (lfst_exit_while_for_1_lpi_1_dfm_st_4!=2'b10) | (~ while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_3);
  assign and_dcpl_1 = ~(while_for_1_asn_sft_lpi_1_dfm_st_3 | rotate_in_Push_mioi_bawt);
  assign and_dcpl_4 = (lfst_exit_while_for_1_lpi_1_dfm_st_4==2'b10) & while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_3;
  assign and_dcpl_5 = and_dcpl_4 & and_dcpl_1 & while_stage_v_4;
  assign or_dcpl_16 = and_dcpl_5 | (~ while_stage_v_3) | (lfst_exit_while_for_1_lpi_1_dfm_st_3!=2'b10)
      | while_for_1_asn_sft_lpi_1_dfm_st_2 | (~ while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_2);
  assign and_dcpl_6 = ~((while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[1:0]!=2'b00));
  assign and_dcpl_8 = (~ while_for_1_asn_sft_lpi_1_dfm_st_2) & while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_2;
  assign and_dcpl_10 = (lfst_exit_while_for_1_lpi_1_dfm_st_3==2'b10) & and_dcpl_8;
  assign or_dcpl_17 = while_for_1_asn_sft_lpi_1_dfm_st_3 | rotate_in_Push_mioi_bawt;
  assign or_dcpl_19 = or_dcpl_10 | or_dcpl_17 | (~ while_stage_v_4);
  assign and_dcpl_12 = or_dcpl_19 & while_stage_v_3;
  assign or_dcpl_20 = (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[1:0]!=2'b00);
  assign and_dcpl_15 = and_dcpl_12 & and_dcpl_10 & (or_dcpl_20 | (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2]));
  assign and_dcpl_16 = (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[1:0]==2'b10);
  assign or_dcpl_22 = (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[1:0]!=2'b10);
  assign and_dcpl_21 = and_dcpl_12 & and_dcpl_10 & (or_dcpl_22 | (~ (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2])));
  assign and_dcpl_22 = (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[1:0]==2'b01);
  assign or_dcpl_24 = (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[1:0]!=2'b01);
  assign and_dcpl_27 = and_dcpl_12 & and_dcpl_10 & (or_dcpl_24 | (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2]));
  assign and_dcpl_32 = and_dcpl_12 & and_dcpl_10 & (or_dcpl_24 | (~ (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2])));
  assign and_dcpl_37 = and_dcpl_12 & and_dcpl_10 & (or_dcpl_22 | (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2]));
  assign and_dcpl_42 = and_dcpl_12 & and_dcpl_10 & (or_dcpl_20 | (~ (while_for_1_for_j_3_0_lpi_1_dfm_2_2_0[2])));
  assign and_dcpl_45 = while_stage_v_3 & (lfst_exit_while_for_1_lpi_1_dfm_st_3==2'b10);
  assign and_dcpl_50 = or_dcpl_19 & and_dcpl_45 & and_dcpl_8 & (~ while_for_1_for_and_5_cse_sva_2);
  assign and_dcpl_52 = (~ dma_read_chnl_Pop_mioi_bawt) & operator_32_false_slc_operator_32_false_acc_29_svs_st_1
      & (~ (lfst_exit_while_for_1_lpi_1_dfm_st_2[1]));
  assign and_tmp_8 = or_2_cse & or_dcpl_19;
  assign and_tmp_9 = or_1_cse & and_tmp_8;
  assign mux_tmp_35 = MUX_s_1_2_2(or_dcpl_19, and_tmp_9, while_stage_v_2);
  assign or_dcpl_35 = ~(mux_tmp_35 & while_for_1_asn_itm_1 & sync1_Pop_mioi_bawt
      & while_stage_v_1);
  assign and_dcpl_53 = (~ dma_read_ctrl_Push_mioi_bawt) & while_for_1_asn_itm_2;
  assign and_tmp_10 = operator_32_false_slc_operator_32_false_acc_29_svs_st_1 & dma_read_chnl_Pop_mioi_bawt
      & or_dcpl_19;
  assign and_dcpl_54 = while_for_1_asn_itm_1 & (~ sync1_Pop_mioi_bawt);
  assign nor_31_nl = ~(while_for_1_asn_itm_1 | (~ mux_tmp_35));
  assign mux_tmp_38 = MUX_s_1_2_2(nor_31_nl, mux_tmp_35, sync1_Pop_mioi_bawt);
  assign or_dcpl_52 = ~(mux_tmp_35 & (~(and_dcpl_54 & while_stage_v_1)));
  assign and_dcpl_58 = mux_tmp_38 & while_for_1_equal_tmp_1 & while_stage_v_1;
  assign or_100_cse = (lfst_exit_while_for_1_lpi_1_dfm_3!=2'b10);
  assign and_dcpl_59 = mux_tmp_38 & or_100_cse;
  assign or_dcpl_55 = (~ mux_tmp_35) | and_dcpl_54 | (~ while_stage_v_1);
  assign or_dcpl_58 = and_dcpl_54 | (lfst_exit_while_for_1_lpi_1_dfm_3!=2'b10) |
      (~ while_stage_v_1);
  assign or_109_nl = and_108_cse | (~ mux_tmp_35);
  assign nand_nl = ~(operator_32_true_less_itm & mux_tmp_35);
  assign mux_41_nl = MUX_s_1_2_2((~ mux_tmp_35), nand_nl, exitL_exit_while_for_1_sva);
  assign mux_tmp_42 = MUX_s_1_2_2(or_109_nl, mux_41_nl, exitL_exitL_exit_while_for_1_for_lpi_1);
  assign or_dcpl_60 = (~ lfst_exitL_exit_while_for_1_for_lpi_1) | exitL_exitL_exit_while_for_1_for_lpi_1;
  assign or_dcpl_61 = (~ mux_tmp_35) | or_dcpl_58;
  assign and_dcpl_63 = mux_tmp_38 & while_stage_v_1;
  assign or_dcpl_63 = and_dcpl_5 | and_dcpl_53;
  assign or_dcpl_70 = and_dcpl_5 | (~ while_stage_v_3);
  assign or_dcpl_71 = ~(while_stage_v_3 & while_for_1_equal_tmp_2);
  assign or_dcpl_72 = or_dcpl_71 | while_for_1_asn_sft_lpi_1_dfm_2;
  assign or_tmp_58 = while_for_1_asn_sft_lpi_1_dfm_st_2 | (lfst_exit_while_for_1_lpi_1_dfm_st_3!=2'b10);
  assign mux_tmp_54 = ~(while_for_1_asn_sft_lpi_1_dfm_st_2 | (lfst_exit_while_for_1_lpi_1_dfm_st_3!=2'b10)
      | and_dcpl_5);
  assign and_tmp_17 = or_tmp_58 & or_dcpl_19;
  assign while_for_1_asn_itm_1_mx0c1 = mux_tmp_35 & (~ while_stage_v_1);
  assign or_119_nl = sync1_Pop_mioi_bawt | (~(while_for_1_asn_itm_1 & or_dcpl_19));
  assign mux_44_nl = MUX_s_1_2_2(and_dcpl_5, or_119_nl, while_stage_v_1);
  assign while_stage_v_2_mx1c1 = (~(mux_44_nl | (~((~ while_for_1_asn_itm_2) | dma_read_ctrl_Push_mioi_bawt))))
      & or_1_cse & while_stage_v_2;
  assign and_117_nl = while_stage_v_2 & (lfst_exit_while_for_1_lpi_1_dfm_st_2[1])
      & or_dcpl_63;
  assign or_121_nl = (lfst_exit_while_for_1_lpi_1_dfm_st_2[1]) | (((~ operator_32_false_slc_operator_32_false_acc_29_svs_st_1)
      | dma_read_chnl_Pop_mioi_bawt) & and_tmp_8);
  assign mux_47_nl = MUX_s_1_2_2(or_dcpl_19, or_121_nl, while_stage_v_2);
  assign while_for_slc_while_for_i_13_0_itm_1_mx0c1 = MUX_s_1_2_2(and_117_nl, mux_47_nl,
      lfst_exit_while_for_1_lpi_1_dfm_3[1]);
  assign operator_32_false_slc_operator_32_false_acc_29_svs_st_1_mx0c1 = mux_tmp_38
      & (lfst_exit_while_for_1_lpi_1_dfm_3[1]) & while_stage_v_1;
  assign or_127_nl = or_2_cse | and_dcpl_5;
  assign mux_49_nl = MUX_s_1_2_2(and_dcpl_5, or_127_nl, or_1_cse);
  assign mux_50_nl = MUX_s_1_2_2(and_dcpl_5, mux_49_nl, while_stage_v_2);
  assign while_stage_v_3_mx1c1 = (~ mux_50_nl) & while_stage_v_3;
  assign while_stage_v_4_mx1c1 = (or_dcpl_10 | or_dcpl_17) & while_stage_v_4 & (~
      while_stage_v_3);
  assign mem_rsci_d_d = dma_read_chnl_Pop_mioi_idat_mxwt;
  assign mem_rsci_radr_d = {(while_for_slc_while_for_i_13_0_itm_1[10:0]) , while_for_1_for_j_3_0_lpi_1_dfm_1_2_0_1};
  assign mem_rsci_wadr_d = while_for_slc_while_for_i_13_0_itm_1;
  assign mem_rsci_we_d_pff = sync1_read_reset_check_reset_while_for_nor_2_rmff;
  assign mem_rsci_readA_r_ram_ir_internal_RMASK_B_d = ~(and_dcpl_5 | and_dcpl_53
      | (~ (lfst_exit_while_for_1_lpi_1_dfm_st_2[1])) | (~ while_stage_v_2) | while_for_1_asn_sft_lpi_1_dfm_st_1
      | (lfst_exit_while_for_1_lpi_1_dfm_st_2[0]));
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_511_448 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~ or_dcpl_16) ) begin
      rotate_in_Push_mioi_idat_511_448 <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_63_32 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_34_cse ) begin
      rotate_in_Push_mioi_idat_31_0 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_0_lpi_1,
          and_dcpl_15);
      rotate_in_Push_mioi_idat_63_32 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_1_lpi_1,
          and_dcpl_15);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_447_416 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_415_384 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_35_cse ) begin
      rotate_in_Push_mioi_idat_447_416 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_13_lpi_1,
          and_dcpl_21);
      rotate_in_Push_mioi_idat_415_384 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_12_lpi_1,
          and_dcpl_21);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_95_64 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_127_96 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_38_cse ) begin
      rotate_in_Push_mioi_idat_95_64 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_2_lpi_1,
          and_dcpl_27);
      rotate_in_Push_mioi_idat_127_96 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_3_lpi_1,
          and_dcpl_27);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_383_352 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_351_320 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_39_cse ) begin
      rotate_in_Push_mioi_idat_383_352 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_11_lpi_1,
          and_dcpl_32);
      rotate_in_Push_mioi_idat_351_320 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_10_lpi_1,
          and_dcpl_32);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_159_128 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_191_160 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_42_cse ) begin
      rotate_in_Push_mioi_idat_159_128 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_4_lpi_1,
          and_dcpl_37);
      rotate_in_Push_mioi_idat_191_160 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_5_lpi_1,
          and_dcpl_37);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_319_288 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_287_256 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_43_cse ) begin
      rotate_in_Push_mioi_idat_319_288 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_9_lpi_1,
          and_dcpl_42);
      rotate_in_Push_mioi_idat_287_256 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_8_lpi_1,
          and_dcpl_42);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_idat_223_192 <= 32'b00000000000000000000000000000000;
      rotate_in_Push_mioi_idat_255_224 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_and_46_cse ) begin
      rotate_in_Push_mioi_idat_223_192 <= MUX_v_32_2_2((mem_rsci_q_d[31:0]), while_for_1_out_reg_data_6_lpi_1,
          and_dcpl_50);
      rotate_in_Push_mioi_idat_255_224 <= MUX_v_32_2_2((mem_rsci_q_d[63:32]), while_for_1_out_reg_data_7_lpi_1,
          and_dcpl_50);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Push_mioi_iswt0 <= 1'b0;
      reg_dma_read_ctrl_Push_mioi_iswt0_cse <= 1'b0;
      dma_read_chnl_Pop_mioi_iswt0 <= 1'b0;
      sync1_Pop_mioi_iswt0 <= 1'b0;
    end
    else if ( run_wen ) begin
      rotate_in_Push_mioi_iswt0 <= ~ or_dcpl_16;
      reg_dma_read_ctrl_Push_mioi_iswt0_cse <= ~ or_dcpl_35;
      dma_read_chnl_Pop_mioi_iswt0 <= ~((~ mux_tmp_35) | and_dcpl_54 | (lfst_exit_while_for_1_lpi_1_dfm_3[1])
          | (~(while_stage_v_1 & operator_32_false_less_tmp)));
      sync1_Pop_mioi_iswt0 <= MUX_s_1_2_2(and_119_nl, nor_35_nl, while_stage_v_1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_read_ctrl_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      dma_read_ctrl_Push_mioi_idat_63_36 <= 28'b0000000000000000000000000000;
    end
    else if ( while_and_cse ) begin
      dma_read_ctrl_Push_mioi_idat_31_0 <= cfg_input_base;
      dma_read_ctrl_Push_mioi_idat_63_36 <= cfg_block_size[28:1];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_1_lpi_1_dfm_3 <= 2'b00;
      while_stage_v_1 <= 1'b0;
    end
    else if ( while_for_1_and_55_cse ) begin
      lfst_exit_while_for_1_lpi_1_dfm_3 <= MUX_v_2_2_2(2'b00, while_for_1_mux_nl,
          while_for_1_not_63_nl);
      while_stage_v_1 <= 1'b1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exit_while_for_1_sva <= 1'b1;
    end
    else if ( run_wen & (and_dcpl_58 | and_dcpl_59 | and_73_rgt) ) begin
      exitL_exit_while_for_1_sva <= MUX1HOT_s_1_3_2(exitL_exit_while_for_1_for_lpi_1_dfm_1,
          while_for_while_for_or_mx1w1, exitL_exitL_exit_while_for_1_for_lpi_1, {and_dcpl_58
          , and_dcpl_59 , and_73_rgt});
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sfi_exit_while_for_1_lpi_1 <= 1'b0;
      lfst_exit_while_for_1_lpi_1_dfm_st_2 <= 2'b00;
      while_for_1_asn_itm_2 <= 1'b0;
    end
    else if ( while_for_1_and_48_cse ) begin
      sfi_exit_while_for_1_lpi_1 <= sfi_exit_while_for_1_lpi_1 & (~ while_for_1_equal_tmp_1);
      lfst_exit_while_for_1_lpi_1_dfm_st_2 <= lfst_exit_while_for_1_lpi_1_dfm_3;
      while_for_1_asn_itm_2 <= while_for_1_asn_itm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((~((~ while_for_1_equal_tmp_1) | while_for_1_and_20_rgt))
        | or_dcpl_55)) ) begin
      while_for_1_i_lpi_1 <= MUX_v_32_2_2(while_for_while_for_and_nl, z_out, while_for_1_and_20_rgt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_j_3_0_lpi_1_2_0 <= 3'b000;
    end
    else if ( run_wen & (~(mux_43_nl | or_dcpl_58)) ) begin
      while_for_1_for_j_3_0_lpi_1_2_0 <= while_for_1_for_j_3_0_sva_2[2:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( run_wen & (~(lfst_exitL_exit_while_for_1_for_lpi_1_dfm_1 | or_dcpl_61))
        ) begin
      while_for_1_asn_sft_lpi_1 <= exit_while_for_1_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exitL_exit_while_for_1_for_lpi_1 <= 1'b0;
    end
    else if ( run_wen & (~ or_dcpl_61) ) begin
      lfst_exitL_exit_while_for_1_for_lpi_1 <= ~ exitL_exit_while_for_1_for_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exitL_exit_while_for_1_for_lpi_1 <= 1'b0;
    end
    else if ( run_wen & (and_dcpl_58 | and_74_rgt) ) begin
      exitL_exitL_exit_while_for_1_for_lpi_1 <= MUX_s_1_2_2(exitL_exit_while_for_1_for_lpi_1_dfm_1,
          while_for_while_for_or_mx1w1, and_74_rgt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_asn_itm_1 <= 1'b0;
    end
    else if ( run_wen & (and_dcpl_63 | while_for_1_asn_itm_1_mx0c1) ) begin
      while_for_1_asn_itm_1 <= MUX_s_1_2_2(exitL_exit_while_for_1_sva_mx0w0, exitL_exit_while_for_1_sva,
          while_for_1_asn_itm_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_2 <= 1'b0;
    end
    else if ( run_wen & (and_dcpl_63 | while_stage_v_2_mx1c1) ) begin
      while_stage_v_2 <= ~ while_stage_v_2_mx1c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_slc_while_for_i_13_0_itm_1 <= 14'b00000000000000;
    end
    else if ( run_wen & ((mux_tmp_35 & (~ (lfst_exit_while_for_1_lpi_1_dfm_3[1])))
        | while_for_slc_while_for_i_13_0_itm_1_mx0c1) ) begin
      while_for_slc_while_for_i_13_0_itm_1 <= MUX_v_14_2_2((while_for_i_lpi_1[13:0]),
          ({3'b000 , while_for_1_for_idx_mux_nl}), while_for_slc_while_for_i_13_0_itm_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      operator_32_false_slc_operator_32_false_acc_29_svs_st_1 <= 1'b0;
    end
    else if ( run_wen & ((mux_tmp_38 & (~ (lfst_exit_while_for_1_lpi_1_dfm_3[1]))
        & while_stage_v_1) | operator_32_false_slc_operator_32_false_acc_29_svs_st_1_mx0c1)
        ) begin
      operator_32_false_slc_operator_32_false_acc_29_svs_st_1 <= MUX_s_1_2_2(operator_32_false_less_tmp,
          operator_32_false_slc_operator_32_false_acc_29_svs_st, operator_32_false_slc_operator_32_false_acc_29_svs_st_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_j_3_0_lpi_1_dfm_1_2_0_1 <= 3'b000;
    end
    else if ( run_wen & (~(and_dcpl_5 | (and_dcpl_53 & while_stage_v_2))) ) begin
      while_for_1_for_j_3_0_lpi_1_dfm_1_2_0_1 <= while_for_1_for_j_3_0_lpi_1_dfm_2_0_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_asn_sft_lpi_1_dfm_st_1 <= 1'b0;
      while_for_1_for_and_5_cse_sva_1 <= 1'b0;
      while_for_1_asn_sft_lpi_1_dfm_1 <= 1'b0;
      while_for_1_equal_tmp_1_1 <= 1'b0;
    end
    else if ( while_for_1_and_58_itm ) begin
      while_for_1_asn_sft_lpi_1_dfm_st_1 <= MUX_s_1_2_2(while_for_1_asn_sft_lpi_1_dfm_mx0,
          while_for_1_asn_sft_lpi_1_dfm_st, and_92_nl);
      while_for_1_for_and_5_cse_sva_1 <= (while_for_1_for_j_3_0_lpi_1_dfm_2_0_1==3'b011);
      while_for_1_asn_sft_lpi_1_dfm_1 <= MUX_s_1_2_2(while_for_1_asn_sft_lpi_1, exit_while_for_1_lpi_1_dfm_1,
          and_107_nl);
      while_for_1_equal_tmp_1_1 <= while_for_1_equal_tmp_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_3 <= 1'b0;
    end
    else if ( run_wen & ((while_stage_v_2 & and_tmp_9) | while_stage_v_3_mx1c1) )
        begin
      while_stage_v_3 <= ~ while_stage_v_3_mx1c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_0_lpi_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_1_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_cse ) begin
      while_for_1_out_reg_data_0_lpi_1 <= mem_rsci_q_d[31:0];
      while_for_1_out_reg_data_1_lpi_1 <= mem_rsci_q_d[63:32];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_13_lpi_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_12_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_1_cse ) begin
      while_for_1_out_reg_data_13_lpi_1 <= mem_rsci_q_d[63:32];
      while_for_1_out_reg_data_12_lpi_1 <= mem_rsci_q_d[31:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_2_lpi_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_3_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_4_cse ) begin
      while_for_1_out_reg_data_2_lpi_1 <= mem_rsci_q_d[31:0];
      while_for_1_out_reg_data_3_lpi_1 <= mem_rsci_q_d[63:32];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_11_lpi_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_10_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_5_cse ) begin
      while_for_1_out_reg_data_11_lpi_1 <= mem_rsci_q_d[63:32];
      while_for_1_out_reg_data_10_lpi_1 <= mem_rsci_q_d[31:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_4_lpi_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_5_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_8_cse ) begin
      while_for_1_out_reg_data_4_lpi_1 <= mem_rsci_q_d[31:0];
      while_for_1_out_reg_data_5_lpi_1 <= mem_rsci_q_d[63:32];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_9_lpi_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_8_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_9_cse ) begin
      while_for_1_out_reg_data_9_lpi_1 <= mem_rsci_q_d[63:32];
      while_for_1_out_reg_data_8_lpi_1 <= mem_rsci_q_d[31:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_out_reg_data_6_lpi_1 <= 32'b00000000000000000000000000000000;
      while_for_1_out_reg_data_7_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_for_1_out_reg_data_and_12_cse ) begin
      while_for_1_out_reg_data_6_lpi_1 <= mem_rsci_q_d[31:0];
      while_for_1_out_reg_data_7_lpi_1 <= mem_rsci_q_d[63:32];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_and_5_cse_sva_2 <= 1'b0;
      while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_2 <= 1'b0;
      while_for_1_for_j_3_0_lpi_1_dfm_2_2_0 <= 3'b000;
      while_for_1_asn_sft_lpi_1_dfm_st_2 <= 1'b0;
      lfst_exit_while_for_1_lpi_1_dfm_st_3 <= 2'b00;
      while_for_1_asn_sft_lpi_1_dfm_2 <= 1'b0;
      while_for_1_equal_tmp_2 <= 1'b0;
    end
    else if ( while_for_1_for_and_13_cse ) begin
      while_for_1_for_and_5_cse_sva_2 <= while_for_1_for_and_5_cse_sva_1;
      while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_2 <= while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_1;
      while_for_1_for_j_3_0_lpi_1_dfm_2_2_0 <= while_for_1_for_j_3_0_lpi_1_dfm_1_2_0_1;
      while_for_1_asn_sft_lpi_1_dfm_st_2 <= while_for_1_asn_sft_lpi_1_dfm_st_1;
      lfst_exit_while_for_1_lpi_1_dfm_st_3 <= lfst_exit_while_for_1_lpi_1_dfm_st_2;
      while_for_1_asn_sft_lpi_1_dfm_2 <= while_for_1_asn_sft_lpi_1_dfm_1;
      while_for_1_equal_tmp_2 <= while_for_1_equal_tmp_1_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_4 <= 1'b0;
    end
    else if ( run_wen & (and_dcpl_12 | while_stage_v_4_mx1c1) ) begin
      while_stage_v_4 <= ~ while_stage_v_4_mx1c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_3 <= 1'b0;
      while_for_1_asn_sft_lpi_1_dfm_st_3 <= 1'b0;
      lfst_exit_while_for_1_lpi_1_dfm_st_4 <= 2'b00;
    end
    else if ( while_for_1_for_j_and_1_cse ) begin
      while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_3 <= while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_2;
      while_for_1_asn_sft_lpi_1_dfm_st_3 <= while_for_1_asn_sft_lpi_1_dfm_st_2;
      lfst_exit_while_for_1_lpi_1_dfm_st_4 <= lfst_exit_while_for_1_lpi_1_dfm_st_3;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      operator_32_false_slc_operator_32_false_acc_29_svs_st <= 1'b0;
    end
    else if ( run_wen & (~((lfst_exit_while_for_1_lpi_1_dfm_3[1]) | (~ while_stage_v_1)))
        ) begin
      operator_32_false_slc_operator_32_false_acc_29_svs_st <= operator_32_false_less_tmp;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_i_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((~((~((~((lfst_exit_while_for_1_lpi_1_dfm_3[1]) ^ operator_32_false_less_tmp))
        | (~ while_stage_v_1) | while_for_1_equal_tmp_1)) | exitL_exit_while_for_1_sva_mx0))
        | or_dcpl_52)) ) begin
      while_for_i_lpi_1 <= MUX_v_32_2_2(32'b00000000000000000000000000000000, z_out,
          while_for_1_not_61_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_asn_sft_lpi_1_dfm_st <= 1'b0;
    end
    else if ( run_wen & (~(or_100_cse | (~ while_stage_v_1))) ) begin
      while_for_1_asn_sft_lpi_1_dfm_st <= while_for_1_asn_sft_lpi_1_dfm_mx0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_1 <= 1'b0;
    end
    else if ( run_wen & (((~ mux_tmp_42) & (lfst_exit_while_for_1_lpi_1_dfm_3==2'b10))
        | mux_64_rgt) ) begin
      while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm_1 <= MUX_s_1_2_2((while_for_1_for_j_3_0_sva_2[3]),
          while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm, mux_64_rgt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm <= 1'b0;
    end
    else if ( run_wen & (~(mux_tmp_42 | and_dcpl_54 | (lfst_exit_while_for_1_lpi_1_dfm_3!=2'b10)
        | (~ while_stage_v_1))) ) begin
      while_for_1_for_j_slc_while_for_1_for_j_3_0_3_1_itm <= while_for_1_for_j_3_0_sva_2[3];
    end
  end
  assign and_119_nl = exitL_exit_while_for_1_sva & mux_tmp_35;
  assign nor_35_nl = ~((while_for_1_while_for_1_mux1h_tmp!=2'b00) | (~ mux_tmp_38));
  assign while_for_1_mux_nl = MUX_v_2_2_2(lfst_exit_while_for_1_lpi_1_dfm_3, while_for_1_while_for_1_mux1h_tmp,
      while_stage_v_1);
  assign while_for_1_not_63_nl = ~ exitL_exit_while_for_1_sva_mx0;
  assign while_for_while_for_and_nl = MUX_v_32_2_2(32'b00000000000000000000000000000000,
      while_for_1_i_lpi_1, operator_32_false_less_tmp);
  assign mux_43_nl = MUX_s_1_2_2((~ mux_tmp_35), mux_tmp_42, nor_12_cse);
  assign and_88_nl = or_dcpl_63 & while_stage_v_2;
  assign while_for_1_for_idx_mux_nl = MUX_v_11_2_2((while_for_1_i_lpi_1[10:0]), (while_for_slc_while_for_i_13_0_itm_1[10:0]),
      and_88_nl);
  assign and_92_nl = mux_tmp_35 & or_100_cse;
  assign and_107_nl = mux_tmp_35 & or_dcpl_60;
  assign while_for_1_not_61_nl = ~ exitL_exit_while_for_1_sva_mx0;
  assign while_for_1_mux_84_nl = MUX_v_32_2_2(while_for_1_i_lpi_1, while_for_i_lpi_1,
      or_100_cse);
  assign nl_z_out = while_for_1_mux_84_nl + 32'b00000000000000000000000000000001;
  assign z_out = nl_z_out[31:0];

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input  sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input  sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate_run
// ------------------------------------------------------------------


module Rotate_run (
  clk, rst, cfg_cos_alpha, cfg_sin_alpha, cfg_cos_beta, cfg_sin_beta, cfg_cos_gamma,
      cfg_sin_gamma, cfg_cos_2_alpha, cfg_sin_2_alpha, cfg_cos_2_beta, cfg_cos_2_gamma,
      cfg_sin_2_gamma, cfg_cos_3_alpha, cfg_sin_3_alpha, cfg_cos_3_beta, cfg_sin_3_beta,
      cfg_cos_3_gamma, cfg_sin_3_gamma, rotate_in_val, rotate_in_rdy, rotate_in_msg,
      rotate_out_val, rotate_out_rdy, rotate_out_msg, while_mul_90_cmp_b, while_mul_90_cmp_en,
      while_mul_90_cmp_z, while_mul_110_cmp_b, while_mul_110_cmp_en, while_mul_110_cmp_z
);
  input clk;
  input rst;
  input [31:0] cfg_cos_alpha;
  input [31:0] cfg_sin_alpha;
  input [31:0] cfg_cos_beta;
  input [31:0] cfg_sin_beta;
  input [31:0] cfg_cos_gamma;
  input [31:0] cfg_sin_gamma;
  input [31:0] cfg_cos_2_alpha;
  input [31:0] cfg_sin_2_alpha;
  input [31:0] cfg_cos_2_beta;
  input [31:0] cfg_cos_2_gamma;
  input [31:0] cfg_sin_2_gamma;
  input [31:0] cfg_cos_3_alpha;
  input [31:0] cfg_sin_3_alpha;
  input [31:0] cfg_cos_3_beta;
  input [31:0] cfg_sin_3_beta;
  input [31:0] cfg_cos_3_gamma;
  input [31:0] cfg_sin_3_gamma;
  input rotate_in_val;
  output rotate_in_rdy;
  input [511:0] rotate_in_msg;
  output rotate_out_val;
  input rotate_out_rdy;
  output [511:0] rotate_out_msg;
  output [96:0] while_mul_90_cmp_b;
  output while_mul_90_cmp_en;
  input [96:0] while_mul_90_cmp_z;
  output [97:0] while_mul_110_cmp_b;
  output while_mul_110_cmp_en;
  input [97:0] while_mul_110_cmp_z;


  // Interconnect Declarations
  wire run_wen;
  wire run_wten;
  wire rotate_in_Pop_mioi_bawt;
  wire rotate_in_Pop_mioi_iden;
  reg rotate_in_Pop_mioi_iswt0;
  wire rotate_in_Pop_mioi_iden_1;
  wire rotate_in_Pop_mioi_wen_comp;
  wire [479:0] rotate_in_Pop_mioi_idat_mxwt;
  wire rotate_out_Push_mioi_bawt;
  wire rotate_out_Push_mioi_iden;
  reg rotate_out_Push_mioi_iswt0;
  wire rotate_out_Push_mioi_iden_1;
  wire rotate_out_Push_mioi_wen_comp;
  reg [31:0] rotate_out_Push_mioi_idat_511_480;
  reg [31:0] rotate_out_Push_mioi_idat_479_448;
  reg [31:0] rotate_out_Push_mioi_idat_447_416;
  reg [31:0] rotate_out_Push_mioi_idat_415_384;
  reg [31:0] rotate_out_Push_mioi_idat_383_352;
  reg [31:0] rotate_out_Push_mioi_idat_351_320;
  reg [31:0] rotate_out_Push_mioi_idat_319_288;
  reg [31:0] rotate_out_Push_mioi_idat_287_256;
  reg [31:0] rotate_out_Push_mioi_idat_255_224;
  reg [31:0] rotate_out_Push_mioi_idat_223_192;
  reg [31:0] rotate_out_Push_mioi_idat_191_160;
  reg [31:0] rotate_out_Push_mioi_idat_159_128;
  reg [31:0] rotate_out_Push_mioi_idat_127_96;
  reg [31:0] rotate_out_Push_mioi_idat_95_64;
  reg [31:0] rotate_out_Push_mioi_idat_63_32;
  wire [4:0] fsm_output;
  wire while_nor_tmp;
  wire while_and_1_tmp;
  wire or_dcpl;
  wire or_dcpl_2;
  wire or_dcpl_3;
  wire or_dcpl_5;
  wire or_dcpl_8;
  wire or_dcpl_10;
  wire or_dcpl_11;
  wire or_dcpl_12;
  wire or_dcpl_15;
  wire or_dcpl_16;
  wire and_dcpl_10;
  wire or_dcpl_20;
  wire or_dcpl_21;
  wire or_dcpl_24;
  wire or_dcpl_25;
  wire and_dcpl_28;
  wire and_dcpl_43;
  wire or_dcpl_38;
  wire and_dcpl_46;
  wire or_dcpl_40;
  wire and_dcpl_56;
  wire or_dcpl_46;
  wire and_dcpl_57;
  wire and_dcpl_68;
  wire or_dcpl_66;
  wire or_dcpl_67;
  wire or_tmp_1;
  wire or_tmp_2;
  wire and_tmp;
  wire and_dcpl_88;
  wire and_dcpl_99;
  wire or_dcpl_71;
  wire and_dcpl_108;
  wire and_dcpl_109;
  wire and_dcpl_116;
  wire or_dcpl_90;
  wire or_dcpl_97;
  wire or_dcpl_125;
  wire or_dcpl_139;
  wire or_dcpl_151;
  wire or_tmp_26;
  wire or_tmp_43;
  wire or_tmp_47;
  wire or_tmp_51;
  wire or_tmp_54;
  wire or_tmp_55;
  wire or_tmp_59;
  wire or_tmp_63;
  wire or_tmp_66;
  wire or_tmp_67;
  wire or_tmp_71;
  wire or_tmp_89;
  wire and_217_cse;
  wire and_218_cse;
  wire and_230_cse;
  wire and_176_cse;
  wire and_219_cse;
  wire and_221_cse;
  reg while_stage_v_3;
  reg while_stage_v_4;
  reg while_stage_v_5;
  reg while_stage_v_6;
  reg while_stage_v_7;
  reg while_stage_v_8;
  reg while_stage_v_9;
  reg while_stage_v_10;
  reg while_stage_v_11;
  reg while_stage_v_12;
  reg while_stage_v_13;
  reg while_stage_v_14;
  reg while_stage_v_15;
  reg while_stage_v_16;
  reg while_stage_v_2;
  reg while_stage_v_1;
  reg while_stage_v;
  wire while_and_cse;
  wire while_and_55_cse;
  wire while_and_60_cse;
  wire while_nor_9_cse;
  wire nand_5_cse;
  wire or_47_cse;
  wire while_while_and_6_cse;
  wire or_61_cse;
  wire and_72_cse;
  reg [81:0] while_mul_92_itm_1;
  reg [96:0] while_mul_99_itm;
  reg [97:0] while_mul_134_itm_2;
  reg [96:0] while_mul_145_itm_3;
  reg [97:0] while_mul_111_itm_1;
  reg [96:0] while_mul_125_itm_1;
  reg [479:0] while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32;
  wire [63:0] z_out_4;
  wire [63:0] z_out_15;
  wire [81:0] z_out_19;
  wire [81:0] z_out_20;
  wire [80:0] z_out_22;
  wire [63:0] z_out_23;
  wire signed [80:0] nl_z_out_23;
  wire [78:0] z_out_24;
  wire [81:0] z_out_25;
  wire signed [82:0] nl_z_out_25;
  wire [65:0] z_out_26;
  wire signed [99:0] nl_z_out_26;
  wire [96:0] z_out_27;
  wire signed [113:0] nl_z_out_27;
  wire [78:0] z_out_28;
  wire signed [111:0] nl_z_out_28;
  wire [79:0] z_out_29;
  wire signed [112:0] nl_z_out_29;
  wire [81:0] z_out_30;
  wire signed [114:0] nl_z_out_30;
  wire [96:0] z_out_31;
  wire signed [112:0] nl_z_out_31;
  wire [97:0] z_out_32;
  wire signed [113:0] nl_z_out_32;
  wire [48:0] z_out_33;
  wire signed [49:0] nl_z_out_33;
  wire [49:0] z_out_35;
  wire signed [50:0] nl_z_out_35;
  wire [49:0] z_out_36;
  wire signed [50:0] nl_z_out_36;
  wire [18:0] z_out_37;
  wire [19:0] nl_z_out_37;
  wire [32:0] z_out_38;
  wire [33:0] nl_z_out_38;
  reg [31:0] while_slc_47_16_ncse_sva;
  reg [31:0] while_slc_47_16_1_ncse_sva;
  reg [31:0] while_slc_47_16_3_ncse_sva;
  reg [31:0] while_slc_47_16_6_ncse_sva;
  reg [31:0] while_slc_47_16_7_ncse_sva;
  reg [31:0] while_slc_47_16_8_ncse_sva;
  reg [31:0] while_slc_47_16_9_ncse_sva;
  reg [31:0] while_slc_47_16_10_ncse_sva;
  reg [31:0] while_slc_47_16_11_ncse_sva;
  reg [63:0] while_mul_38_cse_sva;
  reg [31:0] while_slc_79_48_1_ncse_sva;
  reg [16:0] while_acc_78_cse_sva;
  reg [31:0] while_slc_63_32_ncse_sva;
  reg [31:0] while_slc_47_16_16_ncse_sva;
  reg [31:0] while_slc_47_16_17_ncse_sva;
  reg [31:0] while_slc_47_16_18_ncse_sva;
  reg [31:0] while_slc_47_16_19_ncse_sva;
  reg [31:0] while_slc_47_16_20_ncse_sva;
  reg [31:0] while_slc_47_16_21_ncse_sva;
  reg [31:0] while_slc_while_acc_82_76_45_ncse_sva;
  reg [31:0] while_slc_79_48_3_ncse_sva;
  reg [31:0] while_slc_79_48_4_ncse_sva;
  reg [34:0] while_acc_88_cse_sva;
  reg [31:0] while_slc_while_acc_92_63_32_ncse_sva;
  reg [31:0] while_slc_while_acc_97_66_35_ncse_sva;
  reg [47:0] while_mul_7_itm;
  reg [79:0] while_mul_35_itm;
  reg [79:0] while_not_22_itm;
  reg [63:0] while_mul_45_itm;
  reg [63:0] while_slc_while_mul_39_95_32_itm;
  reg [47:0] while_mul_61_itm;
  reg [45:0] while_mul_74_itm;
  reg [76:0] while_mul_73_itm;
  reg [76:0] while_mul_72_itm;
  reg [49:0] while_mul_68_itm;
  reg [81:0] while_mul_67_itm;
  reg [76:0] while_slc_while_while_mul_81_2_itm;
  reg [48:0] while_mul_78_itm;
  reg [79:0] while_mul_77_itm;
  reg [79:0] while_mul_76_itm;
  reg [45:0] while_mul_81_itm;
  reg [76:0] while_mul_80_itm;
  reg [47:0] while_mul_75_itm;
  reg [48:0] while_mul_89_itm;
  reg [79:0] while_mul_88_itm;
  reg [49:0] while_mul_83_itm;
  reg [50:0] while_mul_85_itm;
  reg [48:0] while_mul_108_itm;
  wire signed [49:0] nl_while_mul_108_itm;
  reg [81:0] while_mul_106_itm;
  reg [81:0] while_mul_112_itm;
  reg [97:0] while_mul_111_itm;
  reg [81:0] while_slc_while_mul_110_97_2_itm;
  reg [51:0] while_mul_115_itm;
  reg [45:0] while_mul_118_itm;
  reg [45:0] while_mul_122_itm;
  reg [78:0] while_mul_121_itm;
  reg [78:0] while_mul_120_itm;
  reg [31:0] reg_0_operator_for_13_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm;
  reg [49:0] while_mul_127_itm;
  reg [81:0] while_mul_126_itm;
  reg [96:0] while_mul_125_itm;
  reg [50:0] while_mul_129_itm;
  reg [48:0] while_mul_132_itm;
  reg [66:0] while_mul_131_itm;
  reg [81:0] while_mul_135_itm;
  reg [96:0] while_slc_while_while_mul_2_97_1_itm;
  reg [48:0] while_mul_147_itm;
  reg [80:0] while_mul_146_itm;
  reg [45:0] while_mul_142_itm;
  wire signed [46:0] nl_while_mul_142_itm;
  reg [49:0] while_mul_93_itm;
  reg [81:0] while_mul_92_itm;
  reg [96:0] while_asn_itm;
  reg [63:0] while_mul_96_itm;
  reg [65:0] while_mul_95_itm;
  reg [63:0] while_mul_103_itm;
  reg [47:0] while_mul_54_itm;
  reg [47:0] while_mul_51_itm;
  reg [79:0] while_slc_while_mul_25_80_1_itm;
  reg [79:0] while_mul_31_itm;
  reg [79:0] while_mul_30_itm;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm;
  reg [47:0] while_mul_50_itm;
  reg [31:0] while_slc_47_16_13_itm;
  reg [47:0] while_mul_48_itm;
  reg [31:0] while_slc_47_16_5_itm;
  reg [47:0] while_mul_5_itm;
  reg [31:0] while_slc_47_16_2_itm;
  reg [31:0] while_slc_47_16_4_itm;
  reg [31:0] while_slc_47_16_8_ncse_sva_1;
  reg [31:0] while_slc_47_16_8_ncse_sva_2;
  reg [31:0] while_slc_47_16_8_ncse_sva_3;
  reg [31:0] while_slc_47_16_9_ncse_sva_1;
  reg [31:0] while_slc_47_16_9_ncse_sva_2;
  reg [31:0] while_slc_47_16_10_ncse_sva_1;
  reg [31:0] while_slc_47_16_11_ncse_sva_1;
  reg [48:0] while_mul_27_cse_sva_1;
  reg [48:0] while_mul_27_cse_sva_2;
  reg [48:0] while_mul_27_cse_sva_3;
  reg [80:0] while_mul_26_cse_sva_1;
  reg [31:0] while_slc_79_48_1_ncse_sva_1;
  reg [31:0] while_slc_63_32_ncse_sva_1;
  reg [31:0] while_slc_47_16_16_ncse_sva_1;
  reg [31:0] while_slc_47_16_16_ncse_sva_2;
  reg [31:0] while_slc_47_16_19_ncse_sva_1;
  reg [31:0] while_slc_47_16_20_ncse_sva_1;
  reg [31:0] while_slc_47_16_21_ncse_sva_1;
  reg [31:0] while_slc_47_16_21_ncse_sva_2;
  reg [31:0] while_slc_while_acc_82_76_45_ncse_sva_1;
  reg [31:0] while_slc_79_48_3_ncse_sva_1;
  reg [31:0] while_slc_79_48_4_ncse_sva_1;
  reg [63:0] while_mul_45_itm_1;
  reg [63:0] while_mul_45_itm_2;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1;
  reg [63:0] while_slc_while_mul_39_95_32_itm_1;
  reg [45:0] while_mul_74_itm_1;
  reg [76:0] while_mul_72_itm_1;
  reg [81:0] while_mul_67_itm_1;
  reg [76:0] while_slc_while_while_mul_81_2_itm_1;
  reg [17:0] operator_64_48_true_AC_TRN_AC_WRAP_acc_itm_1;
  wire [18:0] nl_operator_64_48_true_AC_TRN_AC_WRAP_acc_itm_1;
  reg [14:0] operator_64_48_true_AC_TRN_AC_WRAP_slc_operator_32_16_true_AC_TRN_AC_WRAP_acc_psp_14_0_itm_1;
  reg [48:0] while_mul_78_itm_1;
  reg [79:0] while_not_25_itm_1;
  reg [45:0] while_mul_81_itm_1;
  reg [76:0] while_mul_79_itm_1;
  reg [47:0] while_mul_75_itm_1;
  reg [47:0] while_mul_75_itm_2;
  reg [48:0] while_mul_89_itm_1;
  reg [79:0] while_not_26_itm_1;
  reg [81:0] while_mul_82_itm_1;
  reg [79:0] while_slc_while_while_mul_1_95_16_itm_1;
  reg [50:0] while_mul_85_itm_1;
  reg [50:0] while_mul_85_itm_2;
  reg [48:0] while_mul_108_itm_1;
  reg [48:0] while_mul_108_itm_2;
  reg [81:0] while_mul_107_itm_1;
  reg [49:0] while_mul_113_itm_1;
  reg [51:0] while_mul_115_itm_1;
  reg [51:0] while_mul_115_itm_2;
  reg [45:0] while_mul_118_itm_1;
  reg [45:0] while_mul_118_itm_2;
  reg [63:0] while_mul_117_itm_1;
  reg [45:0] while_mul_122_itm_1;
  reg [45:0] while_mul_122_itm_2;
  reg [78:0] while_mul_121_itm_1;
  reg [31:0] reg_0_operator_for_13_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1;
  reg [50:0] while_mul_129_itm_1;
  reg [50:0] while_mul_129_itm_2;
  reg [48:0] while_mul_132_itm_1;
  reg [48:0] while_mul_132_itm_2;
  reg [48:0] while_mul_132_itm_3;
  reg [97:0] while_mul_134_itm_1;
  reg [96:0] while_mul_145_itm_1;
  reg [96:0] while_mul_145_itm_2;
  reg [51:0] while_mul_138_itm_1;
  reg [45:0] while_mul_142_itm_1;
  reg [45:0] while_mul_142_itm_2;
  reg [78:0] while_mul_141_itm_1;
  reg [47:0] while_mul_160_itm_1;
  reg [47:0] while_mul_158_itm_1;
  reg [47:0] while_mul_156_itm_1;
  reg [49:0] while_mul_93_itm_1;
  reg [48:0] while_mul_101_itm_1;
  reg [48:0] while_mul_101_itm_2;
  reg [80:0] while_mul_100_itm_1;
  reg [63:0] while_mul_96_itm_1;
  reg [63:0] while_mul_96_itm_2;
  reg [63:0] while_mul_96_itm_3;
  reg [45:0] while_mul_104_itm_1;
  reg [45:0] while_mul_104_itm_2;
  reg [63:0] while_mul_103_itm_1;
  reg [47:0] while_mul_54_itm_1;
  reg [47:0] while_mul_54_itm_2;
  reg [31:0] while_slc_47_16_14_itm_1;
  reg [31:0] while_slc_47_16_14_itm_2;
  reg [79:0] while_slc_while_mul_25_80_1_itm_1;
  reg [79:0] while_slc_while_mul_25_80_1_itm_2;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_1;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_2;
  reg [31:0] reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_3;
  reg [17:0] while_acc_75_itm_1;
  wire [18:0] nl_while_acc_75_itm_1;
  reg [17:0] while_acc_75_itm_2;
  reg [14:0] while_slc_while_acc_74_psp_14_0_itm_1;
  reg [14:0] while_slc_while_acc_74_psp_14_0_itm_2;
  reg [47:0] while_mul_50_itm_1;
  reg [31:0] while_slc_47_16_13_itm_1;
  reg [31:0] while_slc_47_16_13_itm_2;
  reg [47:0] while_mul_48_itm_1;
  reg [47:0] while_mul_48_itm_2;
  reg [47:0] while_mul_48_itm_3;
  reg [31:0] while_slc_47_16_5_itm_1;
  reg [31:0] while_slc_47_16_5_itm_2;
  reg [31:0] while_slc_47_16_5_itm_3;
  reg [31:0] while_slc_47_16_2_itm_1;
  reg [31:0] while_slc_47_16_2_itm_2;
  reg [31:0] while_slc_47_16_2_itm_3;
  reg [31:0] while_slc_47_16_4_itm_1;
  reg [31:0] while_slc_47_16_4_itm_2;
  reg [31:0] while_slc_47_16_4_itm_3;
  reg [78:0] while_acc_128_itm_96_18;
  wire [79:0] nl_while_acc_128_itm_96_18;
  wire [34:0] while_acc_88_cse_sva_mx1w0;
  wire [36:0] nl_while_acc_88_cse_sva_mx1w0;
  wire while_while_and_20_cse;
  wire while_or_31_cse;
  wire while_or_27_cse;
  wire [1:0] while_while_mux_2_cse;
  wire while_and_79_cse;
  wire while_and_80_cse;
  wire while_and_88_cse;
  wire while_and_106_cse;
  wire while_and_108_cse;
  wire while_and_112_cse;
  wire while_and_121_cse;
  wire while_and_124_cse;
  wire while_and_127_cse;
  wire while_and_132_cse;
  wire reg_0_operator_for_and_1_cse;
  wire while_and_86_cse;
  wire while_and_87_cse;
  wire while_and_164_cse;
  wire while_and_176_cse;
  wire while_and_180_cse;
  wire reg_0_operator_for_and_3_cse;
  wire while_and_187_cse;
  wire while_and_185_cse;
  wire while_and_181_cse;
  wire while_and_136_cse;
  wire while_and_135_cse;
  wire while_and_137_cse;
  wire while_and_231_cse;
  wire while_and_238_cse;
  wire while_or_36_cse;
  wire while_nor_35_cse;
  wire while_or_33_cse_1;
  wire or_104_itm;
  wire or_102_itm;
  wire or_103_itm;
  wire [31:0] while_acc_40_itm_47_16_1;
  wire [31:0] while_acc_114_itm_47_16_1;
  wire [31:0] while_acc_115_itm_47_16_1;
  wire [31:0] while_acc_113_itm_47_16_1;
  wire [31:0] while_acc_39_itm_47_16_1;
  wire [31:0] while_acc_38_itm_47_16_1;
  wire [31:0] while_acc_126_itm_96_65_1;
  wire [47:0] z_out_47_0;
  wire signed [63:0] nl_z_out_47_0;
  wire [47:0] z_out_1_47_0;
  wire signed [63:0] nl_z_out_1_47_0;
  wire [47:0] z_out_2_47_0;
  wire signed [63:0] nl_z_out_2_47_0;
  wire [47:0] z_out_3_47_0;
  wire signed [63:0] nl_z_out_3_47_0;
  wire [47:0] z_out_5_47_0;
  wire signed [63:0] nl_z_out_5_47_0;
  wire [47:0] z_out_6_47_0;
  wire signed [63:0] nl_z_out_6_47_0;
  wire [47:0] z_out_7_47_0;
  wire signed [63:0] nl_z_out_7_47_0;
  wire [47:0] z_out_8_47_0;
  wire signed [63:0] nl_z_out_8_47_0;
  wire [47:0] z_out_9_47_0;
  wire signed [63:0] nl_z_out_9_47_0;
  wire [47:0] z_out_10_47_0;
  wire signed [63:0] nl_z_out_10_47_0;
  wire [47:0] z_out_11_47_0;
  wire signed [63:0] nl_z_out_11_47_0;
  wire [47:0] z_out_12_47_0;
  wire signed [63:0] nl_z_out_12_47_0;
  wire [47:0] z_out_13_47_0;
  wire signed [63:0] nl_z_out_13_47_0;
  wire [47:0] z_out_14_47_0;
  wire signed [63:0] nl_z_out_14_47_0;
  wire [47:0] z_out_16_47_0;
  wire signed [63:0] nl_z_out_16_47_0;
  wire [47:0] z_out_17_47_0;
  wire signed [63:0] nl_z_out_17_47_0;
  wire [47:0] z_out_18_47_0;
  wire signed [63:0] nl_z_out_18_47_0;
  wire [79:0] z_out_21_79_0;
  wire signed [80:0] nl_z_out_21_79_0;
  wire [45:0] z_out_34_45_0;
  wire signed [46:0] nl_z_out_34_45_0;

  wire mux_nl;
  wire or_68_nl;
  wire[47:0] while_acc_108_nl;
  wire[48:0] nl_while_acc_108_nl;
  wire[79:0] while_acc_76_nl;
  wire[81:0] nl_while_acc_76_nl;
  wire[47:0] while_acc_31_nl;
  wire[48:0] nl_while_acc_31_nl;
  wire[47:0] while_acc_110_nl;
  wire[48:0] nl_while_acc_110_nl;
  wire[47:0] while_acc_111_nl;
  wire[48:0] nl_while_acc_111_nl;
  wire[47:0] while_acc_112_nl;
  wire[48:0] nl_while_acc_112_nl;
  wire[63:0] while_acc_87_nl;
  wire[64:0] nl_while_acc_87_nl;
  wire[96:0] while_acc_104_nl;
  wire[98:0] nl_while_acc_104_nl;
  wire[47:0] while_acc_71_nl;
  wire[48:0] nl_while_acc_71_nl;
  wire[47:0] while_acc_72_nl;
  wire[48:0] nl_while_acc_72_nl;
  wire[47:0] while_acc_73_nl;
  wire[48:0] nl_while_acc_73_nl;
  wire[66:0] while_acc_97_nl;
  wire[67:0] nl_while_acc_97_nl;
  wire[78:0] while_acc_106_nl;
  wire[80:0] nl_while_acc_106_nl;
  wire[63:0] while_acc_92_nl;
  wire[64:0] nl_while_acc_92_nl;
  wire[81:0] while_acc_105_nl;
  wire[83:0] nl_while_acc_105_nl;
  wire[79:0] while_acc_84_nl;
  wire[81:0] nl_while_acc_84_nl;
  wire[79:0] while_acc_83_nl;
  wire[81:0] nl_while_acc_83_nl;
  wire[76:0] while_acc_82_nl;
  wire[78:0] nl_while_acc_82_nl;
  wire[63:0] while_acc_79_nl;
  wire[65:0] nl_while_acc_79_nl;
  wire[47:0] while_acc_30_nl;
  wire[48:0] nl_while_acc_30_nl;
  wire[47:0] while_acc_109_nl;
  wire[48:0] nl_while_acc_109_nl;
  wire[47:0] while_acc_13_nl;
  wire[48:0] nl_while_acc_13_nl;
  wire[47:0] while_acc_12_nl;
  wire[48:0] nl_while_acc_12_nl;
  wire[47:0] while_acc_118_nl;
  wire[48:0] nl_while_acc_118_nl;
  wire[47:0] while_acc_119_nl;
  wire[48:0] nl_while_acc_119_nl;
  wire[47:0] while_acc_2_nl;
  wire[48:0] nl_while_acc_2_nl;
  wire[47:0] while_acc_3_nl;
  wire[48:0] nl_while_acc_3_nl;
  wire[47:0] while_acc_116_nl;
  wire[48:0] nl_while_acc_116_nl;
  wire[47:0] while_acc_117_nl;
  wire[48:0] nl_while_acc_117_nl;
  wire[47:0] while_acc_4_nl;
  wire[48:0] nl_while_acc_4_nl;
  wire[47:0] while_acc_nl;
  wire[48:0] nl_while_acc_nl;
  wire[47:0] while_acc_107_nl;
  wire[48:0] nl_while_acc_107_nl;
  wire[47:0] while_acc_7_nl;
  wire[48:0] nl_while_acc_7_nl;
  wire[79:0] while_acc_77_nl;
  wire[81:0] nl_while_acc_77_nl;
  wire[47:0] while_acc_40_nl;
  wire[48:0] nl_while_acc_40_nl;
  wire[47:0] while_acc_114_nl;
  wire[48:0] nl_while_acc_114_nl;
  wire[47:0] while_acc_115_nl;
  wire[48:0] nl_while_acc_115_nl;
  wire[47:0] while_acc_113_nl;
  wire[48:0] nl_while_acc_113_nl;
  wire[47:0] while_acc_39_nl;
  wire[48:0] nl_while_acc_39_nl;
  wire[47:0] while_acc_38_nl;
  wire[48:0] nl_while_acc_38_nl;
  wire[96:0] while_acc_126_nl;
  wire[97:0] nl_while_acc_126_nl;
  wire[96:0] while_acc_127_nl;
  wire[98:0] nl_while_acc_127_nl;
  wire or_190_nl;
  wire[31:0] while_mux1h_812_nl;
  wire[31:0] while_mux1h_813_nl;
  wire[31:0] while_mux1h_814_nl;
  wire[31:0] while_mux1h_815_nl;
  wire[31:0] while_mux1h_816_nl;
  wire[31:0] while_mux1h_817_nl;
  wire[31:0] while_while_mux_6_nl;
  wire[31:0] while_mux1h_818_nl;
  wire[31:0] while_mux1h_819_nl;
  wire[31:0] while_mux1h_820_nl;
  wire[31:0] while_mux1h_821_nl;
  wire[31:0] while_mux1h_822_nl;
  wire[31:0] while_mux_451_nl;
  wire[31:0] while_mux1h_823_nl;
  wire[31:0] while_mux1h_824_nl;
  wire[31:0] while_mux1h_825_nl;
  wire[31:0] while_mux1h_826_nl;
  wire[31:0] while_mux1h_827_nl;
  wire[31:0] while_mux1h_828_nl;
  wire[31:0] while_mux1h_829_nl;
  wire[31:0] while_mux_452_nl;
  wire[31:0] while_mux_453_nl;
  wire[31:0] while_mux_454_nl;
  wire[31:0] while_mux_455_nl;
  wire[31:0] while_mux1h_830_nl;
  wire[31:0] while_mux1h_831_nl;
  wire[31:0] while_mux1h_832_nl;
  wire[31:0] while_mux_456_nl;
  wire[31:0] while_mux1h_833_nl;
  wire[31:0] while_mux1h_834_nl;
  wire[31:0] while_mux1h_835_nl;
  wire[31:0] while_mux_457_nl;
  wire[31:0] while_mux_458_nl;
  wire[31:0] while_mux_459_nl;
  wire[31:0] while_mux_460_nl;
  wire[31:0] while_mux_461_nl;
  wire[31:0] while_mux_462_nl;
  wire[49:0] while_mux1h_836_nl;
  wire[31:0] while_mux_463_nl;
  wire while_mux1h_837_nl;
  wire while_mux1h_838_nl;
  wire[47:0] while_mux1h_839_nl;
  wire[31:0] while_mux1h_840_nl;
  wire[48:0] while_mux1h_841_nl;
  wire[35:0] while_acc_132_nl;
  wire[37:0] nl_while_acc_132_nl;
  wire[35:0] while_acc_133_nl;
  wire[37:0] nl_while_acc_133_nl;
  wire[34:0] while_acc_134_nl;
  wire[36:0] nl_while_acc_134_nl;
  wire[32:0] while_acc_135_nl;
  wire[33:0] nl_while_acc_135_nl;
  wire[31:0] while_mux1h_842_nl;
  wire while_or_42_nl;
  wire[32:0] while_mux1h_843_nl;
  wire[14:0] while_mux1h_844_nl;
  wire while_mux1h_845_nl;
  wire while_or_43_nl;
  wire[34:0] while_mux1h_846_nl;
  wire[29:0] while_mux1h_847_nl;
  wire[14:0] while_mux1h_848_nl;
  wire while_mux1h_849_nl;
  wire[16:0] while_while_mux_7_nl;
  wire[15:0] while_while_mux_8_nl;
  wire[45:0] while_mux1h_850_nl;
  wire[33:0] while_mux1h_851_nl;
  wire[33:0] while_acc_137_nl;
  wire[34:0] nl_while_acc_137_nl;
  wire[33:0] while_acc_138_nl;
  wire[34:0] nl_while_acc_138_nl;
  wire[30:0] while_acc_139_nl;
  wire[31:0] nl_while_acc_139_nl;
  wire[32:0] operator_64_48_true_AC_TRN_AC_WRAP_3_acc_1_nl;
  wire[34:0] nl_operator_64_48_true_AC_TRN_AC_WRAP_3_acc_1_nl;
  wire[48:0] while_mux1h_852_nl;
  wire[35:0] while_mux_464_nl;
  wire[35:0] operator_64_48_true_AC_TRN_AC_WRAP_2_acc_1_nl;
  wire[37:0] nl_operator_64_48_true_AC_TRN_AC_WRAP_2_acc_1_nl;
  wire[63:0] while_mux_465_nl;
  wire[31:0] while_mux1h_853_nl;
  wire[81:0] while_while_mux_9_nl;
  wire[31:0] while_mux_466_nl;
  wire[78:0] while_mux1h_854_nl;
  wire[31:0] while_mux_467_nl;
  wire[79:0] while_mux1h_855_nl;
  wire[31:0] while_mux_468_nl;
  wire[81:0] while_mux1h_856_nl;
  wire[31:0] while_mux1h_857_nl;
  wire[80:0] while_mux1h_858_nl;
  wire[81:0] while_mux1h_859_nl;
  wire[31:0] while_mux1h_860_nl;
  wire[31:0] while_mux1h_861_nl;
  wire[31:0] while_mux1h_862_nl;
  wire[31:0] while_mux1h_863_nl;
  wire[18:0] operator_64_48_true_AC_TRN_AC_WRAP_1_mux_1_nl;
  wire[29:0] operator_32_16_true_AC_TRN_AC_WRAP_1_mux_2_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [511:0] nl_Rotate_run_rotate_out_Push_mioi_inst_rotate_out_Push_mioi_idat;
  assign nl_Rotate_run_rotate_out_Push_mioi_inst_rotate_out_Push_mioi_idat = {rotate_out_Push_mioi_idat_511_480
      , rotate_out_Push_mioi_idat_479_448 , rotate_out_Push_mioi_idat_447_416 , rotate_out_Push_mioi_idat_415_384
      , rotate_out_Push_mioi_idat_383_352 , rotate_out_Push_mioi_idat_351_320 , rotate_out_Push_mioi_idat_319_288
      , rotate_out_Push_mioi_idat_287_256 , rotate_out_Push_mioi_idat_255_224 , rotate_out_Push_mioi_idat_223_192
      , rotate_out_Push_mioi_idat_191_160 , rotate_out_Push_mioi_idat_159_128 , rotate_out_Push_mioi_idat_127_96
      , rotate_out_Push_mioi_idat_95_64 , rotate_out_Push_mioi_idat_63_32 , 32'b00000000000000000000000000000000};
  wire nor_nl;
  wire nor_1_nl;
  wire nor_2_nl;
  wire nor_3_nl;
  wire  nl_Rotate_run_staller_inst_run_flen_unreg;
  assign nor_nl = ~(while_nor_tmp | (while_stage_v_3 & (~(while_stage_v_4 | while_stage_v_5
      | while_stage_v_6 | (while_stage_v_7 & or_dcpl_139))) & (fsm_output[4])) |
      (while_stage_v_7 & (~(while_stage_v_8 | while_stage_v_9 | while_stage_v_10
      | (while_stage_v_11 & or_dcpl_151))) & (fsm_output[4])) | (while_stage_v_11
      & (~(while_stage_v_12 | while_stage_v_13 | while_stage_v_14 | (while_stage_v_15
      & or_dcpl_66))) & (fsm_output[4])) | while_while_and_6_cse);
  assign nor_1_nl = ~((while_stage_v & (~(while_stage_v_1 | while_stage_v_2 | while_stage_v_3
      | (while_stage_v_4 & (and_dcpl_109 | while_stage_v_7 | or_dcpl_24)))) & rotate_in_Pop_mioi_bawt
      & (~ while_while_and_20_cse)) | (while_stage_v_4 & (~(while_stage_v_5 | while_stage_v_6
      | while_stage_v_7 | (while_stage_v_8 & (and_dcpl_108 | or_dcpl_8 | while_stage_v_9))))
      & (~ while_while_and_20_cse)) | (while_stage_v_8 & (~(while_stage_v_9 | while_stage_v_10
      | while_stage_v_11 | (while_stage_v_12 & (while_stage_v_15 | or_dcpl_5))))
      & (~ while_while_and_20_cse)) | (while_stage_v_12 & (~(while_stage_v_13 | while_stage_v_14
      | while_stage_v_15)) & (~ while_while_and_20_cse)) | while_and_1_tmp);
  assign nor_2_nl = ~((while_stage_v_1 & (~(while_stage_v_2 | while_stage_v_3 | while_stage_v_4
      | (while_stage_v_5 & or_104_itm)))) | (while_stage_v_5 & (~(while_stage_v_6
      | while_stage_v_7 | while_stage_v_8 | (while_stage_v_9 & or_103_itm)))) | (while_stage_v_9
      & (~(while_stage_v_10 | while_stage_v_11 | while_stage_v_12 | (while_stage_v_13
      & or_102_itm)))) | (while_stage_v_13 & (~(while_stage_v_14 | while_stage_v_15
      | while_stage_v_16))));
  assign nor_3_nl = ~((while_stage_v_2 & (~(while_stage_v_3 | while_stage_v_4 | while_stage_v_5
      | (while_stage_v_6 & (((and_tmp | or_dcpl_12 | while_stage_v_11) & while_stage_v_10)
      | while_stage_v_9 | while_stage_v_8 | while_stage_v_7))))) | (while_stage_v_6
      & (~(while_stage_v_7 | while_stage_v_8 | while_stage_v_9 | (while_stage_v_10
      & (and_tmp | while_stage_v_13 | or_dcpl_97))))) | (while_stage_v_10 & (~(while_stage_v_11
      | while_stage_v_12 | while_stage_v_13 | (while_stage_v_14 & or_tmp_1)))) |
      (while_stage_v_14 & while_nor_9_cse));
  assign nl_Rotate_run_staller_inst_run_flen_unreg = MUX1HOT_s_1_4_2(nor_nl, nor_1_nl,
      nor_2_nl, nor_3_nl, {or_dcpl_67 , (fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])});
  Rotate_run_rotate_in_Pop_mioi Rotate_run_rotate_in_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_in_Pop_mioi_oswt_unreg(and_230_cse),
      .rotate_in_Pop_mioi_bawt(rotate_in_Pop_mioi_bawt),
      .rotate_in_Pop_mioi_iden(rotate_in_Pop_mioi_iden),
      .rotate_in_Pop_mioi_iswt0(rotate_in_Pop_mioi_iswt0),
      .rotate_in_Pop_mioi_iden_1(rotate_in_Pop_mioi_iden_1),
      .rotate_in_Pop_mioi_wen_comp(rotate_in_Pop_mioi_wen_comp),
      .rotate_in_Pop_mioi_idat_mxwt(rotate_in_Pop_mioi_idat_mxwt)
    );
  Rotate_run_rotate_out_Push_mioi Rotate_run_rotate_out_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_out_Push_mioi_oswt_unreg(or_tmp_26),
      .rotate_out_Push_mioi_bawt(rotate_out_Push_mioi_bawt),
      .rotate_out_Push_mioi_iden(rotate_out_Push_mioi_iden),
      .rotate_out_Push_mioi_iswt0(rotate_out_Push_mioi_iswt0),
      .rotate_out_Push_mioi_iden_1(rotate_out_Push_mioi_iden_1),
      .rotate_out_Push_mioi_wen_comp(rotate_out_Push_mioi_wen_comp),
      .rotate_out_Push_mioi_idat(nl_Rotate_run_rotate_out_Push_mioi_inst_rotate_out_Push_mioi_idat[511:0])
    );
  Rotate_run_staller Rotate_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_in_Pop_mioi_iden(rotate_in_Pop_mioi_iden),
      .rotate_in_Pop_mioi_iden_1(rotate_in_Pop_mioi_iden_1),
      .rotate_in_Pop_mioi_wen_comp(rotate_in_Pop_mioi_wen_comp),
      .rotate_out_Push_mioi_iden(rotate_out_Push_mioi_iden),
      .rotate_out_Push_mioi_iden_1(rotate_out_Push_mioi_iden_1),
      .rotate_out_Push_mioi_wen_comp(rotate_out_Push_mioi_wen_comp),
      .run_flen_unreg(nl_Rotate_run_staller_inst_run_flen_unreg)
    );
  Rotate_run_run_fsm Rotate_run_run_fsm_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .fsm_output(fsm_output)
    );
  assign while_mul_90_cmp_en = and_221_cse | and_217_cse | and_218_cse;
  assign or_68_nl = (~ while_stage_v_10) | while_stage_v_11 | while_stage_v_12 |
      while_stage_v_13;
  assign mux_nl = MUX_s_1_2_2(and_tmp, or_tmp_1, or_68_nl);
  assign while_mul_110_cmp_en = ((~ mux_nl) & (fsm_output[3])) | and_217_cse | and_218_cse
      | and_219_cse;
  assign while_and_cse = run_wen & (~((~ (fsm_output[4])) | or_dcpl_66));
  assign while_nor_9_cse = ~(while_stage_v_15 | while_stage_v_16);
  assign while_while_and_6_cse = while_stage_v_15 & (~ while_stage_v_16) & (fsm_output[4]);
  assign while_and_79_cse = run_wen & (~(while_stage_v_13 | or_tmp_89));
  assign while_and_80_cse = run_wen & (~(or_dcpl_3 | or_tmp_89));
  assign while_and_86_cse = run_wen & (~ or_61_cse) & (fsm_output[4]);
  assign while_and_87_cse = run_wen & (~ or_dcpl_11) & (fsm_output[4]);
  assign while_and_88_cse = run_wen & (~ or_47_cse) & (fsm_output[4]);
  assign while_and_106_cse = run_wen & (~(or_dcpl_5 | while_stage_v_12)) & (fsm_output[4]);
  assign while_and_108_cse = run_wen & (~ or_dcpl_12) & (fsm_output[4]);
  assign while_and_112_cse = run_wen & (~ while_stage_v_12) & (fsm_output[4]);
  assign while_and_121_cse = run_wen & (~ or_dcpl_2) & (fsm_output[2]);
  assign while_and_124_cse = run_wen & (~ while_stage_v_15) & (fsm_output[3]);
  assign while_and_127_cse = run_wen & (~(or_dcpl_15 | or_tmp_89));
  assign while_and_132_cse = run_wen & (~(while_stage_v_5 | or_tmp_89));
  assign reg_0_operator_for_and_1_cse = run_wen & (~ while_stage_v_4) & (fsm_output[4]);
  assign while_and_135_cse = run_wen & (~ while_stage_v_6) & (fsm_output[2]);
  assign while_and_136_cse = run_wen & (~ or_dcpl_20) & (fsm_output[2]);
  assign while_and_137_cse = run_wen & (~ while_stage_v_7) & (fsm_output[3]);
  assign while_and_164_cse = run_wen & (~ while_stage_v_8) & (fsm_output[4]);
  assign while_and_176_cse = run_wen & (~ while_stage_v_11) & (fsm_output[3]);
  assign while_and_180_cse = run_wen & (~(or_dcpl_21 | or_tmp_89));
  assign while_nor_35_cse = ~(while_stage_v_5 | while_stage_v_4);
  assign while_and_181_cse = run_wen & while_nor_35_cse & (fsm_output[4]);
  assign while_and_185_cse = run_wen & (~ or_dcpl_25) & (fsm_output[4]);
  assign while_and_55_cse = run_wen & (~((~ (fsm_output[1])) | ((and_dcpl_109 | or_dcpl_21)
      & while_stage_v_4) | while_while_and_20_cse | while_stage_v_3 | (~ while_stage_v)
      | (~ rotate_in_Pop_mioi_bawt) | while_stage_v_1 | while_stage_v_2));
  assign reg_0_operator_for_and_3_cse = run_wen & (~ while_stage_v_3) & (fsm_output[3]);
  assign while_and_187_cse = run_wen & (~(and_72_cse | or_dcpl_25)) & (fsm_output[4]);
  assign while_and_231_cse = run_wen & (~(while_stage_v_1 | or_tmp_89));
  assign or_104_itm = (or_103_itm & while_stage_v_9) | while_stage_v_8 | while_stage_v_7
      | while_stage_v_6;
  assign while_and_60_cse = run_wen & (~((~ (fsm_output[2])) | (or_104_itm & while_stage_v_5)
      | while_stage_v_4 | while_stage_v_3 | (~ while_stage_v_1) | while_stage_v_2));
  assign while_and_238_cse = run_wen & (~ while_stage_v_2) & (fsm_output[2]);
  assign while_nor_tmp = ~((while_stage_v & (~ (fsm_output[0]))) | (while_stage_v_1
      & (~ (fsm_output[0]))) | (while_stage_v_2 & (~ (fsm_output[0]))) | (while_stage_v_3
      & (and_176_cse | ((and_72_cse | or_dcpl_24 | while_stage_v_4) & (fsm_output[4]))))
      | (while_stage_v_5 & (~ (fsm_output[0]))) | (while_stage_v_6 & (~ (fsm_output[0])))
      | (while_stage_v_7 & (and_176_cse | (or_dcpl_139 & (fsm_output[4])))) | (while_stage_v_9
      & (~ (fsm_output[0]))) | (while_stage_v_10 & (~ (fsm_output[0]))) | (while_stage_v_11
      & (and_176_cse | (or_dcpl_151 & (fsm_output[4])))) | (while_stage_v_13 & (~
      (fsm_output[0]))) | (while_stage_v_14 & (~ (fsm_output[0]))) | (while_stage_v_15
      & (and_176_cse | (or_dcpl_66 & (fsm_output[4])))));
  assign while_while_and_20_cse = while_stage_v_16 & (~ rotate_out_Push_mioi_bawt);
  assign nl_while_acc_88_cse_sva_mx1w0 = conv_s2s_32_35(cfg_sin_beta) + conv_s2s_32_35(cfg_sin_3_beta)
      + conv_s2s_34_35({cfg_sin_3_beta , 2'b00});
  assign while_acc_88_cse_sva_mx1w0 = nl_while_acc_88_cse_sva_mx1w0[34:0];
  assign nl_while_acc_40_nl = z_out_16_47_0 + z_out_7_47_0;
  assign while_acc_40_nl = nl_while_acc_40_nl[47:0];
  assign while_acc_40_itm_47_16_1 = readslicef_48_32_16(while_acc_40_nl);
  assign nl_while_acc_114_nl = z_out_17_47_0 - z_out_12_47_0;
  assign while_acc_114_nl = nl_while_acc_114_nl[47:0];
  assign while_acc_114_itm_47_16_1 = readslicef_48_32_16(while_acc_114_nl);
  assign nl_while_acc_115_nl = z_out_16_47_0 - z_out_18_47_0;
  assign while_acc_115_nl = nl_while_acc_115_nl[47:0];
  assign while_acc_115_itm_47_16_1 = readslicef_48_32_16(while_acc_115_nl);
  assign nl_while_acc_113_nl = z_out_3_47_0 - z_out_7_47_0;
  assign while_acc_113_nl = nl_while_acc_113_nl[47:0];
  assign while_acc_113_itm_47_16_1 = readslicef_48_32_16(while_acc_113_nl);
  assign nl_while_acc_39_nl = z_out_17_47_0 + z_out_18_47_0;
  assign while_acc_39_nl = nl_while_acc_39_nl[47:0];
  assign while_acc_39_itm_47_16_1 = readslicef_48_32_16(while_acc_39_nl);
  assign nl_while_acc_38_nl = while_mul_61_itm + z_out_3_47_0;
  assign while_acc_38_nl = nl_while_acc_38_nl[47:0];
  assign while_acc_38_itm_47_16_1 = readslicef_48_32_16(while_acc_38_nl);
  assign while_and_1_tmp = while_stage_v_16 & rotate_out_Push_mioi_bawt;
  assign nl_while_acc_127_nl = while_slc_while_while_mul_2_97_1_itm + (~ (while_mul_110_cmp_z[96:0]));
  assign while_acc_127_nl = nl_while_acc_127_nl[96:0];
  assign nl_while_acc_126_nl = while_acc_127_nl + ({while_acc_128_itm_96_18 , 18'b000000000000000001});
  assign while_acc_126_nl = nl_while_acc_126_nl[96:0];
  assign while_acc_126_itm_96_65_1 = readslicef_97_32_65(while_acc_126_nl);
  assign or_dcpl = (~ while_stage_v_16) | rotate_out_Push_mioi_bawt;
  assign or_dcpl_2 = while_stage_v_15 | while_stage_v_14;
  assign or_dcpl_3 = or_dcpl_2 | while_stage_v_13;
  assign or_dcpl_5 = while_stage_v_14 | while_stage_v_13;
  assign or_dcpl_8 = while_stage_v_11 | while_stage_v_10;
  assign or_dcpl_10 = while_stage_v_10 | while_stage_v_9;
  assign or_dcpl_11 = or_dcpl_10 | while_stage_v_8;
  assign or_dcpl_12 = while_stage_v_13 | while_stage_v_12;
  assign or_dcpl_15 = or_dcpl_8 | while_stage_v_9;
  assign or_dcpl_16 = ~((while_stage_v_15 | while_stage_v_14 | while_stage_v_13)
      & while_stage_v_12);
  assign and_dcpl_10 = ~(while_stage_v_7 | while_stage_v_6);
  assign or_dcpl_20 = while_stage_v_7 | while_stage_v_6;
  assign or_dcpl_21 = or_dcpl_20 | while_stage_v_5;
  assign or_dcpl_24 = while_stage_v_6 | while_stage_v_5;
  assign or_dcpl_25 = or_dcpl_24 | while_stage_v_4;
  assign and_dcpl_28 = ~(while_stage_v_8 | while_stage_v_7);
  assign nand_5_cse = ~((~(while_nor_9_cse & (~ while_stage_v_14))) & while_stage_v_13);
  assign and_dcpl_43 = ~(while_stage_v_13 | while_stage_v_12);
  assign or_dcpl_38 = while_nor_9_cse | (~ while_stage_v_14);
  assign and_dcpl_46 = ~(while_stage_v_9 | while_stage_v_8);
  assign or_dcpl_40 = ~((~(or_dcpl_38 & and_dcpl_43 & (~ while_stage_v_11))) & while_stage_v_10);
  assign and_dcpl_56 = while_stage_v_16 & while_stage_v_15;
  assign or_dcpl_46 = and_dcpl_56 | while_stage_v_14;
  assign or_47_cse = or_dcpl_46 | or_dcpl_12;
  assign and_dcpl_57 = or_47_cse & while_stage_v_11;
  assign and_dcpl_68 = ~(while_stage_v_10 | while_stage_v_9);
  assign or_61_cse = and_dcpl_57 | or_dcpl_11;
  assign and_72_cse = or_61_cse & while_stage_v_7;
  assign or_dcpl_66 = (~ while_stage_v_15) | while_stage_v_16;
  assign or_dcpl_67 = (fsm_output[4]) | (fsm_output[0]);
  assign or_tmp_1 = (~ while_stage_v_14) | while_stage_v_16 | while_stage_v_15;
  assign or_tmp_2 = while_stage_v_16 | while_stage_v_15;
  assign and_tmp = while_stage_v_14 & or_tmp_2;
  assign and_dcpl_88 = ~(and_dcpl_56 | while_stage_v_14);
  assign and_dcpl_99 = ~(while_stage_v_11 | while_stage_v_10);
  assign or_dcpl_71 = ~((~(or_dcpl_16 & and_dcpl_99 & (~ while_stage_v_9))) & while_stage_v_8);
  assign and_dcpl_108 = or_dcpl_3 & while_stage_v_12;
  assign and_dcpl_109 = (and_dcpl_108 | or_dcpl_15) & while_stage_v_8;
  assign and_dcpl_116 = ~(while_stage_v_12 | while_stage_v_11);
  assign or_dcpl_90 = ~((~(nand_5_cse & and_dcpl_116 & (~ while_stage_v_10))) & while_stage_v_9);
  assign or_dcpl_97 = while_stage_v_12 | while_stage_v_11;
  assign or_102_itm = or_tmp_2 | while_stage_v_14;
  assign or_103_itm = (or_102_itm & while_stage_v_13) | or_dcpl_97 | while_stage_v_10;
  assign or_dcpl_125 = ~((~(and_dcpl_88 & and_dcpl_43)) & while_stage_v_11);
  assign or_dcpl_139 = and_dcpl_57 | or_dcpl_10 | while_stage_v_8 | (~ while_stage_v_7);
  assign or_dcpl_151 = or_dcpl_46 | or_dcpl_12 | (~ while_stage_v_11);
  assign and_176_cse = ~((fsm_output[4]) | (fsm_output[0]));
  assign and_217_cse = or_dcpl & (~ while_stage_v_15) & (~(while_stage_v_14 | while_stage_v_13))
      & while_stage_v_12 & (fsm_output[1]);
  assign and_218_cse = while_nor_9_cse & (~ while_stage_v_14) & while_stage_v_13
      & (fsm_output[2]);
  assign and_219_cse = and_dcpl_88 & and_dcpl_43 & while_stage_v_11 & (fsm_output[4]);
  assign and_221_cse = while_nor_9_cse & while_stage_v_14 & (fsm_output[3]);
  assign or_tmp_26 = while_and_1_tmp & (fsm_output[1]);
  assign and_230_cse = (~((~(or_dcpl_71 & and_dcpl_10 & (~ while_stage_v_5))) & while_stage_v_4))
      & or_dcpl & (~ while_stage_v_3) & while_stage_v & rotate_in_Pop_mioi_bawt &
      (~(while_stage_v_1 | while_stage_v_2)) & (fsm_output[1]);
  assign or_tmp_43 = (~((~(or_dcpl_90 & and_dcpl_28 & (~ while_stage_v_6))) & while_stage_v_5))
      & (~(while_stage_v_4 | while_stage_v_3)) & while_stage_v_1 & (~ while_stage_v_2)
      & (fsm_output[2]);
  assign or_tmp_47 = (~((~(or_dcpl_40 & and_dcpl_46 & (~ while_stage_v_7))) & while_stage_v_6))
      & while_nor_35_cse & (~ while_stage_v_3) & while_stage_v_2 & (fsm_output[3]);
  assign or_tmp_51 = (~((~(or_dcpl_125 & and_dcpl_68 & (~ while_stage_v_8))) & while_stage_v_7))
      & (~(while_stage_v_6 | while_stage_v_5)) & (~ while_stage_v_4) & while_stage_v_3
      & (fsm_output[4]);
  assign or_tmp_54 = or_dcpl_71 & or_dcpl & and_dcpl_10 & (~ while_stage_v_5) & while_stage_v_4
      & (fsm_output[1]);
  assign or_tmp_55 = or_dcpl_90 & and_dcpl_28 & (~ while_stage_v_6) & while_stage_v_5
      & (fsm_output[2]);
  assign or_tmp_59 = or_dcpl_40 & and_dcpl_46 & (~ while_stage_v_7) & while_stage_v_6
      & (fsm_output[3]);
  assign or_tmp_63 = or_dcpl_125 & and_dcpl_68 & (~ while_stage_v_8) & while_stage_v_7
      & (fsm_output[4]);
  assign or_tmp_66 = or_dcpl_16 & or_dcpl & and_dcpl_99 & (~ while_stage_v_9) & while_stage_v_8
      & (fsm_output[1]);
  assign or_tmp_67 = nand_5_cse & and_dcpl_116 & (~ while_stage_v_10) & while_stage_v_9
      & (fsm_output[2]);
  assign or_tmp_71 = or_dcpl_38 & (~ while_stage_v_13) & and_dcpl_116 & while_stage_v_10
      & (fsm_output[3]);
  assign or_tmp_89 = ~((fsm_output[1:0]!=2'b00));
  assign while_mul_90_cmp_b = MUX_v_97_2_2(z_out_27, while_mul_99_itm, fsm_output[2]);
  assign or_190_nl = (fsm_output[1:0]!=2'b00);
  assign while_mul_110_cmp_b = MUX1HOT_v_98_4_2(while_mul_134_itm_2, ({{1{while_mul_145_itm_3[96]}},
      while_mul_145_itm_3}), while_mul_111_itm_1, ({{1{while_mul_125_itm_1[96]}},
      while_mul_125_itm_1}), {or_190_nl , (fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  assign while_or_33_cse_1 = (fsm_output[2:1]!=2'b00);
  assign while_or_36_cse = (fsm_output[1]) | (fsm_output[4]);
  assign while_or_31_cse = (fsm_output[3:2]!=2'b00);
  assign while_or_27_cse = (fsm_output[4:3]!=2'b00);
  assign while_while_mux_2_cse = MUX_v_2_2_2(2'b10, 2'b01, while_or_36_cse);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_in_Pop_mioi_iswt0 <= 1'b0;
      rotate_out_Push_mioi_iswt0 <= 1'b0;
    end
    else if ( run_wen ) begin
      rotate_in_Pop_mioi_iswt0 <= ~(and_176_cse | (~ while_nor_tmp));
      rotate_out_Push_mioi_iswt0 <= while_while_and_6_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      rotate_out_Push_mioi_idat_63_32 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_95_64 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_127_96 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_159_128 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_191_160 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_223_192 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_255_224 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_287_256 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_319_288 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_351_320 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_383_352 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_415_384 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_447_416 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_479_448 <= 32'b00000000000000000000000000000000;
      rotate_out_Push_mioi_idat_511_480 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_cse ) begin
      rotate_out_Push_mioi_idat_63_32 <= while_slc_47_16_4_itm_3;
      rotate_out_Push_mioi_idat_95_64 <= while_slc_47_16_2_itm_3;
      rotate_out_Push_mioi_idat_127_96 <= while_slc_47_16_5_itm_3;
      rotate_out_Push_mioi_idat_159_128 <= readslicef_48_32_16(while_acc_108_nl);
      rotate_out_Push_mioi_idat_191_160 <= while_slc_47_16_13_itm_2;
      rotate_out_Push_mioi_idat_223_192 <= readslicef_80_32_48(while_acc_76_nl);
      rotate_out_Push_mioi_idat_255_224 <= while_slc_47_16_14_itm_2;
      rotate_out_Push_mioi_idat_287_256 <= readslicef_48_32_16(while_acc_31_nl);
      rotate_out_Push_mioi_idat_319_288 <= readslicef_48_32_16(while_acc_110_nl);
      rotate_out_Push_mioi_idat_351_320 <= readslicef_48_32_16(while_acc_111_nl);
      rotate_out_Push_mioi_idat_383_352 <= readslicef_48_32_16(while_acc_112_nl);
      rotate_out_Push_mioi_idat_415_384 <= readslicef_64_32_32(while_acc_87_nl);
      rotate_out_Push_mioi_idat_447_416 <= readslicef_48_32_16(while_acc_71_nl);
      rotate_out_Push_mioi_idat_479_448 <= readslicef_48_32_16(while_acc_72_nl);
      rotate_out_Push_mioi_idat_511_480 <= readslicef_48_32_16(while_acc_73_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v <= 1'b0;
    end
    else if ( run_wen & ((while_nor_tmp & or_dcpl_67) | and_230_cse) ) begin
      while_stage_v <= ~ and_230_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_1 <= 1'b0;
    end
    else if ( run_wen & (and_230_cse | or_tmp_43) ) begin
      while_stage_v_1 <= ~ or_tmp_43;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_2 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_43 | or_tmp_47) ) begin
      while_stage_v_2 <= ~ or_tmp_47;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_3 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_47 | or_tmp_51) ) begin
      while_stage_v_3 <= ~ or_tmp_51;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_5 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_54 | or_tmp_55) ) begin
      while_stage_v_5 <= ~ or_tmp_55;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_6 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_55 | or_tmp_59) ) begin
      while_stage_v_6 <= ~ or_tmp_59;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_7 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_59 | or_tmp_63) ) begin
      while_stage_v_7 <= ~ or_tmp_63;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_9 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_66 | or_tmp_67) ) begin
      while_stage_v_9 <= ~ or_tmp_67;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_10 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_67 | or_tmp_71) ) begin
      while_stage_v_10 <= ~ or_tmp_71;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_11 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_71 | and_219_cse) ) begin
      while_stage_v_11 <= ~ and_219_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_13 <= 1'b0;
    end
    else if ( run_wen & (and_217_cse | and_218_cse) ) begin
      while_stage_v_13 <= ~ and_218_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_14 <= 1'b0;
    end
    else if ( run_wen & (and_218_cse | and_221_cse) ) begin
      while_stage_v_14 <= ~ and_221_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_15 <= 1'b0;
    end
    else if ( run_wen & (and_221_cse | while_while_and_6_cse) ) begin
      while_stage_v_15 <= ~ while_while_and_6_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_31_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_99_itm <= 97'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_131_itm <= 67'b0000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_120_itm <= 79'b0000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_79_cse ) begin
      while_mul_31_itm <= z_out_21_79_0;
      while_mul_99_itm <= z_out_31;
      while_mul_131_itm <= z_out_25[66:0];
      while_mul_120_itm <= z_out_29[78:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_95_itm <= 66'b000000000000000000000000000000000000000000000000000000000000000000;
      while_acc_128_itm_96_18 <= 79'b0000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_80_cse ) begin
      while_mul_95_itm <= z_out_26;
      while_acc_128_itm_96_18 <= nl_while_acc_128_itm_96_18[78:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_while_mul_110_97_2_itm <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~(or_dcpl_5 | or_tmp_89)) ) begin
      while_slc_while_mul_110_97_2_itm <= while_mul_110_cmp_z[97:16];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_4 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_54 | or_tmp_51) ) begin
      while_stage_v_4 <= ~ or_tmp_54;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_8 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_66 | or_tmp_63) ) begin
      while_stage_v_8 <= ~ or_tmp_66;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_125_itm_1 <= 97'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_47_16_8_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_mul_27_cse_sva_2 <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_115_itm_1 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_129_itm_1 <= 51'b000000000000000000000000000000000000000000000000000;
      while_mul_132_itm_2 <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_134_itm_1 <= 98'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_145_itm_2 <= 97'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_96_itm_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_mul_54_itm_1 <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_47_16_14_itm_1 <= 32'b00000000000000000000000000000000;
      while_slc_while_mul_25_80_1_itm_1 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_2
          <= 32'b00000000000000000000000000000000;
      while_acc_75_itm_1 <= 18'b000000000000000000;
      while_slc_while_acc_74_psp_14_0_itm_1 <= 15'b000000000000000;
      while_slc_47_16_13_itm_1 <= 32'b00000000000000000000000000000000;
      while_mul_48_itm_2 <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_47_16_5_itm_2 <= 32'b00000000000000000000000000000000;
      while_slc_47_16_2_itm_2 <= 32'b00000000000000000000000000000000;
      while_slc_47_16_4_itm_2 <= 32'b00000000000000000000000000000000;
      while_mul_101_itm_2 <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_142_itm_2 <= 46'b0000000000000000000000000000000000000000000000;
      while_slc_47_16_21_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_mul_118_itm_2 <= 46'b0000000000000000000000000000000000000000000000;
      while_mul_108_itm_2 <= 49'b0000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_86_cse ) begin
      while_mul_125_itm_1 <= while_mul_125_itm;
      while_slc_47_16_8_ncse_sva_2 <= while_slc_47_16_8_ncse_sva_1;
      while_mul_27_cse_sva_2 <= while_mul_27_cse_sva_1;
      while_mul_115_itm_1 <= while_mul_115_itm;
      while_mul_129_itm_1 <= while_mul_129_itm;
      while_mul_132_itm_2 <= while_mul_132_itm_1;
      while_mul_134_itm_1 <= z_out_32;
      while_mul_145_itm_2 <= while_mul_145_itm_1;
      while_mul_96_itm_2 <= while_mul_96_itm_1;
      while_mul_54_itm_1 <= while_mul_54_itm;
      while_slc_47_16_14_itm_1 <= readslicef_48_32_16(while_acc_30_nl);
      while_slc_while_mul_25_80_1_itm_1 <= while_slc_while_mul_25_80_1_itm;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_2
          <= reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_1;
      while_acc_75_itm_1 <= nl_while_acc_75_itm_1[17:0];
      while_slc_while_acc_74_psp_14_0_itm_1 <= z_out_38[14:0];
      while_slc_47_16_13_itm_1 <= while_slc_47_16_13_itm;
      while_mul_48_itm_2 <= while_mul_48_itm_1;
      while_slc_47_16_5_itm_2 <= while_slc_47_16_5_itm_1;
      while_slc_47_16_2_itm_2 <= while_slc_47_16_2_itm_1;
      while_slc_47_16_4_itm_2 <= while_slc_47_16_4_itm_1;
      while_mul_101_itm_2 <= while_mul_101_itm_1;
      while_mul_142_itm_2 <= while_mul_142_itm_1;
      while_slc_47_16_21_ncse_sva_2 <= while_slc_47_16_21_ncse_sva_1;
      while_mul_118_itm_2 <= while_mul_118_itm_1;
      while_mul_108_itm_2 <= while_mul_108_itm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_111_itm_1 <= 98'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_104_itm_2 <= 46'b0000000000000000000000000000000000000000000000;
      while_mul_93_itm_1 <= 50'b00000000000000000000000000000000000000000000000000;
      while_mul_122_itm_2 <= 46'b0000000000000000000000000000000000000000000000;
    end
    else if ( while_and_87_cse ) begin
      while_mul_111_itm_1 <= while_mul_111_itm;
      while_mul_104_itm_2 <= while_mul_104_itm_1;
      while_mul_93_itm_1 <= while_mul_93_itm;
      while_mul_122_itm_2 <= while_mul_122_itm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_12 <= 1'b0;
    end
    else if ( run_wen & (and_217_cse | and_219_cse) ) begin
      while_stage_v_12 <= ~ and_217_cse;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_160_itm_1 <= 48'b000000000000000000000000000000000000000000000000;
      while_mul_158_itm_1 <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_47_16_4_itm_3 <= 32'b00000000000000000000000000000000;
      while_mul_156_itm_1 <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_47_16_2_itm_3 <= 32'b00000000000000000000000000000000;
      while_mul_103_itm_1 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_slc_47_16_5_itm_3 <= 32'b00000000000000000000000000000000;
      while_slc_79_48_4_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_63_32_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_48_itm_3 <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_79_48_3_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_47_16_13_itm_2 <= 32'b00000000000000000000000000000000;
      while_slc_while_acc_82_76_45_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_while_mul_25_80_1_itm_2 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_3
          <= 32'b00000000000000000000000000000000;
      while_acc_75_itm_2 <= 18'b000000000000000000;
      while_slc_while_acc_74_psp_14_0_itm_2 <= 15'b000000000000000;
      while_mul_54_itm_2 <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_47_16_14_itm_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_88_cse ) begin
      while_mul_160_itm_1 <= z_out_11_47_0;
      while_mul_158_itm_1 <= z_out_12_47_0;
      while_slc_47_16_4_itm_3 <= while_slc_47_16_4_itm_2;
      while_mul_156_itm_1 <= z_out_13_47_0;
      while_slc_47_16_2_itm_3 <= while_slc_47_16_2_itm_2;
      while_mul_103_itm_1 <= while_mul_103_itm;
      while_slc_47_16_5_itm_3 <= while_slc_47_16_5_itm_2;
      while_slc_79_48_4_ncse_sva_1 <= while_slc_79_48_4_ncse_sva;
      while_slc_63_32_ncse_sva_1 <= while_slc_63_32_ncse_sva;
      while_mul_48_itm_3 <= while_mul_48_itm_2;
      while_slc_79_48_3_ncse_sva_1 <= while_slc_79_48_3_ncse_sva;
      while_slc_47_16_13_itm_2 <= while_slc_47_16_13_itm_1;
      while_slc_while_acc_82_76_45_ncse_sva_1 <= while_slc_while_acc_82_76_45_ncse_sva;
      while_slc_while_mul_25_80_1_itm_2 <= while_slc_while_mul_25_80_1_itm_1;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_3
          <= reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_2;
      while_acc_75_itm_2 <= while_acc_75_itm_1;
      while_slc_while_acc_74_psp_14_0_itm_2 <= while_slc_while_acc_74_psp_14_0_itm_1;
      while_mul_54_itm_2 <= while_mul_54_itm_1;
      while_slc_47_16_14_itm_2 <= while_slc_47_16_14_itm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_115_itm_2 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_117_itm_1 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_106_cse ) begin
      while_mul_115_itm_2 <= while_mul_115_itm_1;
      while_mul_117_itm_1 <= z_out_26[63:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_47_16_8_ncse_sva_3 <= 32'b00000000000000000000000000000000;
      while_mul_145_itm_3 <= 97'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_129_itm_2 <= 51'b000000000000000000000000000000000000000000000000000;
      while_mul_107_itm_1 <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_108_cse ) begin
      while_slc_47_16_8_ncse_sva_3 <= while_slc_47_16_8_ncse_sva_2;
      while_mul_145_itm_3 <= while_mul_145_itm_2;
      while_mul_129_itm_2 <= while_mul_129_itm_1;
      while_mul_107_itm_1 <= z_out_25;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_27_cse_sva_3 <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_96_itm_3 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_mul_100_itm_1 <= 81'b000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_92_itm_1 <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_138_itm_1 <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_141_itm_1 <= 79'b0000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_134_itm_2 <= 98'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_132_itm_3 <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_121_itm_1 <= 79'b0000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_112_cse ) begin
      while_mul_27_cse_sva_3 <= while_mul_27_cse_sva_2;
      while_mul_96_itm_3 <= while_mul_96_itm_2;
      while_mul_100_itm_1 <= z_out_22;
      while_mul_92_itm_1 <= while_mul_92_itm;
      while_mul_138_itm_1 <= z_out_21_79_0[51:0];
      while_mul_141_itm_1 <= z_out_24;
      while_mul_134_itm_2 <= while_mul_134_itm_1;
      while_mul_132_itm_3 <= while_mul_132_itm_2;
      while_mul_121_itm_1 <= while_mul_121_itm;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_30_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_acc_97_66_35_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_121_cse ) begin
      while_mul_30_itm <= z_out_29;
      while_slc_while_acc_97_66_35_ncse_sva <= readslicef_67_32_35(while_acc_97_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_106_itm <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~ while_stage_v_14) & (fsm_output[2]) ) begin
      while_mul_106_itm <= z_out_30;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_asn_itm <= 97'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_while_mul_2_97_1_itm <= 97'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_acc_92_63_32_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_124_cse ) begin
      while_asn_itm <= while_mul_90_cmp_z;
      while_slc_while_while_mul_2_97_1_itm <= while_mul_110_cmp_z[97:1];
      while_slc_while_acc_92_63_32_ncse_sva <= readslicef_64_32_32(while_acc_92_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_16 <= 1'b0;
    end
    else if ( run_wen & (or_tmp_26 | while_while_and_6_cse) ) begin
      while_stage_v_16 <= ~ or_tmp_26;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_79_48_4_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_79_48_3_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_while_acc_82_76_45_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_63_32_ncse_sva <= 32'b00000000000000000000000000000000;
      while_acc_78_cse_sva <= 17'b00000000000000000;
    end
    else if ( while_and_127_cse ) begin
      while_slc_79_48_4_ncse_sva <= readslicef_80_32_48(while_acc_84_nl);
      while_slc_79_48_3_ncse_sva <= readslicef_80_32_48(while_acc_83_nl);
      while_slc_while_acc_82_76_45_ncse_sva <= readslicef_77_32_45(while_acc_82_nl);
      while_slc_63_32_ncse_sva <= readslicef_64_32_32(while_acc_79_nl);
      while_acc_78_cse_sva <= z_out_37[16:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_127_itm <= 50'b00000000000000000000000000000000000000000000000000;
      while_mul_112_itm <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_73_itm <= 77'b00000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_132_cse ) begin
      while_mul_127_itm <= z_out_35;
      while_mul_112_itm <= z_out_19;
      while_mul_73_itm <= z_out_24[76:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_0_operator_for_13_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1
          <= 32'b00000000000000000000000000000000;
      while_mul_113_itm_1 <= 50'b00000000000000000000000000000000000000000000000000;
      while_slc_47_16_10_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_74_itm_1 <= 46'b0000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1
          <= 32'b00000000000000000000000000000000;
    end
    else if ( reg_0_operator_for_and_1_cse ) begin
      reg_0_operator_for_13_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1
          <= reg_0_operator_for_13_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm;
      while_mul_113_itm_1 <= z_out_35;
      while_slc_47_16_10_ncse_sva_1 <= while_slc_47_16_10_ncse_sva;
      while_mul_74_itm_1 <= while_mul_74_itm;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1
          <= reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_126_itm <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_77_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_135_cse ) begin
      while_mul_126_itm <= z_out_19;
      while_mul_77_itm <= z_out_25[79:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_111_itm <= 98'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_47_16_13_itm <= 32'b00000000000000000000000000000000;
      while_mul_135_itm <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_115_itm <= 52'b0000000000000000000000000000000000000000000000000000;
      while_mul_80_itm <= 77'b00000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_72_itm <= 77'b00000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_136_cse ) begin
      while_mul_111_itm <= z_out_32;
      while_slc_47_16_13_itm <= readslicef_48_32_16(while_acc_109_nl);
      while_mul_135_itm <= z_out_20;
      while_mul_115_itm <= z_out_21_79_0[51:0];
      while_mul_80_itm <= z_out_24[76:0];
      while_mul_72_itm <= z_out_28[76:0];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_125_itm <= 97'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_25_80_1_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_93_itm <= 50'b00000000000000000000000000000000000000000000000000;
      while_mul_129_itm <= 51'b000000000000000000000000000000000000000000000000000;
      while_mul_88_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_76_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_while_mul_81_2_itm <= 77'b00000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_137_cse ) begin
      while_mul_125_itm <= z_out_32[96:0];
      while_slc_while_mul_25_80_1_itm <= z_out_31[80:1];
      while_mul_93_itm <= z_out_36;
      while_mul_129_itm <= z_out_21_79_0[50:0];
      while_mul_88_itm <= z_out_25[79:0];
      while_mul_76_itm <= z_out_29;
      while_slc_while_while_mul_81_2_itm <= z_out_30[81:5];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_not_26_itm_1 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_while_mul_1_95_16_itm_1 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_85_itm_2 <= 51'b000000000000000000000000000000000000000000000000000;
      while_not_25_itm_1 <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_79_itm_1 <= 77'b00000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_75_itm_2 <= 48'b000000000000000000000000000000000000000000000000;
      while_mul_72_itm_1 <= 77'b00000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_while_mul_81_2_itm_1 <= 77'b00000000000000000000000000000000000000000000000000000000000000000000000000000;
      operator_64_48_true_AC_TRN_AC_WRAP_acc_itm_1 <= 18'b000000000000000000;
      operator_64_48_true_AC_TRN_AC_WRAP_slc_operator_32_16_true_AC_TRN_AC_WRAP_acc_psp_14_0_itm_1
          <= 15'b000000000000000;
      while_slc_47_16_16_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_slc_47_16_9_ncse_sva_2 <= 32'b00000000000000000000000000000000;
      while_mul_45_itm_2 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_slc_while_mul_39_95_32_itm_1 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_164_cse ) begin
      while_not_26_itm_1 <= ~ z_out_29;
      while_slc_while_while_mul_1_95_16_itm_1 <= z_out_30[81:2];
      while_mul_85_itm_2 <= while_mul_85_itm_1;
      while_not_25_itm_1 <= ~ while_mul_76_itm;
      while_mul_79_itm_1 <= z_out_28[76:0];
      while_mul_75_itm_2 <= while_mul_75_itm_1;
      while_mul_72_itm_1 <= while_mul_72_itm;
      while_slc_while_while_mul_81_2_itm_1 <= while_slc_while_while_mul_81_2_itm;
      operator_64_48_true_AC_TRN_AC_WRAP_acc_itm_1 <= nl_operator_64_48_true_AC_TRN_AC_WRAP_acc_itm_1[17:0];
      operator_64_48_true_AC_TRN_AC_WRAP_slc_operator_32_16_true_AC_TRN_AC_WRAP_acc_psp_14_0_itm_1
          <= z_out_38[14:0];
      while_slc_47_16_16_ncse_sva_2 <= while_slc_47_16_16_ncse_sva_1;
      while_slc_47_16_9_ncse_sva_2 <= while_slc_47_16_9_ncse_sva_1;
      while_mul_45_itm_2 <= while_mul_45_itm_1;
      while_slc_while_mul_39_95_32_itm_1 <= while_slc_while_mul_39_95_32_itm;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_103_itm <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_acc_88_cse_sva <= 35'b00000000000000000000000000000000000;
      while_mul_92_itm <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_121_itm <= 79'b0000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_176_cse ) begin
      while_mul_103_itm <= z_out_23;
      while_acc_88_cse_sva <= while_acc_88_cse_sva_mx1w0;
      while_mul_92_itm <= z_out_19;
      while_mul_121_itm <= z_out_24;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_51_itm <= 48'b000000000000000000000000000000000000000000000000;
      while_mul_54_itm <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_while_mul_39_95_32_itm <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_180_cse ) begin
      while_mul_51_itm <= z_out_7_47_0;
      while_mul_54_itm <= z_out_12_47_0;
      while_slc_while_mul_39_95_32_itm <= z_out_30[80:17];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_79_48_1_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_50_itm_1 <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_47_16_19_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_81_itm_1 <= 46'b0000000000000000000000000000000000000000000000;
      while_mul_78_itm_1 <= 49'b0000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_181_cse ) begin
      while_slc_79_48_1_ncse_sva_1 <= while_slc_79_48_1_ncse_sva;
      while_mul_50_itm_1 <= while_mul_50_itm;
      while_slc_47_16_19_ncse_sva_1 <= while_slc_47_16_19_ncse_sva;
      while_mul_81_itm_1 <= while_mul_81_itm;
      while_mul_78_itm_1 <= while_mul_78_itm;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_26_cse_sva_1 <= 81'b000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_47_16_20_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_89_itm_1 <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_67_itm_1 <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_185_cse ) begin
      while_mul_26_cse_sva_1 <= z_out_19[80:0];
      while_slc_47_16_20_ncse_sva_1 <= while_slc_47_16_20_ncse_sva;
      while_mul_89_itm_1 <= while_mul_89_itm;
      while_mul_67_itm_1 <= while_mul_67_itm;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32
          <= 480'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_118_itm <= 46'b0000000000000000000000000000000000000000000000;
      while_mul_38_cse_sva <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_slc_47_16_9_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_47_16_8_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_55_cse ) begin
      while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32
          <= rotate_in_Pop_mioi_idat_mxwt;
      while_mul_118_itm <= z_out_34_45_0;
      while_mul_38_cse_sva <= z_out_15;
      while_slc_47_16_9_ncse_sva <= readslicef_48_32_16(while_acc_13_nl);
      while_slc_47_16_8_ncse_sva <= readslicef_48_32_16(while_acc_12_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_0_operator_for_13_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm
          <= 32'b00000000000000000000000000000000;
      while_slc_47_16_21_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_47_16_4_itm <= 32'b00000000000000000000000000000000;
      while_slc_47_16_5_itm <= 32'b00000000000000000000000000000000;
      while_mul_48_itm <= 48'b000000000000000000000000000000000000000000000000;
      while_mul_50_itm <= 48'b000000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm
          <= 32'b00000000000000000000000000000000;
      while_mul_96_itm <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_mul_142_itm <= 46'b0000000000000000000000000000000000000000000000;
      while_slc_47_16_20_ncse_sva <= 32'b00000000000000000000000000000000;
      while_mul_132_itm <= 49'b0000000000000000000000000000000000000000000000000;
      while_slc_47_16_19_ncse_sva <= 32'b00000000000000000000000000000000;
      while_mul_122_itm <= 46'b0000000000000000000000000000000000000000000000;
      while_mul_108_itm <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_85_itm <= 51'b000000000000000000000000000000000000000000000000000;
      while_mul_83_itm <= 50'b00000000000000000000000000000000000000000000000000;
      while_mul_75_itm <= 48'b000000000000000000000000000000000000000000000000;
      while_mul_78_itm <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_67_itm <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_74_itm <= 46'b0000000000000000000000000000000000000000000000;
      while_slc_79_48_1_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( reg_0_operator_for_and_3_cse ) begin
      reg_0_operator_for_13_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm
          <= while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[383:352];
      while_slc_47_16_21_ncse_sva <= while_acc_40_itm_47_16_1;
      while_slc_47_16_4_itm <= readslicef_48_32_16(while_acc_107_nl);
      while_slc_47_16_5_itm <= readslicef_48_32_16(while_acc_7_nl);
      while_mul_48_itm <= z_out_1_47_0;
      while_mul_50_itm <= z_out_2_47_0;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm
          <= while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[191:160];
      while_mul_96_itm <= z_out_4;
      while_mul_142_itm <= nl_while_mul_142_itm[45:0];
      while_slc_47_16_20_ncse_sva <= while_acc_39_itm_47_16_1;
      while_mul_132_itm <= z_out_33;
      while_slc_47_16_19_ncse_sva <= while_acc_38_itm_47_16_1;
      while_mul_122_itm <= z_out_34_45_0;
      while_mul_108_itm <= nl_while_mul_108_itm[48:0];
      while_mul_85_itm <= z_out_22[50:0];
      while_mul_83_itm <= z_out_35;
      while_mul_75_itm <= z_out_15[47:0];
      while_mul_78_itm <= z_out_28[48:0];
      while_mul_67_itm <= z_out_20;
      while_mul_74_itm <= z_out_9_47_0[45:0];
      while_slc_79_48_1_ncse_sva <= readslicef_80_32_48(while_acc_77_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_47_16_9_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_47_16_8_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_27_cse_sva_1 <= 49'b0000000000000000000000000000000000000000000000000;
      while_slc_47_16_16_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_slc_47_16_21_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_45_itm_1 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_mul_75_itm_1 <= 48'b000000000000000000000000000000000000000000000000;
      while_mul_85_itm_1 <= 51'b000000000000000000000000000000000000000000000000000;
      while_mul_108_itm_1 <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_118_itm_1 <= 46'b0000000000000000000000000000000000000000000000;
      while_mul_122_itm_1 <= 46'b0000000000000000000000000000000000000000000000;
      while_mul_132_itm_1 <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_145_itm_1 <= 97'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_142_itm_1 <= 46'b0000000000000000000000000000000000000000000000;
      while_mul_101_itm_1 <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_96_itm_1 <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_mul_104_itm_1 <= 46'b0000000000000000000000000000000000000000000000;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_1
          <= 32'b00000000000000000000000000000000;
      while_mul_48_itm_1 <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_47_16_5_itm_1 <= 32'b00000000000000000000000000000000;
      while_slc_47_16_2_itm_1 <= 32'b00000000000000000000000000000000;
      while_slc_47_16_4_itm_1 <= 32'b00000000000000000000000000000000;
      while_slc_47_16_11_ncse_sva_1 <= 32'b00000000000000000000000000000000;
      while_mul_82_itm_1 <= 82'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( while_and_187_cse ) begin
      while_slc_47_16_9_ncse_sva_1 <= while_slc_47_16_9_ncse_sva;
      while_slc_47_16_8_ncse_sva_1 <= while_slc_47_16_8_ncse_sva;
      while_mul_27_cse_sva_1 <= z_out_36[48:0];
      while_slc_47_16_16_ncse_sva_1 <= while_slc_47_16_16_ncse_sva;
      while_slc_47_16_21_ncse_sva_1 <= while_slc_47_16_21_ncse_sva;
      while_mul_45_itm_1 <= while_mul_45_itm;
      while_mul_75_itm_1 <= while_mul_75_itm;
      while_mul_85_itm_1 <= while_mul_85_itm;
      while_mul_108_itm_1 <= while_mul_108_itm;
      while_mul_118_itm_1 <= while_mul_118_itm;
      while_mul_122_itm_1 <= while_mul_122_itm;
      while_mul_132_itm_1 <= while_mul_132_itm;
      while_mul_145_itm_1 <= z_out_31;
      while_mul_142_itm_1 <= while_mul_142_itm;
      while_mul_101_itm_1 <= z_out_33;
      while_mul_96_itm_1 <= while_mul_96_itm;
      while_mul_104_itm_1 <= z_out_34_45_0;
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_1
          <= reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm;
      while_mul_48_itm_1 <= while_mul_48_itm;
      while_slc_47_16_5_itm_1 <= while_slc_47_16_5_itm;
      while_slc_47_16_2_itm_1 <= while_slc_47_16_2_itm;
      while_slc_47_16_4_itm_1 <= while_slc_47_16_4_itm;
      while_slc_47_16_11_ncse_sva_1 <= while_slc_47_16_11_ncse_sva;
      while_mul_82_itm_1 <= z_out_20;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_mul_5_itm <= 48'b000000000000000000000000000000000000000000000000;
      while_mul_147_itm <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_35_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_47_16_7_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_47_16_6_ncse_sva <= 32'b00000000000000000000000000000000;
      while_mul_7_itm <= 48'b000000000000000000000000000000000000000000000000;
      while_slc_47_16_1_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_231_cse ) begin
      while_mul_5_itm <= z_out_2_47_0;
      while_mul_147_itm <= z_out_33;
      while_mul_35_itm <= z_out_20[79:0];
      while_slc_47_16_7_ncse_sva <= readslicef_48_32_16(while_acc_118_nl);
      while_slc_47_16_6_ncse_sva <= readslicef_48_32_16(while_acc_119_nl);
      while_mul_7_itm <= z_out_10_47_0;
      while_slc_47_16_1_ncse_sva <= readslicef_48_32_16(while_acc_2_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_47_16_2_itm <= 32'b00000000000000000000000000000000;
      while_mul_146_itm <= 81'b000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_mul_89_itm <= 49'b0000000000000000000000000000000000000000000000000;
      while_mul_81_itm <= 46'b0000000000000000000000000000000000000000000000;
      while_slc_47_16_16_ncse_sva <= 32'b00000000000000000000000000000000;
      while_mul_45_itm <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
      while_slc_47_16_11_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_47_16_10_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_60_cse ) begin
      while_slc_47_16_2_itm <= readslicef_48_32_16(while_acc_3_nl);
      while_mul_146_itm <= z_out_22;
      while_mul_89_itm <= z_out_33;
      while_mul_81_itm <= z_out_34_45_0;
      while_slc_47_16_16_ncse_sva <= while_acc_115_itm_47_16_1;
      while_mul_45_itm <= z_out_27[63:0];
      while_slc_47_16_11_ncse_sva <= readslicef_48_32_16(while_acc_116_nl);
      while_slc_47_16_10_ncse_sva <= readslicef_48_32_16(while_acc_117_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_slc_47_16_17_ncse_sva <= 32'b00000000000000000000000000000000;
      while_mul_68_itm <= 50'b00000000000000000000000000000000000000000000000000;
      while_slc_47_16_18_ncse_sva <= 32'b00000000000000000000000000000000;
      while_mul_61_itm <= 48'b000000000000000000000000000000000000000000000000;
      while_not_22_itm <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      while_slc_47_16_3_ncse_sva <= 32'b00000000000000000000000000000000;
      while_slc_47_16_ncse_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( while_and_238_cse ) begin
      while_slc_47_16_17_ncse_sva <= while_acc_114_itm_47_16_1;
      while_mul_68_itm <= z_out_35;
      while_slc_47_16_18_ncse_sva <= while_acc_113_itm_47_16_1;
      while_mul_61_itm <= z_out_13_47_0;
      while_not_22_itm <= ~ (z_out_31[79:0]);
      while_slc_47_16_3_ncse_sva <= readslicef_48_32_16(while_acc_4_nl);
      while_slc_47_16_ncse_sva <= readslicef_48_32_16(while_acc_nl);
    end
  end
  assign nl_while_acc_108_nl = while_mul_48_itm_3 - z_out_47_0;
  assign while_acc_108_nl = nl_while_acc_108_nl[47:0];
  assign nl_while_acc_76_nl = while_slc_while_mul_25_80_1_itm_2 + while_mul_30_itm
      + ({(z_out_23[49:0]) , 30'b000000000000000000000000000000});
  assign while_acc_76_nl = nl_while_acc_76_nl[79:0];
  assign nl_while_acc_31_nl = z_out_1_47_0 + while_mul_54_itm_2;
  assign while_acc_31_nl = nl_while_acc_31_nl[47:0];
  assign nl_while_acc_110_nl = z_out_3_47_0 - z_out_2_47_0;
  assign while_acc_110_nl = nl_while_acc_110_nl[47:0];
  assign nl_while_acc_111_nl = z_out_5_47_0 - (z_out_4[47:0]);
  assign while_acc_111_nl = nl_while_acc_111_nl[47:0];
  assign nl_while_acc_112_nl = z_out_7_47_0 - z_out_6_47_0;
  assign while_acc_112_nl = nl_while_acc_112_nl[47:0];
  assign nl_while_acc_104_nl = while_asn_itm + while_mul_90_cmp_z + ({while_mul_95_itm
      , 31'b0000000000000000000000000000000});
  assign while_acc_104_nl = nl_while_acc_104_nl[96:0];
  assign nl_while_acc_87_nl = (readslicef_97_64_33(while_acc_104_nl)) + while_mul_103_itm_1;
  assign while_acc_87_nl = nl_while_acc_87_nl[63:0];
  assign nl_while_acc_71_nl = z_out_8_47_0 + while_mul_156_itm_1;
  assign while_acc_71_nl = nl_while_acc_71_nl[47:0];
  assign nl_while_acc_72_nl = z_out_9_47_0 + while_mul_158_itm_1;
  assign while_acc_72_nl = nl_while_acc_72_nl[47:0];
  assign nl_while_acc_73_nl = z_out_10_47_0 + while_mul_160_itm_1;
  assign while_acc_73_nl = nl_while_acc_73_nl[47:0];
  assign nl_while_acc_128_itm_96_18  = ({while_mul_138_itm_1 , 27'b000000000000000000000000001})
      + (~ z_out_28);
  assign nl_while_acc_30_nl = while_mul_51_itm + z_out_14_47_0;
  assign while_acc_30_nl = nl_while_acc_30_nl[47:0];
  assign nl_while_acc_75_itm_1  = (z_out_38[32:15]) + 18'b000000000000000001;
  assign nl_while_acc_106_nl = while_mul_120_itm + (while_mul_110_cmp_z[96:18]) +
      ({while_mul_129_itm_2 , 28'b0000000000000000000000000000});
  assign while_acc_106_nl = nl_while_acc_106_nl[78:0];
  assign nl_while_acc_97_nl = (readslicef_79_67_12(while_acc_106_nl)) + while_mul_131_itm;
  assign while_acc_97_nl = nl_while_acc_97_nl[66:0];
  assign nl_while_acc_105_nl = while_mul_106_itm + while_slc_while_mul_110_97_2_itm
      + ({while_mul_115_itm_2 , 30'b000000000000000000000000000000});
  assign while_acc_105_nl = nl_while_acc_105_nl[81:0];
  assign nl_while_acc_92_nl = (readslicef_82_64_18(while_acc_105_nl)) - while_mul_117_itm_1;
  assign while_acc_92_nl = nl_while_acc_92_nl[63:0];
  assign nl_while_acc_84_nl = while_not_26_itm_1 + while_slc_while_while_mul_1_95_16_itm_1
      + ({while_mul_85_itm_2 , 29'b00000000000000000000000000001});
  assign while_acc_84_nl = nl_while_acc_84_nl[79:0];
  assign nl_while_acc_83_nl = while_not_25_itm_1 + ({while_mul_79_itm_1 , 3'b001})
      + ({while_mul_75_itm_2 , 32'b00000000000000000000000000000000});
  assign while_acc_83_nl = nl_while_acc_83_nl[79:0];
  assign nl_while_acc_82_nl = (~ while_mul_72_itm_1) + while_slc_while_while_mul_81_2_itm_1
      + ({(z_out_22[50:0]) , 26'b00000000000000000000000001});
  assign while_acc_82_nl = nl_while_acc_82_nl[76:0];
  assign nl_while_acc_79_nl = ({(z_out_23[49:0]) , 14'b00000000000000}) + (~ while_mul_45_itm_2)
      + while_slc_while_mul_39_95_32_itm_1 + 64'b0000000000000000000000000000000000000000000000000000000000000001;
  assign while_acc_79_nl = nl_while_acc_79_nl[63:0];
  assign nl_while_acc_109_nl = while_mul_50_itm_1 - z_out_6_47_0;
  assign while_acc_109_nl = nl_while_acc_109_nl[47:0];
  assign nl_operator_64_48_true_AC_TRN_AC_WRAP_acc_itm_1  = (z_out_38[32:15]) + 18'b000000000000000101;
  assign nl_while_acc_13_nl = z_out_1_47_0 + z_out_9_47_0;
  assign while_acc_13_nl = nl_while_acc_13_nl[47:0];
  assign nl_while_acc_12_nl = z_out_13_47_0 + z_out_11_47_0;
  assign while_acc_12_nl = nl_while_acc_12_nl[47:0];
  assign nl_while_acc_107_nl = z_out_5_47_0 - z_out_6_47_0;
  assign while_acc_107_nl = nl_while_acc_107_nl[47:0];
  assign nl_while_acc_7_nl = z_out_8_47_0 + z_out_14_47_0;
  assign while_acc_7_nl = nl_while_acc_7_nl[47:0];
  assign nl_while_mul_142_itm  = $signed(while_acc_39_itm_47_16_1) * $signed(15'b010011100110001);
  assign nl_while_mul_108_itm  = $signed(while_acc_39_itm_47_16_1) * $signed(18'b011001010011000101);
  assign nl_while_acc_77_nl = while_not_22_itm + ({(z_out_27[63:0]) , 16'b0000000000000001})
      + ({z_out_12_47_0 , 32'b00000000000000000000000000000000});
  assign while_acc_77_nl = nl_while_acc_77_nl[79:0];
  assign nl_while_acc_118_nl = z_out_5_47_0 - (z_out_4[47:0]);
  assign while_acc_118_nl = nl_while_acc_118_nl[47:0];
  assign nl_while_acc_119_nl = z_out_14_47_0 - z_out_6_47_0;
  assign while_acc_119_nl = nl_while_acc_119_nl[47:0];
  assign nl_while_acc_2_nl = z_out_8_47_0 + z_out_47_0;
  assign while_acc_2_nl = nl_while_acc_2_nl[47:0];
  assign nl_while_acc_3_nl = z_out_1_47_0 + while_mul_5_itm;
  assign while_acc_3_nl = nl_while_acc_3_nl[47:0];
  assign nl_while_acc_116_nl = z_out_47_0 - z_out_14_47_0;
  assign while_acc_116_nl = nl_while_acc_116_nl[47:0];
  assign nl_while_acc_117_nl = (z_out_4[47:0]) - (z_out_15[47:0]);
  assign while_acc_117_nl = nl_while_acc_117_nl[47:0];
  assign nl_while_acc_4_nl = z_out_8_47_0 + while_mul_7_itm;
  assign while_acc_4_nl = nl_while_acc_4_nl[47:0];
  assign nl_while_acc_nl = z_out_5_47_0 - (z_out_23[47:0]);
  assign while_acc_nl = nl_while_acc_nl[47:0];
  assign while_mux1h_812_nl = MUX1HOT_v_32_3_2(cfg_sin_2_gamma, (rotate_in_Pop_mioi_idat_mxwt[31:0]),
      cfg_sin_beta, {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[2])});
  assign while_mux1h_813_nl = MUX1HOT_v_32_3_2(while_slc_63_32_ncse_sva_1, cfg_sin_alpha,
      while_slc_47_16_6_ncse_sva, {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[2])});
  assign nl_z_out_47_0 = $signed(while_mux1h_812_nl) * $signed(while_mux1h_813_nl);
  assign z_out_47_0 = nl_z_out_47_0[47:0];
  assign while_mux1h_814_nl = MUX1HOT_v_32_4_2(while_slc_63_32_ncse_sva_1, (rotate_in_Pop_mioi_idat_mxwt[255:224]),
      while_slc_47_16_1_ncse_sva, while_slc_47_16_10_ncse_sva, {(fsm_output[4]) ,
      (fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])});
  assign while_mux1h_815_nl = MUX1HOT_v_32_3_2(cfg_cos_2_gamma, cfg_cos_2_alpha,
      cfg_sin_beta, {while_or_27_cse , (fsm_output[1]) , (fsm_output[2])});
  assign nl_z_out_1_47_0 = $signed(while_mux1h_814_nl) * $signed(while_mux1h_815_nl);
  assign z_out_1_47_0 = nl_z_out_1_47_0[47:0];
  assign while_mux1h_816_nl = MUX1HOT_v_32_3_2(cfg_sin_3_gamma, (rotate_in_Pop_mioi_idat_mxwt[63:32]),
      while_slc_47_16_11_ncse_sva, {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[3])});
  assign while_mux1h_817_nl = MUX1HOT_v_32_3_2(while_acc_126_itm_96_65_1, cfg_cos_beta,
      cfg_cos_gamma, {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[3])});
  assign nl_z_out_2_47_0 = $signed(while_mux1h_816_nl) * $signed(while_mux1h_817_nl);
  assign z_out_2_47_0 = nl_z_out_2_47_0[47:0];
  assign while_while_mux_6_nl = MUX_v_32_2_2(while_slc_while_acc_82_76_45_ncse_sva_1,
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[351:320]),
      while_or_31_cse);
  assign while_mux1h_818_nl = MUX1HOT_v_32_3_2(cfg_cos_3_gamma, cfg_cos_alpha, cfg_sin_alpha,
      {(fsm_output[4]) , (fsm_output[2]) , (fsm_output[3])});
  assign nl_z_out_3_47_0 = $signed(while_while_mux_6_nl) * $signed(while_mux1h_818_nl);
  assign z_out_3_47_0 = nl_z_out_3_47_0[47:0];
  assign while_mux1h_819_nl = MUX1HOT_v_32_3_2(cfg_sin_2_gamma, cfg_sin_alpha, cfg_cos_beta,
      {(fsm_output[4]) , (fsm_output[1]) , while_or_31_cse});
  assign while_mux1h_820_nl = MUX1HOT_v_32_4_2(while_slc_while_acc_97_66_35_ncse_sva,
      (rotate_in_Pop_mioi_idat_mxwt[223:192]), while_slc_47_16_6_ncse_sva, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[383:352]),
      {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])});
  assign z_out_4 = conv_u2u_64_64($signed(while_mux1h_819_nl) * $signed(while_mux1h_820_nl));
  assign while_mux1h_821_nl = MUX1HOT_v_32_4_2(while_slc_79_48_3_ncse_sva_1, (rotate_in_Pop_mioi_idat_mxwt[159:128]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[31:0]),
      while_slc_47_16_ncse_sva, {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[2])
      , (fsm_output[3])});
  assign while_mux1h_822_nl = MUX1HOT_v_32_3_2(cfg_cos_2_gamma, cfg_cos_alpha, cfg_cos_gamma,
      {(fsm_output[4]) , while_or_33_cse_1 , (fsm_output[3])});
  assign nl_z_out_5_47_0 = $signed(while_mux1h_821_nl) * $signed(while_mux1h_822_nl);
  assign z_out_5_47_0 = nl_z_out_5_47_0[47:0];
  assign while_mux_451_nl = MUX_v_32_2_2(cfg_sin_gamma, cfg_sin_2_alpha, fsm_output[1]);
  assign while_mux1h_823_nl = MUX1HOT_v_32_4_2(while_slc_while_acc_92_63_32_ncse_sva,
      while_slc_79_48_1_ncse_sva_1, (rotate_in_Pop_mioi_idat_mxwt[255:224]), while_slc_47_16_3_ncse_sva,
      {(fsm_output[4]) , (fsm_output[2]) , (fsm_output[1]) , (fsm_output[3])});
  assign nl_z_out_6_47_0 = $signed(while_mux_451_nl) * $signed(while_mux1h_823_nl);
  assign z_out_6_47_0 = nl_z_out_6_47_0[47:0];
  assign while_mux1h_824_nl = MUX1HOT_v_32_4_2(while_slc_79_48_4_ncse_sva_1, while_slc_79_48_1_ncse_sva_1,
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[287:256]),
      cfg_sin_alpha, {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[3]) , (fsm_output[2])});
  assign while_mux1h_825_nl = MUX1HOT_v_32_3_2(cfg_cos_gamma, cfg_sin_3_alpha, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[415:384]),
      {while_or_36_cse , (fsm_output[3]) , (fsm_output[2])});
  assign nl_z_out_7_47_0 = $signed(while_mux1h_824_nl) * $signed(while_mux1h_825_nl);
  assign z_out_7_47_0 = nl_z_out_7_47_0[47:0];
  assign while_mux1h_826_nl = MUX1HOT_v_32_4_2(while_slc_while_acc_92_63_32_ncse_sva,
      (rotate_in_Pop_mioi_idat_mxwt[95:64]), while_slc_47_16_1_ncse_sva, while_slc_47_16_3_ncse_sva,
      {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])});
  assign while_mux1h_827_nl = MUX1HOT_v_32_3_2(cfg_cos_gamma, cfg_cos_alpha, cfg_cos_beta,
      {while_or_27_cse , (fsm_output[1]) , (fsm_output[2])});
  assign nl_z_out_8_47_0 = $signed(while_mux1h_826_nl) * $signed(while_mux1h_827_nl);
  assign z_out_8_47_0 = nl_z_out_8_47_0[47:0];
  assign while_mux1h_828_nl = MUX1HOT_v_32_3_2(while_slc_while_acc_97_66_35_ncse_sva,
      (rotate_in_Pop_mioi_idat_mxwt[127:96]), while_slc_47_16_17_ncse_sva, {(fsm_output[4])
      , (fsm_output[1]) , (fsm_output[3])});
  assign while_mux1h_829_nl = MUX1HOT_v_32_3_2(cfg_cos_2_gamma, cfg_sin_2_alpha,
      32'b00000000000000000010011100110001, {(fsm_output[4]) , (fsm_output[1]) ,
      (fsm_output[3])});
  assign nl_z_out_9_47_0 = $signed(while_mux1h_828_nl) * $signed(while_mux1h_829_nl);
  assign z_out_9_47_0 = nl_z_out_9_47_0[47:0];
  assign while_mux_452_nl = MUX_v_32_2_2(while_acc_126_itm_96_65_1, (rotate_in_Pop_mioi_idat_mxwt[63:32]),
      fsm_output[1]);
  assign while_mux_453_nl = MUX_v_32_2_2(cfg_cos_3_gamma, cfg_sin_beta, fsm_output[1]);
  assign nl_z_out_10_47_0 = $signed(while_mux_452_nl) * $signed(while_mux_453_nl);
  assign z_out_10_47_0 = nl_z_out_10_47_0[47:0];
  assign while_mux_454_nl = MUX_v_32_2_2(while_slc_while_acc_82_76_45_ncse_sva, (rotate_in_Pop_mioi_idat_mxwt[159:128]),
      fsm_output[1]);
  assign while_mux_455_nl = MUX_v_32_2_2(cfg_sin_3_gamma, cfg_sin_alpha, fsm_output[1]);
  assign nl_z_out_11_47_0 = $signed(while_mux_454_nl) * $signed(while_mux_455_nl);
  assign z_out_11_47_0 = nl_z_out_11_47_0[47:0];
  assign while_mux1h_830_nl = MUX1HOT_v_32_4_2(while_slc_79_48_3_ncse_sva, while_slc_47_16_10_ncse_sva_1,
      cfg_cos_2_beta, cfg_sin_2_alpha, {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[3])
      , (fsm_output[2])});
  assign while_mux1h_831_nl = MUX1HOT_v_32_3_2(cfg_sin_2_gamma, while_slc_47_16_8_ncse_sva,
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[447:416]),
      {while_or_36_cse , (fsm_output[3]) , (fsm_output[2])});
  assign nl_z_out_12_47_0 = $signed(while_mux1h_830_nl) * $signed(while_mux1h_831_nl);
  assign z_out_12_47_0 = nl_z_out_12_47_0[47:0];
  assign while_mux1h_832_nl = MUX1HOT_v_32_3_2(while_slc_79_48_4_ncse_sva, (rotate_in_Pop_mioi_idat_mxwt[223:192]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[415:384]),
      {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[2])});
  assign while_mux_456_nl = MUX_v_32_2_2(cfg_sin_gamma, cfg_cos_alpha, while_or_33_cse_1);
  assign nl_z_out_13_47_0 = $signed(while_mux1h_832_nl) * $signed(while_mux_456_nl);
  assign z_out_13_47_0 = nl_z_out_13_47_0[47:0];
  assign while_mux1h_833_nl = MUX1HOT_v_32_4_2(while_slc_47_16_11_ncse_sva_1, (rotate_in_Pop_mioi_idat_mxwt[127:96]),
      while_slc_47_16_7_ncse_sva, while_slc_47_16_ncse_sva, {(fsm_output[4]) , (fsm_output[1])
      , (fsm_output[2]) , (fsm_output[3])});
  assign while_mux1h_834_nl = MUX1HOT_v_32_3_2(cfg_sin_gamma, cfg_cos_2_alpha, cfg_cos_beta,
      {while_or_27_cse , (fsm_output[1]) , (fsm_output[2])});
  assign nl_z_out_14_47_0 = $signed(while_mux1h_833_nl) * $signed(while_mux1h_834_nl);
  assign z_out_14_47_0 = nl_z_out_14_47_0[47:0];
  assign while_mux1h_835_nl = MUX1HOT_v_32_3_2(cfg_cos_beta, while_slc_47_16_7_ncse_sva,
      while_slc_47_16_17_ncse_sva, {(fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])});
  assign while_mux_457_nl = MUX_v_32_2_2(cfg_sin_beta, cfg_cos_2_beta, fsm_output[3]);
  assign z_out_15 = conv_u2u_64_64($signed(while_mux1h_835_nl) * $signed(while_mux_457_nl));
  assign while_mux_458_nl = MUX_v_32_2_2((while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[479:448]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[287:256]),
      fsm_output[2]);
  assign nl_z_out_16_47_0 = $signed(while_mux_458_nl) * $signed(cfg_cos_3_alpha);
  assign z_out_16_47_0 = nl_z_out_16_47_0[47:0];
  assign while_mux_459_nl = MUX_v_32_2_2((while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[319:288]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[447:416]),
      fsm_output[3]);
  assign nl_z_out_17_47_0 = $signed(while_mux_459_nl) * $signed(cfg_cos_2_alpha);
  assign z_out_17_47_0 = nl_z_out_17_47_0[47:0];
  assign while_mux_460_nl = MUX_v_32_2_2(cfg_sin_3_alpha, (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[319:288]),
      fsm_output[3]);
  assign while_mux_461_nl = MUX_v_32_2_2((while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[479:448]),
      cfg_sin_2_alpha, fsm_output[3]);
  assign nl_z_out_18_47_0 = $signed(while_mux_460_nl) * $signed(while_mux_461_nl);
  assign z_out_18_47_0 = nl_z_out_18_47_0[47:0];
  assign while_mux_462_nl = MUX_v_32_2_2(cfg_cos_beta, cfg_sin_beta, fsm_output[4]);
  assign while_mux1h_836_nl = MUX1HOT_v_50_4_2(while_mul_113_itm_1, while_mul_127_itm,
      while_mul_93_itm_1, (signext_50_49(z_out_36[48:0])), {(fsm_output[1]) , (fsm_output[2])
      , (fsm_output[3]) , (fsm_output[4])});
  assign z_out_19 = conv_u2u_82_82($signed(while_mux_462_nl) * $signed(while_mux1h_836_nl));
  assign while_mux_463_nl = MUX_v_32_2_2(cfg_sin_beta, cfg_cos_beta, fsm_output[2]);
  assign while_mux1h_837_nl = MUX1HOT_s_1_4_2((while_mul_83_itm[49]), (z_out_36[49]),
      (z_out_36[48]), (while_mul_68_itm[49]), {(fsm_output[4]) , (fsm_output[2])
      , (fsm_output[1]) , (fsm_output[3])});
  assign while_mux1h_838_nl = MUX1HOT_s_1_3_2((while_mul_83_itm[48]), (z_out_36[48]),
      (while_mul_68_itm[48]), {(fsm_output[4]) , while_or_33_cse_1 , (fsm_output[3])});
  assign while_mux1h_839_nl = MUX1HOT_v_48_3_2((while_mul_83_itm[47:0]), (z_out_36[47:0]),
      (while_mul_68_itm[47:0]), {(fsm_output[4]) , while_or_33_cse_1 , (fsm_output[3])});
  assign z_out_20 = conv_u2u_82_82($signed(while_mux_463_nl) * $signed(({while_mux1h_837_nl
      , while_mux1h_838_nl , while_mux1h_839_nl})));
  assign while_mux1h_840_nl = MUX1HOT_v_32_4_2(cfg_cos_beta, while_slc_47_16_21_ncse_sva_2,
      while_slc_47_16_19_ncse_sva_1, while_slc_47_16_20_ncse_sva_1, {(fsm_output[1])
      , (fsm_output[4]) , (fsm_output[2]) , (fsm_output[3])});
  assign nl_while_acc_132_nl = conv_s2s_32_36(~ cfg_cos_beta) + conv_s2s_32_36(cfg_cos_3_beta)
      + ({cfg_cos_beta , 4'b0001});
  assign while_acc_132_nl = nl_while_acc_132_nl[35:0];
  assign nl_while_acc_133_nl = conv_s2s_32_36(cfg_cos_beta) + conv_s2s_32_36(~ cfg_cos_3_beta)
      + ({cfg_cos_3_beta , 4'b0001});
  assign while_acc_133_nl = nl_while_acc_133_nl[35:0];
  assign nl_while_acc_135_nl = conv_s2s_32_33(cfg_cos_beta) + conv_s2s_31_33(cfg_cos_3_beta[31:1]);
  assign while_acc_135_nl = nl_while_acc_135_nl[32:0];
  assign nl_while_acc_134_nl = ({while_acc_135_nl , (cfg_cos_3_beta[0]) , 1'b0})
      + conv_s2s_32_35(cfg_cos_beta) + conv_s2s_32_35(cfg_cos_3_beta);
  assign while_acc_134_nl = nl_while_acc_134_nl[34:0];
  assign while_mux1h_841_nl = MUX1HOT_v_49_4_2(while_mul_27_cse_sva_3, (signext_49_36(while_acc_132_nl)),
      (signext_49_36(while_acc_133_nl)), (signext_49_35(while_acc_134_nl)), {(fsm_output[1])
      , (fsm_output[4]) , (fsm_output[2]) , (fsm_output[3])});
  assign nl_z_out_21_79_0 = $signed(while_mux1h_840_nl) * $signed(while_mux1h_841_nl);
  assign z_out_21_79_0 = nl_z_out_21_79_0[79:0];
  assign while_or_42_nl = (fsm_output[4]) | (fsm_output[2]);
  assign while_mux1h_842_nl = MUX1HOT_v_32_3_2(cfg_sin_beta, while_slc_47_16_16_ncse_sva_2,
      while_slc_47_16_18_ncse_sva, {while_or_42_nl , (fsm_output[1]) , (fsm_output[3])});
  assign while_mux1h_843_nl = MUX1HOT_v_33_4_2((while_mul_101_itm_2[48:16]), ({{15{operator_64_48_true_AC_TRN_AC_WRAP_acc_itm_1[17]}},
      operator_64_48_true_AC_TRN_AC_WRAP_acc_itm_1}), (while_mul_147_itm[48:16]),
      ({{14{z_out_37[18]}}, z_out_37}), {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[2])
      , (fsm_output[3])});
  assign while_mux1h_844_nl = MUX1HOT_v_15_4_2((while_mul_101_itm_2[15:1]), operator_64_48_true_AC_TRN_AC_WRAP_slc_operator_32_16_true_AC_TRN_AC_WRAP_acc_psp_14_0_itm_1,
      (while_mul_147_itm[15:1]), ({(z_out_38[13:0]) , (cfg_cos_2_beta[1])}), {(fsm_output[4])
      , (fsm_output[1]) , (fsm_output[2]) , (fsm_output[3])});
  assign while_or_43_nl = (fsm_output[1]) | (fsm_output[3]);
  assign while_mux1h_845_nl = MUX1HOT_s_1_3_2((while_mul_101_itm_2[0]), (cfg_cos_2_beta[0]),
      (while_mul_147_itm[0]), {(fsm_output[4]) , while_or_43_nl , (fsm_output[2])});
  assign z_out_22 = conv_u2u_81_81($signed(while_mux1h_842_nl) * $signed(({while_mux1h_843_nl
      , while_mux1h_844_nl , while_mux1h_845_nl})));
  assign while_mux1h_846_nl = MUX1HOT_v_35_4_2(({{3{reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_3[31]}},
      reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_1_itm_3}),
      ({{3{while_slc_47_16_9_ncse_sva_2[31]}}, while_slc_47_16_9_ncse_sva_2}), while_acc_88_cse_sva_mx1w0,
      ({{3{cfg_sin_alpha[31]}}, cfg_sin_alpha}), {(fsm_output[4]) , (fsm_output[1])
      , (fsm_output[3]) , (fsm_output[2])});
  assign while_mux1h_847_nl = MUX1HOT_v_30_4_2(({{12{while_acc_75_itm_2[17]}}, while_acc_75_itm_2}),
      (signext_30_17(z_out_37[16:0])), (while_mul_104_itm_2[45:16]), (signext_30_16(while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[95:80])),
      {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[3]) , (fsm_output[2])});
  assign while_mux1h_848_nl = MUX1HOT_v_15_4_2(while_slc_while_acc_74_psp_14_0_itm_2,
      (cfg_cos_2_beta[15:1]), (while_mul_104_itm_2[15:1]), (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[79:65]),
      {(fsm_output[4]) , (fsm_output[1]) , (fsm_output[3]) , (fsm_output[2])});
  assign while_mux1h_849_nl = MUX1HOT_s_1_3_2((cfg_cos_2_beta[0]), (while_mul_104_itm_2[0]),
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[64]),
      {while_or_36_cse , (fsm_output[3]) , (fsm_output[2])});
  assign nl_z_out_23 = $signed(while_mux1h_846_nl) * $signed(({while_mux1h_847_nl
      , while_mux1h_848_nl , while_mux1h_849_nl}));
  assign z_out_23 = nl_z_out_23[63:0];
  assign while_while_mux_7_nl = MUX_v_17_2_2(while_acc_78_cse_sva, (signext_17_16(cfg_cos_beta[31:16])),
      while_or_33_cse_1);
  assign while_while_mux_8_nl = MUX_v_16_2_2((cfg_cos_2_beta[15:0]), (cfg_cos_beta[15:0]),
      while_or_33_cse_1);
  assign while_mux1h_850_nl = MUX1HOT_v_46_4_2(while_mul_142_itm_2, while_mul_122_itm_2,
      while_mul_74_itm_1, while_mul_81_itm_1, {(fsm_output[4]) , (fsm_output[3])
      , (fsm_output[1]) , (fsm_output[2])});
  assign z_out_24 = conv_u2u_79_79($signed(({while_while_mux_7_nl , while_while_mux_8_nl}))
      * $signed(while_mux1h_850_nl));
  assign nl_while_acc_138_nl = ({(~ cfg_sin_3_beta) , 2'b00}) + conv_s2s_32_34(cfg_sin_3_beta);
  assign while_acc_138_nl = nl_while_acc_138_nl[33:0];
  assign nl_while_acc_139_nl = conv_s2s_30_31(cfg_sin_beta[31:2]) + 31'b0000000000000000000000000000001;
  assign while_acc_139_nl = nl_while_acc_139_nl[30:0];
  assign nl_while_acc_137_nl = while_acc_138_nl + conv_s2s_33_34({while_acc_139_nl
      , (cfg_sin_beta[1:0])});
  assign while_acc_137_nl = nl_while_acc_137_nl[33:0];
  assign nl_operator_64_48_true_AC_TRN_AC_WRAP_3_acc_1_nl = conv_s2s_32_33(cfg_cos_2_beta)
      + conv_s2s_31_33(cfg_cos_2_beta[31:1]) + 33'b000000000000000001000000000000000;
  assign operator_64_48_true_AC_TRN_AC_WRAP_3_acc_1_nl = nl_operator_64_48_true_AC_TRN_AC_WRAP_3_acc_1_nl[32:0];
  assign while_mux1h_851_nl = MUX1HOT_v_34_3_2(while_acc_137_nl, ({operator_64_48_true_AC_TRN_AC_WRAP_3_acc_1_nl
      , (cfg_cos_2_beta[0])}), ({{2{cfg_cos_beta[31]}}, cfg_cos_beta}), {(fsm_output[1])
      , (fsm_output[4]) , while_or_31_cse});
  assign while_mux1h_852_nl = MUX1HOT_v_49_4_2(while_mul_132_itm_3, while_mul_108_itm_2,
      while_mul_78_itm_1, while_mul_89_itm_1, {(fsm_output[1]) , (fsm_output[4])
      , (fsm_output[2]) , (fsm_output[3])});
  assign nl_z_out_25 = $signed(while_mux1h_851_nl) * $signed(while_mux1h_852_nl);
  assign z_out_25 = nl_z_out_25[81:0];
  assign nl_operator_64_48_true_AC_TRN_AC_WRAP_2_acc_1_nl = ({cfg_cos_2_beta , 4'b0001})
      + conv_s2s_32_36(~ cfg_cos_2_beta) + 36'b111111111111111111110000000000000000;
  assign operator_64_48_true_AC_TRN_AC_WRAP_2_acc_1_nl = nl_operator_64_48_true_AC_TRN_AC_WRAP_2_acc_1_nl[35:0];
  assign while_mux_464_nl = MUX_v_36_2_2(operator_64_48_true_AC_TRN_AC_WRAP_2_acc_1_nl,
      ({{1{while_acc_88_cse_sva[34]}}, while_acc_88_cse_sva}), fsm_output[4]);
  assign while_mux_465_nl = MUX_v_64_2_2(while_mul_96_itm_3, ({{18{while_mul_118_itm_2[45]}},
      while_mul_118_itm_2}), fsm_output[4]);
  assign nl_z_out_26 = $signed(while_mux_464_nl) * $signed(while_mux_465_nl);
  assign z_out_26 = nl_z_out_26[65:0];
  assign while_mux1h_853_nl = MUX1HOT_v_32_3_2(while_slc_47_16_8_ncse_sva, while_slc_47_16_9_ncse_sva,
      cfg_sin_beta, {(fsm_output[2]) , (fsm_output[3]) , (fsm_output[1])});
  assign while_while_mux_9_nl = MUX_v_82_2_2(({{18{while_mul_38_cse_sva[63]}}, while_mul_38_cse_sva}),
      while_mul_92_itm_1, fsm_output[1]);
  assign nl_z_out_27 = $signed(while_mux1h_853_nl) * $signed(while_while_mux_9_nl);
  assign z_out_27 = nl_z_out_27[96:0];
  assign while_mux_466_nl = MUX_v_32_2_2(cfg_sin_beta, while_slc_47_16_18_ncse_sva,
      fsm_output[3]);
  assign while_mux1h_854_nl = MUX1HOT_v_79_4_2(while_mul_141_itm_1, ({{2{while_mul_80_itm[76]}},
      while_mul_80_itm}), ({{2{while_mul_73_itm[76]}}, while_mul_73_itm}), 79'b0000000000000000000000000000000000000000000000000000000000000011001010011000101,
      {(fsm_output[1]) , (fsm_output[4]) , (fsm_output[2]) , (fsm_output[3])});
  assign nl_z_out_28 = $signed(while_mux_466_nl) * $signed(conv_u2s_79_80(while_mux1h_854_nl));
  assign z_out_28 = nl_z_out_28[78:0];
  assign while_mux_467_nl = MUX_v_32_2_2(cfg_sin_beta, while_slc_47_16_8_ncse_sva_3,
      fsm_output[2]);
  assign while_mux1h_855_nl = MUX1HOT_v_80_4_2(({{1{while_mul_121_itm_1[78]}}, while_mul_121_itm_1}),
      while_mul_31_itm, while_mul_88_itm, while_mul_77_itm, {(fsm_output[1]) , (fsm_output[2])
      , (fsm_output[4]) , (fsm_output[3])});
  assign nl_z_out_29 = $signed(while_mux_467_nl) * $signed(conv_u2s_80_81(while_mux1h_855_nl));
  assign z_out_29 = nl_z_out_29[79:0];
  assign while_mux_468_nl = MUX_v_32_2_2(cfg_sin_beta, reg_0_operator_for_7_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1,
      fsm_output[1]);
  assign while_mux1h_856_nl = MUX1HOT_v_82_4_2(while_mul_107_itm_1, while_mul_82_itm_1,
      ({{1{while_mul_26_cse_sva_1[80]}}, while_mul_26_cse_sva_1}), while_mul_67_itm_1,
      {(fsm_output[2]) , (fsm_output[4]) , (fsm_output[1]) , (fsm_output[3])});
  assign nl_z_out_30 = $signed(while_mux_468_nl) * $signed(conv_u2s_82_83(while_mux1h_856_nl));
  assign z_out_30 = nl_z_out_30[81:0];
  assign while_mux1h_857_nl = MUX1HOT_v_32_3_2(cfg_sin_beta, while_slc_47_16_9_ncse_sva_1,
      (while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_sva_511_32[191:160]),
      {while_or_36_cse , (fsm_output[3]) , (fsm_output[2])});
  assign while_mux1h_858_nl = MUX1HOT_v_81_4_2(while_mul_100_itm_1, while_mul_146_itm,
      while_mul_26_cse_sva_1, ({{1{while_mul_35_itm[79]}}, while_mul_35_itm}), {(fsm_output[1])
      , (fsm_output[4]) , (fsm_output[3]) , (fsm_output[2])});
  assign nl_z_out_31 = $signed(while_mux1h_857_nl) * $signed(while_mux1h_858_nl);
  assign z_out_31 = nl_z_out_31[96:0];
  assign while_mux1h_859_nl = MUX1HOT_v_82_3_2(while_mul_112_itm, while_mul_126_itm,
      while_mul_135_itm, {(fsm_output[2]) , (fsm_output[3]) , (fsm_output[4])});
  assign nl_z_out_32 = $signed(cfg_sin_beta) * $signed(while_mux1h_859_nl);
  assign z_out_32 = nl_z_out_32[97:0];
  assign while_mux1h_860_nl = MUX1HOT_v_32_4_2(while_slc_47_16_21_ncse_sva, (rotate_in_Pop_mioi_idat_mxwt[383:352]),
      while_acc_114_itm_47_16_1, while_acc_38_itm_47_16_1, {(fsm_output[4]) , (fsm_output[1])
      , (fsm_output[2]) , (fsm_output[3])});
  assign nl_z_out_33 = $signed(18'b011001010011000101) * $signed(while_mux1h_860_nl);
  assign z_out_33 = nl_z_out_33[48:0];
  assign while_mux1h_861_nl = MUX1HOT_v_32_4_2(while_slc_47_16_19_ncse_sva, (rotate_in_Pop_mioi_idat_mxwt[383:352]),
      while_acc_115_itm_47_16_1, while_acc_40_itm_47_16_1, {(fsm_output[4]) , (fsm_output[1])
      , (fsm_output[2]) , (fsm_output[3])});
  assign nl_z_out_34_45_0 = $signed(15'b010011100110001) * $signed(while_mux1h_861_nl);
  assign z_out_34_45_0 = nl_z_out_34_45_0[45:0];
  assign while_mux1h_862_nl = MUX1HOT_v_32_4_2(reg_0_operator_for_13_reg_0_operator_for_slc_while_Connections_InBlocking_nvhls_nv_scvector_ac_fixed_32_16_true_AC_TRN_AC_WRAP_16U_Connections_SYN_PORT_Pop_return_32_31_0_3_itm_1,
      while_slc_47_16_21_ncse_sva, while_acc_113_itm_47_16_1, while_slc_47_16_16_ncse_sva,
      {(fsm_output[1]) , (fsm_output[4]) , (fsm_output[2]) , (fsm_output[3])});
  assign nl_z_out_35 = $signed(19'b0111101111101111011) * $signed(while_mux1h_862_nl);
  assign z_out_35 = nl_z_out_35[49:0];
  assign while_mux1h_863_nl = MUX1HOT_v_32_4_2(while_slc_47_16_19_ncse_sva_1, while_slc_47_16_20_ncse_sva_1,
      cfg_cos_beta, cfg_sin_beta, {(fsm_output[2]) , (fsm_output[3]) , (fsm_output[1])
      , (fsm_output[4])});
  assign nl_z_out_36 = $signed(conv_u2s_18_19({(~ while_or_36_cse) , 2'b11 , while_while_mux_2_cse
      , 2'b11 , (~ while_or_36_cse) , 5'b11011 , ({{1{while_while_mux_2_cse[1]}},
      while_while_mux_2_cse}) , 2'b11})) * $signed(while_mux1h_863_nl);
  assign z_out_36 = nl_z_out_36[49:0];
  assign operator_64_48_true_AC_TRN_AC_WRAP_1_mux_1_nl = MUX_v_19_2_2((z_out_38[32:14]),
      (signext_19_16(cfg_cos_2_beta[31:16])), fsm_output[1]);
  assign nl_z_out_37 = operator_64_48_true_AC_TRN_AC_WRAP_1_mux_1_nl + 19'b0000000000000000011;
  assign z_out_37 = nl_z_out_37[18:0];
  assign operator_32_16_true_AC_TRN_AC_WRAP_1_mux_2_nl = MUX_v_30_2_2((cfg_cos_2_beta[31:2]),
      (cfg_cos_2_beta[30:1]), fsm_output[4]);
  assign nl_z_out_38 = conv_s2u_32_33(cfg_cos_2_beta) + conv_s2u_31_33({(cfg_cos_2_beta[31])
      , operator_32_16_true_AC_TRN_AC_WRAP_1_mux_2_nl});
  assign z_out_38 = nl_z_out_38[32:0];

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_4_2;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [3:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [14:0] MUX1HOT_v_15_4_2;
    input [14:0] input_3;
    input [14:0] input_2;
    input [14:0] input_1;
    input [14:0] input_0;
    input [3:0] sel;
    reg [14:0] result;
  begin
    result = input_0 & {15{sel[0]}};
    result = result | (input_1 & {15{sel[1]}});
    result = result | (input_2 & {15{sel[2]}});
    result = result | (input_3 & {15{sel[3]}});
    MUX1HOT_v_15_4_2 = result;
  end
  endfunction


  function automatic [29:0] MUX1HOT_v_30_4_2;
    input [29:0] input_3;
    input [29:0] input_2;
    input [29:0] input_1;
    input [29:0] input_0;
    input [3:0] sel;
    reg [29:0] result;
  begin
    result = input_0 & {30{sel[0]}};
    result = result | (input_1 & {30{sel[1]}});
    result = result | (input_2 & {30{sel[2]}});
    result = result | (input_3 & {30{sel[3]}});
    MUX1HOT_v_30_4_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_4_2;
    input [31:0] input_3;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [3:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    result = result | (input_3 & {32{sel[3]}});
    MUX1HOT_v_32_4_2 = result;
  end
  endfunction


  function automatic [32:0] MUX1HOT_v_33_4_2;
    input [32:0] input_3;
    input [32:0] input_2;
    input [32:0] input_1;
    input [32:0] input_0;
    input [3:0] sel;
    reg [32:0] result;
  begin
    result = input_0 & {33{sel[0]}};
    result = result | (input_1 & {33{sel[1]}});
    result = result | (input_2 & {33{sel[2]}});
    result = result | (input_3 & {33{sel[3]}});
    MUX1HOT_v_33_4_2 = result;
  end
  endfunction


  function automatic [33:0] MUX1HOT_v_34_3_2;
    input [33:0] input_2;
    input [33:0] input_1;
    input [33:0] input_0;
    input [2:0] sel;
    reg [33:0] result;
  begin
    result = input_0 & {34{sel[0]}};
    result = result | (input_1 & {34{sel[1]}});
    result = result | (input_2 & {34{sel[2]}});
    MUX1HOT_v_34_3_2 = result;
  end
  endfunction


  function automatic [34:0] MUX1HOT_v_35_4_2;
    input [34:0] input_3;
    input [34:0] input_2;
    input [34:0] input_1;
    input [34:0] input_0;
    input [3:0] sel;
    reg [34:0] result;
  begin
    result = input_0 & {35{sel[0]}};
    result = result | (input_1 & {35{sel[1]}});
    result = result | (input_2 & {35{sel[2]}});
    result = result | (input_3 & {35{sel[3]}});
    MUX1HOT_v_35_4_2 = result;
  end
  endfunction


  function automatic [45:0] MUX1HOT_v_46_4_2;
    input [45:0] input_3;
    input [45:0] input_2;
    input [45:0] input_1;
    input [45:0] input_0;
    input [3:0] sel;
    reg [45:0] result;
  begin
    result = input_0 & {46{sel[0]}};
    result = result | (input_1 & {46{sel[1]}});
    result = result | (input_2 & {46{sel[2]}});
    result = result | (input_3 & {46{sel[3]}});
    MUX1HOT_v_46_4_2 = result;
  end
  endfunction


  function automatic [47:0] MUX1HOT_v_48_3_2;
    input [47:0] input_2;
    input [47:0] input_1;
    input [47:0] input_0;
    input [2:0] sel;
    reg [47:0] result;
  begin
    result = input_0 & {48{sel[0]}};
    result = result | (input_1 & {48{sel[1]}});
    result = result | (input_2 & {48{sel[2]}});
    MUX1HOT_v_48_3_2 = result;
  end
  endfunction


  function automatic [48:0] MUX1HOT_v_49_4_2;
    input [48:0] input_3;
    input [48:0] input_2;
    input [48:0] input_1;
    input [48:0] input_0;
    input [3:0] sel;
    reg [48:0] result;
  begin
    result = input_0 & {49{sel[0]}};
    result = result | (input_1 & {49{sel[1]}});
    result = result | (input_2 & {49{sel[2]}});
    result = result | (input_3 & {49{sel[3]}});
    MUX1HOT_v_49_4_2 = result;
  end
  endfunction


  function automatic [49:0] MUX1HOT_v_50_4_2;
    input [49:0] input_3;
    input [49:0] input_2;
    input [49:0] input_1;
    input [49:0] input_0;
    input [3:0] sel;
    reg [49:0] result;
  begin
    result = input_0 & {50{sel[0]}};
    result = result | (input_1 & {50{sel[1]}});
    result = result | (input_2 & {50{sel[2]}});
    result = result | (input_3 & {50{sel[3]}});
    MUX1HOT_v_50_4_2 = result;
  end
  endfunction


  function automatic [78:0] MUX1HOT_v_79_4_2;
    input [78:0] input_3;
    input [78:0] input_2;
    input [78:0] input_1;
    input [78:0] input_0;
    input [3:0] sel;
    reg [78:0] result;
  begin
    result = input_0 & {79{sel[0]}};
    result = result | (input_1 & {79{sel[1]}});
    result = result | (input_2 & {79{sel[2]}});
    result = result | (input_3 & {79{sel[3]}});
    MUX1HOT_v_79_4_2 = result;
  end
  endfunction


  function automatic [79:0] MUX1HOT_v_80_4_2;
    input [79:0] input_3;
    input [79:0] input_2;
    input [79:0] input_1;
    input [79:0] input_0;
    input [3:0] sel;
    reg [79:0] result;
  begin
    result = input_0 & {80{sel[0]}};
    result = result | (input_1 & {80{sel[1]}});
    result = result | (input_2 & {80{sel[2]}});
    result = result | (input_3 & {80{sel[3]}});
    MUX1HOT_v_80_4_2 = result;
  end
  endfunction


  function automatic [80:0] MUX1HOT_v_81_4_2;
    input [80:0] input_3;
    input [80:0] input_2;
    input [80:0] input_1;
    input [80:0] input_0;
    input [3:0] sel;
    reg [80:0] result;
  begin
    result = input_0 & {81{sel[0]}};
    result = result | (input_1 & {81{sel[1]}});
    result = result | (input_2 & {81{sel[2]}});
    result = result | (input_3 & {81{sel[3]}});
    MUX1HOT_v_81_4_2 = result;
  end
  endfunction


  function automatic [81:0] MUX1HOT_v_82_3_2;
    input [81:0] input_2;
    input [81:0] input_1;
    input [81:0] input_0;
    input [2:0] sel;
    reg [81:0] result;
  begin
    result = input_0 & {82{sel[0]}};
    result = result | (input_1 & {82{sel[1]}});
    result = result | (input_2 & {82{sel[2]}});
    MUX1HOT_v_82_3_2 = result;
  end
  endfunction


  function automatic [81:0] MUX1HOT_v_82_4_2;
    input [81:0] input_3;
    input [81:0] input_2;
    input [81:0] input_1;
    input [81:0] input_0;
    input [3:0] sel;
    reg [81:0] result;
  begin
    result = input_0 & {82{sel[0]}};
    result = result | (input_1 & {82{sel[1]}});
    result = result | (input_2 & {82{sel[2]}});
    result = result | (input_3 & {82{sel[3]}});
    MUX1HOT_v_82_4_2 = result;
  end
  endfunction


  function automatic [97:0] MUX1HOT_v_98_4_2;
    input [97:0] input_3;
    input [97:0] input_2;
    input [97:0] input_1;
    input [97:0] input_0;
    input [3:0] sel;
    reg [97:0] result;
  begin
    result = input_0 & {98{sel[0]}};
    result = result | (input_1 & {98{sel[1]}});
    result = result | (input_2 & {98{sel[2]}});
    result = result | (input_3 & {98{sel[3]}});
    MUX1HOT_v_98_4_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function automatic [16:0] MUX_v_17_2_2;
    input [16:0] input_0;
    input [16:0] input_1;
    input  sel;
    reg [16:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_17_2_2 = result;
  end
  endfunction


  function automatic [18:0] MUX_v_19_2_2;
    input [18:0] input_0;
    input [18:0] input_1;
    input  sel;
    reg [18:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_19_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [29:0] MUX_v_30_2_2;
    input [29:0] input_0;
    input [29:0] input_1;
    input  sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [35:0] MUX_v_36_2_2;
    input [35:0] input_0;
    input [35:0] input_1;
    input  sel;
    reg [35:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_36_2_2 = result;
  end
  endfunction


  function automatic [63:0] MUX_v_64_2_2;
    input [63:0] input_0;
    input [63:0] input_1;
    input  sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function automatic [81:0] MUX_v_82_2_2;
    input [81:0] input_0;
    input [81:0] input_1;
    input  sel;
    reg [81:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_82_2_2 = result;
  end
  endfunction


  function automatic [96:0] MUX_v_97_2_2;
    input [96:0] input_0;
    input [96:0] input_1;
    input  sel;
    reg [96:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_97_2_2 = result;
  end
  endfunction


  function automatic [31:0] readslicef_48_32_16;
    input [47:0] vector;
    reg [47:0] tmp;
  begin
    tmp = vector >> 16;
    readslicef_48_32_16 = tmp[31:0];
  end
  endfunction


  function automatic [31:0] readslicef_64_32_32;
    input [63:0] vector;
    reg [63:0] tmp;
  begin
    tmp = vector >> 32;
    readslicef_64_32_32 = tmp[31:0];
  end
  endfunction


  function automatic [31:0] readslicef_67_32_35;
    input [66:0] vector;
    reg [66:0] tmp;
  begin
    tmp = vector >> 35;
    readslicef_67_32_35 = tmp[31:0];
  end
  endfunction


  function automatic [31:0] readslicef_77_32_45;
    input [76:0] vector;
    reg [76:0] tmp;
  begin
    tmp = vector >> 45;
    readslicef_77_32_45 = tmp[31:0];
  end
  endfunction


  function automatic [66:0] readslicef_79_67_12;
    input [78:0] vector;
    reg [78:0] tmp;
  begin
    tmp = vector >> 12;
    readslicef_79_67_12 = tmp[66:0];
  end
  endfunction


  function automatic [31:0] readslicef_80_32_48;
    input [79:0] vector;
    reg [79:0] tmp;
  begin
    tmp = vector >> 48;
    readslicef_80_32_48 = tmp[31:0];
  end
  endfunction


  function automatic [63:0] readslicef_82_64_18;
    input [81:0] vector;
    reg [81:0] tmp;
  begin
    tmp = vector >> 18;
    readslicef_82_64_18 = tmp[63:0];
  end
  endfunction


  function automatic [31:0] readslicef_97_32_65;
    input [96:0] vector;
    reg [96:0] tmp;
  begin
    tmp = vector >> 65;
    readslicef_97_32_65 = tmp[31:0];
  end
  endfunction


  function automatic [63:0] readslicef_97_64_33;
    input [96:0] vector;
    reg [96:0] tmp;
  begin
    tmp = vector >> 33;
    readslicef_97_64_33 = tmp[63:0];
  end
  endfunction


  function automatic [16:0] signext_17_16;
    input [15:0] vector;
  begin
    signext_17_16= {{1{vector[15]}}, vector};
  end
  endfunction


  function automatic [18:0] signext_19_16;
    input [15:0] vector;
  begin
    signext_19_16= {{3{vector[15]}}, vector};
  end
  endfunction


  function automatic [29:0] signext_30_16;
    input [15:0] vector;
  begin
    signext_30_16= {{14{vector[15]}}, vector};
  end
  endfunction


  function automatic [29:0] signext_30_17;
    input [16:0] vector;
  begin
    signext_30_17= {{13{vector[16]}}, vector};
  end
  endfunction


  function automatic [48:0] signext_49_35;
    input [34:0] vector;
  begin
    signext_49_35= {{14{vector[34]}}, vector};
  end
  endfunction


  function automatic [48:0] signext_49_36;
    input [35:0] vector;
  begin
    signext_49_36= {{13{vector[35]}}, vector};
  end
  endfunction


  function automatic [49:0] signext_50_49;
    input [48:0] vector;
  begin
    signext_50_49= {{1{vector[48]}}, vector};
  end
  endfunction


  function automatic [30:0] conv_s2s_30_31 ;
    input [29:0]  vector ;
  begin
    conv_s2s_30_31 = {vector[29], vector};
  end
  endfunction


  function automatic [32:0] conv_s2s_31_33 ;
    input [30:0]  vector ;
  begin
    conv_s2s_31_33 = {{2{vector[30]}}, vector};
  end
  endfunction


  function automatic [32:0] conv_s2s_32_33 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_33 = {vector[31], vector};
  end
  endfunction


  function automatic [33:0] conv_s2s_32_34 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_34 = {{2{vector[31]}}, vector};
  end
  endfunction


  function automatic [34:0] conv_s2s_32_35 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_35 = {{3{vector[31]}}, vector};
  end
  endfunction


  function automatic [35:0] conv_s2s_32_36 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_36 = {{4{vector[31]}}, vector};
  end
  endfunction


  function automatic [33:0] conv_s2s_33_34 ;
    input [32:0]  vector ;
  begin
    conv_s2s_33_34 = {vector[32], vector};
  end
  endfunction


  function automatic [34:0] conv_s2s_34_35 ;
    input [33:0]  vector ;
  begin
    conv_s2s_34_35 = {vector[33], vector};
  end
  endfunction


  function automatic [32:0] conv_s2u_31_33 ;
    input [30:0]  vector ;
  begin
    conv_s2u_31_33 = {{2{vector[30]}}, vector};
  end
  endfunction


  function automatic [32:0] conv_s2u_32_33 ;
    input [31:0]  vector ;
  begin
    conv_s2u_32_33 = {vector[31], vector};
  end
  endfunction


  function automatic [18:0] conv_u2s_18_19 ;
    input [17:0]  vector ;
  begin
    conv_u2s_18_19 =  {1'b0, vector};
  end
  endfunction


  function automatic [79:0] conv_u2s_79_80 ;
    input [78:0]  vector ;
  begin
    conv_u2s_79_80 =  {1'b0, vector};
  end
  endfunction


  function automatic [80:0] conv_u2s_80_81 ;
    input [79:0]  vector ;
  begin
    conv_u2s_80_81 =  {1'b0, vector};
  end
  endfunction


  function automatic [82:0] conv_u2s_82_83 ;
    input [81:0]  vector ;
  begin
    conv_u2s_82_83 =  {1'b0, vector};
  end
  endfunction


  function automatic [63:0] conv_u2u_64_64 ;
    input [63:0]  vector ;
  begin
    conv_u2u_64_64 = vector;
  end
  endfunction


  function automatic [78:0] conv_u2u_79_79 ;
    input [78:0]  vector ;
  begin
    conv_u2u_79_79 = vector;
  end
  endfunction


  function automatic [80:0] conv_u2u_81_81 ;
    input [80:0]  vector ;
  begin
    conv_u2u_81_81 = vector;
  end
  endfunction


  function automatic [81:0] conv_u2u_82_82 ;
    input [81:0]  vector ;
  begin
    conv_u2u_82_82 = vector;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer_run
// ------------------------------------------------------------------


module OutputBuffer_run (
  clk, rst, cfg_block_size, cfg_output_base, sync2_val, sync2_rdy, sync2_msg, sync3_val,
      sync3_rdy, sync3_msg, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg,
      dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, rotate_out_val,
      rotate_out_rdy, rotate_out_msg, mem_rsci_clken_d, mem_rsci_d_d, mem_rsci_q_d,
      mem_rsci_radr_d, mem_rsci_wadr_d, mem_rsci_readA_r_ram_ir_internal_RMASK_B_d,
      mem_rsci_we_d_pff
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_output_base;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input rotate_out_val;
  output rotate_out_rdy;
  input [511:0] rotate_out_msg;
  output mem_rsci_clken_d;
  output [63:0] mem_rsci_d_d;
  input [63:0] mem_rsci_q_d;
  output [13:0] mem_rsci_radr_d;
  output [13:0] mem_rsci_wadr_d;
  output mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  output mem_rsci_we_d_pff;


  // Interconnect Declarations
  wire run_wen;
  wire run_wten;
  wire sync2_Pop_mioi_bawt;
  reg sync2_Pop_mioi_iswt0;
  wire sync2_Pop_mioi_wen_comp;
  wire rotate_out_Pop_mioi_bawt;
  reg rotate_out_Pop_mioi_iswt0;
  wire rotate_out_Pop_mioi_wen_comp;
  wire [511:0] rotate_out_Pop_mioi_idat_mxwt;
  wire dma_write_ctrl_Push_mioi_bawt;
  reg dma_write_ctrl_Push_mioi_iswt0;
  wire dma_write_ctrl_Push_mioi_wen_comp;
  wire dma_write_chnl_Push_mioi_bawt;
  reg dma_write_chnl_Push_mioi_iswt0;
  wire dma_write_chnl_Push_mioi_wen_comp;
  reg [63:0] dma_write_chnl_Push_mioi_idat;
  wire sync3_Push_mioi_bawt;
  reg sync3_Push_mioi_iswt0;
  wire sync3_Push_mioi_wen_comp;
  reg [27:0] dma_write_ctrl_Push_mioi_idat_63_36;
  reg [31:0] dma_write_ctrl_Push_mioi_idat_31_0;
  wire [1:0] while_for_1_while_for_1_mux1h_tmp;
  wire [3:0] while_for_for_acc_2_tmp;
  wire [4:0] nl_while_for_for_acc_2_tmp;
  wire operator_32_false_less_tmp;
  wire operator_32_false_1_less_tmp;
  wire mux_tmp_71;
  wire and_dcpl_1;
  wire or_dcpl_13;
  wire or_dcpl_21;
  wire or_dcpl_22;
  wire not_tmp_69;
  wire mux_tmp_72;
  wire or_dcpl_31;
  wire or_tmp_69;
  wire mux_tmp_75;
  wire mux_tmp_76;
  wire and_dcpl_3;
  wire or_dcpl_43;
  wire mux_tmp_77;
  wire or_dcpl_45;
  wire or_dcpl_47;
  wire and_tmp_21;
  wire or_dcpl_50;
  wire or_dcpl_51;
  wire or_dcpl_55;
  wire and_dcpl_9;
  wire mux_tmp_91;
  wire and_dcpl_15;
  wire mux_tmp_92;
  wire mux_tmp_94;
  wire and_dcpl_21;
  wire or_dcpl_60;
  wire or_dcpl_62;
  wire while_while_or_cse_1;
  wire while_or_4_cse_1;
  wire while_or_5_cse_1;
  wire while_or_cse_1;
  wire while_or_1_cse_1;
  wire while_for_1_and_m1c_1;
  wire while_for_1_while_for_1_nor_2_cse_1;
  wire exit_while_for_lpi_1_dfm_1;
  wire lfst_exitL_exit_while_for_for_lpi_1_dfm_1;
  reg lfst_exitL_exit_while_for_for_lpi_1;
  reg exitL_exit_while_for_1_sva;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_4;
  reg while_stage_v_1;
  reg while_for_1_asn_itm_1;
  reg while_stage_v_2;
  reg operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1;
  reg sfi_exit_while_for_lpi_1_dfm_st_1;
  reg while_for_asn_sft_lpi_1_dfm_st_1;
  reg while_stage_v_3;
  reg while_stage_v_4;
  reg operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3;
  reg exit_while_for_lpi_1_dfm_st_3;
  reg while_for_asn_sft_lpi_1_dfm_st_3;
  wire [1:0] lfst_exit_while_for_1_lpi_1_dfm_mx1w0;
  wire while_for_asn_sft_lpi_1_dfm_mx0;
  wire while_for_1_equal_tmp_1;
  reg [2:0] while_for_for_j_3_0_lpi_1_2_0;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_st_2;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_st_4;
  reg exitL_exitL_exit_while_for_for_lpi_1_dfm_st_1;
  reg while_for_asn_sft_lpi_1;
  reg exit_while_for_lpi_1_dfm_st_2;
  reg while_for_asn_sft_lpi_1_dfm_st_2;
  reg [1:0] lfst_exit_while_for_1_lpi_1_dfm_st_3;
  reg operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2;
  reg while_for_1_and_10_itm_1;
  wire exitL_exit_while_for_1_sva_mx0;
  reg [2:0] while_for_for_j_3_0_lpi_1_dfm_1_2_0_1;
  wire while_for_while_for_or_mx0w0;
  reg exitL_exitL_exit_while_for_for_lpi_1;
  wire while_and_cse;
  wire while_for_and_3_cse;
  wire or_36_cse;
  wire and_84_cse;
  wire nand_20_cse;
  wire while_while_while_nand_3_cse;
  reg [13:0] while_for_1_data_slc_13_0_itm_1;
  reg [511:0] while_rotate_out_reg_data_lpi_1;
  wire while_for_for_nor_m1c_1;
  wire while_for_for_and_m1c_7;
  wire while_for_for_and_m1c_8;
  wire while_for_for_and_m1c_9;
  wire while_for_for_and_m1c_10;
  wire while_for_for_and_m1c_11;
  wire while_for_for_and_m1c_12;
  wire while_for_for_and_m1c_13;
  reg [31:0] while_for_1_i_lpi_1;
  reg [31:0] while_for_i_lpi_1;
  wire and_102_cse;
  wire [31:0] z_out;
  wire [32:0] nl_z_out;
  reg exit_while_for_lpi_1_dfm_st;
  reg sfi_exit_while_for_lpi_1_dfm_st;
  reg operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st;
  reg exit_while_for_lpi_1_dfm_st_1;
  wire exitL_exit_while_for_1_sva_mx0w0;
  wire exitL_exitL_exit_while_for_for_lpi_1_dfm_mx1w0;
  wire [2:0] while_for_for_j_3_0_lpi_1_dfm_2_0_1;
  wire while_for_1_asn_itm_1_mx0c1;
  wire while_stage_v_2_mx1c1;
  wire sfi_exit_while_for_lpi_1_dfm_st_1_mx0c1;
  wire while_for_asn_sft_lpi_1_dfm_st_1_mx0c1;
  wire operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_mx0c1;
  wire while_stage_v_3_mx1c1;
  wire while_stage_v_4_mx1c1;
  wire and_31_rgt;
  wire not_230_rgt;
  wire mux_104_rgt;
  wire while_for_1_and_18_cse;
  wire while_for_for_j_and_cse;
  wire while_for_for_and_25_cse;
  wire while_for_and_7_cse;
  reg reg_while_for_for_equal_itm_1_cse;
  reg reg_while_for_for_equal_3_itm_1_cse;

  wire mux_73_nl;
  wire nor_60_nl;
  wire nor_61_nl;
  wire mux_78_nl;
  wire nor_62_nl;
  wire and_97_nl;
  wire nor_68_nl;
  wire mux_81_nl;
  wire mux_80_nl;
  wire nor_63_nl;
  wire nor_64_nl;
  wire while_for_1_and_3_nl;
  wire nand_nl;
  wire nor_74_nl;
  wire[10:0] while_for_for_idx_mux_nl;
  wire and_42_nl;
  wire while_for_1_not_23_nl;
  wire mux_106_nl;
  wire[1:0] while_for_1_while_for_1_and_4_nl;
  wire while_for_1_or_8_nl;
  wire while_for_1_and_4_nl;
  wire[1:0] while_for_1_mux_nl;
  wire while_for_1_not_25_nl;
  wire while_for_mux_16_nl;
  wire or_127_nl;
  wire or_76_nl;
  wire or_11_nl;
  wire mux_74_nl;
  wire and_22_nl;
  wire and_24_nl;
  wire or_151_nl;
  wire nor_58_nl;
  wire nand_36_nl;
  wire mux_93_nl;
  wire or_154_nl;
  wire mux_87_nl;
  wire nor_65_nl;
  wire mux_95_nl;
  wire mux_98_nl;
  wire mux_97_nl;
  wire or_162_nl;
  wire or_160_nl;
  wire while_for_for_and_nl;
  wire while_for_for_and_1_nl;
  wire while_for_for_and_2_nl;
  wire while_for_for_and_3_nl;
  wire while_for_for_and_4_nl;
  wire while_for_for_and_5_nl;
  wire while_for_for_and_6_nl;
  wire while_for_for_and_7_nl;
  wire while_for_for_and_8_nl;
  wire while_for_for_and_9_nl;
  wire while_for_for_and_10_nl;
  wire while_for_for_and_11_nl;
  wire while_for_for_and_12_nl;
  wire while_for_for_and_13_nl;
  wire while_for_for_and_14_nl;
  wire while_for_for_and_15_nl;
  wire[31:0] while_for_1_mux_17_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_OutputBuffer_run_sync2_Pop_mioi_inst_sync2_Pop_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_sync2_Pop_mioi_inst_sync2_Pop_mioi_oswt_unreg = mux_tmp_76
      & sync2_Pop_mioi_bawt & while_for_1_asn_itm_1 & while_stage_v_1;
  wire  nl_OutputBuffer_run_rotate_out_Pop_mioi_inst_rotate_out_Pop_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_rotate_out_Pop_mioi_inst_rotate_out_Pop_mioi_oswt_unreg
      = ~(and_dcpl_1 | (~(sfi_exit_while_for_lpi_1_dfm_st_1 & rotate_out_Pop_mioi_bawt))
      | while_for_asn_sft_lpi_1_dfm_st_1 | or_dcpl_22);
  wire  nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_oswt_unreg
      = ~(nand_20_cse | (~ dma_write_ctrl_Push_mioi_bawt) | (lfst_exit_while_for_1_lpi_1_dfm_st_4[1])
      | (~ while_stage_v_4));
  wire [66:0] nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat;
  assign nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat
      = {3'b011 , dma_write_ctrl_Push_mioi_idat_63_36 , 4'b0000 , dma_write_ctrl_Push_mioi_idat_31_0};
  wire  nl_OutputBuffer_run_dma_write_chnl_Push_mioi_inst_dma_write_chnl_Push_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_dma_write_chnl_Push_mioi_inst_dma_write_chnl_Push_mioi_oswt_unreg
      = ~((lfst_exit_while_for_1_lpi_1_dfm_st_4[0]) | (~ operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3)
      | (~ dma_write_chnl_Push_mioi_bawt) | (~((lfst_exit_while_for_1_lpi_1_dfm_st_4[1])
      & while_stage_v_4)));
  wire  nl_OutputBuffer_run_sync3_Push_mioi_inst_sync3_Push_mioi_oswt_unreg;
  assign nl_OutputBuffer_run_sync3_Push_mioi_inst_sync3_Push_mioi_oswt_unreg = ~(and_dcpl_1
      | (lfst_exit_while_for_1_lpi_1_dfm_st_2[0]) | (~ sync3_Push_mioi_bawt) | operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1
      | or_dcpl_31);
  wire  nl_OutputBuffer_run_staller_inst_run_flen_unreg;
  assign nl_OutputBuffer_run_staller_inst_run_flen_unreg = ~(((~(while_stage_v_1
      & or_dcpl_51)) & while_while_or_cse_1 & while_or_4_cse_1 & while_or_5_cse_1
      & while_or_cse_1 & while_or_1_cse_1) | (while_stage_v_1 & (~(while_stage_v_2
      & (~ mux_tmp_75))) & while_while_or_cse_1 & while_or_4_cse_1 & while_or_5_cse_1
      & while_or_cse_1 & while_or_1_cse_1) | (while_stage_v_2 & (~(while_stage_v_3
      & or_dcpl_60)) & while_or_4_cse_1 & while_or_5_cse_1 & while_or_cse_1 & while_or_1_cse_1)
      | (while_stage_v_3 & while_while_while_nand_3_cse & while_or_cse_1 & while_or_1_cse_1)
      | (while_stage_v_4 & while_or_cse_1 & while_or_1_cse_1));
  OutputBuffer_run_sync2_Pop_mioi OutputBuffer_run_sync2_Pop_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync2_Pop_mioi_oswt_unreg(nl_OutputBuffer_run_sync2_Pop_mioi_inst_sync2_Pop_mioi_oswt_unreg),
      .sync2_Pop_mioi_bawt(sync2_Pop_mioi_bawt),
      .sync2_Pop_mioi_iswt0(sync2_Pop_mioi_iswt0),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp)
    );
  OutputBuffer_run_rotate_out_Pop_mioi OutputBuffer_run_rotate_out_Pop_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .rotate_out_Pop_mioi_oswt_unreg(nl_OutputBuffer_run_rotate_out_Pop_mioi_inst_rotate_out_Pop_mioi_oswt_unreg),
      .rotate_out_Pop_mioi_bawt(rotate_out_Pop_mioi_bawt),
      .rotate_out_Pop_mioi_iswt0(rotate_out_Pop_mioi_iswt0),
      .rotate_out_Pop_mioi_wen_comp(rotate_out_Pop_mioi_wen_comp),
      .rotate_out_Pop_mioi_idat_mxwt(rotate_out_Pop_mioi_idat_mxwt)
    );
  OutputBuffer_run_dma_write_ctrl_Push_mioi OutputBuffer_run_dma_write_ctrl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_write_ctrl_Push_mioi_oswt_unreg(nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_oswt_unreg),
      .dma_write_ctrl_Push_mioi_bawt(dma_write_ctrl_Push_mioi_bawt),
      .dma_write_ctrl_Push_mioi_iswt0(dma_write_ctrl_Push_mioi_iswt0),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp),
      .dma_write_ctrl_Push_mioi_idat(nl_OutputBuffer_run_dma_write_ctrl_Push_mioi_inst_dma_write_ctrl_Push_mioi_idat[66:0])
    );
  OutputBuffer_run_dma_write_chnl_Push_mioi OutputBuffer_run_dma_write_chnl_Push_mioi_inst
      (
      .clk(clk),
      .rst(rst),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dma_write_chnl_Push_mioi_oswt_unreg(nl_OutputBuffer_run_dma_write_chnl_Push_mioi_inst_dma_write_chnl_Push_mioi_oswt_unreg),
      .dma_write_chnl_Push_mioi_bawt(dma_write_chnl_Push_mioi_bawt),
      .dma_write_chnl_Push_mioi_iswt0(dma_write_chnl_Push_mioi_iswt0),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp),
      .dma_write_chnl_Push_mioi_idat(dma_write_chnl_Push_mioi_idat)
    );
  OutputBuffer_run_sync3_Push_mioi OutputBuffer_run_sync3_Push_mioi_inst (
      .clk(clk),
      .rst(rst),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync3_Push_mioi_oswt_unreg(nl_OutputBuffer_run_sync3_Push_mioi_inst_sync3_Push_mioi_oswt_unreg),
      .sync3_Push_mioi_bawt(sync3_Push_mioi_bawt),
      .sync3_Push_mioi_iswt0(sync3_Push_mioi_iswt0),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp)
    );
  OutputBuffer_run_staller OutputBuffer_run_staller_inst (
      .clk(clk),
      .rst(rst),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .sync2_Pop_mioi_wen_comp(sync2_Pop_mioi_wen_comp),
      .rotate_out_Pop_mioi_wen_comp(rotate_out_Pop_mioi_wen_comp),
      .dma_write_ctrl_Push_mioi_wen_comp(dma_write_ctrl_Push_mioi_wen_comp),
      .dma_write_chnl_Push_mioi_wen_comp(dma_write_chnl_Push_mioi_wen_comp),
      .sync3_Push_mioi_wen_comp(sync3_Push_mioi_wen_comp),
      .run_flen_unreg(nl_OutputBuffer_run_staller_inst_run_flen_unreg)
    );
  assign nor_60_nl = ~(while_for_asn_sft_lpi_1_dfm_st_1 | (~ mux_tmp_72));
  assign nor_61_nl = ~((~ operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1)
      | (lfst_exit_while_for_1_lpi_1_dfm_st_2[0]) | and_dcpl_1);
  assign mux_73_nl = MUX_s_1_2_2(nor_60_nl, nor_61_nl, lfst_exit_while_for_1_lpi_1_dfm_st_2[1]);
  assign mem_rsci_clken_d = mux_73_nl & while_stage_v_2;
  assign while_and_cse = run_wen & (~ or_dcpl_13);
  assign while_for_1_and_18_cse = run_wen & (~ or_dcpl_50);
  assign while_for_for_j_and_cse = run_wen & (~ or_dcpl_55);
  assign and_31_rgt = and_tmp_21 & (while_for_1_while_for_1_mux1h_tmp[1]) & while_stage_v_1
      & (~ (lfst_exit_while_for_1_lpi_1_dfm_4[1]));
  assign and_102_cse = while_for_1_and_m1c_1 & (~ exit_while_for_lpi_1_dfm_1);
  assign while_for_for_and_25_cse = run_wen & mux_tmp_91;
  assign or_36_cse = (~ while_for_1_asn_itm_1) | sync2_Pop_mioi_bawt;
  assign and_84_cse = while_for_asn_sft_lpi_1 & lfst_exitL_exit_while_for_for_lpi_1;
  assign nand_nl = ~(((~ while_stage_v_2) | (lfst_exit_while_for_1_lpi_1_dfm_st_2[1])
      | while_for_asn_sft_lpi_1_dfm_st_1) & while_stage_v_4 & (~ mux_tmp_71));
  assign nor_74_nl = ~((~ while_stage_v_2) | (lfst_exit_while_for_1_lpi_1_dfm_st_2[1])
      | while_for_asn_sft_lpi_1_dfm_st_1 | mux_tmp_72);
  assign not_230_rgt = MUX_s_1_2_2(nand_nl, nor_74_nl, lfst_exit_while_for_1_lpi_1_dfm_4[1]);
  assign while_for_and_7_cse = run_wen & (~ and_dcpl_1);
  assign while_for_and_3_cse = run_wen & (~ or_dcpl_60);
  assign while_while_while_nand_3_cse = ~(while_stage_v_4 & (~ mux_tmp_71));
  assign mux_104_rgt = MUX_s_1_2_2(mux_tmp_92, mux_tmp_76, lfst_exit_while_for_1_lpi_1_dfm_4[1]);
  assign while_for_1_while_for_1_and_4_nl = MUX_v_2_2_2(2'b00, lfst_exit_while_for_1_lpi_1_dfm_4,
      operator_32_false_1_less_tmp);
  assign while_for_1_or_8_nl = and_102_cse | while_for_1_while_for_1_nor_2_cse_1;
  assign while_for_1_and_4_nl = exit_while_for_lpi_1_dfm_1 & while_for_1_and_m1c_1;
  assign while_for_1_while_for_1_mux1h_tmp = MUX1HOT_v_2_3_2(2'b01, 2'b10, while_for_1_while_for_1_and_4_nl,
      {while_for_1_or_8_nl , while_for_1_and_4_nl , while_for_1_equal_tmp_1});
  assign while_for_1_mux_nl = MUX_v_2_2_2(lfst_exit_while_for_1_lpi_1_dfm_4, while_for_1_while_for_1_mux1h_tmp,
      while_stage_v_1);
  assign while_for_1_not_25_nl = ~ exitL_exit_while_for_1_sva_mx0;
  assign lfst_exit_while_for_1_lpi_1_dfm_mx1w0 = MUX_v_2_2_2(2'b00, while_for_1_mux_nl,
      while_for_1_not_25_nl);
  assign exitL_exit_while_for_1_sva_mx0w0 = ~((while_for_1_while_for_1_mux1h_tmp!=2'b00));
  assign exitL_exit_while_for_1_sva_mx0 = MUX_s_1_2_2(exitL_exit_while_for_1_sva,
      exitL_exit_while_for_1_sva_mx0w0, while_stage_v_1);
  assign while_for_mux_16_nl = MUX_s_1_2_2(while_for_while_for_or_mx0w0, exitL_exitL_exit_while_for_for_lpi_1,
      or_dcpl_62);
  assign exitL_exitL_exit_while_for_for_lpi_1_dfm_mx1w0 = while_for_mux_16_nl | (~((lfst_exit_while_for_1_lpi_1_dfm_mx1w0!=2'b00)));
  assign or_127_nl = (~ lfst_exitL_exit_while_for_for_lpi_1) | exitL_exit_while_for_1_sva;
  assign while_for_asn_sft_lpi_1_dfm_mx0 = MUX_s_1_2_2(while_for_asn_sft_lpi_1, exit_while_for_lpi_1_dfm_1,
      or_127_nl);
  assign exit_while_for_lpi_1_dfm_1 = (~ operator_32_false_less_tmp) & exitL_exit_while_for_1_sva;
  assign nl_while_for_for_acc_2_tmp = conv_u2s_3_4(while_for_for_j_3_0_lpi_1_dfm_2_0_1)
      + 4'b0001;
  assign while_for_for_acc_2_tmp = nl_while_for_for_acc_2_tmp[3:0];
  assign while_for_for_j_3_0_lpi_1_dfm_2_0_1 = MUX_v_3_2_2(3'b000, while_for_for_j_3_0_lpi_1_2_0,
      lfst_exitL_exit_while_for_for_lpi_1_dfm_1);
  assign lfst_exitL_exit_while_for_for_lpi_1_dfm_1 = lfst_exitL_exit_while_for_for_lpi_1
      & (~ exitL_exit_while_for_1_sva);
  assign operator_32_false_less_tmp = $signed(while_for_i_lpi_1) < $signed(1'b0);
  assign operator_32_false_1_less_tmp = $signed((while_for_1_i_lpi_1[31:4])) < $signed({1'b0,
      (cfg_block_size[28:1])});
  assign while_for_1_and_m1c_1 = while_for_asn_sft_lpi_1_dfm_mx0 & (~ while_for_1_equal_tmp_1);
  assign while_for_1_while_for_1_nor_2_cse_1 = ~(while_for_asn_sft_lpi_1_dfm_mx0
      | while_for_1_equal_tmp_1);
  assign while_for_1_equal_tmp_1 = (lfst_exit_while_for_1_lpi_1_dfm_4==2'b10);
  assign while_for_for_nor_m1c_1 = ~((while_for_for_j_3_0_lpi_1_dfm_1_2_0_1!=3'b000));
  assign while_for_for_and_m1c_7 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b001);
  assign while_for_for_and_m1c_8 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b010);
  assign while_for_for_and_m1c_9 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b011);
  assign while_for_for_and_m1c_10 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b100);
  assign while_for_for_and_m1c_11 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b101);
  assign while_for_for_and_m1c_12 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b110);
  assign while_for_for_and_m1c_13 = (while_for_for_j_3_0_lpi_1_dfm_1_2_0_1==3'b111);
  assign while_while_or_cse_1 = sync2_Pop_mioi_bawt | (~(while_for_1_asn_itm_1 &
      while_stage_v_1));
  assign while_or_4_cse_1 = rotate_out_Pop_mioi_bawt | (~(sfi_exit_while_for_lpi_1_dfm_st_1
      & (~ while_for_asn_sft_lpi_1_dfm_st_1) & (((lfst_exit_while_for_1_lpi_1_dfm_st_2==2'b01))
      | (~((lfst_exit_while_for_1_lpi_1_dfm_st_2!=2'b00)))) & while_stage_v_2));
  assign while_or_5_cse_1 = sync3_Push_mioi_bawt | (~((~ operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1)
      & (lfst_exit_while_for_1_lpi_1_dfm_st_2==2'b10) & while_stage_v_2));
  assign while_or_cse_1 = dma_write_ctrl_Push_mioi_bawt | (~(exit_while_for_lpi_1_dfm_st_3
      & while_for_asn_sft_lpi_1_dfm_st_3 & (((lfst_exit_while_for_1_lpi_1_dfm_st_4==2'b01))
      | (~((lfst_exit_while_for_1_lpi_1_dfm_st_4!=2'b00)))) & while_stage_v_4));
  assign while_or_1_cse_1 = dma_write_chnl_Push_mioi_bawt | (~(operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3
      & (lfst_exit_while_for_1_lpi_1_dfm_st_4==2'b10) & while_stage_v_4));
  assign while_for_while_for_or_mx0w0 = (while_for_for_acc_2_tmp[3]) | while_for_asn_sft_lpi_1_dfm_mx0;
  assign nand_20_cse = ~(exit_while_for_lpi_1_dfm_st_3 & while_for_asn_sft_lpi_1_dfm_st_3);
  assign or_76_nl = dma_write_ctrl_Push_mioi_bawt | nand_20_cse;
  assign or_11_nl = (lfst_exit_while_for_1_lpi_1_dfm_st_4[0]) | (~ operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3)
      | dma_write_chnl_Push_mioi_bawt;
  assign mux_tmp_71 = MUX_s_1_2_2(or_76_nl, or_11_nl, lfst_exit_while_for_1_lpi_1_dfm_st_4[1]);
  assign and_dcpl_1 = (~ mux_tmp_71) & while_stage_v_4;
  assign or_dcpl_13 = and_dcpl_1 | (~ while_stage_v_3) | (lfst_exit_while_for_1_lpi_1_dfm_st_3[1])
      | (~(while_for_asn_sft_lpi_1_dfm_st_2 & exit_while_for_lpi_1_dfm_st_2));
  assign or_dcpl_21 = and_dcpl_1 | (~(while_stage_v_3 & (lfst_exit_while_for_1_lpi_1_dfm_st_3[1])))
      | (lfst_exit_while_for_1_lpi_1_dfm_st_3[0]) | (~ operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2);
  assign or_dcpl_22 = (lfst_exit_while_for_1_lpi_1_dfm_st_2[1]) | (~ while_stage_v_2);
  assign not_tmp_69 = ~(sfi_exit_while_for_lpi_1_dfm_st_1 | and_dcpl_1);
  assign mux_tmp_72 = MUX_s_1_2_2(not_tmp_69, while_while_while_nand_3_cse, rotate_out_Pop_mioi_bawt);
  assign or_dcpl_31 = ~((lfst_exit_while_for_1_lpi_1_dfm_st_2[1]) & while_stage_v_2);
  assign or_tmp_69 = while_for_asn_sft_lpi_1_dfm_st_1 | rotate_out_Pop_mioi_bawt;
  assign mux_74_nl = MUX_s_1_2_2(not_tmp_69, while_while_while_nand_3_cse, or_tmp_69);
  assign and_22_nl = ((lfst_exit_while_for_1_lpi_1_dfm_st_2[0]) | operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1
      | sync3_Push_mioi_bawt) & while_while_while_nand_3_cse;
  assign mux_tmp_75 = MUX_s_1_2_2(mux_74_nl, and_22_nl, lfst_exit_while_for_1_lpi_1_dfm_st_2[1]);
  assign mux_tmp_76 = MUX_s_1_2_2(while_while_while_nand_3_cse, mux_tmp_75, while_stage_v_2);
  assign and_dcpl_3 = (~ sync2_Pop_mioi_bawt) & while_for_1_asn_itm_1;
  assign or_dcpl_43 = and_dcpl_3 | (~ while_stage_v_1) | (lfst_exit_while_for_1_lpi_1_dfm_4[1]);
  assign and_24_nl = operator_32_false_less_tmp & mux_tmp_76;
  assign mux_tmp_77 = MUX_s_1_2_2(mux_tmp_76, and_24_nl, exitL_exitL_exit_while_for_for_lpi_1_dfm_st_1);
  assign or_dcpl_45 = (lfst_exit_while_for_1_lpi_1_dfm_4!=2'b10);
  assign or_dcpl_47 = and_dcpl_3 | (~ while_stage_v_1);
  assign and_tmp_21 = or_36_cse & mux_tmp_76;
  assign or_dcpl_50 = ~(mux_tmp_76 & (~(and_dcpl_3 & while_stage_v_1)));
  assign or_dcpl_51 = (~ mux_tmp_76) | or_dcpl_47;
  assign or_dcpl_55 = (~ mux_tmp_76) | and_dcpl_3 | while_for_1_equal_tmp_1 | (~
      while_stage_v_1);
  assign and_dcpl_9 = and_tmp_21 & while_stage_v_1;
  assign or_151_nl = (~ while_stage_v_2) | (lfst_exit_while_for_1_lpi_1_dfm_st_2[1])
      | while_for_asn_sft_lpi_1_dfm_st_1 | rotate_out_Pop_mioi_bawt;
  assign mux_tmp_91 = MUX_s_1_2_2(not_tmp_69, while_while_while_nand_3_cse, or_151_nl);
  assign and_dcpl_15 = while_stage_v_1 & (~ (lfst_exit_while_for_1_lpi_1_dfm_4[1]));
  assign nor_58_nl = ~(and_84_cse | (~ mux_tmp_76));
  assign mux_tmp_92 = MUX_s_1_2_2(nor_58_nl, mux_tmp_77, exitL_exit_while_for_1_sva);
  assign nand_36_nl = ~(and_84_cse & mux_tmp_76);
  assign or_154_nl = operator_32_false_less_tmp | (~ mux_tmp_76);
  assign mux_93_nl = MUX_s_1_2_2((~ mux_tmp_76), or_154_nl, exitL_exitL_exit_while_for_for_lpi_1_dfm_st_1);
  assign mux_tmp_94 = MUX_s_1_2_2(nand_36_nl, mux_93_nl, exitL_exit_while_for_1_sva);
  assign and_dcpl_21 = while_stage_v_1 & (lfst_exit_while_for_1_lpi_1_dfm_4[1]);
  assign or_dcpl_60 = and_dcpl_1 | (~ while_stage_v_3);
  assign or_dcpl_62 = while_for_1_equal_tmp_1 | (~ while_stage_v_1);
  assign while_for_1_asn_itm_1_mx0c1 = mux_tmp_76 & (~ while_stage_v_1);
  assign nor_65_nl = ~(or_36_cse | (~ mux_tmp_75));
  assign mux_87_nl = MUX_s_1_2_2(mux_tmp_75, nor_65_nl, while_stage_v_1);
  assign while_stage_v_2_mx1c1 = mux_87_nl & while_stage_v_2;
  assign mux_95_nl = MUX_s_1_2_2((~ mux_tmp_94), mux_tmp_76, lfst_exit_while_for_1_lpi_1_dfm_4[1]);
  assign sfi_exit_while_for_lpi_1_dfm_st_1_mx0c1 = mux_95_nl & or_36_cse & while_stage_v_1;
  assign while_for_asn_sft_lpi_1_dfm_st_1_mx0c1 = and_tmp_21 & and_dcpl_21;
  assign operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_mx0c1 = and_tmp_21
      & or_dcpl_45 & while_stage_v_1;
  assign or_162_nl = or_tmp_69 | (~(sfi_exit_while_for_lpi_1_dfm_st_1 & while_while_while_nand_3_cse));
  assign or_160_nl = operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1
      | sync3_Push_mioi_bawt | (lfst_exit_while_for_1_lpi_1_dfm_st_2[0]) | and_dcpl_1;
  assign mux_97_nl = MUX_s_1_2_2(or_162_nl, or_160_nl, lfst_exit_while_for_1_lpi_1_dfm_st_2[1]);
  assign mux_98_nl = MUX_s_1_2_2(and_dcpl_1, mux_97_nl, while_stage_v_2);
  assign while_stage_v_3_mx1c1 = (~ mux_98_nl) & while_stage_v_3;
  assign while_stage_v_4_mx1c1 = mux_tmp_71 & while_stage_v_4 & (~ while_stage_v_3);
  assign while_for_for_and_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_nor_m1c_1;
  assign while_for_for_and_1_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_nor_m1c_1;
  assign while_for_for_and_2_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_7;
  assign while_for_for_and_3_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_7;
  assign while_for_for_and_4_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_8;
  assign while_for_for_and_5_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_8;
  assign while_for_for_and_6_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_9;
  assign while_for_for_and_7_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_9;
  assign while_for_for_and_8_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_10;
  assign while_for_for_and_9_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_10;
  assign while_for_for_and_10_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_11;
  assign while_for_for_and_11_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_11;
  assign while_for_for_and_12_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_12;
  assign while_for_for_and_13_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_12;
  assign while_for_for_and_14_nl = reg_while_for_for_equal_itm_1_cse & while_for_for_and_m1c_13;
  assign while_for_for_and_15_nl = reg_while_for_for_equal_3_itm_1_cse & while_for_for_and_m1c_13;
  assign mem_rsci_d_d = MUX1HOT_v_64_16_2((while_rotate_out_reg_data_lpi_1[63:0]),
      (rotate_out_Pop_mioi_idat_mxwt[63:0]), (while_rotate_out_reg_data_lpi_1[127:64]),
      (rotate_out_Pop_mioi_idat_mxwt[127:64]), (while_rotate_out_reg_data_lpi_1[191:128]),
      (rotate_out_Pop_mioi_idat_mxwt[191:128]), (while_rotate_out_reg_data_lpi_1[255:192]),
      (rotate_out_Pop_mioi_idat_mxwt[255:192]), (while_rotate_out_reg_data_lpi_1[319:256]),
      (rotate_out_Pop_mioi_idat_mxwt[319:256]), (while_rotate_out_reg_data_lpi_1[383:320]),
      (rotate_out_Pop_mioi_idat_mxwt[383:320]), (while_rotate_out_reg_data_lpi_1[447:384]),
      (rotate_out_Pop_mioi_idat_mxwt[447:384]), (while_rotate_out_reg_data_lpi_1[511:448]),
      (rotate_out_Pop_mioi_idat_mxwt[511:448]), {while_for_for_and_nl , while_for_for_and_1_nl
      , while_for_for_and_2_nl , while_for_for_and_3_nl , while_for_for_and_4_nl
      , while_for_for_and_5_nl , while_for_for_and_6_nl , while_for_for_and_7_nl
      , while_for_for_and_8_nl , while_for_for_and_9_nl , while_for_for_and_10_nl
      , while_for_for_and_11_nl , while_for_for_and_12_nl , while_for_for_and_13_nl
      , while_for_for_and_14_nl , while_for_for_and_15_nl});
  assign mem_rsci_radr_d = while_for_1_data_slc_13_0_itm_1;
  assign mem_rsci_wadr_d = {(while_for_1_data_slc_13_0_itm_1[10:0]) , while_for_for_j_3_0_lpi_1_dfm_1_2_0_1};
  assign mem_rsci_we_d_pff = ~(and_dcpl_1 | (sfi_exit_while_for_lpi_1_dfm_st_1 &
      (~ rotate_out_Pop_mioi_bawt)) | while_for_asn_sft_lpi_1_dfm_st_1 | or_dcpl_22);
  assign mem_rsci_readA_r_ram_ir_internal_RMASK_B_d = ~(and_dcpl_1 | (lfst_exit_while_for_1_lpi_1_dfm_st_2[0])
      | (~ operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1) | or_dcpl_31);
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_ctrl_Push_mioi_idat_31_0 <= 32'b00000000000000000000000000000000;
      dma_write_ctrl_Push_mioi_idat_63_36 <= 28'b0000000000000000000000000000;
    end
    else if ( while_and_cse ) begin
      dma_write_ctrl_Push_mioi_idat_31_0 <= cfg_output_base;
      dma_write_ctrl_Push_mioi_idat_63_36 <= cfg_block_size[28:1];
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_chnl_Push_mioi_idat <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( run_wen & (~ or_dcpl_21) ) begin
      dma_write_chnl_Push_mioi_idat <= mem_rsci_q_d;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      dma_write_ctrl_Push_mioi_iswt0 <= 1'b0;
      dma_write_chnl_Push_mioi_iswt0 <= 1'b0;
      rotate_out_Pop_mioi_iswt0 <= 1'b0;
      sync3_Push_mioi_iswt0 <= 1'b0;
      sync2_Pop_mioi_iswt0 <= 1'b0;
    end
    else if ( run_wen ) begin
      dma_write_ctrl_Push_mioi_iswt0 <= ~ or_dcpl_13;
      dma_write_chnl_Push_mioi_iswt0 <= ~ or_dcpl_21;
      rotate_out_Pop_mioi_iswt0 <= ~((~ mux_78_nl) | or_dcpl_43);
      sync3_Push_mioi_iswt0 <= ~((~ mux_tmp_76) | or_dcpl_47 | or_dcpl_45 | operator_32_false_1_less_tmp);
      sync2_Pop_mioi_iswt0 <= MUX_s_1_2_2(and_97_nl, nor_68_nl, while_stage_v_1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_1_lpi_1_dfm_4 <= 2'b00;
      exitL_exit_while_for_1_sva <= 1'b1;
      while_stage_v_1 <= 1'b0;
    end
    else if ( while_for_1_and_18_cse ) begin
      lfst_exit_while_for_1_lpi_1_dfm_4 <= lfst_exit_while_for_1_lpi_1_dfm_mx1w0;
      exitL_exit_while_for_1_sva <= exitL_exitL_exit_while_for_for_lpi_1_dfm_mx1w0;
      while_stage_v_1 <= 1'b1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_for_j_3_0_lpi_1_2_0 <= 3'b000;
      lfst_exitL_exit_while_for_for_lpi_1 <= 1'b0;
    end
    else if ( while_for_for_j_and_cse ) begin
      while_for_for_j_3_0_lpi_1_2_0 <= while_for_for_acc_2_tmp[2:0];
      lfst_exitL_exit_while_for_for_lpi_1 <= ~((while_for_for_acc_2_tmp[3]) | while_for_asn_sft_lpi_1_dfm_mx0);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_asn_sft_lpi_1 <= 1'b0;
    end
    else if ( run_wen & (~(lfst_exitL_exit_while_for_for_lpi_1_dfm_1 | or_dcpl_55))
        ) begin
      while_for_asn_sft_lpi_1 <= exit_while_for_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exitL_exit_while_for_for_lpi_1_dfm_st_1 <= 1'b0;
    end
    else if ( run_wen & (mux_81_nl | and_31_rgt) ) begin
      exitL_exitL_exit_while_for_for_lpi_1_dfm_st_1 <= MUX_s_1_2_2(exitL_exitL_exit_while_for_for_lpi_1_dfm_mx1w0,
          while_for_asn_sft_lpi_1_dfm_mx0, and_31_rgt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_i_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((while_for_1_equal_tmp_1 & (~ operator_32_false_1_less_tmp))
        | or_dcpl_51 | and_102_cse | while_for_1_while_for_1_nor_2_cse_1)) ) begin
      while_for_1_i_lpi_1 <= MUX_v_32_2_2((signext_32_1(~ exit_while_for_lpi_1_dfm_1)),
          z_out, while_for_1_and_3_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_asn_itm_1 <= 1'b0;
    end
    else if ( run_wen & (and_dcpl_9 | while_for_1_asn_itm_1_mx0c1) ) begin
      while_for_1_asn_itm_1 <= MUX_s_1_2_2(exitL_exit_while_for_1_sva_mx0w0, exitL_exit_while_for_1_sva,
          while_for_1_asn_itm_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_2 <= 1'b0;
    end
    else if ( run_wen & (and_dcpl_9 | while_stage_v_2_mx1c1) ) begin
      while_stage_v_2 <= ~ while_stage_v_2_mx1c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_rotate_out_reg_data_lpi_1 <= 512'b
    end
    else if ( run_wen & mux_tmp_75 & while_stage_v_2 & while_for_1_and_10_itm_1 )
        begin
      while_rotate_out_reg_data_lpi_1 <= rotate_out_Pop_mioi_idat_mxwt;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      reg_while_for_for_equal_itm_1_cse <= 1'b0;
      reg_while_for_for_equal_3_itm_1_cse <= 1'b0;
      while_for_for_j_3_0_lpi_1_dfm_1_2_0_1 <= 3'b000;
    end
    else if ( while_for_for_and_25_cse ) begin
      reg_while_for_for_equal_itm_1_cse <= lfst_exitL_exit_while_for_for_lpi_1_dfm_1;
      reg_while_for_for_equal_3_itm_1_cse <= ~ lfst_exitL_exit_while_for_for_lpi_1_dfm_1;
      while_for_for_j_3_0_lpi_1_dfm_1_2_0_1 <= while_for_for_j_3_0_lpi_1_dfm_2_0_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sfi_exit_while_for_lpi_1_dfm_st_1 <= 1'b0;
    end
    else if ( run_wen & ((mux_tmp_92 & or_36_cse & and_dcpl_15) | sfi_exit_while_for_lpi_1_dfm_st_1_mx0c1)
        ) begin
      sfi_exit_while_for_lpi_1_dfm_st_1 <= MUX_s_1_2_2((~ lfst_exitL_exit_while_for_for_lpi_1_dfm_1),
          sfi_exit_while_for_lpi_1_dfm_st, sfi_exit_while_for_lpi_1_dfm_st_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_asn_sft_lpi_1_dfm_st_1 <= 1'b0;
    end
    else if ( run_wen & ((and_tmp_21 & and_dcpl_15) | while_for_asn_sft_lpi_1_dfm_st_1_mx0c1)
        ) begin
      while_for_asn_sft_lpi_1_dfm_st_1 <= MUX_s_1_2_2(while_for_asn_sft_lpi_1_dfm_mx0,
          exitL_exitL_exit_while_for_for_lpi_1_dfm_st_1, while_for_asn_sft_lpi_1_dfm_st_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_data_slc_13_0_itm_1 <= 14'b00000000000000;
    end
    else if ( run_wen & ((mux_tmp_91 & (lfst_exit_while_for_1_lpi_1_dfm_4[1])) |
        not_230_rgt) ) begin
      while_for_1_data_slc_13_0_itm_1 <= MUX_v_14_2_2((while_for_1_i_lpi_1[13:0]),
          ({3'b000 , while_for_for_idx_mux_nl}), not_230_rgt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1 <= 1'b0;
    end
    else if ( run_wen & ((and_tmp_21 & and_dcpl_21 & (~ (lfst_exit_while_for_1_lpi_1_dfm_4[0])))
        | operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_mx0c1) ) begin
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1 <= MUX_s_1_2_2(operator_32_false_1_less_tmp,
          operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st, operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1_mx0c1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      lfst_exit_while_for_1_lpi_1_dfm_st_2 <= 2'b00;
    end
    else if ( run_wen & (~ or_dcpl_51) ) begin
      lfst_exit_while_for_1_lpi_1_dfm_st_2 <= lfst_exit_while_for_1_lpi_1_dfm_4;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_3 <= 1'b0;
    end
    else if ( run_wen & ((mux_tmp_75 & while_stage_v_2) | while_stage_v_3_mx1c1)
        ) begin
      while_stage_v_3 <= ~ while_stage_v_3_mx1c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exit_while_for_lpi_1_dfm_st_2 <= 1'b0;
      while_for_asn_sft_lpi_1_dfm_st_2 <= 1'b0;
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2 <= 1'b0;
      lfst_exit_while_for_1_lpi_1_dfm_st_3 <= 2'b00;
    end
    else if ( while_for_and_7_cse ) begin
      exit_while_for_lpi_1_dfm_st_2 <= exit_while_for_lpi_1_dfm_st_1;
      while_for_asn_sft_lpi_1_dfm_st_2 <= while_for_asn_sft_lpi_1_dfm_st_1;
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2 <= operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_1;
      lfst_exit_while_for_1_lpi_1_dfm_st_3 <= lfst_exit_while_for_1_lpi_1_dfm_st_2;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_stage_v_4 <= 1'b0;
    end
    else if ( run_wen & ((while_while_while_nand_3_cse & while_stage_v_3) | while_stage_v_4_mx1c1)
        ) begin
      while_stage_v_4 <= ~ while_stage_v_4_mx1c1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exit_while_for_lpi_1_dfm_st_3 <= 1'b0;
      while_for_asn_sft_lpi_1_dfm_st_3 <= 1'b0;
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3 <= 1'b0;
      lfst_exit_while_for_1_lpi_1_dfm_st_4 <= 2'b00;
    end
    else if ( while_for_and_3_cse ) begin
      exit_while_for_lpi_1_dfm_st_3 <= exit_while_for_lpi_1_dfm_st_2;
      while_for_asn_sft_lpi_1_dfm_st_3 <= while_for_asn_sft_lpi_1_dfm_st_2;
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_3 <= operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st_2;
      lfst_exit_while_for_1_lpi_1_dfm_st_4 <= lfst_exit_while_for_1_lpi_1_dfm_st_3;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_i_lpi_1 <= 32'b00000000000000000000000000000000;
    end
    else if ( run_wen & (~((~((~(mux_106_nl | or_dcpl_62 | (~ (while_for_for_acc_2_tmp[3]))))
        | exitL_exit_while_for_1_sva_mx0)) | or_dcpl_50)) ) begin
      while_for_i_lpi_1 <= MUX_v_32_2_2(32'b00000000000000000000000000000000, z_out,
          while_for_1_not_23_nl);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      sfi_exit_while_for_lpi_1_dfm_st <= 1'b0;
    end
    else if ( run_wen & (~((~ mux_tmp_92) | or_dcpl_43)) ) begin
      sfi_exit_while_for_lpi_1_dfm_st <= ~ lfst_exitL_exit_while_for_for_lpi_1_dfm_1;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st <= 1'b0;
    end
    else if ( run_wen & (~((~(while_stage_v_1 & (lfst_exit_while_for_1_lpi_1_dfm_4[1])))
        | (lfst_exit_while_for_1_lpi_1_dfm_4[0]))) ) begin
      operator_32_false_1_slc_operator_32_false_1_acc_29_svs_st <= operator_32_false_1_less_tmp;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exitL_exitL_exit_while_for_for_lpi_1 <= 1'b0;
    end
    else if ( run_wen & (~((~ mux_tmp_76) | while_for_1_equal_tmp_1)) ) begin
      exitL_exitL_exit_while_for_for_lpi_1 <= while_for_while_for_or_mx0w0;
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exit_while_for_lpi_1_dfm_st_1 <= 1'b0;
    end
    else if ( run_wen & ((~(mux_tmp_94 | (lfst_exit_while_for_1_lpi_1_dfm_4[1])))
        | mux_104_rgt) ) begin
      exit_while_for_lpi_1_dfm_st_1 <= MUX_s_1_2_2(exit_while_for_lpi_1_dfm_1, exit_while_for_lpi_1_dfm_st,
          mux_104_rgt);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      while_for_1_and_10_itm_1 <= 1'b0;
    end
    else if ( run_wen & mux_tmp_76 ) begin
      while_for_1_and_10_itm_1 <= ~(lfst_exitL_exit_while_for_for_lpi_1_dfm_1 | while_for_asn_sft_lpi_1_dfm_mx0
          | while_for_1_equal_tmp_1);
    end
  end
  always @(posedge clk or negedge rst) begin
    if ( ~ rst ) begin
      exit_while_for_lpi_1_dfm_st <= 1'b0;
    end
    else if ( run_wen & (~(mux_tmp_94 | or_dcpl_43)) ) begin
      exit_while_for_lpi_1_dfm_st <= exit_while_for_lpi_1_dfm_1;
    end
  end
  assign nor_62_nl = ~(lfst_exitL_exit_while_for_for_lpi_1 | (~ mux_tmp_76));
  assign mux_78_nl = MUX_s_1_2_2(nor_62_nl, mux_tmp_77, exitL_exit_while_for_1_sva);
  assign and_97_nl = exitL_exit_while_for_1_sva & mux_tmp_76;
  assign nor_68_nl = ~((while_for_1_while_for_1_mux1h_tmp!=2'b00) | (~ and_tmp_21));
  assign nor_63_nl = ~((lfst_exit_while_for_1_lpi_1_dfm_4[1]) | (~ mux_tmp_76));
  assign mux_80_nl = MUX_s_1_2_2(nor_63_nl, mux_tmp_76, exitL_exit_while_for_1_sva);
  assign nor_64_nl = ~((while_for_1_while_for_1_mux1h_tmp[1]) | (~ and_tmp_21));
  assign mux_81_nl = MUX_s_1_2_2(mux_80_nl, nor_64_nl, while_stage_v_1);
  assign while_for_1_and_3_nl = operator_32_false_1_less_tmp & while_for_1_equal_tmp_1
      & (~ or_dcpl_51);
  assign and_42_nl = (~ mux_tmp_72) & (~(while_for_asn_sft_lpi_1_dfm_st_1 | (lfst_exit_while_for_1_lpi_1_dfm_st_2[1])))
      & while_stage_v_2;
  assign while_for_for_idx_mux_nl = MUX_v_11_2_2((while_for_i_lpi_1[10:0]), (while_for_1_data_slc_13_0_itm_1[10:0]),
      and_42_nl);
  assign while_for_1_not_23_nl = ~ exitL_exit_while_for_1_sva_mx0;
  assign mux_106_nl = MUX_s_1_2_2(and_84_cse, (~ operator_32_false_less_tmp), exitL_exit_while_for_1_sva);
  assign while_for_1_mux_17_nl = MUX_v_32_2_2(while_for_1_i_lpi_1, while_for_i_lpi_1,
      or_dcpl_45);
  assign nl_z_out = while_for_1_mux_17_nl + 32'b00000000000000000000000000000001;
  assign z_out = nl_z_out[31:0];

  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [63:0] MUX1HOT_v_64_16_2;
    input [63:0] input_15;
    input [63:0] input_14;
    input [63:0] input_13;
    input [63:0] input_12;
    input [63:0] input_11;
    input [63:0] input_10;
    input [63:0] input_9;
    input [63:0] input_8;
    input [63:0] input_7;
    input [63:0] input_6;
    input [63:0] input_5;
    input [63:0] input_4;
    input [63:0] input_3;
    input [63:0] input_2;
    input [63:0] input_1;
    input [63:0] input_0;
    input [15:0] sel;
    reg [63:0] result;
  begin
    result = input_0 & {64{sel[0]}};
    result = result | (input_1 & {64{sel[1]}});
    result = result | (input_2 & {64{sel[2]}});
    result = result | (input_3 & {64{sel[3]}});
    result = result | (input_4 & {64{sel[4]}});
    result = result | (input_5 & {64{sel[5]}});
    result = result | (input_6 & {64{sel[6]}});
    result = result | (input_7 & {64{sel[7]}});
    result = result | (input_8 & {64{sel[8]}});
    result = result | (input_9 & {64{sel[9]}});
    result = result | (input_10 & {64{sel[10]}});
    result = result | (input_11 & {64{sel[11]}});
    result = result | (input_12 & {64{sel[12]}});
    result = result | (input_13 & {64{sel[13]}});
    result = result | (input_14 & {64{sel[14]}});
    result = result | (input_15 & {64{sel[15]}});
    MUX1HOT_v_64_16_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input  sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input  sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [31:0] signext_32_1;
    input  vector;
  begin
    signext_32_1= {{31{vector}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Control
// ------------------------------------------------------------------


module Control (
  clk, rst, acc_start, acc_done, sync1_val, sync1_rdy, sync1_msg, sync2_val, sync2_rdy,
      sync2_msg, sync3_val, sync3_rdy, sync3_msg
);
  input clk;
  input rst;
  input acc_start;
  output acc_done;
  output sync1_val;
  input sync1_rdy;
  output sync1_msg;
  output sync2_val;
  input sync2_rdy;
  output sync2_msg;
  input sync3_val;
  output sync3_rdy;
  input sync3_msg;



  // Interconnect Declarations for Component Instantiations 
  Control_run Control_run_inst (
      .clk(clk),
      .rst(rst),
      .acc_start(acc_start),
      .acc_done(acc_done),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    InputBuffer
// ------------------------------------------------------------------


module InputBuffer (
  clk, rst, cfg_block_size, cfg_input_base, sync1_val, sync1_rdy, sync1_msg, dma_read_ctrl_val,
      dma_read_ctrl_rdy, dma_read_ctrl_msg, dma_read_chnl_val, dma_read_chnl_rdy,
      dma_read_chnl_msg, rotate_in_val, rotate_in_rdy, rotate_in_msg
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_input_base;
  input sync1_val;
  output sync1_rdy;
  input sync1_msg;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output rotate_in_val;
  input rotate_in_rdy;
  output [511:0] rotate_in_msg;


  // Interconnect Declarations
  wire mem_rsci_clken_d;
  wire [63:0] mem_rsci_d_d;
  wire [63:0] mem_rsci_q_d;
  wire [13:0] mem_rsci_radr_d;
  wire [13:0] mem_rsci_wadr_d;
  wire mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire mem_rsc_clken;
  wire [63:0] mem_rsc_q;
  wire [13:0] mem_rsc_radr;
  wire mem_rsc_we;
  wire [63:0] mem_rsc_d;
  wire [13:0] mem_rsc_wadr;
  wire mem_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd14),
  .data_width(32'sd64),
  .depth(32'sd16384),
  .latency(32'sd1)) mem_rsc_comp (
      .clk(clk),
      .clken(mem_rsc_clken),
      .d(mem_rsc_d),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .wadr(mem_rsc_wadr),
      .we(mem_rsc_we)
    );
  InputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_14_64_16384_16384_64_1_gen
      mem_rsci (
      .clken(mem_rsc_clken),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .we(mem_rsc_we),
      .d(mem_rsc_d),
      .wadr(mem_rsc_wadr),
      .clken_d(mem_rsci_clken_d),
      .d_d(mem_rsci_d_d),
      .q_d(mem_rsci_q_d),
      .radr_d(mem_rsci_radr_d),
      .wadr_d(mem_rsci_wadr_d),
      .we_d(mem_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(mem_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  InputBuffer_run InputBuffer_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_block_size),
      .cfg_input_base(cfg_input_base),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .mem_rsci_clken_d(mem_rsci_clken_d),
      .mem_rsci_d_d(mem_rsci_d_d),
      .mem_rsci_q_d(mem_rsci_q_d),
      .mem_rsci_radr_d(mem_rsci_radr_d),
      .mem_rsci_wadr_d(mem_rsci_wadr_d),
      .mem_rsci_readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .mem_rsci_we_d_pff(mem_rsci_we_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Rotate
// ------------------------------------------------------------------


module Rotate (
  clk, rst, cfg_cos_alpha, cfg_sin_alpha, cfg_cos_beta, cfg_sin_beta, cfg_cos_gamma,
      cfg_sin_gamma, cfg_cos_2_alpha, cfg_sin_2_alpha, cfg_cos_2_beta, cfg_sin_2_beta,
      cfg_cos_2_gamma, cfg_sin_2_gamma, cfg_cos_3_alpha, cfg_sin_3_alpha, cfg_cos_3_beta,
      cfg_sin_3_beta, cfg_cos_3_gamma, cfg_sin_3_gamma, rotate_in_val, rotate_in_rdy,
      rotate_in_msg, rotate_out_val, rotate_out_rdy, rotate_out_msg
);
  input clk;
  input rst;
  input [31:0] cfg_cos_alpha;
  input [31:0] cfg_sin_alpha;
  input [31:0] cfg_cos_beta;
  input [31:0] cfg_sin_beta;
  input [31:0] cfg_cos_gamma;
  input [31:0] cfg_sin_gamma;
  input [31:0] cfg_cos_2_alpha;
  input [31:0] cfg_sin_2_alpha;
  input [31:0] cfg_cos_2_beta;
  input [31:0] cfg_sin_2_beta;
  input [31:0] cfg_cos_2_gamma;
  input [31:0] cfg_sin_2_gamma;
  input [31:0] cfg_cos_3_alpha;
  input [31:0] cfg_sin_3_alpha;
  input [31:0] cfg_cos_3_beta;
  input [31:0] cfg_sin_3_beta;
  input [31:0] cfg_cos_3_gamma;
  input [31:0] cfg_sin_3_gamma;
  input rotate_in_val;
  output rotate_in_rdy;
  input [511:0] rotate_in_msg;
  output rotate_out_val;
  input rotate_out_rdy;
  output [511:0] rotate_out_msg;


  // Interconnect Declarations
  wire [96:0] while_mul_90_cmp_b;
  wire while_mul_90_cmp_en;
  wire [96:0] while_mul_90_cmp_z;
  wire [97:0] while_mul_110_cmp_b;
  wire while_mul_110_cmp_en;
  wire [97:0] while_mul_110_cmp_z;


  // Interconnect Declarations for Component Instantiations 
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd97),
  .signd_b(32'sd0),
  .width_z(32'sd97),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_mul_90_cmp (
      .a(cfg_sin_beta),
      .b(while_mul_90_cmp_b),
      .clk(clk),
      .en(while_mul_90_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_90_cmp_z)
    );
  mgc_mul_pipe #(.width_a(32'sd32),
  .signd_a(32'sd1),
  .width_b(32'sd98),
  .signd_b(32'sd0),
  .width_z(32'sd98),
  .clock_edge(32'sd1),
  .enable_active(32'sd1),
  .a_rst_active(32'sd0),
  .s_rst_active(32'sd0),
  .stages(32'sd2),
  .n_inreg(32'sd1)) while_mul_110_cmp (
      .a(cfg_sin_beta),
      .b(while_mul_110_cmp_b),
      .clk(clk),
      .en(while_mul_110_cmp_en),
      .a_rst(rst),
      .s_rst(1'b1),
      .z(while_mul_110_cmp_z)
    );
  Rotate_run Rotate_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_cos_alpha(cfg_cos_alpha),
      .cfg_sin_alpha(cfg_sin_alpha),
      .cfg_cos_beta(cfg_cos_beta),
      .cfg_sin_beta(cfg_sin_beta),
      .cfg_cos_gamma(cfg_cos_gamma),
      .cfg_sin_gamma(cfg_sin_gamma),
      .cfg_cos_2_alpha(cfg_cos_2_alpha),
      .cfg_sin_2_alpha(cfg_sin_2_alpha),
      .cfg_cos_2_beta(cfg_cos_2_beta),
      .cfg_cos_2_gamma(cfg_cos_2_gamma),
      .cfg_sin_2_gamma(cfg_sin_2_gamma),
      .cfg_cos_3_alpha(cfg_cos_3_alpha),
      .cfg_sin_3_alpha(cfg_sin_3_alpha),
      .cfg_cos_3_beta(cfg_cos_3_beta),
      .cfg_sin_3_beta(cfg_sin_3_beta),
      .cfg_cos_3_gamma(cfg_cos_3_gamma),
      .cfg_sin_3_gamma(cfg_sin_3_gamma),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg),
      .while_mul_90_cmp_b(while_mul_90_cmp_b),
      .while_mul_90_cmp_en(while_mul_90_cmp_en),
      .while_mul_90_cmp_z(while_mul_90_cmp_z),
      .while_mul_110_cmp_b(while_mul_110_cmp_b),
      .while_mul_110_cmp_en(while_mul_110_cmp_en),
      .while_mul_110_cmp_z(while_mul_110_cmp_z)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    OutputBuffer
// ------------------------------------------------------------------


module OutputBuffer (
  clk, rst, cfg_block_size, cfg_output_base, sync2_val, sync2_rdy, sync2_msg, sync3_val,
      sync3_rdy, sync3_msg, dma_write_ctrl_val, dma_write_ctrl_rdy, dma_write_ctrl_msg,
      dma_write_chnl_val, dma_write_chnl_rdy, dma_write_chnl_msg, rotate_out_val,
      rotate_out_rdy, rotate_out_msg
);
  input clk;
  input rst;
  input [31:0] cfg_block_size;
  input [31:0] cfg_output_base;
  input sync2_val;
  output sync2_rdy;
  input sync2_msg;
  output sync3_val;
  input sync3_rdy;
  output sync3_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;
  input rotate_out_val;
  output rotate_out_rdy;
  input [511:0] rotate_out_msg;


  // Interconnect Declarations
  wire mem_rsci_clken_d;
  wire [63:0] mem_rsci_d_d;
  wire [63:0] mem_rsci_q_d;
  wire [13:0] mem_rsci_radr_d;
  wire [13:0] mem_rsci_wadr_d;
  wire mem_rsci_readA_r_ram_ir_internal_RMASK_B_d;
  wire mem_rsc_clken;
  wire [63:0] mem_rsc_q;
  wire [13:0] mem_rsc_radr;
  wire mem_rsc_we;
  wire [63:0] mem_rsc_d;
  wire [13:0] mem_rsc_wadr;
  wire mem_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  BLOCK_1R1W_RBW #(.addr_width(32'sd14),
  .data_width(32'sd64),
  .depth(32'sd16384),
  .latency(32'sd1)) mem_rsc_comp (
      .clk(clk),
      .clken(mem_rsc_clken),
      .d(mem_rsc_d),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .wadr(mem_rsc_wadr),
      .we(mem_rsc_we)
    );
  OutputBuffer_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_34_14_64_16384_16384_64_1_gen
      mem_rsci (
      .clken(mem_rsc_clken),
      .q(mem_rsc_q),
      .radr(mem_rsc_radr),
      .we(mem_rsc_we),
      .d(mem_rsc_d),
      .wadr(mem_rsc_wadr),
      .clken_d(mem_rsci_clken_d),
      .d_d(mem_rsci_d_d),
      .q_d(mem_rsci_q_d),
      .radr_d(mem_rsci_radr_d),
      .wadr_d(mem_rsci_wadr_d),
      .we_d(mem_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(mem_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d)
    );
  OutputBuffer_run OutputBuffer_run_inst (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_block_size),
      .cfg_output_base(cfg_output_base),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg),
      .mem_rsci_clken_d(mem_rsci_clken_d),
      .mem_rsci_d_d(mem_rsci_d_d),
      .mem_rsci_q_d(mem_rsci_q_d),
      .mem_rsci_radr_d(mem_rsci_radr_d),
      .mem_rsci_wadr_d(mem_rsci_wadr_d),
      .mem_rsci_readA_r_ram_ir_internal_RMASK_B_d(mem_rsci_readA_r_ram_ir_internal_RMASK_B_d),
      .mem_rsci_we_d_pff(mem_rsci_we_d_iff)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Top_rtl
// ------------------------------------------------------------------


module Top_rtl (
  clk, rst, cfg_regs_0, cfg_regs_1, cfg_regs_2, cfg_regs_3, cfg_regs_4, cfg_regs_5,
      cfg_regs_6, cfg_regs_7, cfg_regs_8, cfg_regs_9, cfg_regs_10, cfg_regs_11, cfg_regs_12,
      cfg_regs_13, cfg_regs_14, cfg_regs_15, cfg_regs_16, cfg_regs_17, cfg_regs_18,
      cfg_regs_19, cfg_regs_20, cfg_regs_21, cfg_regs_22, cfg_regs_23, cfg_regs_24,
      cfg_regs_25, cfg_regs_26, cfg_regs_27, cfg_regs_28, cfg_regs_29, cfg_regs_30,
      cfg_regs_31, acc_start, acc_done, dma_read_ctrl_val, dma_read_ctrl_rdy, dma_read_ctrl_msg,
      dma_read_chnl_val, dma_read_chnl_rdy, dma_read_chnl_msg, dma_write_ctrl_val,
      dma_write_ctrl_rdy, dma_write_ctrl_msg, dma_write_chnl_val, dma_write_chnl_rdy,
      dma_write_chnl_msg
);
  input clk;
  input rst;
  input [31:0] cfg_regs_0;
  input [31:0] cfg_regs_1;
  input [31:0] cfg_regs_2;
  input [31:0] cfg_regs_3;
  input [31:0] cfg_regs_4;
  input [31:0] cfg_regs_5;
  input [31:0] cfg_regs_6;
  input [31:0] cfg_regs_7;
  input [31:0] cfg_regs_8;
  input [31:0] cfg_regs_9;
  input [31:0] cfg_regs_10;
  input [31:0] cfg_regs_11;
  input [31:0] cfg_regs_12;
  input [31:0] cfg_regs_13;
  input [31:0] cfg_regs_14;
  input [31:0] cfg_regs_15;
  input [31:0] cfg_regs_16;
  input [31:0] cfg_regs_17;
  input [31:0] cfg_regs_18;
  input [31:0] cfg_regs_19;
  input [31:0] cfg_regs_20;
  input [31:0] cfg_regs_21;
  input [31:0] cfg_regs_22;
  input [31:0] cfg_regs_23;
  input [31:0] cfg_regs_24;
  input [31:0] cfg_regs_25;
  input [31:0] cfg_regs_26;
  input [31:0] cfg_regs_27;
  input [31:0] cfg_regs_28;
  input [31:0] cfg_regs_29;
  input [31:0] cfg_regs_30;
  input [31:0] cfg_regs_31;
  input acc_start;
  output acc_done;
  output dma_read_ctrl_val;
  input dma_read_ctrl_rdy;
  output [66:0] dma_read_ctrl_msg;
  input dma_read_chnl_val;
  output dma_read_chnl_rdy;
  input [63:0] dma_read_chnl_msg;
  output dma_write_ctrl_val;
  input dma_write_ctrl_rdy;
  output [66:0] dma_write_ctrl_msg;
  output dma_write_chnl_val;
  input dma_write_chnl_rdy;
  output [63:0] dma_write_chnl_msg;


  // Interconnect Declarations
  wire sync1_val;
  wire sync1_rdy;
  wire sync1_msg;
  wire sync2_val;
  wire sync2_rdy;
  wire sync2_msg;
  wire sync3_val;
  wire sync3_rdy;
  wire sync3_msg;
  wire rotate_in_val;
  wire rotate_in_rdy;
  wire [511:0] rotate_in_msg;
  wire rotate_out_val;
  wire rotate_out_rdy;
  wire [511:0] rotate_out_msg;


  // Interconnect Declarations for Component Instantiations 
  Control ctr (
      .clk(clk),
      .rst(rst),
      .acc_start(acc_start),
      .acc_done(acc_done),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg)
    );
  InputBuffer inb (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_regs_2),
      .cfg_input_base(cfg_regs_3),
      .sync1_val(sync1_val),
      .sync1_rdy(sync1_rdy),
      .sync1_msg(sync1_msg),
      .dma_read_ctrl_val(dma_read_ctrl_val),
      .dma_read_ctrl_rdy(dma_read_ctrl_rdy),
      .dma_read_ctrl_msg(dma_read_ctrl_msg),
      .dma_read_chnl_val(dma_read_chnl_val),
      .dma_read_chnl_rdy(dma_read_chnl_rdy),
      .dma_read_chnl_msg(dma_read_chnl_msg),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg)
    );
  Rotate rot (
      .clk(clk),
      .rst(rst),
      .cfg_cos_alpha(cfg_regs_8),
      .cfg_sin_alpha(cfg_regs_9),
      .cfg_cos_beta(cfg_regs_10),
      .cfg_sin_beta(cfg_regs_11),
      .cfg_cos_gamma(cfg_regs_12),
      .cfg_sin_gamma(cfg_regs_13),
      .cfg_cos_2_alpha(cfg_regs_14),
      .cfg_sin_2_alpha(cfg_regs_15),
      .cfg_cos_2_beta(cfg_regs_16),
      .cfg_sin_2_beta(32'b00000000000000000000000000000000),
      .cfg_cos_2_gamma(cfg_regs_18),
      .cfg_sin_2_gamma(cfg_regs_19),
      .cfg_cos_3_alpha(cfg_regs_20),
      .cfg_sin_3_alpha(cfg_regs_21),
      .cfg_cos_3_beta(cfg_regs_22),
      .cfg_sin_3_beta(cfg_regs_23),
      .cfg_cos_3_gamma(cfg_regs_24),
      .cfg_sin_3_gamma(cfg_regs_25),
      .rotate_in_val(rotate_in_val),
      .rotate_in_rdy(rotate_in_rdy),
      .rotate_in_msg(rotate_in_msg),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg)
    );
  OutputBuffer out_0 (
      .clk(clk),
      .rst(rst),
      .cfg_block_size(cfg_regs_2),
      .cfg_output_base(cfg_regs_4),
      .sync2_val(sync2_val),
      .sync2_rdy(sync2_rdy),
      .sync2_msg(sync2_msg),
      .sync3_val(sync3_val),
      .sync3_rdy(sync3_rdy),
      .sync3_msg(sync3_msg),
      .dma_write_ctrl_val(dma_write_ctrl_val),
      .dma_write_ctrl_rdy(dma_write_ctrl_rdy),
      .dma_write_ctrl_msg(dma_write_ctrl_msg),
      .dma_write_chnl_val(dma_write_chnl_val),
      .dma_write_chnl_rdy(dma_write_chnl_rdy),
      .dma_write_chnl_msg(dma_write_chnl_msg),
      .rotate_out_val(rotate_out_val),
      .rotate_out_rdy(rotate_out_rdy),
      .rotate_out_msg(rotate_out_msg)
    );
endmodule



